.if n .pH 386.masterPI @(#)masterPI	40.5
.\" Copyright 1991 UNIX System Laboratories, Inc.
.\"  Font and point size of acronyms:
.ds { \s-1\fH
.ds } \fP\s0
.\"  xx macro from DOCTOOLS with more space for entry (fewer two-line entries)
.\"  (.ie line: use 0.02i instead of 0.25i)
.dexx
.ta\\n(RUuR
.ti 0
.ps\\n(PSp-2p
.vs\\n(VSp-2p
.nf
.ds[w
.ds[x
.if \w\\$2 .ds[w \0\|
.if \w\\$4 .ds[x \0\|
.ie (\w\\$3u+\w\\$4u+\w\\$5u)<(\\n(.lu-\\n()xu-0.02i) \
\h\\n()xu-\w\\$1\\*([w\\$2\0\0\0u\\$1\\*([w\\$2\0\0\0\\$3\
\\*([x\\$4\0\a\0\\$5
.el \{.ne2
\h\\n()xu-\w\\$1\\*([w\\$2\0\0\0u\\$1\\*([w\\$2\0\0\0\\$3\
\\*([x\\$4\0
.   br
\h'\\n()xu'\a\0\\$5\}
..
.BK "Product Overview and Master Index"
.CH "Permuted Index" 2
.pn 5
.H 1 "Permuted Index"
.tr ~
.Px
.xx "subsystem." "\*(dr: Adaptec" "1542A SCSI host adapter" "" scsi_adaptec(7)~\*{SARM\*}
.xx "" "read a 16 bit short word from a" "16 bit I/O port." "inw:" inw(D3D)~\*{DDRM\*}
.xx "" "write a 16 bit short word to a" "16 bit I/O port." "outw:" outw(D3D)~\*{DDRM\*}
.xx "I/O port." "inw: read a" "16 bit short word from a 16 bit" "" inw(D3D)~\*{DDRM\*}
.xx "I/O port." "outw: write a" "16 bit short word to a 16 bit" "" outw(D3D)~\*{DDRM\*}
.xx "I/O port." "repoutsw: write" "16 bit words from buffer to an" "" repoutsw(D3D)~\*{DDRM\*}
.xx "buffer." "repinsw: read" "16 bit words from I/O port to" "" repinsw(D3D)~\*{DDRM\*}
.xx "controller device/" "i410: iSBC" "186/410 serial communications" "" i410(7iref)~\*{MBRMAN\*}
.xx "communications controller." "" "186/450: iSBC 186/450 serial" "" 186/450(7iref)~\*{MBRMAN\*}
.xx "controller." "186/450: iSBC" "186/450 serial communications" "" 186/450(7iref)~\*{MBRMAN\*}
.xx "device driver and/" "i530: iSBC" "186/530 Ethernet controller" "" i530(7iref)~\*{MBRMAN\*}
.xx "" "Link driver for iNA961 Release" "3.0." "edlina: External Data" edlina(7iref)~\*{MBRMAN\*}
.xx "" "inl: read a 32 bit word from a" "32 bit I/O port." "" inl(D3D)~\*{DDRM\*}
.xx "" "write a 32 bit long word to a" "32 bit I/O port." "outl:" outl(D3D)~\*{DDRM\*}
.xx "port." "outl: write a" "32 bit long word to a 32 bit I/O" "" outl(D3D)~\*{DDRM\*}
.xx "port." "inl: read a" "32 bit word from a 32 bit I/O" "" inl(D3D)~\*{DDRM\*}
.xx "I/O port." "repoutsd: write" "32 bit words from buffer to an" "" repoutsd(D3D)~\*{DDRM\*}
.xx "buffer." "repinsd: read" "32 bit words from I/O port to" "" repinsd(D3D)~\*{DDRM\*}
.xx "" "SCO UNIX System V/386 Release" "3.2-compatible libnsl." "/to call" fixshlib(1M)~\*{ACG\*}
.xx "" "i350: iSBX" "350 parallel printer driver." "" i350(7iref)~\*{MBRMAN\*}
.xx "device driver." "i354: iSBX" "354 dual channel serial-port" "" i354(7iref)~\*{MBRMAN\*}
.xx "device driver." "i258: iSBC" "386/258 peripheral controller" "" i258(7iref)~\*{MBRMAN\*}
.xx "tape device/" "i258tp: iSBC" "386/258 peripheral controller" "" i258tp(7iref)~\*{MBRMAN\*}
.xx "" "/controller device driver and MIX" "386/530 Ethernet controller/" "" i530(7iref)~\*{MBRMAN\*}
.xx "" "l3tol, ltol3: convert between" "3-byte integers and long/" "" l3tol(3C)~\*{PRM\*}
.xx "" "ie6:" "3C503 3Com Ethernet Driver." "" ie6(7)~\*{SARM\*}
.xx "" "ie6: 3C503" "3Com Ethernet Driver." "" ie6(7)~\*{SARM\*}
.xx "comparison." "diff3:" "3-way differential file" "" diff3(1)~\*{URM\*}
.xx "" "maplocale: convert Release" "4 locale information to/" "" maplocale(1M)~\*{ACG\*}
.xx "" "ots: System V/386 Release" "4.0 OSI Transport Service (ots)/" "" ots(7iref)~\*{MBRMAN\*}
.xx "" "translator for tektronix" "4014 files." "posttek: PostScript" posttek(1)~\*{URM\*}
.xx "" "printer driver for iSBC" "486/133SE board." "hlp \-Parallel" hlp(7iref)~\*{MBRMAN\*}
.xx "" "scsi: Multibus II iSBC" "486/133SE SCSI Subsystem." "" scsi(7iref)~\*{MBRMAN\*}
.xx "compatibility/" "ttcompat: V7," "4BSD and XENIX STREAMS" "" ttcompat(7)~\*{SARM\*}
.xx "" "object downloader for the" "5620 DMD terminal." "wtinit:" wtinit(1M)~\*{SARM\*}
.xx "" "PostScript translator for Diablo" "630 files." "postdaisy:" postdaisy(1)~\*{URM\*}
.xx "" "inb: read a byte from a" "8 bit I/O port." "" inb(D3D)~\*{DDRM\*}
.xx "" "outb: write a byte to an" "8 bit I/O port." "" outb(D3D)~\*{DDRM\*}
.xx "" "wd: Western Digital" "8003 Adapter Board." "" wd(7)~\*{SARM\*}
.xx "" "x286emul: emulate XENIX" "80286." "" x286emul(1)~\*{PRM\*}
.xx "module formats." "download: loads" "8086 absolute library and object" "" download(1iref)~\*{MBRMAN\*}
.xx "" "i596:" "82596 Ethernet Driver." "" i596(7iref)~\*{MBRMAN\*}
.xx "integer and base-64 ASCII/" "" "a64l, l64a: convert between long" "" a64l(3C)~\*{PRM\*}
.xx "" "abort: generate an" "abnormal termination signal." "" abort(3C)~\*{PRM\*}
.xx "termination signal." "" "abort: generate an abnormal" "" abort(3C)~\*{PRM\*}
.xx "absolute value." "" "abs, labs: return integer" "" abs(3C)~\*{PRM\*}
.xx "module/" "download: loads 8086" "absolute library and object" "" download(1iref)~\*{MBRMAN\*}
.xx "" "abs, labs: return integer" "absolute value." "" abs(3C)~\*{PRM\*}
.xx "" "/floor, ceiling, remainder," "absolute value functions." "" floor(3M)~\*{PRM\*}
.xx "" "t_accept:" "accept a connect request." "" t_accept(3N)~\*{NI\*}
.xx "" "accept:" "accept a connection on a socket." "" accept(3N)~\*{NI\*}
.xx "socket." "" "accept: accept a connection on a" "" accept(3N)~\*{NI\*}
.xx "" "/whether remote system can" "accept binary messages." "" ckbinarsys(1M)~\*{SARM\*}
.xx "" "accept, reject:" "accept or reject print requests." "" accept(1M)~\*{SARM\*}
.xx "print requests." "" "accept, reject: accept or reject" "" accept(1M)~\*{SARM\*}
.xx "" "elf_rand: random archive member" "access." "" elf_rand(3E)~\*{PRM\*}
.xx "" "sdgetv: synchronize shared data" "access." "" sdgetv(2)~\*{ACG\*}
.xx "" "/dosls, dosrm, dosrmdir:" "access and manipulate DOS files." "" dos(1)~\*{URM\*}
.xx "files." "settime: change the" "access and modification dates of" "" settime(1)~\*{ACG\*}
.xx "" "utime: set file" "access and modification times." "" utime(2)~\*{PRM\*}
.xx "a file." "touch: update" "access and modification times of" "" touch(1)~\*{URM\*}
.xx "" "disk: random" "access bulk storage medium." "" disk(7)~\*{SARM\*}
.xx "" "face: executable for the Framed" "Access Command Environment/" "" face(1)~\*{URM\*}
.xx "" "sac: service" "access controller." "" sac(1M)~\*{NI\*}
.xx "" "sac: service" "access controller." "" sac(1M)~\*{SARM\*}
.xx "administration." "sacadm: service" "access controller" "" sacadm(1M)~\*{NI\*}
.xx "administration." "sacadm: service" "access controller" "" sacadm(1M)~\*{SARM\*}
.xx "of a file." "" "access: determine accessibility" "" access(2)~\*{PRM\*}
.xx "" "sequential archive member" "access." "elf_next:" elf_next(3E)~\*{PRM\*}
.xx "" "elf: object file" "access library." "" elf(3E)~\*{PRM\*}
.xx "" "get or set supplementary group" "access list IDs." "/setgroups:" getgroups(2)~\*{PRM\*}
.xx "" "the supplementary group" "access list." "/initialize" initgroups(3C)~\*{PRM\*}
.xx "" "sputl, sgetl:" "access long integer data in a/" "" sputl(3X)~\*{PRM\*}
.xx "" "/icsslot, icsgetrec: utilities to" "access Multibus II interconnect/" "" icsrd(8iref)~\*{MBRMAN\*}
.xx "" "fusage: disk" "access profiler." "" fusage(1M)~\*{NUAG\*}
.xx "" "fusage: disk" "access profiler." "" fusage(1M)~\*{SARM\*}
.xx "" "sulogin:" "access single-user mode." "" sulogin(1M)~\*{SARM\*}
.xx "" "copy file systems for optimal" "access time." "dcopy (generic):" dcopy(1M)~\*{SARM\*}
.xx "" "copy s5 file systems for optimal" "access time." "dcopy (s5):" dcopy(1M)~\*{SARM\*}
.xx "" "close: relinquish" "access to a device." "" close(D2DK)~\*{DDRM\*}
.xx "" "open: gain" "access to a device." "" open(D2DK)~\*{DDRM\*}
.xx "a/" "/nbwaitsem: await and check" "access to a resource governed by" "" waitsem(2)~\*{ACG\*}
.xx "" "sdenter, sdleave: synchronize" "access to a shared data segment." "" sdenter(2)~\*{ACG\*}
.xx "pseudo-terminal/" "grantpt: grant" "access to the slave" "" grantpt(3C)~\*{STRM\*}
.xx "" "/setutent, endutent, utmpname:" "access utmp file entry." "" getut(3C)~\*{PRM\*}
.xx "" "/getutmpx, updwtmp, updwtmpx:" "access utmpx file entry." "" getutx(3C)~\*{PRM\*}
.xx "" "getvol: verifies device" "accessibility." "" getvol(1M)~\*{SARM\*}
.xx "" "access: determine" "accessibility of a file." "" access(2)~\*{PRM\*}
.xx "" "acct: enable or disable process" "accounting." "" acct(2)~\*{PRM\*}
.xx "" "runacct: run daily" "accounting." "" runacct(1M)~\*{SARM\*}
.xx "" "acctcon1, acctcon2: connect-time" "accounting." "acctcon," acctcon(1M)~\*{SARM\*}
.xx "" "acctprc1, acctprc2: process" "accounting." "acctprc," acctprc(1M)~\*{SARM\*}
.xx "" "/utmp2wtmp: overview of" "accounting and miscellaneous/" "" acct(1M)~\*{SARM\*}
.xx "" "of accounting and miscellaneous" "accounting commands." "/overview" acct(1M)~\*{SARM\*}
.xx "" "diskusg: generate disk" "accounting data by user ID." "" diskusg(1M)~\*{SARM\*}
.xx "" "acct: per-process" "accounting file format." "" acct(4)~\*{SARM\*}
.xx "" "acctmerg: merge or add total" "accounting files." "" acctmerg(1M)~\*{SARM\*}
.xx "" "search and print process" "accounting file(s)." "acctcom:" acctcom(1)~\*{URM\*}
.xx "" "command summary from per-process" "accounting records." "acctcms:" acctcms(1M)~\*{SARM\*}
.xx "" "wtmpfix: manipulate connect" "accounting records." "fwtmp," fwtmp(1M)~\*{SARM\*}
.xx "" "turnacct: shell procedures for" "accounting." "/shutacct, startup," acctsh(1M)~\*{SARM\*}
.xx "accton, acctwtmp closewtmp,/" "" "acct:  acctdisk, acctdusg," "" acct(1M)~\*{SARM\*}
.xx "accounting." "" "acct: enable or disable process" "" acct(2)~\*{PRM\*}
.xx "file format." "" "acct: per-process accounting" "" acct(4)~\*{SARM\*}
.xx "per-process accounting records." "" "acctcms: command summary from" "" acctcms(1M)~\*{SARM\*}
.xx "process accounting file(s)." "" "acctcom: search and print" "" acctcom(1)~\*{URM\*}
.xx "connect-time accounting." "" "acctcon, acctcon1, acctcon2:" "" acctcon(1M)~\*{SARM\*}
.xx "accounting." "acctcon," "acctcon1, acctcon2: connect-time" "" acctcon(1M)~\*{SARM\*}
.xx "accounting." "acctcon, acctcon1," "acctcon2: connect-time" "" acctcon(1M)~\*{SARM\*}
.xx "acctwtmp closewtmp,/" "acct:" "acctdisk, acctdusg, accton," "" acct(1M)~\*{SARM\*}
.xx "closewtmp,/" "acct:  acctdisk," "acctdusg, accton, acctwtmp" "" acct(1M)~\*{SARM\*}
.xx "accounting files." "" "acctmerg: merge or add total" "" acctmerg(1M)~\*{SARM\*}
.xx "" "acct:  acctdisk, acctdusg," "accton, acctwtmp closewtmp,/" "" acct(1M)~\*{SARM\*}
.xx "process accounting." "" "acctprc, acctprc1, acctprc2:" "" acctprc(1M)~\*{SARM\*}
.xx "accounting." "acctprc," "acctprc1, acctprc2: process" "" acctprc(1M)~\*{SARM\*}
.xx "" "acctprc, acctprc1," "acctprc2: process accounting." "" acctprc(1M)~\*{SARM\*}
.xx "" "/acctdisk, acctdusg, accton," "acctwtmp closewtmp, utmp2wtmp:/" "" acct(1M)~\*{SARM\*}
.xx "" "pkgchk: check" "accuracy of installation." "" pkgchk(1M)~\*{ISDG\*}
.xx "" "pkgchk: check" "accuracy of installation." "" pkgchk(1M)~\*{SARM\*}
.xx "orderly release/" "t_rcvrel:" "acknowledge receipt of an" "" t_rcvrel(3N)~\*{NI\*}
.xx "" "/cosf, tan, tanf, asin, asinf," "acos, acosf, atan, atanf, atan2,/" "" trig(3M)~\*{PRM\*}
.xx "" "/tan, tanf, asin, asinf, acos," "acosf, atan, atanf, atan2,/" "" trig(3M)~\*{PRM\*}
.xx "" "cosh, coshf, tanh, tanhf, asinh," "acosh, atanh: hyperbolic/" "/sinhf," sinh(3M)~\*{PRM\*}
.xx "" "killall: kill all" "active processes." "" killall(1M)~\*{SARM\*}
.xx "" "/returns the size of the" "active UNIX System partition." "" partsize(1M)~\*{SARM\*}
.xx "" "sag: system" "activity graph." "" sag(1M)~\*{SARM\*}
.xx "" "sadc, sa1, sa2: system" "activity report package." "" sadc(1M)~\*{SARM\*}
.xx "" "sar: system" "activity reporter." "" sar(1M)~\*{SARM\*}
.xx "" "print current SCCS file editing" "activity." "sact:" sact(1)~\*{PRM\*}
.xx "" "report process data and system" "activity." "/time a command;" timex(1)~\*{URM\*}
.xx "subsystem." "\*(dr:" "Adaptec 1542A SCSI host adapter" "" scsi_adaptec(7)~\*{SARM\*}
.xx "" "wd: Western Digital 8003" "Adapter Board." "" wd(7)~\*{SARM\*}
.xx "" "physical address for SCSI host" "adapter." "/scb virtual to" sdi_translate(D3I)~\*{SCSI\*}
.xx "" "initialize the SCSI host" "adapter." "sdi_init:" sdi_init(D3I)~\*{SCSI\*}
.xx "" "\*(dr: Adaptec 1542A SCSI host" "adapter subsystem." "" scsi_adaptec(7)~\*{SARM\*}
.xx "" "\*(dr: \*(ha SCSI host" "adapter subsystem." "" scsi_dpt(7)~\*{SARM\*}
.xx "" "scsi_wd7000: WD7000 FASST2 host" "adapter subsystem." "" scsi_wd7000(7)~\*{SARM\*}
.xx "" "mvwaddch, echochar, wechochar:" "add a character (with/" "/mvaddch," curs_addch(3X)~\*{CHAR\*}
.xx "installation/" "installf:" "add a file to the software" "" installf(1M)~\*{ISDG\*}
.xx "curses/" "/mvwaddstr, mvwaddnstr:" "add a string of characters to a" "" curs_addstr(3X)~\*{CHAR\*}
.xx "definition on the/" "groupadd:" "add (create) a new group" "" groupadd(1M)~\*{SARM\*}
.xx "device driver/" "idinstall:" "add, delete, update, or get" "" idinstall(1M)~\*{ISDG\*}
.xx "device driver/" "idinstall:" "add, delete, update, or get" "" idinstall(1M)~\*{SARM\*}
.xx "" "logger:" "add entries to the system log." "" logger(1)~\*{BSD\*}
.xx "" "atexit:" "add program termination routine." "" atexit(3C)~\*{PRM\*}
.xx "" "/mvwaddchstr, mvwaddchnstr:" "add string of characters (and/" "" curs_addchstr(3X)~\*{CHAR\*}
.xx "" "acctmerg: merge or" "add total accounting files." "" acctmerg(1M)~\*{SARM\*}
.xx "" "putenv: change or" "add value to environment." "" putenv(3C)~\*{PRM\*}
.xx "bibliographic database." "" "addbib: create or extend a" "" addbib(1)~\*{BSD\*}
.xx "mvwaddch, echochar,/" "curs_addch:" "addch, waddch, mvaddch," "" curs_addch(3X)~\*{CHAR\*}
.xx "" "curs_addchstr:  addchstr," "addchnstr, waddchstr,/" "" curs_addchstr(3X)~\*{CHAR\*}
.xx "waddchnstr,/" "curs_addchstr:" "addchstr, addchnstr, waddchstr," "" curs_addchstr(3X)~\*{CHAR\*}
.xx "mvaddstr,/" "curs_addstr:  addstr," "addnstr, waddstr, waddnstr," "" curs_addstr(3X)~\*{CHAR\*}
.xx "" "/scb virtual to physical" "address for SCSI host adapter." "" sdi_translate(D3I)~\*{SCSI\*}
.xx "" "page ID for kernel virtual" "address." "/get physical" hat_getkpfnum(D3DK)~\*{DDRM\*}
.xx "" "physical page ID for physical" "address." "hat_getppfnum: get" hat_getppfnum(D3D)~\*{DDRM\*}
.xx "" "bcopy: copy data between" "address locations in the kernel." "" bcopy(D3DK)~\*{DDRM\*}
.xx "" "/inet_netof, inet_ntoa: Internet" "address manipulation." "" inet(3N)~\*{NI\*}
.xx "" "physmap: obtain virtual" "address mapping for physical/" "" physmap(D3D)~\*{DDRM\*}
.xx "" "physmap_free: free virtual" "address mapping for physical/" "" physmap_free(D3D)~\*{DDRM\*}
.xx "" "ethers: Ethernet" "address mapping operations." "" ethers(3N)~\*{NI\*}
.xx "" "ethers: Ethernet" "address mapping operations." "" ethers(3N)~\*{NUAG\*}
.xx "object." "dlsym: get the" "address of a symbol in shared" "" dlsym(3X)~\*{PRM\*}
.xx "control." "arp:" "address resolution display and" "" arp(1M)~\*{NUAG\*}
.xx "control." "arp:" "address resolution display and" "" arp(1M)~\*{SARM\*}
.xx "" "ARP:" "Address Resolution Protocol." "" ARP(7)~\*{NUAG\*}
.xx "" "ARP:" "Address Resolution Protocol." "" ARP(7)~\*{SARM\*}
.xx "server." "rarpd: DARPA Reverse" "Address Resolution Protocol" "" rarpd(1M)~\*{NUAG\*}
.xx "server." "rarpd: DARPA Reverse" "Address Resolution Protocol" "" rarpd(1M)~\*{SARM\*}
.xx "" "bp_mapin: allocate virtual" "address space for buffer page/" "" bp_mapin(D3DK)~\*{DDRM\*}
.xx "" "bp_mapout: deallocate virtual" "address space for buffer page/" "" bp_mapout(D3DK)~\*{DDRM\*}
.xx "" "munlockall: lock or unlock" "address space." "mlockall," mlockall(3C)~\*{PRM\*}
.xx "" "scsi_ad: SCSI device" "address structure." "" scsi_ad(D4I)~\*{SCSI\*}
.xx "" "t_bind: bind an" "address to a transport endpoint." "" t_bind(3N)~\*{NI\*}
.xx "domain." "ethers: Ethernet" "address to hostname database or" "" ethers(4)~\*{NUAG\*}
.xx "domain." "ethers: Ethernet" "address to hostname database or" "" ethers(4)~\*{SARM\*}
.xx "" "vtop: convert virtual" "address to physical address." "" vtop(D3D)~\*{DDRM\*}
.xx "" "virtual address to physical" "address." "vtop: convert" vtop(D3D)~\*{DDRM\*}
.xx "" "sdi_name: get name of" "addressed SCSI controller." "" sdi_name(D3I)~\*{SCSI\*}
.xx "" "aliases, addresses, forward:" "addresses and aliases for/" "" aliases(4)~\*{BSD\*}
.xx "and aliases for/" "aliases," "addresses, forward: addresses" "" aliases(4)~\*{BSD\*}
.xx "" "address mapping for physical" "addresses." "/free virtual" physmap_free(D3D)~\*{DDRM\*}
.xx "" "address mapping for physical" "addresses." "/obtain virtual" physmap(D3D)~\*{DDRM\*}
.xx "mapper." "rpcbind: universal" "addresses to RPC program number" "" rpcbind(1M)~\*{NI\*}
.xx "mapper." "rpcbind: universal" "addresses to RPC program number" "" rpcbind(1M)~\*{NUAG\*}
.xx "severity levels for an/" "" "addseverity: build a list of" "" addseverity(3C)~\*{PRM\*}
.xx "waddnstr,/" "curs_addstr:" "addstr, addnstr, waddstr," "" curs_addstr(3X)~\*{CHAR\*}
.xx "message." "" "adjmsg: trim bytes from a" "" adjmsg(D3DK)~\*{DDRM\*}
.xx "allow synchronization of the/" "" "adjtime: correct the time to" "" adjtime(2)~\*{PRM\*}
.xx "" "d258: i82258" "ADMA device driver." "" d258(7iref)~\*{MBRMAN\*}
.xx "SCCS files." "" "admin: create and administer" "" admin(1)~\*{PRM\*}
.xx "file." "" "admin: installation defaults" "" admin(4)~\*{SARM\*}
.xx "the system." "useradd:" "administer a new user login on" "" useradd(1M)~\*{SARM\*}
.xx "LP print service." "lpfilter:" "administer filters used with the" "" lpfilter(1M)~\*{SARM\*}
.xx "LP print service." "lpforms:" "administer forms used with the" "" lpforms(1M)~\*{SARM\*}
.xx "" "admin: create and" "administer SCCS files." "" admin(1)~\*{PRM\*}
.xx "Administration." "SA: devices" "administered by System" "" sa(7)~\*{SARM\*}
.xx "" "dispadmin: process scheduler" "administration." "" dispadmin(1M)~\*{SARM\*}
.xx "" "mouseadmin: mouse" "administration." "" mouseadmin(1)~\*{ISDG\*}
.xx "" "mouseadmin: mouse" "administration." "" mouseadmin(1)~\*{SARM\*}
.xx "" "pmadm: port monitor" "administration." "" pmadm(1M)~\*{NI\*}
.xx "" "pmadm: port monitor" "administration." "" pmadm(1M)~\*{SARM\*}
.xx "" "network listener service" "administration." "nlsadmin:" nlsadmin(1M)~\*{SARM\*}
.xx "" "Remote File Sharing domain" "administration." "rfadmin:" rfadmin(1M)~\*{NUAG\*}
.xx "" "Remote File Sharing domain" "administration." "rfadmin:" rfadmin(1M)~\*{SARM\*}
.xx "" "devices administered by System" "Administration." "SA:" sa(7)~\*{SARM\*}
.xx "" "service access controller" "administration." "sacadm:" sacadm(1M)~\*{NI\*}
.xx "" "service access controller" "administration." "sacadm:" sacadm(1M)~\*{SARM\*}
.xx "" "interface to perform system" "administration." "sysadm: visual" sysadm(1M)~\*{SARM\*}
.xx "" "uadmin:" "administrative control." "" uadmin(1M)~\*{SARM\*}
.xx "" "uadmin:" "administrative control." "" uadmin(2)~\*{PRM\*}
.xx "" "sad: STREAMS" "Administrative Driver." "" sad(7)~\*{STRM\*}
.xx "" "swap: swap" "administrative interface." "" swap(1M)~\*{SARM\*}
.xx "" "to a curses window and" "advance cursor." "/attributes)" curs_addch(3X)~\*{CHAR\*}
.xx "" "to a curses window and" "advance cursor." "/of characters" curs_addstr(3X)~\*{CHAR\*}
.xx "compile/" "regexp:  compile, step," "advance: regular expression" "" regexp(5)~\*{PRM\*}
.xx "compile/" "regexp:  compile, step," "advance: regular expression" "" regexp(5)~\*{SARM\*}
.xx "compile/" "regexpr: compile, step," "advance: regular expression" "" regexpr(3G)~\*{PRM\*}
.xx "" "fumount: forced unmount of" "advertised resources." "" fumount(1M)~\*{NUAG\*}
.xx "" "fumount: forced unmount of" "advertised resources." "" fumount(1M)~\*{SARM\*}
.xx "crtplot, dumbplot,/" "plot," "aedplot, atoplot, bgplot," "" plot(1G)~\*{BSD\*}
.xx "" "not available at the receiving" "agent." "/when buffer space is" mps_AMPreceive_frag(D3D)~\*{DDRM\*}
.xx "" "forms field has off-screen data" "ahead or behind." "/tell if" form_data(3X)~\*{CHAR\*}
.xx "" "alarm: set a process" "alarm clock." "" alarm(2)~\*{PRM\*}
.xx "clock." "" "alarm: set a process alarm" "" alarm(2)~\*{PRM\*}
.xx "" "/display application specific" "alarms and/or the ``working''/" "" indicator(1F)~\*{CHAR\*}
.xx "" "pathalias:" "alias file for FACE." "" pathalias(4)~\*{SARM\*}
.xx "" "mailalias: translate mail" "alias names." "" mailalias(1)~\*{URM\*}
.xx "" "command; display its pathname or" "alias." "which: locate a" which(1)~\*{BSD\*}
.xx "" "services: Internet services and" "aliases." "" services(4)~\*{NUAG\*}
.xx "" "services: Internet services and" "aliases." "" services(4)~\*{SARM\*}
.xx "addresses and aliases for/" "" "aliases, addresses, forward:" "" aliases(4)~\*{BSD\*}
.xx "" "the data base for the mail" "aliases file." "/rebuild" newaliases(1M)~\*{BSD\*}
.xx "" "/forward: addresses and" "aliases for sendmail." "" aliases(4)~\*{BSD\*}
.xx "" "" "alloca: memory allocator." "" alloca(3)~\*{BSD\*}
.xx "descriptor." "dma_get_buf:" "allocate a DMA buffer" "" dma_get_buf(D3X)~\*{DDRM\*}
.xx "" "dma_get_cb:" "allocate a DMA command block." "" dma_get_cb(D3X)~\*{DDRM\*}
.xx "" "t_alloc:" "allocate a library structure." "" t_alloc(3N)~\*{NI\*}
.xx "" "allocb:" "allocate a message block." "" allocb(D3DK)~\*{DDRM\*}
.xx "an/" "esballoc:" "allocate a message block using" "" esballoc(D3DK)~\*{DDRM\*}
.xx "target driver." "sdi_getblk:" "allocate a SCSI block for the" "" sdi_getblk(D3I)~\*{SCSI\*}
.xx "kernel free/" "kmem_zalloc:" "allocate and clear space from" "" kmem_zalloc(D3DK)~\*{DDRM\*}
.xx "space management map." "rmalloc:" "allocate space from a private" "" rmalloc(D3DK)~\*{DDRM\*}
.xx "memory." "kmem_alloc:" "allocate space from kernel free" "" kmem_alloc(D3DK)~\*{DDRM\*}
.xx "for buffer page list." "bp_mapin:" "allocate virtual address space" "" bp_mapin(D3DK)~\*{DDRM\*}
.xx "" "dma_free_buf: free a previously" "allocated DMA buffer descriptor." "" dma_free_buf(D3X)~\*{DDRM\*}
.xx "" "dma_free_cb: free a previously" "allocated DMA command block." "" dma_free_cb(D3X)~\*{DDRM\*}
.xx "" "buffer can be" "allocated." "/externally-supplied" esbbcall(D3DK)~\*{DDRM\*}
.xx "" "kmem_free: free previously" "allocated kernel memory." "" kmem_free(D3DK)~\*{DDRM\*}
.xx "" "/release a previously" "allocated SCSI block." "" sdi_freeblk(D3I)~\*{SCSI\*}
.xx "" "mps_free_tid: frees a previously" "allocated transaction id." "" mps_free_tid(D3D)~\*{DDRM\*}
.xx "" "mps_get_msgbuf:" "allocates a message buffer." "" mps_get_msgbuf(D3D)~\*{DDRM\*}
.xx "" "mps_get_tid:" "allocates transaction ids." "" mps_get_tid(D3D)~\*{DDRM\*}
.xx "" "sbrk: change data segment space" "allocation." "brk," brk(2)~\*{PRM\*}
.xx "" "alloca: memory" "allocator." "" alloca(3)~\*{BSD\*}
.xx "" "memalign, valloc,: memory" "allocator." "/realloc, calloc," malloc(3C)~\*{PRM\*}
.xx "" "mallopt, mallinfo: memory" "allocator." "/realloc, calloc," malloc(3X)~\*{PRM\*}
.xx "block." "" "allocb: allocate a message" "" allocb(D3DK)~\*{DDRM\*}
.xx "" "enableok:" "allow a queue to be serviced." "" enableok(D3DK)~\*{DDRM\*}
.xx "system calls." "siginterrupt:" "allow signals to interrupt" "" siginterrupt(3)~\*{BSD\*}
.xx "" "adjtime: correct the time to" "allow synchronization of the/" "" adjtime(2)~\*{PRM\*}
.xx "" "scandir," "alphasort: scan a directory." "" scandir(3)~\*{BSD\*}
.xx "processes." "renice:" "alter priority of running" "" renice(1M)~\*{BSD\*}
.xx "" "sigaltstack: set or get signal" "alternate stack context." "" sigaltstack(2)~\*{PRM\*}
.xx "UNIX System V/386/" "fixshlib:" "alters executables to call SCO" "" fixshlib(1M)~\*{ACG\*}
.xx "" "fsba: file system block" "analyzer." "" fsba(1M)~\*{SARM\*}
.xx "" "/get a string of characters" "(and attributes) from a curses/" "" curs_inchstr(3X)~\*{CHAR\*}
.xx "" "/add string of characters" "(and attributes) to a curses/" "" curs_addchstr(3X)~\*{CHAR\*}
.xx "" "sigstack: set" "and/or get signal stack context." "" sigstack(3)~\*{BSD\*}
.xx "" "sort: sort" "and/or merge files." "" sort(1)~\*{URM\*}
.xx "" "application specific alarms" "and/or the ``working''/" "/display" indicator(1F)~\*{CHAR\*}
.xx "files." "ckperms: set" "and/or verify permissions on" "" ckperms(1iref)~\*{MBRMAN\*}
.xx "" "from one set of volumes to" "another." "/move an archive" migration(1M)~\*{SARM\*}
.xx "" "verify and return a string" "answer." "/display a prompt;" ckstr(1)~\*{ISDG\*}
.xx "" "verify and return a string" "answer." "/display a prompt;" ckstr(1)~\*{SARM\*}
.xx "" "pkgask: stores" "answers to a request script." "" pkgask(1M)~\*{ISDG\*}
.xx "" "pkgask: stores" "answers to a request script." "" pkgask(1M)~\*{SARM\*}
.xx "Linking Format) files." "" "a.out: ELF (Executable and" "" a.out(4)~\*{PRM\*}
.xx "" "/field_just: format the general" "appearance of forms." "" form_field_just(3X)~\*{CHAR\*}
.xx "" "with the controlling FMLI" "application." "/a co-process" vsig(1F)~\*{CHAR\*}
.xx "panel." "/panel_userptr: associate" "application data with a panels" "" panel_userptr(3X)~\*{CHAR\*}
.xx "" "/field_userptr: associate" "application data with forms." "" form_field_userptr(3X)~\*{CHAR\*}
.xx "" "/form_userptr: associate" "application data with forms." "" form_userptr(3X)~\*{CHAR\*}
.xx "items." "/item_userptr: associate" "application data with menus" "" menu_item_userptr(3X)~\*{CHAR\*}
.xx "" "/menu_userptr: associate" "application data with menus." "" menu_userptr(3X)~\*{CHAR\*}
.xx "" "/a list of severity levels for an" "application for use with fmtmsg." "" addseverity(3C)~\*{PRM\*}
.xx "" "/to maintenance commands and" "application programs." "" intro(1M)~\*{SARM\*}
.xx "" "introduction to commands and" "application programs." "intro:" intro(1)~\*{URM\*}
.xx "and/or the/" "indicator: display" "application specific alarms" "" indicator(1F)~\*{CHAR\*}
.xx "" "/coordinate ELF library and" "application versions." "" elf_version(3E)~\*{PRM\*}
.xx "" "environment for console" "applications." "/up compatibility" scompat(1)~\*{ACG\*}
.xx "for/" "/field_term: assign" "application-specific routines" "" form_hook(3X)~\*{CHAR\*}
.xx "" "/set_menu_term, menu_term: assign" "application-specific routines/" "" menu_hook(3X)~\*{CHAR\*}
.xx "keyword lookup." "" "apropos: locate commands by" "" apropos(1)~\*{BSD\*}
.xx "" "" "ar: archive file format." "" ar(4)~\*{PRM\*}
.xx "" "" "ar: archive file format." "" ar(4)~\*{SARM\*}
.xx "library." "" "ar: maintain portable archive or" "" ar(1)~\*{PRM\*}
.xx "library." "" "ar: maintain portable archive or" "" ar(1)~\*{URM\*}
.xx "language." "bc:" "arbitrary-precision arithmetic" "" bc(1)~\*{URM\*}
.xx "of the current host." "" "arch: display the architecture" "" arch(1)~\*{BSD\*}
.xx "" ".ott: FACE object" "architecture information." "" ott(4)~\*{SARM\*}
.xx "host." "arch: display the" "architecture of the current" "" arch(1)~\*{BSD\*}
.xx "" "an incremental filesystem" "archive." "/create, restore" incfile(1M)~\*{SARM\*}
.xx "" "restore from, a full file system" "archive." "fdp: create, or" fdp(1M)~\*{SARM\*}
.xx "" "restore from, a full file system" "archive." "ffile: create, or" ffile(1M)~\*{SARM\*}
.xx "" "ar:" "archive file format." "" ar(4)~\*{PRM\*}
.xx "" "ar:" "archive file format." "" ar(4)~\*{SARM\*}
.xx "" "convert: convert" "archive files to common formats." "" convert(1)~\*{PRM\*}
.xx "to another." "migration: move an" "archive from one set of volumes" "" migration(1M)~\*{SARM\*}
.xx "" "elf_next: sequential" "archive member access." "" elf_next(3E)~\*{PRM\*}
.xx "" "elf_rand: random" "archive member access." "" elf_rand(3E)~\*{PRM\*}
.xx "" "elf_getarhdr: retrieve" "archive member header." "" elf_getarhdr(3E)~\*{PRM\*}
.xx "" "fimage: create, restore an image" "archive of a filesystem." "" fimage(1M)~\*{SARM\*}
.xx "" "ar: maintain portable" "archive or library." "" ar(1)~\*{PRM\*}
.xx "" "ar: maintain portable" "archive or library." "" ar(1)~\*{URM\*}
.xx "" "elf_getarsym: retrieve" "archive symbol table." "" elf_getarsym(3E)~\*{PRM\*}
.xx "" "tar: tape file" "archiver." "" tar(1)~\*{URM\*}
.xx "" "" "archives: device header file." "" archives(4)~\*{SARM\*}
.xx "" "cpio: copy file" "archives in and out." "" cpio(1)~\*{URM\*}
.xx "" "cpout: copy out file" "archives to multiple volumes." "" cpout(1iref)~\*{MBRMAN\*}
.xx "" "stdarg: handle variable" "argument list." "" stdarg(5)~\*{PRM\*}
.xx "" "varargs: handle variable" "argument list." "" varargs(5)~\*{PRM\*}
.xx "" "formatted output of a variable" "argument list." "/vsprintf: print" vprintf(3S)~\*{PRM\*}
.xx "command." "xargs: construct" "argument list(s) and execute" "" xargs(1)~\*{URM\*}
.xx "" "getopt: get option letter from" "argument vector." "" getopt(3C)~\*{PRM\*}
.xx "" "echo: echo" "arguments." "" echo(1)~\*{BSD\*}
.xx "" "echo: echo" "arguments." "" echo(1)~\*{URM\*}
.xx "" "expr: evaluate" "arguments as an expression." "" expr(1)~\*{URM\*}
.xx "" "fmlexpr: evaluate" "arguments as an expression." "" fmlexpr(1F)~\*{CHAR\*}
.xx "" "message: put" "arguments on FMLI message line." "" message(1F)~\*{CHAR\*}
.xx "" "miscellaneous functions for IEEE" "arithmetic." "/copysign, scalbn:" ieee_functions(3M)~\*{BSD\*}
.xx "" "bc: arbitrary-precision" "arithmetic language." "" bc(1)~\*{URM\*}
.xx "" "multiple precision integer" "arithmetic." "/xtom, mtox, mfree:" mp(3X)~\*{BSD\*}
.xx "Protocol." "" "ARP: Address Resolution" "" ARP(7)~\*{NUAG\*}
.xx "Protocol." "" "ARP: Address Resolution" "" ARP(7)~\*{SARM\*}
.xx "and control." "" "arp: address resolution display" "" arp(1M)~\*{NUAG\*}
.xx "and control." "" "arp: address resolution display" "" arp(1M)~\*{SARM\*}
.xx "" "notify: notify user of the" "arrival of new mail." "" notify(1)~\*{URM\*}
.xx "" "" "as: assembler." "" as(1)~\*{PRM\*}
.xx "to string." "strftime, cftime," "ascftime: convert date and time" "" strftime(3C)~\*{PRM\*}
.xx "" "ascii: map of" "ASCII character set." "" ascii(5)~\*{PRM\*}
.xx "" "ascii: map of" "ASCII character set." "" ascii(5)~\*{SARM\*}
.xx "set." "" "ascii: map of ASCII character" "" ascii(5)~\*{PRM\*}
.xx "set." "" "ascii: map of ASCII character" "" ascii(5)~\*{SARM\*}
.xx "" "a binary file, or decode its" "ASCII representation." "/encode" uuencode(1C)~\*{URM\*}
.xx "" "between long integer and base-64" "ASCII string." "/l64a: convert" a64l(3C)~\*{PRM\*}
.xx "time/" "ctime, localtime, gmtime," "asctime, tzset: convert date and" "" ctime(3C)~\*{PRM\*}
.xx "" "/sin, sinf, cos, cosf, tan, tanf," "asin, asinf, acos, acosf, atan,/" "" trig(3M)~\*{PRM\*}
.xx "" "/cos, cosf, tan, tanf, asin," "asinf, acos, acosf, atan, atanf,/" "" trig(3M)~\*{PRM\*}
.xx "" "/sinhf, cosh, coshf, tanh, tanhf," "asinh, acosh, atanh: hyperbolic/" "" sinh(3M)~\*{PRM\*}
.xx "numbers or SCCS commands." "help:" "ask for help with message" "" help(1)~\*{PRM\*}
.xx "" "as:" "assembler." "" as(1)~\*{PRM\*}
.xx "" "" "ASSERT: verify assertion." "" ASSERT(D3DK)~\*{DDRM\*}
.xx "assertion." "" "assert: verify program" "" assert(3X)~\*{PRM\*}
.xx "" "assert: verify program" "assertion." "" assert(3X)~\*{PRM\*}
.xx "" "ASSERT: verify" "assertion." "" ASSERT(D3DK)~\*{DDRM\*}
.xx "" "/set_field_term, field_term:" "assign application-specific/" "" form_hook(3X)~\*{CHAR\*}
.xx "" "/set_menu_term, menu_term:" "assign application-specific/" "" menu_hook(3X)~\*{CHAR\*}
.xx "" "/setbuffer, setlinebuf, setvbuf:" "assign buffering to a stream." "" setbuf(3S)~\*{BSD\*}
.xx "" "setbuf, setvbuf:" "assign buffering to a stream." "" setbuf(3S)~\*{PRM\*}
.xx "" "setbuffer, setlinebuf:" "assign buffering to a stream." "" setbuffer(3S)~\*{BSD\*}
.xx "" "setkey:" "assigns the function keys." "" setkey(1)~\*{URM\*}
.xx "forms." "/field_userptr:" "associate application data with" "" form_field_userptr(3X)~\*{CHAR\*}
.xx "" "/set_form_userptr, form_userptr:" "associate application data with/" "" form_userptr(3X)~\*{CHAR\*}
.xx "" "/set_item_userptr, item_userptr:" "associate application data with/" "" menu_item_userptr(3X)~\*{CHAR\*}
.xx "" "/set_menu_userptr, menu_userptr:" "associate application data with/" "" menu_userptr(3X)~\*{CHAR\*}
.xx "a panels panel." "/panel_userptr:" "associate application data with" "" panel_userptr(3X)~\*{CHAR\*}
.xx "" "/write or erase forms from" "associated subwindows." "" form_post(3X)~\*{CHAR\*}
.xx "" "/write or erase menus from" "associated subwindows." "" menu_post(3X)~\*{CHAR\*}
.xx "" "/forms window and subwindow" "association routines." "" form_win(3X)~\*{CHAR\*}
.xx "" "/menus window and subwindow" "association routines." "" menu_win(3X)~\*{CHAR\*}
.xx "" "" "asy: asynchronous serial port." "" asy(7)~\*{SARM\*}
.xx "interface/" "ports: five-line" "asynchronous communications" "" ports(7)~\*{STRM\*}
.xx "" "mb2a_getinfo: Gets specific" "asynchronous endpoint/" "" mb2a_getinfo(3tai)~\*{MBTAI\*}
.xx "" "fragment of a request message in" "asynchronous mode." "/a data" mb2a_getreqfrag(3tai)~\*{MBTAI\*}
.xx "" "Sends a broadcast message in" "asynchronous mode." "mb2a_brdcst:" mb2a_brdcst(3tai)~\*{MBTAI\*}
.xx "" "incoming Multibus II messages in" "asynchronous mode." "/Receives" mb2a_receive(3tai)~\*{MBTAI\*}
.xx "" "a transactionless message in" "asynchronous mode." "/Sends" mb2a_send(3tai)~\*{MBTAI\*}
.xx "" "mb2a_closeport: Closes an" "asynchronous Multibus II/" "" mb2a_closeport(3tai)~\*{MBTAI\*}
.xx "" "mb2a_openport: Opens an" "asynchronous Multibus II/" "" mb2a_openport(3tai)~\*{MBTAI\*}
.xx "" "asy:" "asynchronous serial port." "" asy(7)~\*{SARM\*}
.xx "driver." "iasy:" "asynchronous (terminal) device" "" iasy(7iref)~\*{MBRMAN\*}
.xx "" "/Sends a cancel message" "asynchronously." "" mb2a_sendcancel(3tai)~\*{MBTAI\*}
.xx "" "Sends a reply message" "asynchronously." "mb2a_sendreply:" mb2a_sendreply(3tai)~\*{MBTAI\*}
.xx "later time." "" "at, batch: execute commands at a" "" at(1)~\*{URM\*}
.xx "" "/tanf, asin, asinf, acos, acosf," "atan, atanf, atan2, atan2f:/" "" trig(3M)~\*{PRM\*}
.xx "" "/asinf, acos, acosf, atan, atanf," "atan2, atan2f: trigonometric/" "" trig(3M)~\*{PRM\*}
.xx "" "/acos, acosf, atan, atanf, atan2," "atan2f: trigonometric functions." "" trig(3M)~\*{PRM\*}
.xx "" "asin, asinf, acos, acosf, atan," "atanf, atan2, atan2f:/" "/tanf," trig(3M)~\*{PRM\*}
.xx "" "/tanh, tanhf, asinh, acosh," "atanh: hyperbolic functions." "" sinh(3M)~\*{PRM\*}
.xx "controller script device/" "" "atcs\-asynchronous terminal" "" atcs(7iref)~\*{MBRMAN\*}
.xx "routine." "" "atexit: add program termination" "" atexit(3C)~\*{PRM\*}
.xx "" "strtod, strtold," "atof: convert string to/" "" strtod(3C)~\*{PRM\*}
.xx "" "strtol, strtoul, atol," "atoi: convert string to integer." "" strtol(3C)~\*{PRM\*}
.xx "integer." "strtol, strtoul," "atol, atoi: convert string to" "" strtol(3C)~\*{PRM\*}
.xx "dumbplot,/" "plot, aedplot," "atoplot, bgplot, crtplot," "" plot(1G)~\*{BSD\*}
.xx "run at specified times." "" "atq: display the jobs queued to" "" atq(1)~\*{URM\*}
.xx "or batch." "" "atrm: remove jobs spooled by at" "" atrm(1)~\*{URM\*}
.xx "descriptor to an/" "fattach:" "attach a STREAMS-based file" "" fattach(3C)~\*{STRM\*}
.xx "segment." "sdget, sdfree:" "attach and detach a shared data" "" sdget(2)~\*{ACG\*}
.xx "resources." "rmnttry:" "attempt to mount queued remote" "" rmnttry(1M)~\*{NUAG\*}
.xx "resources." "rmnttry:" "attempt to mount queued remote" "" rmnttry(1M)~\*{SARM\*}
.xx "" "loginlog: log of failed login" "attempts." "" loginlog(4)~\*{SARM\*}
.xx "tunable parameter." "idtune:" "attempts to set value of a" "" idtune(1M)~\*{ISDG\*}
.xx "tunable parameter." "idtune:" "attempts to set value of a" "" idtune(1M)~\*{SARM\*}
.xx "" "/curses character and window" "attribute control routines." "" curs_attr(3X)~\*{CHAR\*}
.xx "" "devattr: lists device" "attributes." "" devattr(1M)~\*{SARM\*}
.xx "" "/get a string of characters (and" "attributes) from a curses/" "" curs_inchstr(3X)~\*{CHAR\*}
.xx "" "/mvwinch: get a character and its" "attributes from a curses window." "" curs_inch(3X)~\*{CHAR\*}
.xx "" "format the general display" "attributes of forms." "/field_pad:" form_field_attributes(3X)~\*{CHAR\*}
.xx "" "login password and password" "attributes." "passwd: change" passwd(1)~\*{URM\*}
.xx "" "set and get forms field" "attributes." "/set_max_field:" form_field_buffer(3X)~\*{CHAR\*}
.xx "" "menu_pad: control menus display" "attributes." "/set_menu_pad," menu_attributes(3X)~\*{CHAR\*}
.xx "" "/wechochar: add a character (with" "attributes) to a curses window/" "" curs_addch(3X)~\*{CHAR\*}
.xx "" "/add string of characters (and" "attributes) to a curses window." "" curs_addchstr(3X)~\*{CHAR\*}
.xx "wattron, attrset,/" "curs_attr:" "attroff, wattroff, attron," "" curs_attr(3X)~\*{CHAR\*}
.xx "" "curs_attr:  attroff, wattroff," "attron, wattron, attrset,/" "" curs_attr(3X)~\*{CHAR\*}
.xx "" "/wattroff, attron, wattron," "attrset, wattrset, \%standend,/" "" curs_attr(3X)~\*{CHAR\*}
.xx "" "secure_rpc:  authdes_seccreate," "authdes_getucred, getnetname,/" "" secure_rpc(3N)~\*{NI\*}
.xx "authdes_getucred,/" "secure_rpc:" "authdes_seccreate," "" secure_rpc(3N)~\*{NI\*}
.xx "authsys_create,/" "rpc_clnt_auth:" "auth_destroy, authnone_create," "" rpc_clnt_auth(3N)~\*{NI\*}
.xx "" "side remote procedure call" "authentication." "/for client" rpc_clnt_auth(3N)~\*{NI\*}
.xx "" "rpc_clnt_auth:  auth_destroy," "authnone_create, authsys_create,/" "" rpc_clnt_auth(3N)~\*{NI\*}
.xx "" "auth_destroy, authnone_create," "authsys_create,/" "rpc_clnt_auth: " rpc_clnt_auth(3N)~\*{NI\*}
.xx "" "/authnone_create, authsys_create," "authsys_create_default: library/" "" rpc_clnt_auth(3N)~\*{NI\*}
.xx "" "/routines for" "automatic invocation by menus." "" menu_hook(3X)~\*{CHAR\*}
.xx "" "vacation: reply to mail" "automatically." "" vacation(1)~\*{BSD\*}
.xx "systems." "automount:" "automatically mount NFS file" "" automount(1M)~\*{NUAG\*}
.xx "systems." "automount:" "automatically mount NFS file" "" automount(1M)~\*{SARM\*}
.xx "" "autopush: configure lists of" "automatically pushed STREAMS/" "" autopush(1M)~\*{SARM\*}
.xx "" "autopush: configure lists of" "automatically pushed STREAMS/" "" autopush(1M)~\*{STRM\*}
.xx "incoming mail/" "vacation:" "automatically respond to" "" vacation(1)~\*{URM\*}
.xx "signals and wait for/" "sigpause:" "automically release blocked" "" sigpause(3)~\*{BSD\*}
.xx "NFS file systems." "" "automount: automatically mount" "" automount(1M)~\*{NUAG\*}
.xx "NFS file systems." "" "automount: automatically mount" "" automount(1M)~\*{SARM\*}
.xx "automatically pushed STREAMS/" "" "autopush: configure lists of" "" autopush(1M)~\*{SARM\*}
.xx "automatically pushed STREAMS/" "" "autopush: configure lists of" "" autopush(1M)~\*{STRM\*}
.xx "agent." "/when buffer space is not" "available at the receiving" "" mps_AMPreceive_frag(D3D)~\*{DDRM\*}
.xx "" "a function when a buffer becomes" "available." "bufcall: call" bufcall(D3DK)~\*{DDRM\*}
.xx "" "share: make local NFS resource" "available for mounting by remote/" "" share(1M)~\*{NUAG\*}
.xx "" "share: make local NFS resource" "available for mounting by remote/" "" share(1M)~\*{SARM\*}
.xx "remote systems." "dfshares: list" "available NFS resources from" "" dfshares(1M)~\*{NUAG\*}
.xx "remote systems." "dfshares: list" "available NFS resources from" "" dfshares(1M)~\*{SARM\*}
.xx "" "uuglist: list service grades" "available on this UNIX system." "" uuglist(1C)~\*{URM\*}
.xx "or local/" "dfshares: list" "available resources from remote" "" dfshares(1M)~\*{NUAG\*}
.xx "or local/" "dfshares: list" "available resources from remote" "" dfshares(1M)~\*{SARM\*}
.xx "remote systems." "dfshares: list" "available RFS resources from" "" dfshares(1M)~\*{NUAG\*}
.xx "remote systems." "dfshares: list" "available RFS resources from" "" dfshares(1M)~\*{SARM\*}
.xx "resource/" "waitsem, nbwaitsem:" "await and check access to a" "" waitsem(2)~\*{ACG\*}
.xx "" "wait:" "await completion of process." "" wait(1)~\*{URM\*}
.xx "processing language." "" "awk: pattern scanning and" "" awk(1)~\*{URM\*}
.xx "" "/mvwgetch, ungetch: get (or push" "back) characters from curses/" "" curs_getch(3X)~\*{CHAR\*}
.xx "" "/bkgd, wbkgd: curses window" "background manipulation/" "" curs_bkgd(3X)~\*{CHAR\*}
.xx "" "backup: perform" "backup functions." "" backup(1)~\*{ACG\*}
.xx "system backup session." "" "backup: initiate or control a" "" backup(1M)~\*{SARM\*}
.xx "" "bkhistory: report on completed" "backup operations." "" bkhistory(1M)~\*{SARM\*}
.xx "" "bkstatus: display the status of" "backup operations." "" bkstatus(1M)~\*{SARM\*}
.xx "media/" "bkoper: interact with" "backup operations to service" "" bkoper(1M)~\*{SARM\*}
.xx "functions." "" "backup: perform backup" "" backup(1)~\*{ACG\*}
.xx "" "or display the contents of a" "backup register." "bkreg: change" bkreg(1M)~\*{SARM\*}
.xx "" "ckbupscd: check file system" "backup schedule." "" ckbupscd(1M)~\*{SARM\*}
.xx "" "initiate or control a system" "backup session." "backup:" backup(1M)~\*{SARM\*}
.xx "" "exception list for incremental" "backups." "/change or display an" bkexcept(1M)~\*{SARM\*}
.xx "" "control in specified priority" "band." "bcanput: test for flow" bcanput(D3DK)~\*{DDRM\*}
.xx "" "messages in a specified priority" "band." "flushband: flush" flushband(D3DK)~\*{DDRM\*}
.xx "" "information about a queue or" "band of the queue." "/change" strqset(D3DK)~\*{DDRM\*}
.xx "" "get information about a queue or" "band of the queue." "strqget:" strqget(D3DK)~\*{DDRM\*}
.xx "" "" "banner: make posters." "" banner(1)~\*{URM\*}
.xx "" "hosts: host name data" "base." "" hosts(4)~\*{NI\*}
.xx "" "hosts: host name data" "base." "" hosts(4)~\*{NUAG\*}
.xx "" "hosts: host name data" "base." "" hosts(4)~\*{SARM\*}
.xx "" "netmasks: network mask data" "base." "" netmasks(4)~\*{SARM\*}
.xx "" "networks: network name data" "base." "" networks(4)~\*{NUAG\*}
.xx "" "networks: network name data" "base." "" networks(4)~\*{SARM\*}
.xx "" "protocols: protocol name data" "base." "" protocols(4)~\*{NUAG\*}
.xx "" "protocols: protocol name data" "base." "" protocols(4)~\*{SARM\*}
.xx "" "rpc: rpc program number data" "base." "" rpc(4)~\*{NI\*}
.xx "" "newaliases: rebuild the data" "base for the mail aliases file." "" newaliases(1M)~\*{BSD\*}
.xx "" "text string from a message data" "base." "gettxt: retrieve a" gettxt(1)~\*{URM\*}
.xx "" "elf_getbase: get the" "base offset for an object file." "" elf_getbase(3E)~\*{PRM\*}
.xx "" "signal:" "base signals." "" signal(5)~\*{PRM\*}
.xx "" "signal:" "base signals." "" signal(5)~\*{SARM\*}
.xx "" "dbm_open, dbm_store: data" "base subroutines." "/dbm_nextkey," ndbm(3)~\*{BSD\*}
.xx "" "delete, firstkey, nextkey: data" "base subroutines." "/fetch, store," dbm(3X)~\*{BSD\*}
.xx "" "terminal capability data" "base." "terminfo:" terminfo(4)~\*{CHAR\*}
.xx "" "terminal capability data" "base." "terminfo:" terminfo(4)~\*{SARM\*}
.xx "" "print values in a NIS data" "base." "ypcat:" ypcat(1)~\*{NI\*}
.xx "" "convert between long integer and" "base-64 ASCII string." "/l64a:" a64l(3C)~\*{PRM\*}
.xx "" "terminal controller module and" "baseboard." "/MIX-based" mix386/450(7iref)~\*{MBRMAN\*}
.xx "" "forms: character" "based forms package." "" forms(3X)~\*{CHAR\*}
.xx "" "menus: character" "based menus package." "" menus(3X)~\*{CHAR\*}
.xx "" "getdev: lists devices" "based on criteria." "" getdev(1M)~\*{SARM\*}
.xx "" "(visual) display editor" "based on ex." "/screen-oriented" vi(1)~\*{URM\*}
.xx "" "panels: character" "based panels package." "" panels(3X)~\*{CHAR\*}
.xx "portions of path names." "" "basename, dirname: deliver" "" basename(1)~\*{URM\*}
.xx "pathnames." "" "basename: display portions of" "" basename(1)~\*{BSD\*}
.xx "element of a path name." "" "basename: return the last" "" basename(3G)~\*{PRM\*}
.xx "" "a text string in, message data" "bases." "/of, or search for" srchtxt(1)~\*{URM\*}
.xx "" "remove jobs spooled by at or" "batch." "atrm:" atrm(1)~\*{URM\*}
.xx "later time." "at," "batch: execute commands at a" "" at(1)~\*{URM\*}
.xx "has_il,/" "curs_termattrs:" "baudrate, erasechar, has_ic," "" curs_termattrs(3X)~\*{CHAR\*}
.xx "arithmetic language." "" "bc: arbitrary-precision" "" bc(1)~\*{URM\*}
.xx "in specified priority band." "" "bcanput: test for flow control" "" bcanput(D3DK)~\*{DDRM\*}
.xx "procedures." "brc," "bcheckrc: system initialization" "" brc(1M)~\*{SARM\*}
.xx "string/" "bstring:  bcopy," "bcmp, bzero, ffs: bit and byte" "" bstring(3)~\*{BSD\*}
.xx "byte string/" "bstring:" "bcopy, bcmp, bzero, ffs: bit and" "" bstring(3)~\*{BSD\*}
.xx "locations in the kernel." "" "bcopy: copy data between address" "" bcopy(D3DK)~\*{DDRM\*}
.xx "" "" "bdiff: big diff." "" bdiff(1)~\*{URM\*}
.xx "" "cb: C program" "beautifier." "" cb(1)~\*{PRM\*}
.xx "user." "su:" "become super-user or another" "" su(1M)~\*{SARM\*}
.xx "user." "su:" "become super-user or another" "" su(1M)~\*{URM\*}
.xx "" "call a function when a buffer" "becomes available." "bufcall:" bufcall(D3DK)~\*{DDRM\*}
.xx "screen flash/" "curs_beep:" "beep, flash: curses bell and" "" curs_beep(3X)~\*{CHAR\*}
.xx "" "has off-screen data ahead or" "behind." "/tell if forms field" form_data(3X)~\*{CHAR\*}
.xx "" "curs_beep:  beep, flash: curses" "bell and screen flash routines." "" curs_beep(3X)~\*{CHAR\*}
.xx "" "bessel: j0, j1, jn, y0, y1, yn:" "Bessel functions." "" bessel(3M)~\*{PRM\*}
.xx "Bessel functions." "" "bessel: j0, j1, jn, y0, y1, yn:" "" bessel(3M)~\*{PRM\*}
.xx "" "dma_get_best_mode: determine" "best transfer mode for DMA/" "" dma_get_best_mode(D3X)~\*{DDRM\*}
.xx "" "/srandom, initstate, setstate:" "better random number generator;/" "" random(3)~\*{BSD\*}
.xx "" "" "bfs: big file scanner." "" bfs(1)~\*{URM\*}
.xx "systems." "fsck" "(bfs): check and repair bfs file" "" fsck(1M)~\*{SARM\*}
.xx "system." "mkfs" "(bfs): construct a boot file" "" mkfs(1M)~\*{SARM\*}
.xx "" "fs (bfs): format of the" "bfs file system volume." "" fs(4)~\*{SARM\*}
.xx "" "fsck (bfs): check and repair" "bfs file systems." "" fsck(1M)~\*{SARM\*}
.xx "" "mount (bfs): mount" "bfs file systems." "" mount(1M)~\*{SARM\*}
.xx "" "inode" "(bfs): format of a bfs i-node." "" inode(4)~\*{SARM\*}
.xx "system volume." "fs" "(bfs): format of the bfs file" "" fs(4)~\*{SARM\*}
.xx "" "inode (bfs): format of a" "bfs i-node." "" inode(4)~\*{SARM\*}
.xx "" "mount" "(bfs): mount bfs file systems." "" mount(1M)~\*{SARM\*}
.xx "delimiter." "" "bgets: read stream up to next" "" bgets(3G)~\*{PRM\*}
.xx "" "plot, aedplot, atoplot," "bgplot, crtplot, dumbplot,/" "" plot(1G)~\*{BSD\*}
.xx "" "addbib: create or extend a" "bibliographic database." "" addbib(1)~\*{BSD\*}
.xx "" "/create an inverted index to a" "bibliographic database." "" indxbib(1)~\*{BSD\*}
.xx "" "lookbib: find references in a" "bibliographic database." "" lookbib(1)~\*{BSD\*}
.xx "" "roffbib: format and print a" "bibliographic database." "" roffbib(1)~\*{BSD\*}
.xx "" "sortbib: sort a" "bibliographic database." "" sortbib(1)~\*{BSD\*}
.xx "" "and insert references from a" "bibliographic database." "/expand" refer(1)~\*{BSD\*}
.xx "mail messages." "" "biff: give notice of incoming" "" biff(1)~\*{BSD\*}
.xx "" "comsat, in.comsat:" "biff server." "" comsat(1M)~\*{NUAG\*}
.xx "" "comsat, in.comsat:" "biff server." "" comsat(1M)~\*{SARM\*}
.xx "" "bdiff:" "big diff." "" bdiff(1)~\*{URM\*}
.xx "" "bfs:" "big file scanner." "" bfs(1)~\*{URM\*}
.xx "information for the ckbinarsys/" "" "binarsys: remote system" "" binarsys(4)~\*{SARM\*}
.xx "" "uuencode, uudecode: encode a" "binary file, or decode its ASCII/" "" uuencode(1C)~\*{URM\*}
.xx "" "fread, fwrite:" "binary input/output." "" fread(3S)~\*{PRM\*}
.xx "" "whether remote system can accept" "binary messages." "/determine" ckbinarsys(1M)~\*{SARM\*}
.xx "" "bsearch:" "binary search a sorted table." "" bsearch(3C)~\*{PRM\*}
.xx "" "tfind, tdelete, twalk: manage" "binary search trees." "tsearch," tsearch(3C)~\*{PRM\*}
.xx "" "create an instance of a" "binary semaphore." "creatsem:" creatsem(2)~\*{ACG\*}
.xx "" "strings in an object file or" "binary." "strings: find printable" strings(1)~\*{URM\*}
.xx "" "bind:" "bind a name to a socket." "" bind(3N)~\*{NI\*}
.xx "endpoint." "t_bind:" "bind an address to a transport" "" t_bind(3N)~\*{NI\*}
.xx "" "" "bind: bind a name to a socket." "" bind(3N)~\*{NI\*}
.xx "" "library routines for RPC" "bind service." "/rpcb_unset:" rpcbind(3N)~\*{NI\*}
.xx "" "ypserv, ypbind: NIS server and" "binder processes." "" ypserv(1M)~\*{NI\*}
.xx "line on the/" "ccibind:" "binds a line discipline to a" "" ccibind(1iref)~\*{MBRMAN\*}
.xx "" "" "biod: NFS daemon." "" biod(1M)~\*{NUAG\*}
.xx "" "" "biod: NFS daemon." "" biod(1M)~\*{SARM\*}
.xx "block I/O and wakeup processes." "" "biodone: release buffer after" "" biodone(D3DK)~\*{DDRM\*}
.xx "pending completion of block/" "" "biowait: suspend processes" "" biowait(D3DK)~\*{DDRM\*}
.xx "" "ffs: find first set" "bit." "" ffs(3C)~\*{PRM\*}
.xx "" "/bcopy, bcmp, bzero, ffs:" "bit and byte string operations." "" bstring(3)~\*{BSD\*}
.xx "" "inb: read a byte from a 8" "bit I/O port." "" inb(D3D)~\*{DDRM\*}
.xx "" "outb: write a byte to an 8" "bit I/O port." "" outb(D3D)~\*{DDRM\*}
.xx "" "read a 32 bit word from a 32" "bit I/O port." "inl:" inl(D3D)~\*{DDRM\*}
.xx "" "a 16 bit short word from a 16" "bit I/O port." "inw: read" inw(D3D)~\*{DDRM\*}
.xx "" "write a 32 bit long word to a 32" "bit I/O port." "outl:" outl(D3D)~\*{DDRM\*}
.xx "" "a 16 bit short word to a 16" "bit I/O port." "outw: write" outw(D3D)~\*{DDRM\*}
.xx "port." "outl: write a 32" "bit long word to a 32 bit I/O" "" outl(D3D)~\*{DDRM\*}
.xx "port." "inw: read a 16" "bit short word from a 16 bit I/O" "" inw(D3D)~\*{DDRM\*}
.xx "port." "outw: write a 16" "bit short word to a 16 bit I/O" "" outw(D3D)~\*{DDRM\*}
.xx "" "inl: read a 32" "bit word from a 32 bit I/O port." "" inl(D3D)~\*{DDRM\*}
.xx "port." "repoutsd: write 32" "bit words from buffer to an I/O" "" repoutsd(D3D)~\*{DDRM\*}
.xx "port." "repoutsw: write 16" "bit words from buffer to an I/O" "" repoutsw(D3D)~\*{DDRM\*}
.xx "buffer." "repinsd: read 32" "bit words from I/O port to" "" repinsd(D3D)~\*{DDRM\*}
.xx "buffer." "repinsw: read 16" "bit words from I/O port to" "" repinsw(D3D)~\*{DDRM\*}
.xx "" "PostScript translator for DMD" "bitmap files." "postdmd:" postdmd(1)~\*{URM\*}
.xx "exception list for incremental/" "" "bkexcept: change or display an" "" bkexcept(1M)~\*{SARM\*}
.xx "" "curs_bkgd:  bkgdset, wbkgdset," "bkgd, wbkgd: curses window/" "" curs_bkgd(3X)~\*{CHAR\*}
.xx "curses window/" "curs_bkgd:" "bkgdset, wbkgdset, bkgd, wbkgd:" "" curs_bkgd(3X)~\*{CHAR\*}
.xx "backup operations." "" "bkhistory: report on completed" "" bkhistory(1M)~\*{SARM\*}
.xx "operations to service media/" "" "bkoper: interact with backup" "" bkoper(1M)~\*{SARM\*}
.xx "contents of a backup register." "" "bkreg: change or display the" "" bkreg(1M)~\*{SARM\*}
.xx "backup operations." "" "bkstatus: display the status of" "" bkstatus(1M)~\*{SARM\*}
.xx "" "allocb: allocate a message" "block." "" allocb(D3DK)~\*{DDRM\*}
.xx "" "copyb: copy a message" "block." "" copyb(D3DK)~\*{DDRM\*}
.xx "" "dupb: duplicate a message" "block." "" dupb(D3DK)~\*{DDRM\*}
.xx "" "freeb: free a message" "block." "" freeb(D3DK)~\*{DDRM\*}
.xx "" "sync: update the super" "block." "" sync(1M)~\*{SARM\*}
.xx "" "sync: update the super" "block." "" sync(1M)~\*{URM\*}
.xx "" "sync: update super" "block." "" sync(2)~\*{PRM\*}
.xx "" "fsba: file system" "block analyzer." "" fsba(1M)~\*{SARM\*}
.xx "" "sum: print checksum and" "block count of a file." "" sum(1)~\*{URM\*}
.xx "" "size: return size of logical" "block device." "" size(D2DK)~\*{DDRM\*}
.xx "" "previously allocated DMA command" "block." "dma_free_cb: free a" dma_free_cb(D3X)~\*{DDRM\*}
.xx "" "allocate a DMA command" "block." "dma_get_cb:" dma_get_cb(D3X)~\*{DDRM\*}
.xx "" "sdi_getblk: allocate a SCSI" "block for the target driver." "" sdi_getblk(D3I)~\*{SCSI\*}
.xx "" "rmvb: remove a message" "block from a message." "" rmvb(D3DK)~\*{DDRM\*}
.xx "" "unlinkb: remove a message" "block from the head of a/" "" unlinkb(D3DK)~\*{DDRM\*}
.xx "" "strategy: perform" "block I/O." "" strategy(D2DK)~\*{DDRM\*}
.xx "" "biodone: release buffer after" "block I/O and wakeup processes." "" biodone(D3DK)~\*{DDRM\*}
.xx "" "processes pending completion of" "block I/O." "biowait: suspend" biowait(D3DK)~\*{DDRM\*}
.xx "structure." "buf:" "block I/O data transfer" "" buf(D4DK)~\*{DDRM\*}
.xx "" "a previously allocated SCSI" "block." "sdi_freeblk: release" sdi_freeblk(D3I)~\*{SCSI\*}
.xx "" "sigblock, sigmask:" "block signals." "" sigblock(3)~\*{BSD\*}
.xx "" "datab: STREAMS data" "block structure." "" datab(D4DK)~\*{DDRM\*}
.xx "" "dma_cb: DMA command" "block structure." "" dma_cb(D4X)~\*{DDRM\*}
.xx "" "msgb: STREAMS message" "block structure." "" msgb(D4DK)~\*{DDRM\*}
.xx "" "sb: SCSI" "block structure." "" sb(D4I)~\*{SCSI\*}
.xx "" "scb: SCSI control" "block structure." "" scb(D4I)~\*{SCSI\*}
.xx "" "sfb: SCSI function" "block structure." "" sfb(D4I)~\*{SCSI\*}
.xx "" "esballoc: allocate a message" "block using an/" "" esballoc(D3DK)~\*{DDRM\*}
.xx "" "spl:" "block/allow interrupts." "" spl(D3D)~\*{DDRM\*}
.xx "" "/examine signals that are" "blocked and pending." "" sigpending(2)~\*{PRM\*}
.xx "" "sigpause: automically release" "blocked signals and wait for/" "" sigpause(3)~\*{BSD\*}
.xx "" "linkb: concatenate two message" "blocks." "" linkb(D3DK)~\*{DDRM\*}
.xx "" "/report number of free disk" "blocks and files/free disk/" "" df(""1M"")~\*{SARM\*}
.xx "" "/report number of free disk" "blocks and files/free disk/" "" df(""1M"")~\*{URM\*}
.xx "" "/(s5): report number of free disk" "blocks and i-nodes for s5 file/" "" df(1M)~\*{SARM\*}
.xx "" "du: display the number of disk" "blocks used per directory or/" "" du(1M)~\*{BSD\*}
.xx "" "wd: Western Digital 8003 Adapter" "Board." "" wd(7)~\*{SARM\*}
.xx "" "/interconnect registers of the" "board and returns the values in/" "" ics_read(3iref)~\*{MBRMAN\*}
.xx "" "MIX 386/530 Ethernet controller" "board." "/device driver and" i530(7iref)~\*{MBRMAN\*}
.xx "" "in the interconnect space of a" "board." "/finds a specific record" ics_find_rec(3iref)~\*{MBRMAN\*}
.xx "" "driver for iSBC 486/133SE" "board." "hlp \-Parallel printer" hlp(7iref)~\*{MBRMAN\*}
.xx "" "interconnect registers of the" "board." "ics_write: writes into" ics_write(3iref)~\*{MBRMAN\*}
.xx "" "/the interconnect register of the" "board in the specified slot." "" ics_find_rec(D3D)~\*{DDRM\*}
.xx "" "/the interconnect register of the" "board in the specified slot." "" ics_read(D3D)~\*{DDRM\*}
.xx "" "/the specified register of the" "board in the specified slot." "" ics_write(D3D)~\*{DDRM\*}
.xx "slot." "/checks for certain" "board types in the designated" "" ics_agent_cmp(D3D)~\*{DDRM\*}
.xx "" "/of the HOST ID record in this" "board's interconnect space." "" ics_hostid(D3D)~\*{DDRM\*}
.xx "" "" "boot." "" boot(4)~\*{SARM\*}
.xx "" "mkfs (bfs): construct a" "boot file system." "" mkfs(1M)~\*{SARM\*}
.xx "" "bootparamd:" "boot parameter server." "" bootparamd(1M)~\*{NI\*}
.xx "" "bootparamd:" "boot parameter server." "" bootparamd(1M)~\*{NUAG\*}
.xx "" "boot: UNIX system" "boot program." "" boot(1M)~\*{SARM\*}
.xx "" "bootserver: starts a Multibus II" "boot service daemon." "" bootserver(1iref)~\*{MBRMAN\*}
.xx "" "" "boot: UNIX system boot program." "" boot(1M)~\*{SARM\*}
.xx "server." "" "bootparamd: boot parameter" "" bootparamd(1M)~\*{NI\*}
.xx "server." "" "bootparamd: boot parameter" "" bootparamd(1M)~\*{NUAG\*}
.xx "boot service daemon." "" "bootserver: starts a Multibus II" "" bootserver(1iref)~\*{MBRMAN\*}
.xx "" "sgib: install Multibus" "bootstrap loaders." "" sgib(1iref)~\*{MBRMAN\*}
.xx "driver." "bps:" "Bootstrap Parameter String" "" bps(7iref)~\*{MBRMAN\*}
.xx "the/" "initbp: initializes the" "bootstrap parameter string on" "" initbp(8iref)~\*{MBRMAN\*}
.xx "whline, vline,/" "curs_border:" "border, wborder, box, hline," "" curs_border(3X)~\*{CHAR\*}
.xx "" "/vline, wvline: create curses" "borders, horizontal and vertical/" "" curs_border(3X)~\*{CHAR\*}
.xx "" "panel_top:  top_panel," "bottom_panel: panels deck/" "" panel_top(3X)~\*{CHAR\*}
.xx "" "curs_border:  border, wborder," "box, hline, whline, vline,/" "" curs_border(3X)~\*{CHAR\*}
.xx "address space for buffer page/" "" "bp_mapin: allocate virtual" "" bp_mapin(D3DK)~\*{DDRM\*}
.xx "address space for buffer page/" "" "bp_mapout: deallocate virtual" "" bp_mapout(D3DK)~\*{DDRM\*}
.xx "driver." "" "bps: Bootstrap Parameter String" "" bps(7iref)~\*{MBRMAN\*}
.xx "initialization procedures." "" "brc, bcheckrc: system" "" brc(1M)~\*{SARM\*}
.xx "manageable units." "dma_pageio:" "break up an I/O request into" "" dma_pageio(D3D)~\*{DDRM\*}
.xx "system's free list." "" "brelse: return a buffer to the" "" brelse(D3DK)~\*{DDRM\*}
.xx "space allocation." "" "brk, sbrk: change data segment" "" brk(2)~\*{PRM\*}
.xx "" "mb2a_brdcst: Sends a" "broadcast message in/" "" mb2a_brdcst(3tai)~\*{MBTAI\*}
.xx "mode." "mb2s_brdcst: Sends a" "broadcast message in synchronous" "" mb2s_brdcst(3tai)~\*{MBTAI\*}
.xx "" "mps_mk_brdcst: constructs a" "broadcast message to be sent." "" mps_mk_brdcst(D3D)~\*{DDRM\*}
.xx "file." "more, page:" "browse or page through a text" "" more(1)~\*{URM\*}
.xx "table." "" "bsearch: binary search a sorted" "" bsearch(3C)~\*{PRM\*}
.xx "ffs: bit and byte string/" "" "bstring:  bcopy, bcmp, bzero," "" bstring(3)~\*{BSD\*}
.xx "size in pages (round down)." "" "btop: convert size in bytes to" "" btop(D3DK)~\*{DDRM\*}
.xx "size in pages (round up)." "" "btopr: convert size in bytes to" "" btopr(D3DK)~\*{DDRM\*}
.xx "structure." "" "buf: block I/O data transfer" "" buf(D4DK)~\*{DDRM\*}
.xx "buffer becomes available." "" "bufcall: call a function when a" "" bufcall(D3DK)~\*{DDRM\*}
.xx "" "unbufcall: cancel a pending" "bufcall request." "" unbufcall(D3DK)~\*{DDRM\*}
.xx "" "clrbuf: erase the contents of a" "buffer." "" clrbuf(D3DK)~\*{DDRM\*}
.xx "" "geteblk: get an empty" "buffer." "" geteblk(D3DK)~\*{DDRM\*}
.xx "" "using an externally-supplied" "buffer." "/a message block" esballoc(D3DK)~\*{DDRM\*}
.xx "wakeup/" "biodone: release" "buffer after block I/O and" "" biodone(D3DK)~\*{DDRM\*}
.xx "pool." "mps_free_msgbuf: puts a" "buffer back into the free memory" "" mps_free_msgbuf(D3D)~\*{DDRM\*}
.xx "" "bufcall: call a function when a" "buffer becomes available." "" bufcall(D3DK)~\*{DDRM\*}
.xx "" "/when an externally-supplied" "buffer can be allocated." "" esbbcall(D3DK)~\*{DDRM\*}
.xx "" "user data from the message" "buffer." "/copies" mps_get_unsoldata(D3D)~\*{DDRM\*}
.xx "" "from a user buffer to a driver" "buffer." "copyin: copy data" copyin(D3DK)~\*{DDRM\*}
.xx "" "from a driver buffer to a user" "buffer." "copyout: copy data" copyout(D3DK)~\*{DDRM\*}
.xx "" "/free a previously allocated DMA" "buffer descriptor." "" dma_free_buf(D3X)~\*{DDRM\*}
.xx "" "dma_get_buf: allocate a DMA" "buffer descriptor." "" dma_get_buf(D3X)~\*{DDRM\*}
.xx "" "dma_buf: DMA" "buffer descriptor structure." "" dma_buf(D4X)~\*{DDRM\*}
.xx "" "/frees a list of data" "buffer descriptors." "" mps_free_dmabuf(D3D)~\*{DDRM\*}
.xx "" "a pointer to a list of data" "buffer descriptors." "/returns" mps_get_dmabuf(D3D)~\*{DDRM\*}
.xx "" "mps_mk_bgrant: construct a" "buffer grant in response to a/" "" mps_mk_bgrant(D3D)~\*{DDRM\*}
.xx "" "freerbuf: free a raw" "buffer header." "" freerbuf(D3DK)~\*{DDRM\*}
.xx "" "getrbuf: get a raw" "buffer header." "" getrbuf(D3DK)~\*{DDRM\*}
.xx "" "retrieve error number from a" "buffer header." "geterror:" geterror(D3DK)~\*{DDRM\*}
.xx "" "bufsplit: split" "buffer into fields." "" bufsplit(3G)~\*{PRM\*}
.xx "" "determine whether a character" "buffer is encrypted." "isencrypt:" isencrypt(3G)~\*{PRM\*}
.xx "" "set and get menus pattern match" "buffer." "/menu_pattern:" menu_pattern(3X)~\*{CHAR\*}
.xx "" "allocates a message" "buffer." "mps_get_msgbuf:" mps_get_msgbuf(D3D)~\*{DDRM\*}
.xx "" "user data from the message" "buffer." "mps_get_soldata: copies" mps_get_soldata(D3D)~\*{DDRM\*}
.xx "" "ngeteblk: get an empty" "buffer of the specified size." "" ngeteblk(D3DK)~\*{DDRM\*}
.xx "" "virtual address space for" "buffer page list." "/allocate" bp_mapin(D3DK)~\*{DDRM\*}
.xx "" "virtual address space for" "buffer page list." "/deallocate" bp_mapout(D3DK)~\*{DDRM\*}
.xx "" "and returns the values in the" "buffer." "/registers of the board" ics_read(3iref)~\*{MBRMAN\*}
.xx "" "mps_mk_breject: construct a" "buffer reject in response to a/" "" mps_mk_breject(D3D)~\*{DDRM\*}
.xx "" "read bytes from I/O port to" "buffer." "repinsb:" repinsb(D3D)~\*{DDRM\*}
.xx "" "32 bit words from I/O port to" "buffer." "repinsd: read" repinsd(D3D)~\*{DDRM\*}
.xx "" "16 bit words from I/O port to" "buffer." "repinsw: read" repinsw(D3D)~\*{DDRM\*}
.xx "" "a buffer grant in response to a" "buffer request." "/construct" mps_mk_bgrant(D3D)~\*{DDRM\*}
.xx "" "a buffer reject in response to a" "buffer request." "/construct" mps_mk_breject(D3D)~\*{DDRM\*}
.xx "" "corresponds to an outstanding" "buffer request." "/data that" mps_AMPreceive(D3D)~\*{DDRM\*}
.xx "" "/solicited data in fragments when" "buffer space is not available at/" "" mps_AMPreceive_frag(D3D)~\*{DDRM\*}
.xx "" "copyin: copy data from a user" "buffer to a driver buffer." "" copyin(D3DK)~\*{DDRM\*}
.xx "" "copyout: copy data from a driver" "buffer to a user buffer." "" copyout(D3DK)~\*{DDRM\*}
.xx "" "repoutsb: write bytes from" "buffer to an I/O port." "" repoutsb(D3D)~\*{DDRM\*}
.xx "" "/write 32 bit words from" "buffer to an I/O port." "" repoutsd(D3D)~\*{DDRM\*}
.xx "" "/write 16 bit words from" "buffer to an I/O port." "" repoutsw(D3D)~\*{DDRM\*}
.xx "list." "brelse: return a" "buffer to the system's free" "" brelse(D3DK)~\*{DDRM\*}
.xx "" "stdio: standard" "buffered input/output package." "" stdio(3S)~\*{PRM\*}
.xx "" "/setlinebuf, setvbuf: assign" "buffering to a stream." "" setbuf(3S)~\*{BSD\*}
.xx "" "setbuf, setvbuf: assign" "buffering to a stream." "" setbuf(3S)~\*{PRM\*}
.xx "" "setbuffer, setlinebuf: assign" "buffering to a stream." "" setbuffer(3S)~\*{BSD\*}
.xx "fields." "" "bufsplit: split buffer into" "" bufsplit(3G)~\*{PRM\*}
.xx "for an application/" "addseverity:" "build a list of severity levels" "" addseverity(3C)~\*{PRM\*}
.xx "return a menu item." "ckitem:" "build a menu; prompt for and" "" ckitem(1)~\*{ISDG\*}
.xx "return a menu item." "ckitem:" "build a menu; prompt for and" "" ckitem(1)~\*{SARM\*}
.xx "" "ypinit:" "build and install YP database." "" ypinit(1M)~\*{NI\*}
.xx "" "idbuild:" "build new UNIX System kernel." "" idbuild(1M)~\*{ISDG\*}
.xx "" "idbuild:" "build new UNIX System kernel." "" idbuild(1M)~\*{SARM\*}
.xx "" "idmkunix:" "build new UNIX System kernel." "" idmkunix(1M)~\*{ISDG\*}
.xx "" "idmkunix:" "build new UNIX System kernel." "" idmkunix(1M)~\*{SARM\*}
.xx "" "disk: random access" "bulk storage medium." "" disk(7)~\*{SARM\*}
.xx "" "/mouse device driver supporting" "bus, serial, and PS/2 compatible/" "" mouse(7)~\*{ISDG\*}
.xx "" "/mouse device driver supporting" "bus, serial, and PS/2 compatible/" "" mouse(7)~\*{SARM\*}
.xx "interval." "drv_usecwait:" "busy-wait for specified" "" drv_usecwait(D3DK)~\*{DDRM\*}
.xx "" "elf_fill: set fill" "byte." "" elf_fill(3E)~\*{PRM\*}
.xx "" "inb: read a" "byte from a 8 bit I/O port." "" inb(D3D)~\*{DDRM\*}
.xx "" "values between host and network" "byte order." "/ntohs: convert" byteorder(3N)~\*{NI\*}
.xx "" "/bcopy, bcmp, bzero, ffs: bit and" "byte string operations." "" bstring(3)~\*{BSD\*}
.xx "" "outb: write a" "byte to an 8 bit I/O port." "" outb(D3D)~\*{DDRM\*}
.xx "ntohs: convert values between/" "" "byteorder, htonl, htons, ntohl," "" byteorder(3N)~\*{NI\*}
.xx "" "swab: swap" "bytes." "" swab(3C)~\*{PRM\*}
.xx "" "memory for a given number of" "bytes." "bzero: clear" bzero(D3DK)~\*{DDRM\*}
.xx "" "adjmsg: trim" "bytes from a message." "" adjmsg(D3DK)~\*{DDRM\*}
.xx "port." "repoutsb: write" "bytes from buffer to an I/O" "" repoutsb(D3D)~\*{DDRM\*}
.xx "" "repinsb: read" "bytes from I/O port to buffer." "" repinsb(D3D)~\*{DDRM\*}
.xx "" "pullupmsg: concatenate" "bytes in a message." "" pullupmsg(D3DK)~\*{DDRM\*}
.xx "" "msgdsize: return number of" "bytes of data in a message." "" msgdsize(D3DK)~\*{DDRM\*}
.xx "" "size: print section sizes in" "bytes of object files." "" size(1)~\*{PRM\*}
.xx "" "convert size in pages to size in" "bytes." "ptob:" ptob(D3DK)~\*{DDRM\*}
.xx "down)." "btop: convert size in" "bytes to size in pages (round" "" btop(D3DK)~\*{DDRM\*}
.xx "up)." "btopr: convert size in" "bytes to size in pages (round" "" btopr(D3DK)~\*{DDRM\*}
.xx "number of bytes." "" "bzero: clear memory for a given" "" bzero(D3DK)~\*{DDRM\*}
.xx "" "bstring:  bcopy, bcmp," "bzero, ffs: bit and byte string/" "" bstring(3)~\*{BSD\*}
.xx "" "cc:" "C compiler." "" cc(1)~\*{BSD\*}
.xx "" "cc:" "C compiler." "" cc(1)~\*{PRM\*}
.xx "" "cflow: generate" "C flowgraph." "" cflow(1)~\*{PRM\*}
.xx "" "cscope: interactively examine a" "C program." "" cscope(1)~\*{PRM\*}
.xx "" "cb:" "C program beautifier." "" cb(1)~\*{PRM\*}
.xx "" "lint: a" "C program checker." "" lint(1)~\*{PRM\*}
.xx "" "cxref: generate" "C program cross-reference." "" cxref(1)~\*{PRM\*}
.xx "" "ctrace:" "C program debugger." "" ctrace(1)~\*{PRM\*}
.xx "" "and remove ifdef'ed lines from" "C program source." "/resolve" unifdef(1)~\*{BSD\*}
.xx "" "" "cal: print calendar." "" cal(1)~\*{URM\*}
.xx "" "sum:" "calculate a checksum for a file." "" sum(1)~\*{BSD\*}
.xx "" "dc: desk" "calculator." "" dc(1)~\*{URM\*}
.xx "" "cal: print" "calendar." "" cal(1)~\*{URM\*}
.xx "" "" "calendar: reminder service." "" calendar(1)~\*{URM\*}
.xx "" "converts a tm structure to a" "calendar time." "mktime:" mktime(3C)~\*{PRM\*}
.xx "" "the difference between two" "calendar times." "/computes" difftime(3C)~\*{PRM\*}
.xx "" "syscall: indirect system" "call." "" syscall(3)~\*{BSD\*}
.xx "becomes available." "bufcall:" "call a function when a buffer" "" bufcall(D3DK)~\*{DDRM\*}
.xx "externally-supplied/" "esbbcall:" "call a function when an" "" esbbcall(D3DK)~\*{DDRM\*}
.xx "" "cu:" "call another UNIX system." "" cu(1C)~\*{URM\*}
.xx "" "for client side remote procedure" "call authentication." "/routines" rpc_clnt_auth(3N)~\*{NI\*}
.xx "" "for server side remote procedure" "call errors." "/library routines" rpc_svc_err(3N)~\*{NI\*}
.xx "" "fixshlib: alters executables to" "call SCO UNIX System V/386/" "" fixshlib(1M)~\*{ACG\*}
.xx "" "data returned by stat system" "call." "stat:" stat(4)~\*{ACG\*}
.xx "" "data returned by stat system" "call." "stat:" stat(5)~\*{PRM\*}
.xx "" "data returned by stat system" "call." "stat:" stat(5)~\*{SARM\*}
.xx "memory/" "malloc, free, realloc," "calloc, mallopt, mallinfo:" "" malloc(3X)~\*{PRM\*}
.xx "memory/" "malloc, free, realloc," "calloc, memalign, valloc,:" "" malloc(3C)~\*{PRM\*}
.xx "" "intro: introduction to system" "calls and error numbers." "" intro(2)~\*{PRM\*}
.xx "" "truss: trace system" "calls and signals." "" truss(1)~\*{URM\*}
.xx "" "for secure remote procedure" "calls." "/library routines" secure_rpc(3N)~\*{NI\*}
.xx "" "routines for remote procedure" "calls." "rpc: library" rpc(3N)~\*{NI\*}
.xx "" "library routines for client side" "calls." "/rpc_broadcast, rpc_call:" rpc_clnt_calls(3N)~\*{NI\*}
.xx "" "signals to interrupt system" "calls." "siginterrupt: allow" siginterrupt(3)~\*{BSD\*}
.xx "" "routines for remote procedure" "calls." "/XDR library" rpc_xdr(3N)~\*{NI\*}
.xx "request." "unbufcall:" "cancel a pending bufcall" "" unbufcall(D3DK)~\*{DDRM\*}
.xx "" "mb2a_sendcancel: Sends a" "cancel message asynchronously." "" mb2a_sendcancel(3tai)~\*{MBTAI\*}
.xx "mode." "mb2s_sendcancel: Sends a" "cancel message in synchronous" "" mb2s_sendcancel(3tai)~\*{MBTAI\*}
.xx "request." "untimeout:" "cancel previous timeout(D3DK)" "" untimeout(D3DK)~\*{DDRM\*}
.xx "request." "rumount:" "cancel queued remote resource" "" rumount(1M)~\*{NUAG\*}
.xx "request." "rumount:" "cancel queued remote resource" "" rumount(1M)~\*{SARM\*}
.xx "an LP print service." "lp," "cancel: send/cancel requests to" "" lp(1)~\*{URM\*}
.xx "transaction." "mps_AMPcancel:" "cancels an ongoing rsvp" "" mps_AMPcancel(D3D)~\*{DDRM\*}
.xx "" "/init_color, has_colors," "can_change_color, color_content,/" "" curs_color(3X)~\*{CHAR\*}
.xx "a stream." "" "canput: test for flow control in" "" canput(D3DK)~\*{DDRM\*}
.xx "" "terminfo: terminal" "capability data base." "" terminfo(4)~\*{CHAR\*}
.xx "" "terminfo: terminal" "capability data base." "" terminfo(4)~\*{SARM\*}
.xx "description into a terminfo/" "" "captoinfo: convert a termcap" "" captoinfo(1M)~\*{CHAR\*}
.xx "description into a terminfo/" "" "captoinfo: convert a termcap" "" captoinfo(1M)~\*{SARM\*}
.xx "" "pnch: file format for" "card images." "" pnch(4)~\*{SARM\*}
.xx "" "space registers from a given" "cardslot ID." "/of interconnect" ics_rdwr(D3D)~\*{DDRM\*}
.xx "interface." "qt: QIC" "cartridge magnetic tape streamer" "" qt(7)~\*{SARM\*}
.xx "" "text editor (variant of ex for" "casual users)." "edit:" edit(1)~\*{URM\*}
.xx "files." "" "cat: concatenate and print" "" cat(1)~\*{URM\*}
.xx "" "catman: create the" "cat files for the manual." "" catman(1M)~\*{BSD\*}
.xx "" "catclose: open/close a message" "catalogue." "catopen," catopen(3C)~\*{PRM\*}
.xx "" "generate a formatted message" "catalogue." "gencat:" gencat(1)~\*{URM\*}
.xx "catalogue." "catopen," "catclose: open/close a message" "" catopen(3C)~\*{PRM\*}
.xx "" "" "catgets: read a program message." "" catgets(3C)~\*{PRM\*}
.xx "the manual." "" "catman: create the cat files for" "" catman(1M)~\*{BSD\*}
.xx "message catalogue." "" "catopen, catclose: open/close a" "" catopen(3C)~\*{PRM\*}
.xx "" "" "cb: C program beautifier." "" cb(1)~\*{PRM\*}
.xx "halfdelay,/" "curs_inopts:" "cbreak, nocbreak, echo, noecho," "" curs_inopts(3X)~\*{CHAR\*}
.xx "pow, powf, sqrt,/" "exp, expf," "cbrt, log, logf, log10, log10f," "" exp(3M)~\*{PRM\*}
.xx "" "" "cc: C compiler." "" cc(1)~\*{BSD\*}
.xx "" "" "cc: C compiler." "" cc(1)~\*{PRM\*}
.xx "" "gencc: create a front-end to the" "cc command." "" gencc(1M)~\*{SARM\*}
.xx "interface device driver." "" "cci: communications controller" "" cci(7iref)~\*{MBRMAN\*}
.xx "communications/" "ccisrvinfo:" "CCI server information on the" "" ccisrvinfo(1iref)~\*{MBRMAN\*}
.xx "to a subchannel on the/" "" "cciattach: Creates a connection" "" cciattach(1iref)~\*{MBRMAN\*}
.xx "to a line on the communication/" "" "ccibind: binds a line discipline" "" ccibind(1iref)~\*{MBRMAN\*}
.xx "host with a subchannel on a/" "" "ccidetach: disassociates this" "" ccidetach(1iref)~\*{MBRMAN\*}
.xx "program on the communications/" "" "ccifree: frees a line discipline" "" ccifree(1iref)~\*{MBRMAN\*}
.xx "information on the/" "" "ccildinfo: line discipline" "" ccildinfo(1iref)~\*{MBRMAN\*}
.xx "on the communications/" "" "ccildlist: line discipline list" "" ccildlist(1iref)~\*{MBRMAN\*}
.xx "the communications controller." "" "ccilinfo: line information on" "" ccilinfo(1iref)~\*{MBRMAN\*}
.xx "program on to the/" "" "cciload: load a line discipline" "" cciload(1iref)~\*{MBRMAN\*}
.xx "information on the/" "" "ccisrvinfo: CCI server" "" ccisrvinfo(1iref)~\*{MBRMAN\*}
.xx "information on the/" "" "ccisubinfo: subchannel" "" ccisubinfo(1iref)~\*{MBRMAN\*}
.xx "on a line to a new host on the/" "" "cciswitch: switch a subchannel" "" cciswitch(1iref)~\*{MBRMAN\*}
.xx "discipline from a line on the/" "" "cciunbind: unbinds a line" "" cciunbind(1iref)~\*{MBRMAN\*}
.xx "" "" "cd: change working directory." "" cd(1)~\*{URM\*}
.xx "an SCCS delta." "" "cdc: change the delta comment of" "" cdc(1)~\*{PRM\*}
.xx "" "\*(dr:" "CD-ROM Target Driver." "" scsi_cdrom(7)~\*{SARM\*}
.xx "fmodf, fabs,/" "floor, floorf," "ceil, ceilf, copysign, fmod," "" floor(3M)~\*{PRM\*}
.xx "fabs,/" "floor, floorf, ceil," "ceilf, copysign, fmod, fmodf," "" floor(3M)~\*{PRM\*}
.xx "" "/fabsf, rint, remainder: floor," "ceiling, remainder, absolute/" "" floor(3M)~\*{PRM\*}
.xx "" "ics_agent_cmp: checks for" "certain board types in the/" "" ics_agent_cmp(D3D)~\*{DDRM\*}
.xx "" "/install specific portions of" "certain UNIX or XENIX packages." "" custom(1)~\*{ACG\*}
.xx "" "/tcflush, tcflow, cfgetospeed," "cfgetispeed, cfsetispeed,/" "" termios(2)~\*{PRM\*}
.xx "" "/tcdrain, tcflush, tcflow," "cfgetospeed, cfgetispeed,/" "" termios(2)~\*{PRM\*}
.xx "" "" "cflow: generate C flowgraph." "" cflow(1)~\*{PRM\*}
.xx "" "/cfgetospeed, cfgetispeed," "cfsetispeed, cfsetospeed,/" "" termios(2)~\*{PRM\*}
.xx "" "/cfgetispeed, cfsetispeed," "cfsetospeed, tcgetpgrp,/" "" termios(2)~\*{PRM\*}
.xx "and time to string." "strftime," "cftime, ascftime: convert date" "" strftime(3C)~\*{PRM\*}
.xx "flags." "conflgs:" "change and display console" "" conflgs(1M)~\*{SARM\*}
.xx "allocation." "brk, sbrk:" "change data segment space" "" brk(2)~\*{PRM\*}
.xx "" "chmod:" "change file mode." "" chmod(1)~\*{URM\*}
.xx "" "chown:" "change file owner." "" chown(1)~\*{BSD\*}
.xx "" "chown:" "change file owner." "" chown(1)~\*{URM\*}
.xx "or band of the queue." "strqset:" "change information about a queue" "" strqset(D3DK)~\*{DDRM\*}
.xx "password attributes." "passwd:" "change login password and" "" passwd(1)~\*{URM\*}
.xx "" "chmod, fchmod:" "change mode of file." "" chmod(2)~\*{PRM\*}
.xx "" "yp_update:" "change NIS information." "" ypupdate(3N)~\*{NI\*}
.xx "environment." "putenv:" "change or add value to" "" putenv(3C)~\*{PRM\*}
.xx "list for incremental/" "bkexcept:" "change or display an exception" "" bkexcept(1M)~\*{SARM\*}
.xx "of a backup register." "bkreg:" "change or display the contents" "" bkreg(1M)~\*{SARM\*}
.xx "" "sigprocmask:" "change or examine signal mask." "" sigprocmask(2)~\*{PRM\*}
.xx "configuration." "strchg, strconf:" "change or query stream" "" strchg(1)~\*{STRM\*}
.xx "configuration." "strchg, strconf:" "change or query stream" "" strchg(1)~\*{URM\*}
.xx "file." "chown, lchown, fchown:" "change owner and group of a" "" chown(2)~\*{PRM\*}
.xx "time-sharing process." "nice:" "change priority of a" "" nice(2)~\*{PRM\*}
.xx "" "nice:" "change priority of a process." "" nice(3C)~\*{BSD\*}
.xx "password." "rfpasswd:" "change Remote File Sharing host" "" rfpasswd(1M)~\*{NUAG\*}
.xx "password." "rfpasswd:" "change Remote File Sharing host" "" rfpasswd(1M)~\*{SARM\*}
.xx "" "chroot:" "change root directory." "" chroot(2)~\*{PRM\*}
.xx "command." "chroot:" "change root directory for a" "" chroot(1M)~\*{SARM\*}
.xx "" "wait for child process to" "change state." "waitid:" waitid(2)~\*{PRM\*}
.xx "" "wait for child process to" "change state." "waitpid:" waitpid(2)~\*{PRM\*}
.xx "" "shutdown: shut down system," "change system state." "" shutdown(1M)~\*{SARM\*}
.xx "modification dates of/" "settime:" "change the access and" "" settime(1)~\*{ACG\*}
.xx "SCCS delta." "cdc:" "change the delta comment of an" "" cdc(1)~\*{PRM\*}
.xx "file." "newform:" "change the format of a text" "" newform(1)~\*{URM\*}
.xx "file." "chgrp:" "change the group ownership of a" "" chgrp(1)~\*{URM\*}
.xx "" "rename:" "change the name of a file." "" rename(1)~\*{URM\*}
.xx "" "rename:" "change the name of a file." "" rename(2)~\*{PRM\*}
.xx "" "chsize:" "change the size of a file." "" chsize(2)~\*{ACG\*}
.xx "" "delta: make a delta" "(change) to an SCCS file." "" delta(1)~\*{PRM\*}
.xx "" "chkey:" "change user encryption key." "" chkey(1)~\*{NI\*}
.xx "" "chkey:" "change user encryption key." "" chkey(1)~\*{NUAG\*}
.xx "" "cd:" "change working directory." "" cd(1)~\*{URM\*}
.xx "" "chdir, fchdir:" "change working directory." "" chdir(2)~\*{PRM\*}
.xx "" "yppush: force propagation of a" "changed NIS map." "" yppush(1M)~\*{NI\*}
.xx "" "setuname:" "changes machine information." "" setuname(1M)~\*{SARM\*}
.xx "" "number generator; routines for" "changing generators." "/random" random(3)~\*{BSD\*}
.xx "" "ypupdated: server for" "changing NIS information." "" ypupdated(1M)~\*{NI\*}
.xx "" "mps_open_chan: opens a" "channel." "" mps_open_chan(D3D)~\*{DDRM\*}
.xx "" "pipe: create an interprocess" "channel." "" pipe(2)~\*{PRM\*}
.xx "" "/DMA operation on a" "channel and release it." "" dma_stop(D3X)~\*{DDRM\*}
.xx "" "of hardware requests on a DMA" "channel." "/disable recognition" dma_disable(D3X)~\*{DDRM\*}
.xx "" "of hardware requests on a DMA" "channel." "/enable recognition" dma_enable(D3X)~\*{DDRM\*}
.xx "" "closes a previously opened" "channel." "mps_close_chan:" mps_close_chan(D3D)~\*{DDRM\*}
.xx "driver." "i354: iSBX 354 dual" "channel serial-port device" "" i354(7iref)~\*{MBRMAN\*}
.xx "driver." "xtproto: multiplexed" "channels protocol used by xt" "" xtproto(5)~\*{PRM\*}
.xx "driver." "xtproto: multiplexed" "channels protocol used by xt" "" xtproto(5)~\*{SARM\*}
.xx "" "/winch, mvinch, mvwinch: get a" "character and its attributes/" "" curs_inch(3X)~\*{CHAR\*}
.xx "" "/standout, wstandout: curses" "character and window attribute/" "" curs_attr(3X)~\*{CHAR\*}
.xx "stream." "ungetc: push" "character back onto input" "" ungetc(3S)~\*{PRM\*}
.xx "" "forms:" "character based forms package." "" forms(3X)~\*{CHAR\*}
.xx "" "menus:" "character based menus package." "" menus(3X)~\*{CHAR\*}
.xx "" "panels:" "character based panels package." "" panels(3X)~\*{CHAR\*}
.xx "" "/mvinsch, mvwinsch: insert a" "character before the character/" "" curs_insch(3X)~\*{CHAR\*}
.xx "" "isencrypt: determine whether a" "character buffer is encrypted." "" isencrypt(3G)~\*{PRM\*}
.xx "conversion/" "chrtbl: generate" "character classification and" "" chrtbl(1M)~\*{SARM\*}
.xx "" "eqnchar: special" "character definitions for eqn." "" eqnchar(7)~\*{BSD\*}
.xx "" "ioctl: control a" "character device." "" ioctl(D2DK)~\*{DDRM\*}
.xx "" "entry point for a non-STREAMS" "character driver." "chpoll: poll" chpoll(D2DK)~\*{DDRM\*}
.xx "by uio(D4DK)/" "uwritec: return a" "character from space described" "" uwritec(D3DK)~\*{DDRM\*}
.xx "" "isprint, isgraph, isascii:" "character handling." "/ispunct," ctype(3C)~\*{PRM\*}
.xx "" "mbtowc, mblen, wctomb: multibyte" "character handling." "mbchar:" mbchar(3C)~\*{PRM\*}
.xx "user." "cuserid: get" "character login name of the" "" cuserid(3S)~\*{PRM\*}
.xx "" "getc, getchar, fgetc, getw: get" "character or word from a stream." "" getc(3S)~\*{PRM\*}
.xx "" "putc, putchar, fputc, putw: put" "character or word on a stream." "" putc(3S)~\*{PRM\*}
.xx "" "ascii: map of ASCII" "character set." "" ascii(5)~\*{PRM\*}
.xx "" "ascii: map of ASCII" "character set." "" ascii(5)~\*{SARM\*}
.xx "" "trchan: translate" "character sets." "" trchan(1)~\*{URM\*}
.xx "" "fgrep: search a file for a" "character string." "" fgrep(1)~\*{URM\*}
.xx "" "/mvwgetstr, wgetnstr: get" "character strings from curses/" "" curs_getstr(3X)~\*{CHAR\*}
.xx "uio(D4DK)/" "ureadc: copy a" "character to space described by" "" ureadc(D3DK)~\*{DDRM\*}
.xx "" "/mvdelch, mvwdelch: delete" "character under cursor in a/" "" curs_delch(3X)~\*{CHAR\*}
.xx "" "/insert a character before the" "character under the cursor in a/" "" curs_insch(3X)~\*{CHAR\*}
.xx "" "/mvwinsnstr: insert string before" "character under the cursor in a/" "" curs_insstr(3X)~\*{CHAR\*}
.xx "" "/echochar, wechochar: add a" "character (with attributes) to a/" "" curs_addch(3X)~\*{CHAR\*}
.xx "" "/get forms field" "characteristics." "" form_field_info(3X)~\*{CHAR\*}
.xx "" "pkginfo: package" "characteristics file." "" pkginfo(4)~\*{ISDG\*}
.xx "" "establish or restore terminal" "characteristics." "tset, reset:" tset(1)~\*{BSD\*}
.xx "" "tr: translate" "characters." "" tr(1)~\*{BSD\*}
.xx "" "tr: translate" "characters." "" tr(1)~\*{URM\*}
.xx "a/" "/mvwinchnstr: get a string of" "characters (and attributes) from" "" curs_inchstr(3X)~\*{CHAR\*}
.xx "" "/mvwaddchnstr: add string of" "characters (and attributes) to a/" "" curs_addchstr(3X)~\*{CHAR\*}
.xx "" "/mvwinnstr: get a string of" "characters from a curses window." "" curs_instr(3X)~\*{CHAR\*}
.xx "" "/ungetch: get (or push back)" "characters from curses terminal/" "" curs_getch(3X)~\*{CHAR\*}
.xx "and/" "/mvwaddnstr: add a string of" "characters to a curses window" "" curs_addstr(3X)~\*{CHAR\*}
.xx "" "_tolower, toascii: translate" "characters." "/tolower, _toupper," conv(3C)~\*{PRM\*}
.xx "lastlogin, monacct, nulladm,/" "" "chargefee, ckpacct, dodisk," "" acctsh(1M)~\*{SARM\*}
.xx "directory." "" "chdir, fchdir: change working" "" chdir(2)~\*{PRM\*}
.xx "" "checkfsys:" "check a file system." "" checkfsys(1M)~\*{SARM\*}
.xx "" "waitsem, nbwaitsem: await and" "check access to a resource/" "" waitsem(2)~\*{ACG\*}
.xx "" "pkgchk:" "check accuracy of installation." "" pkgchk(1M)~\*{ISDG\*}
.xx "" "pkgchk:" "check accuracy of installation." "" pkgchk(1M)~\*{SARM\*}
.xx "" "/(ufs): file system consistency" "check and interactive repair." "" fsck(1M)~\*{SARM\*}
.xx "systems." "fsck (bfs):" "check and repair bfs file" "" fsck(1M)~\*{SARM\*}
.xx "" "fsck:" "check and repair file systems." "" fsck(1M)~\*{SARM\*}
.xx "systems." "fsck (s5):" "check and repair s5 file" "" fsck(1M)~\*{SARM\*}
.xx "filesystems." "xfsck:" "check and repair XENIX" "" xfsck(1M)~\*{SARM\*}
.xx "schedule." "ckbupscd:" "check file system backup" "" ckbupscd(1M)~\*{SARM\*}
.xx "" "grpck:" "check group database entries." "" grpck(1M)~\*{BSD\*}
.xx "files; report possible/" "checknr:" "check nroff and troff input" "" checknr(1)~\*{BSD\*}
.xx "" "pwck:" "check password database entries." "" pwck(1M)~\*{BSD\*}
.xx "" "spray: scatter data in order to" "check the network." "" spray(3N)~\*{NI\*}
.xx "permissions file." "uucheck:" "check the uucp directories and" "" uucheck(1M)~\*{SARM\*}
.xx "be read." "rdchk:" "check to see if there is data to" "" rdchk(2)~\*{ACG\*}
.xx "memory-mapped device." "mmap:" "check virtual mapping for" "" mmap(D2DK)~\*{DDRM\*}
.xx "" "eqn, neqn," "checkeq: typeset mathematics." "" eqn(1)~\*{BSD\*}
.xx "" "lint: a C program" "checker." "" lint(1)~\*{PRM\*}
.xx "" "file system quota consistency" "checker." "quotacheck:" quotacheck(1M)~\*{SARM\*}
.xx "" "pwck, grpck: password/group file" "checkers." "" pwck(1M)~\*{SARM\*}
.xx "" "" "checkfsys: check a file system." "" checkfsys(1M)~\*{SARM\*}
.xx "" "reboot/halt the system without" "checking the disks." "/fasthalt:" fastboot(1M)~\*{BSD\*}
.xx "input files; report possible/" "" "checknr: check nroff and troff" "" checknr(1)~\*{BSD\*}
.xx "in the/" "ics_agent_cmp:" "checks for certain board types" "" ics_agent_cmp(D3D)~\*{DDRM\*}
.xx "file." "sum: print" "checksum and block count of a" "" sum(1)~\*{URM\*}
.xx "" "sum: calculate a" "checksum for a file." "" sum(1)~\*{BSD\*}
.xx "ownership of a file." "" "chgrp: change the group" "" chgrp(1)~\*{URM\*}
.xx "" "times: get process and" "child process times." "" times(2)~\*{PRM\*}
.xx "" "waitid: wait for" "child process to change state." "" waitid(2)~\*{PRM\*}
.xx "" "waitpid: wait for" "child process to change state." "" waitpid(2)~\*{PRM\*}
.xx "terminate." "wait: wait for" "child process to stop or" "" wait(2)~\*{PRM\*}
.xx "key." "" "chkey: change user encryption" "" chkey(1)~\*{NI\*}
.xx "key." "" "chkey: change user encryption" "" chkey(1)~\*{NUAG\*}
.xx "" "" "chmod: change file mode." "" chmod(1)~\*{URM\*}
.xx "file." "" "chmod, fchmod: change mode of" "" chmod(2)~\*{PRM\*}
.xx "" "" "chown: change file owner." "" chown(1)~\*{BSD\*}
.xx "" "" "chown: change file owner." "" chown(1)~\*{URM\*}
.xx "owner and group of a file." "" "chown, lchown, fchown: change" "" chown(2)~\*{PRM\*}
.xx "non-STREAMS character driver." "" "chpoll: poll entry point for a" "" chpoll(D2DK)~\*{DDRM\*}
.xx "for a command." "" "chroot: change root directory" "" chroot(1M)~\*{SARM\*}
.xx "" "" "chroot: change root directory." "" chroot(2)~\*{PRM\*}
.xx "classification and conversion/" "" "chrtbl: generate character" "" chrtbl(1M)~\*{SARM\*}
.xx "file." "" "chsize: change the size of a" "" chsize(2)~\*{ACG\*}
.xx "" "system information for the" "ckbinarsys command." "/remote" binarsys(4)~\*{SARM\*}
.xx "remote system can accept binary/" "" "ckbinarsys: determine whether" "" ckbinarsys(1M)~\*{SARM\*}
.xx "backup schedule." "" "ckbupscd: check file system" "" ckbupscd(1M)~\*{SARM\*}
.xx "valdate: prompt for and/" "" "ckdate, errdate, helpdate," "" ckdate(1)~\*{ISDG\*}
.xx "valdate: prompt for and/" "" "ckdate, errdate, helpdate," "" ckdate(1)~\*{SARM\*}
.xx "prompt for and validate a group/" "" "ckgid, errgid, helpgid, valgid:" "" ckgid(1)~\*{ISDG\*}
.xx "prompt for and validate a group/" "" "ckgid, errgid, helpgid, valgid:" "" ckgid(1)~\*{SARM\*}
.xx "and return an integer value." "" "ckint: display a prompt; verify" "" ckint(1)~\*{ISDG\*}
.xx "and return an integer value." "" "ckint: display a prompt; verify" "" ckint(1)~\*{SARM\*}
.xx "and return a menu item." "" "ckitem: build a menu; prompt for" "" ckitem(1)~\*{ISDG\*}
.xx "and return a menu item." "" "ckitem: build a menu; prompt for" "" ckitem(1)~\*{SARM\*}
.xx "a keyword." "" "ckkeywd: prompt for and validate" "" ckkeywd(1)~\*{ISDG\*}
.xx "a keyword." "" "ckkeywd: prompt for and validate" "" ckkeywd(1)~\*{SARM\*}
.xx "monacct, nulladm,/" "chargefee," "ckpacct, dodisk, lastlogin," "" acctsh(1M)~\*{SARM\*}
.xx "and return a pathname." "" "ckpath: display a prompt; verify" "" ckpath(1)~\*{ISDG\*}
.xx "and return a pathname." "" "ckpath: display a prompt; verify" "" ckpath(1)~\*{SARM\*}
.xx "permissions on files." "" "ckperms: set and/or verify" "" ckperms(1iref)~\*{MBRMAN\*}
.xx "an integer." "" "ckrange: prompt for and validate" "" ckrange(1)~\*{ISDG\*}
.xx "an integer." "" "ckrange: prompt for and validate" "" ckrange(1)~\*{SARM\*}
.xx "and return a string answer." "" "ckstr: display a prompt; verify" "" ckstr(1)~\*{ISDG\*}
.xx "and return a string answer." "" "ckstr: display a prompt; verify" "" ckstr(1)~\*{SARM\*}
.xx "and return a time of day." "" "cktime: display a prompt; verify" "" cktime(1)~\*{ISDG\*}
.xx "and return a time of day." "" "cktime: display a prompt; verify" "" cktime(1)~\*{SARM\*}
.xx "user ID." "" "ckuid: prompt for and validate a" "" ckuid(1)~\*{ISDG\*}
.xx "user ID." "" "ckuid: prompt for and validate a" "" ckuid(1)~\*{SARM\*}
.xx "yes/no." "" "ckyorn: prompt for and validate" "" ckyorn(1)~\*{ISDG\*}
.xx "yes/no." "" "ckyorn: prompt for and validate" "" ckyorn(1)~\*{SARM\*}
.xx "" "elf32_xlatetof, elf32_xlatetom:" "class-dependent data/" "elf_xlate:" elf_xlate(3E)~\*{PRM\*}
.xx "header." "/elf32_newehdr: retrieve" "class-dependent object file" "" elf_getehdr(3E)~\*{PRM\*}
.xx "table." "/elf32_newphdr: retrieve" "class-dependent program header" "" elf_getphdr(3E)~\*{PRM\*}
.xx "" "/elf32_getshdr: retrieve" "class-dependent section header." "" elf_getshdr(3E)~\*{PRM\*}
.xx "" "chrtbl: generate character" "classification and conversion/" "" chrtbl(1M)~\*{SARM\*}
.xx "" "uucleanup: uucp spool directory" "clean-up." "" uucleanup(1M)~\*{SARM\*}
.xx "" "strclean: STREAMS error logger" "cleanup program." "" strclean(1M)~\*{SARM\*}
.xx "" "strclean: STREAMS error logger" "cleanup program." "" strclean(1M)~\*{STRM\*}
.xx "" "/wclrtobot, clrtoeol, wclrtoeol:" "clear all or part of a curses/" "" curs_clear(3X)~\*{CHAR\*}
.xx "screen." "" "clear: clear the terminal" "" clear(1)~\*{URM\*}
.xx "of bytes." "bzero:" "clear memory for a given number" "" bzero(D3DK)~\*{DDRM\*}
.xx "" "kmem_zalloc: allocate and" "clear space from kernel free/" "" kmem_zalloc(D3DK)~\*{DDRM\*}
.xx "" "clear:" "clear the terminal screen." "" clear(1)~\*{URM\*}
.xx "" "curs_clear:  erase, werase," "clear, wclear, clrtobot,/" "" curs_clear(3X)~\*{CHAR\*}
.xx "inquiries." "ferror, feof," "clearerr, fileno: stream status" "" ferror(3S)~\*{PRM\*}
.xx "leaveok,/" "curs_outopts:" "clearok, idlok, idcok immedok," "" curs_outopts(3X)~\*{CHAR\*}
.xx "" "creation and manipulation of" "CLIENT handles." "/dealing with" rpc_clnt_create(3N)~\*{NI\*}
.xx "" "yperr_string, ypprot_err: NIS" "client interface." "/yp_master," ypclnt(3N)~\*{NI\*}
.xx "" "/rpc_call: library routines for" "client side calls." "" rpc_clnt_calls(3N)~\*{NI\*}
.xx "call/" "/library routines for" "client side remote procedure" "" rpc_clnt_auth(3N)~\*{NI\*}
.xx "listener." "nlsgetcall: get" "client's data passed via the" "" nlsgetcall(3N)~\*{NI\*}
.xx "" "shell command interpreter with a" "C-like syntax." "csh:" csh(1)~\*{URM\*}
.xx "clnt_geterr,/" "rpc_clnt_calls:" "clnt_call, clnt_freeres," "" rpc_clnt_calls(3N)~\*{NI\*}
.xx "clnt_destroy,/" "rpc_clnt_create:" "clnt_control, clnt_create," "" rpc_clnt_create(3N)~\*{NI\*}
.xx "" "rpc_clnt_create:  clnt_control," "clnt_create, clnt_destroy,/" "" rpc_clnt_create(3N)~\*{NI\*}
.xx "" "/clnt_control, clnt_create," "clnt_destroy, clnt_dg_create,/" "" rpc_clnt_create(3N)~\*{NI\*}
.xx "" "clnt_create, clnt_destroy," "clnt_dg_create,/" "/clnt_control," rpc_clnt_create(3N)~\*{NI\*}
.xx "" "rpc_clnt_calls:  clnt_call," "clnt_freeres, clnt_geterr,/" "" rpc_clnt_calls(3N)~\*{NI\*}
.xx "" "/clnt_call, clnt_freeres," "clnt_geterr, clnt_perrno,/" "" rpc_clnt_calls(3N)~\*{NI\*}
.xx "" "clnt_destroy, clnt_dg_create," "clnt_pcreateerror,/" "/clnt_create," rpc_clnt_create(3N)~\*{NI\*}
.xx "" "/clnt_freeres, clnt_geterr," "clnt_perrno, clnt_perror,/" "" rpc_clnt_calls(3N)~\*{NI\*}
.xx "" "/clnt_geterr, clnt_perrno," "clnt_perror, clnt_sperrno,/" "" rpc_clnt_calls(3N)~\*{NI\*}
.xx "" "/clnt_pcreateerror," "clnt_raw_create,/" "" rpc_clnt_create(3N)~\*{NI\*}
.xx "" "/clnt_raw_create," "clnt_spcreateerror,/" "" rpc_clnt_create(3N)~\*{NI\*}
.xx "" "/clnt_perrno, clnt_perror," "clnt_sperrno, clnt_sperror,/" "" rpc_clnt_calls(3N)~\*{NI\*}
.xx "" "/clnt_perror, clnt_sperrno," "clnt_sperror, rpc_broadcast,/" "" rpc_clnt_calls(3N)~\*{NI\*}
.xx "" "/clnt_spcreateerror," "clnt_tli_create, clnt_tp_create,/" "" rpc_clnt_create(3N)~\*{NI\*}
.xx "library/" "/clnt_tli_create," "clnt_tp_create, clnt_vc_create:" "" rpc_clnt_create(3N)~\*{NI\*}
.xx "" "/clnt_tli_create, clnt_tp_create," "clnt_vc_create: library routines/" "" rpc_clnt_create(3N)~\*{NI\*}
.xx "" "alarm: set a process alarm" "clock." "" alarm(2)~\*{PRM\*}
.xx "" "cron:" "clock daemon." "" cron(1M)~\*{SARM\*}
.xx "" "clock: Multibus II" "clock driver." "" clock(7iref)~\*{MBRMAN\*}
.xx "" "csmclock--Multibus II CSM" "clock driver." "" csmclock(7iref)~\*{MBRMAN\*}
.xx "" "rtc: real time" "clock interface." "" rtc(7)~\*{SARM\*}
.xx "" "" "clock: Multibus II clock driver." "" clock(7iref)~\*{MBRMAN\*}
.xx "" "" "clock: report CPU time used." "" clock(3C)~\*{PRM\*}
.xx "" "set system time from hardware" "clock." "setclk:" setclk(1M)~\*{SARM\*}
.xx "" "synchronization of the system" "clock." "/the time to allow" adjtime(2)~\*{PRM\*}
.xx "" "convert microseconds to" "clock ticks." "drv_usectohz:" drv_usectohz(D3DK)~\*{DDRM\*}
.xx "" "for a specified number of" "clock ticks." "/process execution" delay(D3DK)~\*{DDRM\*}
.xx "" "drv_hztousec: convert" "clock ticks to microseconds." "" drv_hztousec(D3DK)~\*{DDRM\*}
.xx "device pair on a STREAMS/" "" "clone: open any major/minor" "" clone(7)~\*{STRM\*}
.xx "" "close:" "close a file descriptor." "" close(2)~\*{PRM\*}
.xx "" "dlclose:" "close a shared object." "" dlclose(3X)~\*{PRM\*}
.xx "" "t_close:" "close a transport endpoint." "" t_close(3N)~\*{NI\*}
.xx "" "" "close: close a file descriptor." "" close(2)~\*{PRM\*}
.xx "time." "shutdown:" "close down the system at a given" "" shutdown(1M)~\*{BSD\*}
.xx "" "fclose, fflush:" "close or flush a stream." "" fclose(3S)~\*{PRM\*}
.xx "command." "p2open, p2close: open," "close pipes to and from a" "" p2open(3G)~\*{PRM\*}
.xx "device." "" "close: relinquish access to a" "" close(D2DK)~\*{DDRM\*}
.xx "" "/telldir, seekdir, rewinddir," "closedir: directory operations." "" directory(3C)~\*{BSD\*}
.xx "" "/telldir, seekdir, rewinddir," "closedir: directory operations." "" directory(3C)~\*{PRM\*}
.xx "system log." "syslog, openlog," "closelog, setlogmask: control" "" syslog(3)~\*{BSD\*}
.xx "channel." "mps_close_chan:" "closes a previously opened" "" mps_close_chan(D3D)~\*{DDRM\*}
.xx "transport/" "mb2s_closeport:" "Closes a synchronous Multibus II" "" mb2s_closeport(3tai)~\*{MBTAI\*}
.xx "II transport/" "mb2a_closeport:" "Closes an asynchronous Multibus" "" mb2a_closeport(3tai)~\*{MBTAI\*}
.xx "of/" "/acctdusg, accton, acctwtmp" "closewtmp, utmp2wtmp: overview" "" acct(1M)~\*{SARM\*}
.xx "buffer." "" "clrbuf: erase the contents of a" "" clrbuf(D3DK)~\*{DDRM\*}
.xx "" "/erase, werase, clear, wclear," "clrtobot, wclrtobot, clrtoeol,/" "" curs_clear(3X)~\*{CHAR\*}
.xx "or/" "/wclear, clrtobot, wclrtobot," "clrtoeol, wclrtoeol: clear all" "" curs_clear(3X)~\*{CHAR\*}
.xx "message or panic the system." "" "cmn_err: display an error" "" cmn_err(D3DK)~\*{DDRM\*}
.xx "" "cram\-" "CMOS RAM interface." "" cram(7)~\*{SARM\*}
.xx "" "" "cmp: compare two files." "" cmp(1)~\*{URM\*}
.xx "communicate/" "cocreate, cosend," "cocheck, coreceive, codestroy:" "" coproc(1F)~\*{CHAR\*}
.xx "coreceive, codestroy:/" "" "cocreate, cosend, cocheck," "" coproc(1F)~\*{CHAR\*}
.xx "" "handling for specific SIGFPE" "codes." "sigfpe: signal" sigfpe(3)~\*{BSD\*}
.xx "" "compressing or expanding escape" "codes." "/strecpy: copy strings," strccpy(3G)~\*{PRM\*}
.xx "" "/cosend, cocheck, coreceive," "codestroy: communicate with a/" "" coproc(1F)~\*{CHAR\*}
.xx "translation." "" "cof2elf: COFF to ELF object file" "" cof2elf(1)~\*{PRM\*}
.xx "translation." "cof2elf:" "COFF to ELF object file" "" cof2elf(1)~\*{PRM\*}
.xx "" "" "col: filter reverse line-feeds." "" col(1)~\*{URM\*}
.xx "" "strcoll: string" "collation." "" strcoll(3C)~\*{PRM\*}
.xx "" "colltbl: create" "collation database." "" colltbl(1M)~\*{SARM\*}
.xx "" "mailstats: print statistics" "collected by sendmail." "" mailstats(1M)~\*{BSD\*}
.xx "database." "" "colltbl: create collation" "" colltbl(1M)~\*{SARM\*}
.xx "" "setcolor: redefine or create a" "color." "" setcolor(1F)~\*{CHAR\*}
.xx "" "setcolor, setcolour: set screen" "color." "" setcolor(1)~\*{URM\*}
.xx "" "/pair_content: curses" "color manipulation routines." "" curs_color(3X)~\*{CHAR\*}
.xx "" "/has_colors, can_change_color," "color_content, pair_content:/" "" curs_color(3X)~\*{CHAR\*}
.xx "" "get maximum numbers of rows and" "columns in menus." "/set and" menu_format(3X)~\*{CHAR\*}
.xx "" "" "comb: combine SCCS deltas." "" comb(1)~\*{PRM\*}
.xx "" "comb:" "combine SCCS deltas." "" comb(1)~\*{PRM\*}
.xx "common to two sorted files." "" "comm: select or reject lines" "" comm(1)~\*{URM\*}
.xx "" "rexec: return stream to a remote" "command." "" rexec(3N)~\*{NI\*}
.xx "" "rexec: return stream to a remote" "command." "" rexec(3N)~\*{NUAG\*}
.xx "" "system: issue a shell" "command." "" system(3S)~\*{PRM\*}
.xx "" "test: condition evaluation" "command." "" test(1)~\*{BSD\*}
.xx "" "test: condition evaluation" "command." "" test(1F)~\*{CHAR\*}
.xx "" "test: condition evaluation" "command." "" test(1)~\*{URM\*}
.xx "" "time: time a" "command." "" time(1)~\*{URM\*}
.xx "" "KornShell, a standard/restricted" "command and programming/" "/rksh:" ksh(1)~\*{URM\*}
.xx "" "nice: run a" "command at low priority." "" nice(1)~\*{URM\*}
.xx "" "dma_get_cb: allocate a DMA" "command block." "" dma_get_cb(D3X)~\*{DDRM\*}
.xx "" "free a previously allocated DMA" "command block." "dma_free_cb:" dma_free_cb(D3X)~\*{DDRM\*}
.xx "" "dma_cb: DMA" "command block structure." "" dma_cb(D4X)~\*{DDRM\*}
.xx "" "change root directory for a" "command." "chroot:" chroot(1M)~\*{SARM\*}
.xx "" "best transfer mode for DMA" "command." "/determine" dma_get_best_mode(D3X)~\*{DDRM\*}
.xx "alias." "which: locate a" "command; display its pathname or" "" which(1)~\*{BSD\*}
.xx "" "/executable for the Framed Access" "Command Environment Interface." "" face(1)~\*{URM\*}
.xx "" "env: set environment for" "command execution." "" env(1)~\*{URM\*}
.xx "" "uux: UNIX-to-UNIX system" "command execution." "" uux(1C)~\*{URM\*}
.xx "" "mail_pipe: invoke recipient" "command for incoming mail." "" mail_pipe(1M)~\*{SARM\*}
.xx "" "create a front-end to the cc" "command." "gencc:" gencc(1M)~\*{SARM\*}
.xx "quits." "nohup: run a" "command immune to hangups and" "" nohup(1)~\*{URM\*}
.xx "C-like syntax." "csh: shell" "command interpreter with a" "" csh(1)~\*{URM\*}
.xx "shell, job/" "sh, jsh, rsh:" "command interpreters: standard" "" sh(1)~\*{URM\*}
.xx "" "getopt: parse" "command options." "" getopt(1)~\*{URM\*}
.xx "" "getopts, getoptcvt: parse" "command options." "" getopts(1)~\*{URM\*}
.xx "" "open, close pipes to and from a" "command." "p2open, p2close:" p2open(3G)~\*{PRM\*}
.xx "subsystem." "form_driver:" "command processor for the forms" "" form_driver(3X)~\*{CHAR\*}
.xx "subsystem." "menu_driver:" "command processor for the menus" "" menu_driver(3X)~\*{CHAR\*}
.xx "" "information for the ckbinarsys" "command." "/remote system" binarsys(4)~\*{SARM\*}
.xx "system activity." "timex: time a" "command; report process data and" "" timex(1)~\*{URM\*}
.xx "" "uuxqt: execute remote" "command requests." "" uuxqt(1M)~\*{SARM\*}
.xx "" "scm, scs: SCSI" "command structures." "" scm(D4I)~\*{SCSI\*}
.xx "accounting records." "acctcms:" "command summary from per-process" "" acctcms(1M)~\*{SARM\*}
.xx "" "sdi_send: send SCSI" "command to the controller." "" sdi_send(D3I)~\*{SCSI\*}
.xx "" "shell: run a" "command using shell." "" shell(1F)~\*{CHAR\*}
.xx "" "argument list(s) and execute" "command." "xargs: construct" xargs(1)~\*{URM\*}
.xx "" "install: install" "commands." "" install(1M)~\*{PRM\*}
.xx "" "install: install" "commands." "" install(1M)~\*{SARM\*}
.xx "" "streamio: STREAMS ioctl" "commands." "" streamio(7)~\*{STRM\*}
.xx "" "xinstall: install" "commands." "" xinstall(1M)~\*{ACG\*}
.xx "" "intro: introduction to" "commands and application/" "" intro(1)~\*{URM\*}
.xx "" "introduction to maintenance" "commands and application/" "intro:" intro(1M)~\*{SARM\*}
.xx "" "at, batch: execute" "commands at a later time." "" at(1)~\*{URM\*}
.xx "" "apropos: locate" "commands by keyword lookup." "" apropos(1)~\*{BSD\*}
.xx "order." "lastcomm: show the last" "commands executed, in reverse" "" lastcomm(1)~\*{BSD\*}
.xx "transport/" "mailsurr: surrogate" "commands for routing and" "" mailsurr(4)~\*{SARM\*}
.xx "" "dfstab: file containing" "commands for sharing resources." "" dfstab(4)~\*{NUAG\*}
.xx "" "dfstab: file containing" "commands for sharing resources." "" dfstab(4)~\*{SARM\*}
.xx "" "with message numbers or SCCS" "commands." "help: ask for help" help(1)~\*{PRM\*}
.xx "" "introduction to programming" "commands." "intro:" intro(1)~\*{PRM\*}
.xx "" "and miscellaneous accounting" "commands." "/of accounting" acct(1M)~\*{SARM\*}
.xx "multi-user/" "rc2: run" "commands performed for" "" rc2(1M)~\*{SARM\*}
.xx "reboot the operating/" "rc6: run" "commands performed to stop and" "" rc6(1M)~\*{SARM\*}
.xx "operating system." "rc0: run" "commands performed to stop the" "" rc0(1M)~\*{SARM\*}
.xx "" "cdc: change the delta" "comment of an SCCS delta." "" cdc(1)~\*{PRM\*}
.xx "file." "mcs: manipulate the" "comment section of an object" "" mcs(1)~\*{PRM\*}
.xx "" "prt: display the delta and" "commentary history of an SCCS/" "" prt(1)~\*{BSD\*}
.xx "" "convert archive files to" "common formats." "convert:" convert(1)~\*{PRM\*}
.xx "" "filehdr: file header for" "common object files." "" filehdr(4)~\*{SARM\*}
.xx "" "comm: select or reject lines" "common to two sorted files." "" comm(1)~\*{URM\*}
.xx "" "/cocheck, coreceive, codestroy:" "communicate with a process." "" coproc(1F)~\*{CHAR\*}
.xx "" "socket: create an endpoint for" "communication." "" socket(3N)~\*{NI\*}
.xx "" "line discipline to a line on the" "communication controller." "/a" ccibind(1iref)~\*{MBRMAN\*}
.xx "" "ipcs: report inter-process" "communication facilities status." "" ipcs(1)~\*{URM\*}
.xx "" "ftok: standard interprocess" "communication package." "stdipc:" stdipc(3C)~\*{PRM\*}
.xx "" "186/450: iSBC 186/450 serial" "communications controller." "" 186/450(7iref)~\*{MBRMAN\*}
.xx "interface device driver." "cci:" "communications controller" "" cci(7iref)~\*{MBRMAN\*}
.xx "" "/to a subchannel on the" "communications controller." "" cciattach(1iref)~\*{MBRMAN\*}
.xx "" "/a line discipline program on the" "communications controller." "" ccifree(1iref)~\*{MBRMAN\*}
.xx "" "/line discipline list on the" "communications controller." "" ccildlist(1iref)~\*{MBRMAN\*}
.xx "" "/line information on the" "communications controller." "" ccilinfo(1iref)~\*{MBRMAN\*}
.xx "" "/CCI server information on the" "communications controller." "" ccisrvinfo(1iref)~\*{MBRMAN\*}
.xx "" "/subchannel information on the" "communications controller." "" ccisubinfo(1iref)~\*{MBRMAN\*}
.xx "" "/on a line to a new host on the" "communications controller." "" cciswitch(1iref)~\*{MBRMAN\*}
.xx "" "/a line to a new host on the" "communications controller." "" ttyswitch(1iref)~\*{MBRMAN\*}
.xx "" "i410: iSBC 186/410 serial" "communications controller device/" "" i410(7iref)~\*{MBRMAN\*}
.xx "" "discipline information on the" "communications controller." "/line" ccildinfo(1iref)~\*{MBRMAN\*}
.xx "" "discipline program on to the" "communications controller." "/line" cciload(1iref)~\*{MBRMAN\*}
.xx "" "discipline from a line on the" "communications controller." "/line" cciunbind(1iref)~\*{MBRMAN\*}
.xx "" "a subchannel on a line on the" "communications controller." "/with" ccidetach(1iref)~\*{MBRMAN\*}
.xx "" "ports: five-line asynchronous" "communications interface STREAMS/" "" ports(7)~\*{STRM\*}
.xx "" "users: display a" "compact list of users logged in." "" users(1)~\*{BSD\*}
.xx "" "diff: differential file" "comparator." "" diff(1)~\*{URM\*}
.xx "descriptions." "infocmp:" "compare or print out terminfo" "" infocmp(1M)~\*{CHAR\*}
.xx "descriptions." "infocmp:" "compare or print out terminfo" "" infocmp(1M)~\*{SARM\*}
.xx "" "cmp:" "compare two files." "" cmp(1)~\*{URM\*}
.xx "file." "sccsdiff:" "compare two versions of an SCCS" "" sccsdiff(1)~\*{PRM\*}
.xx "" "diff3: 3-way differential file" "comparison." "" diff3(1)~\*{URM\*}
.xx "" "dircmp: directory" "comparison." "" dircmp(1)~\*{URM\*}
.xx "console/" "scompat: set up" "compatibility environment for" "" scompat(1)~\*{ACG\*}
.xx "" "V7, 4BSD and XENIX STREAMS" "compatibility module." "ttcompat:" ttcompat(7)~\*{SARM\*}
.xx "" "/supporting bus, serial, and PS/2" "compatible mouse devices." "" mouse(7)~\*{ISDG\*}
.xx "" "/supporting bus, serial, and PS/2" "compatible mouse devices." "" mouse(7)~\*{SARM\*}
.xx "" "compver:" "compatible versions file." "" compver(4)~\*{ISDG\*}
.xx "" "regcmp: regular expression" "compile." "" regcmp(1)~\*{PRM\*}
.xx "expression." "regcmp, regex:" "compile and execute regular" "" regcmp(3G)~\*{PRM\*}
.xx "" "/advance: regular expression" "compile and match routines." "" regexp(5)~\*{PRM\*}
.xx "" "/advance: regular expression" "compile and match routines." "" regexp(5)~\*{SARM\*}
.xx "" "/advance: regular expression" "compile and match routines." "" regexpr(3G)~\*{PRM\*}
.xx "expression compile and/" "regexp:" "compile, step, advance: regular" "" regexp(5)~\*{PRM\*}
.xx "expression compile and/" "regexp:" "compile, step, advance: regular" "" regexp(5)~\*{SARM\*}
.xx "expression compile and/" "regexpr:" "compile, step, advance: regular" "" regexpr(3G)~\*{PRM\*}
.xx "" "term: format of" "compiled term file." "" term(4)~\*{CHAR\*}
.xx "" "term: format of" "compiled term file." "" term(4)~\*{SARM\*}
.xx "" "cc: C" "compiler." "" cc(1)~\*{BSD\*}
.xx "" "cc: C" "compiler." "" cc(1)~\*{PRM\*}
.xx "" "rpcgen: an RPC protocol" "compiler." "" rpcgen(1)~\*{NI\*}
.xx "" "tic: terminfo" "compiler." "" tic(1M)~\*{CHAR\*}
.xx "" "tic: terminfo" "compiler." "" tic(1M)~\*{SARM\*}
.xx "" "zic: time zone" "compiler." "" zic(1M)~\*{SARM\*}
.xx "" "yacc: yet another" "compiler-compiler." "" yacc(1)~\*{PRM\*}
.xx "" "erf, erfc: error function and" "complementary error function." "" erf(3M)~\*{PRM\*}
.xx "" "bkhistory: report on" "completed backup operations." "" bkhistory(1M)~\*{SARM\*}
.xx "" "/suspend processes pending" "completion of block I/O." "" biowait(D3DK)~\*{DDRM\*}
.xx "" "wait: await" "completion of process." "" wait(1)~\*{URM\*}
.xx "" "entry corresponding to NETPATH" "component." "/get netconfig" getnetpath(3N)~\*{NI\*}
.xx "" "pack, pcat, unpack:" "compress and expand files." "" pack(1)~\*{URM\*}
.xx "" "compress, uncompress, zcat:" "compress data for storage,/" "" compress(1)~\*{URM\*}
.xx "" "/hashmake, spellin, hashcheck," "compress: find spelling errors." "" spell(1)~\*{URM\*}
.xx "compress data for storage,/" "" "compress, uncompress, zcat:" "" compress(1)~\*{URM\*}
.xx "" "storage, uncompress and display" "compressed files." "/data for" compress(1)~\*{URM\*}
.xx "" "/strcadd, strecpy: copy strings," "compressing or expanding escape/" "" strccpy(3G)~\*{PRM\*}
.xx "" "elf_hash:" "compute hash value." "" elf_hash(3E)~\*{PRM\*}
.xx "remainder." "div, ldiv:" "compute the quotient and" "" div(3C)~\*{PRM\*}
.xx "two calendar times." "difftime:" "computes the difference between" "" difftime(3C)~\*{PRM\*}
.xx "file." "" "compver: compatible versions" "" compver(4)~\*{ISDG\*}
.xx "" "" "comsat, in.comsat: biff server." "" comsat(1M)~\*{NUAG\*}
.xx "" "" "comsat, in.comsat: biff server." "" comsat(1M)~\*{SARM\*}
.xx "" "cat:" "concatenate and print files." "" cat(1)~\*{URM\*}
.xx "" "pullupmsg:" "concatenate bytes in a message." "" pullupmsg(D3DK)~\*{DDRM\*}
.xx "" "linkb:" "concatenate two message blocks." "" linkb(D3DK)~\*{DDRM\*}
.xx "" "test:" "condition evaluation command." "" test(1)~\*{BSD\*}
.xx "" "test:" "condition evaluation command." "" test(1F)~\*{CHAR\*}
.xx "" "test:" "condition evaluation command." "" test(1)~\*{URM\*}
.xx "configuration file format." "" "config: Multibus II" "" config(4iref)~\*{MBRMAN\*}
.xx "" "fpathconf, pathconf: get" "configurable pathname variables." "" fpathconf(2)~\*{PRM\*}
.xx "" "sysconf: get" "configurable system variables." "" sysconf(3C)~\*{PRM\*}
.xx "" "idconfig: produce a new kernel" "configuration." "" idconfig(1M)~\*{ISDG\*}
.xx "" "idconfig: produce a new kernel" "configuration." "" idconfig(1M)~\*{SARM\*}
.xx "" "update, or get device driver" "configuration data." "/delete," idinstall(1M)~\*{ISDG\*}
.xx "" "update, or get device driver" "configuration data." "/delete," idinstall(1M)~\*{SARM\*}
.xx "" "netconfig: network" "configuration database." "" netconfig(4)~\*{NI\*}
.xx "" "netconfig: network" "configuration database." "" netconfig(4)~\*{SARM\*}
.xx "" "getnetconfig: get network" "configuration database entry." "" getnetconfig(3N)~\*{NI\*}
.xx "server routines." "resolv.conf:" "configuration file for name" "" resolv.conf(4)~\*{NUAG\*}
.xx "server routines." "resolv.conf:" "configuration file for name" "" resolv.conf(4)~\*{SARM\*}
.xx "Information Service/" "updaters:" "configuration file for Network" "" updaters(4)~\*{NI\*}
.xx "TCP/IP." "strcf: STREAMS" "Configuration File for STREAMS" "" strcf(4)~\*{NUAG\*}
.xx "TCP/IP." "strcf: STREAMS" "Configuration File for STREAMS" "" strcf(4)~\*{SARM\*}
.xx "system log daemon." "syslog.conf:" "configuration file for syslogd" "" syslog.conf(4)~\*{BSD\*}
.xx "" "config: Multibus II" "configuration file format." "" config(4iref)~\*{MBRMAN\*}
.xx "" "doconfig: execute a" "configuration script." "" doconfig(3N)~\*{NI\*}
.xx "" "strconf: change or query stream" "configuration." "strchg," strchg(1)~\*{STRM\*}
.xx "" "strconf: change or query stream" "configuration." "strchg," strchg(1)~\*{URM\*}
.xx "pushed STREAMS/" "autopush:" "configure lists of automatically" "" autopush(1M)~\*{SARM\*}
.xx "pushed STREAMS/" "autopush:" "configure lists of automatically" "" autopush(1M)~\*{STRM\*}
.xx "" "mapkey, mapscrn, mapstr:" "configure monitor screen/" "" mapkey(1M)~\*{SARM\*}
.xx "parameters." "ifconfig:" "configure network interface" "" ifconfig(1M)~\*{NUAG\*}
.xx "parameters." "ifconfig:" "configure network interface" "" ifconfig(1M)~\*{SARM\*}
.xx "" "lpadmin:" "configure the LP print service." "" lpadmin(1M)~\*{SARM\*}
.xx "" "mapchan:" "Configure tty device mapping." "" mapchan(1M)~\*{SARM\*}
.xx "" "t_rcvconnect: receive the" "confirmation from a connect/" "" t_rcvconnect(3N)~\*{NI\*}
.xx "console flags." "" "conflgs: change and display" "" conflgs(1M)~\*{SARM\*}
.xx "" "fwtmp, wtmpfix: manipulate" "connect accounting records." "" fwtmp(1M)~\*{SARM\*}
.xx "to and/" "/menu_items, item_count:" "connect and dis\%connect items" "" menu_items(3X)~\*{CHAR\*}
.xx "" "/field_count, move_field:" "connect fields to forms." "" form_field(3X)~\*{CHAR\*}
.xx "on a socket." "" "connect: initiate a connection" "" connect(3N)~\*{NI\*}
.xx "" "t_accept: accept a" "connect request." "" t_accept(3N)~\*{NI\*}
.xx "" "t_listen: listen for a" "connect request." "" t_listen(3N)~\*{NI\*}
.xx "" "receive the confirmation from a" "connect request." "t_rcvconnect:" t_rcvconnect(3N)~\*{NI\*}
.xx "socket." "mconnect:" "connect to SMTP mail server" "" mconnect(1M)~\*{BSD\*}
.xx "" "getpeername: get name of" "connected peer." "" getpeername(3N)~\*{NI\*}
.xx "" "socketpair: create a pair of" "connected sockets." "" socketpair(3N)~\*{NI\*}
.xx "" "an outgoing terminal line" "connection." "dial: establish" dial(3C)~\*{NI\*}
.xx "" "accept: accept a" "connection on a socket." "" accept(3N)~\*{NI\*}
.xx "" "connect: initiate a" "connection on a socket." "" connect(3N)~\*{NI\*}
.xx "" "shut down part of a full-duplex" "connection." "shutdown:" shutdown(3N)~\*{NI\*}
.xx "the/" "cciattach: Creates a" "connection to a subchannel on" "" cciattach(1iref)~\*{MBRMAN\*}
.xx "" "or expedited data sent over a" "connection." "t_rcv: receive data" t_rcv(3N)~\*{NI\*}
.xx "" "data or expedited data over a" "connection." "t_snd: send" t_snd(3N)~\*{NI\*}
.xx "" "t_connect: establish a" "connection with another/" "" t_connect(3N)~\*{NI\*}
.xx "" "discipline for unique stream" "connections." "connld: line" connld(7)~\*{STRM\*}
.xx "" "listen: listen for" "connections on a socket." "" listen(3N)~\*{NI\*}
.xx "" "acctcon, acctcon1, acctcon2:" "connect-time accounting." "" acctcon(1M)~\*{SARM\*}
.xx "unique stream connections." "" "connld: line discipline for" "" connld(7)~\*{STRM\*}
.xx "" "fsck (ufs): file system" "consistency check and/" "" fsck(1M)~\*{SARM\*}
.xx "" "quotacheck: file system quota" "consistency checker." "" quotacheck(1M)~\*{SARM\*}
.xx "" "up compatibility environment for" "console applications." "/set" scompat(1)~\*{ACG\*}
.xx "driver." "" "console: console port device" "" console(7iref)~\*{MBRMAN\*}
.xx "" "display: system" "console display." "" display(7)~\*{ISDG\*}
.xx "" "display: system" "console display." "" display(7)~\*{SARM\*}
.xx "" "conflgs: change and display" "console flags." "" conflgs(1M)~\*{SARM\*}
.xx "" "a message on stderr or system" "console." "fmtmsg: display" fmtmsg(1)~\*{URM\*}
.xx "" "a message on stderr or system" "console." "fmtmsg: display" fmtmsg(3C)~\*{PRM\*}
.xx "" "console: STREAMS-based" "console interface." "" console(7)~\*{STRM\*}
.xx "" "keyboard: system" "console keyboard." "" keyboard(7)~\*{ISDG\*}
.xx "" "keyboard: system" "console keyboard." "" keyboard(7)~\*{SARM\*}
.xx "" "console:" "console port device driver." "" console(7iref)~\*{MBRMAN\*}
.xx "" "a driver message on the system" "console." "print: display" print(D2DK)~\*{DDRM\*}
.xx "interface." "" "console: STREAMS-based console" "" console(7)~\*{STRM\*}
.xx "" "rci: debug" "console/rci protocol driver." "" rci(7iref)~\*{MBRMAN\*}
.xx "" "langinfo: language information" "constants." "" langinfo(5)~\*{PRM\*}
.xx "" "langinfo: language information" "constants." "" langinfo(5)~\*{SARM\*}
.xx "" "math: math functions and" "constants." "" math(5)~\*{PRM\*}
.xx "" "unistd: header file for symbolic" "constants." "" unistd(4)~\*{SARM\*}
.xx "" "file for implementation-specific" "constants." "limits: header" limits(4)~\*{PRM\*}
.xx "" "file for implementation-specific" "constants." "limits: header" limits(4)~\*{SARM\*}
.xx "" "mkfs (bfs):" "construct a boot file system." "" mkfs(1M)~\*{SARM\*}
.xx "response to a/" "mps_mk_bgrant:" "construct a buffer grant in" "" mps_mk_bgrant(D3D)~\*{DDRM\*}
.xx "response to a/" "mps_mk_breject:" "construct a buffer reject in" "" mps_mk_breject(D3D)~\*{DDRM\*}
.xx "" "mkfs (generic):" "construct a file system." "" mkfs(1M)~\*{SARM\*}
.xx "" "mkfs (ufs):" "construct a ufs file system." "" mkfs(1M)~\*{SARM\*}
.xx "" "mkfs (s5):" "construct an s5 file system." "" mkfs(1M)~\*{SARM\*}
.xx "execute command." "xargs:" "construct argument list(s) and" "" xargs(1)~\*{URM\*}
.xx "to be sent." "mps_mk_brdcst:" "constructs a broadcast message" "" mps_mk_brdcst(D3D)~\*{DDRM\*}
.xx "to initiate a/" "mps_mk_sol:" "constructs a message to be sent" "" mps_mk_sol(D3D)~\*{DDRM\*}
.xx "to initiate a/" "mps_mk_solrply:" "constructs a message to be sent" "" mps_mk_solrply(D3D)~\*{DDRM\*}
.xx "message to be/" "mps_mk_unsolrply:" "constructs a unsolicited reply" "" mps_mk_unsolrply(D3D)~\*{DDRM\*}
.xx "message to be/" "mps_mk_unsol:" "constructs an unsolicited" "" mps_mk_unsol(D3D)~\*{DDRM\*}
.xx "" "remove nroff, troff, tbl and eqn" "constructs." "deroff:" deroff(1)~\*{BSD\*}
.xx "" "remove nroff/troff, tbl, and eqn" "constructs." "deroff:" deroff(1)~\*{URM\*}
.xx "" "control maximum system resource" "consumption." "/setrlimit:" getrlimit(2)~\*{PRM\*}
.xx "debugging on." "Uutry: try to" "contact remote system with" "" Uutry(1M)~\*{SARM\*}
.xx "" "/lists device groups which" "contain devices that match/" "" getdgrp(1M)~\*{SARM\*}
.xx "resources." "dfstab: file" "containing commands for sharing" "" dfstab(4)~\*{NUAG\*}
.xx "resources." "dfstab: file" "containing commands for sharing" "" dfstab(4)~\*{SARM\*}
.xx "" "idmkinit: reads files" "containing specifications." "" idmkinit(1M)~\*{ISDG\*}
.xx "" "idmkinit: reads files" "containing specifications." "" idmkinit(1M)~\*{SARM\*}
.xx "information for/" "ttydefs: file" "contains terminal line settings" "" ttydefs(4)~\*{NI\*}
.xx "" "pkgmap: package" "contents description file." "" pkgmap(4)~\*{ISDG\*}
.xx "" "retrieve uninterpreted file" "contents." "elf_rawfile:" elf_rawfile(3E)~\*{PRM\*}
.xx "" "bkreg: change or display the" "contents of a backup register." "" bkreg(1M)~\*{SARM\*}
.xx "" "clrbuf: erase the" "contents of a buffer." "" clrbuf(D3DK)~\*{DDRM\*}
.xx "" "ls: list the" "contents of a directory." "" ls(1)~\*{BSD\*}
.xx "" "ls, lc: list" "contents of directory." "" ls(1)~\*{ACG\*}
.xx "" "ls: list" "contents of directory." "" ls(1)~\*{URM\*}
.xx "text string/" "srchtxt: display" "contents of, or search for a" "" srchtxt(1)~\*{URM\*}
.xx "" "ucontext: user" "context." "" ucontext(5)~\*{PRM\*}
.xx "" "get and set current user" "context." "/setcontext:" getcontext(2)~\*{PRM\*}
.xx "" "or get signal alternate stack" "context." "sigaltstack: set" sigaltstack(2)~\*{PRM\*}
.xx "" "set and/or get signal stack" "context." "sigstack:" sigstack(3)~\*{BSD\*}
.xx "" "csplit:" "context split." "" csplit(1)~\*{URM\*}
.xx "" "swapcontext: manipulate user" "contexts." "makecontext," makecontext(3C)~\*{PRM\*}
.xx "" "fcntl: file" "control." "" fcntl(2)~\*{PRM\*}
.xx "" "mctl: memory management" "control." "" mctl(3)~\*{BSD\*}
.xx "" "memcntl: memory management" "control." "" memcntl(2)~\*{PRM\*}
.xx "" "mt: magnetic tape" "control." "" mt(1)~\*{BSD\*}
.xx "" "priocntl: process scheduler" "control." "" priocntl(1)~\*{URM\*}
.xx "" "priocntl: process scheduler" "control." "" priocntl(2)~\*{PRM\*}
.xx "" "uadmin: administrative" "control." "" uadmin(1M)~\*{SARM\*}
.xx "" "uadmin: administrative" "control." "" uadmin(2)~\*{PRM\*}
.xx "" "vc: version" "control." "" vc(1)~\*{PRM\*}
.xx "" "ioctl:" "control a character device." "" ioctl(D2DK)~\*{DDRM\*}
.xx "" "elf_cntl:" "control a file descriptor." "" elf_cntl(3E)~\*{PRM\*}
.xx "" "backup: initiate or" "control a system backup session." "" backup(1M)~\*{SARM\*}
.xx "" "address resolution display and" "control." "arp:" arp(1M)~\*{NUAG\*}
.xx "" "address resolution display and" "control." "arp:" arp(1M)~\*{SARM\*}
.xx "" "scb: SCSI" "control block structure." "" scb(D4I)~\*{SCSI\*}
.xx "" "ioctl:" "control device." "" ioctl(2)~\*{PRM\*}
.xx "" "tapecntl: tape" "control for tape device." "" tapecntl(1)~\*{URM\*}
.xx "" "IEEE floating-point environment" "control." "/fpsetsticky:" fpgetround(3C)~\*{PRM\*}
.xx "" "canput: test for flow" "control in a stream." "" canput(D3DK)~\*{DDRM\*}
.xx "band." "bcanput: test for flow" "control in specified priority" "" bcanput(D3DK)~\*{DDRM\*}
.xx "" "init, telinit: process" "control initialization." "" init(1M)~\*{SARM\*}
.xx "" "getrlimit, setrlimit:" "control maximum system resource/" "" getrlimit(2)~\*{PRM\*}
.xx "" "/set_menu_pad, menu_pad:" "control menus display/" "" menu_attributes(3X)~\*{CHAR\*}
.xx "" "ICMP: Internet" "Control Message Protocol." "" ICMP(7)~\*{NI\*}
.xx "" "ICMP: Internet" "Control Message Protocol." "" ICMP(7)~\*{NUAG\*}
.xx "" "ICMP: Internet" "Control Message Protocol." "" ICMP(7)~\*{SARM\*}
.xx "" "putctl: send a" "control message to a queue." "" putctl(D3DK)~\*{DDRM\*}
.xx "parameter to a/" "putctl1: send a" "control message with a one-byte" "" putctl1(D3DK)~\*{DDRM\*}
.xx "" "jagent: host" "control of windowing terminal." "" jagent(5)~\*{PRM\*}
.xx "" "jagent: host" "control of windowing terminal." "" jagent(5)~\*{SARM\*}
.xx "" "msgctl: message" "control operations." "" msgctl(2)~\*{PRM\*}
.xx "" "semctl: semaphore" "control operations." "" semctl(2)~\*{PRM\*}
.xx "" "shmctl: shared memory" "control operations." "" shmctl(2)~\*{PRM\*}
.xx "" "fcntl: file" "control options." "" fcntl(5)~\*{PRM\*}
.xx "" "fcntl: file" "control options." "" fcntl(5)~\*{SARM\*}
.xx "" "generalized process scheduler" "control." "priocntlset:" priocntlset(2)~\*{PRM\*}
.xx "" "lpc: line printer" "control program." "" lpc(1M)~\*{BSD\*}
.xx "" "TCP: Internet Transmission" "Control Protocol." "" TCP(7)~\*{NI\*}
.xx "" "TCP: Internet Transmission" "Control Protocol." "" TCP(7)~\*{NUAG\*}
.xx "" "TCP: Internet Transmission" "Control Protocol." "" TCP(7)~\*{SARM\*}
.xx "" "/is_wintouched: curses refresh" "control routines." "" curs_touch(3X)~\*{CHAR\*}
.xx "" "character and window attribute" "control routines." "/curses" curs_attr(3X)~\*{CHAR\*}
.xx "" "curses terminal output option" "control routines." "/nl, nonl:" curs_outopts(3X)~\*{CHAR\*}
.xx "" "curses terminal input option" "control routines." "/typeahead:" curs_inopts(3X)~\*{CHAR\*}
.xx "" "/standard shell, job" "control shell, restricted shell." "" sh(1)~\*{URM\*}
.xx "" "openlog, closelog, setlogmask:" "control system log." "syslog," syslog(3)~\*{BSD\*}
.xx "" "front end for the Source Code" "Control System (SCCS)." "sccs:" sccs(1)~\*{BSD\*}
.xx "" "uucp status inquiry and job" "control." "uustat:" uustat(1C)~\*{URM\*}
.xx "" "sac: service access" "controller." "" sac(1M)~\*{NI\*}
.xx "" "sac: service access" "controller." "" sac(1M)~\*{SARM\*}
.xx "" "186/450 serial communications" "controller." "186/450: iSBC" 186/450(7iref)~\*{MBRMAN\*}
.xx "" "subchannel on the communications" "controller." "/a connection to a" cciattach(1iref)~\*{MBRMAN\*}
.xx "" "to a line on the communication" "controller." "/a line discipline" ccibind(1iref)~\*{MBRMAN\*}
.xx "" "program on the communications" "controller." "/a line discipline" ccifree(1iref)~\*{MBRMAN\*}
.xx "" "program on to the communications" "controller." "/a line discipline" cciload(1iref)~\*{MBRMAN\*}
.xx "" "sacadm: service access" "controller administration." "" sacadm(1M)~\*{NI\*}
.xx "" "sacadm: service access" "controller administration." "" sacadm(1M)~\*{SARM\*}
.xx "" "driver and MIX 386/530 Ethernet" "controller board." "/device" i530(7iref)~\*{MBRMAN\*}
.xx "" "i258: iSBC 386/258 peripheral" "controller device driver." "" i258(7iref)~\*{MBRMAN\*}
.xx "" "i530: iSBC 186/530 Ethernet" "controller device driver and MIX/" "" i530(7iref)~\*{MBRMAN\*}
.xx "" "186/410 serial communications" "controller device driver." "/iSBC" i410(7iref)~\*{MBRMAN\*}
.xx "" "a line on the communications" "controller." "/discipline from" cciunbind(1iref)~\*{MBRMAN\*}
.xx "" "resets and reloads the ethernet" "controller." "enetload:" enetload(1iref)~\*{MBRMAN\*}
.xx "" "on the communications" "controller." "/information" ccildinfo(1iref)~\*{MBRMAN\*}
.xx "" "on the communications" "controller." "/information" ccisubinfo(1iref)~\*{MBRMAN\*}
.xx "" "on an ethernet node's ethernet" "controller." "/information" enetinfo(1iref)~\*{MBRMAN\*}
.xx "driver." "cci: communications" "controller interface device" "" cci(7iref)~\*{MBRMAN\*}
.xx "" "list on the communications" "controller." "/line discipline" ccildlist(1iref)~\*{MBRMAN\*}
.xx "" "on the communications" "controller." "/line information" ccilinfo(1iref)~\*{MBRMAN\*}
.xx "" "mix386/450: MIX-based terminal" "controller module and baseboard." "" mix386/450(7iref)~\*{MBRMAN\*}
.xx "" "iSBC MPI/450 MPI-based terminal" "controller." "mpi/450:" mpi/450(7iref)~\*{MBRMAN\*}
.xx "" "a new host on the communications" "controller." "/on a line to" cciswitch(1iref)~\*{MBRMAN\*}
.xx "" "atcs\-asynchronous terminal" "controller script device driver." "" atcs(7iref)~\*{MBRMAN\*}
.xx "" "get name of addressed SCSI" "controller." "sdi_name:" sdi_name(D3I)~\*{SCSI\*}
.xx "" "send SCSI command to the" "controller." "sdi_send:" sdi_send(D3I)~\*{SCSI\*}
.xx "" "on the communications" "controller." "/server information" ccisrvinfo(1iref)~\*{MBRMAN\*}
.xx "" "a new host on the communications" "controller." "/switches a line to" ttyswitch(1iref)~\*{MBRMAN\*}
.xx "" "i258tp: iSBC 386/258 peripheral" "controller tape device driver." "" i258tp(7iref)~\*{MBRMAN\*}
.xx "" "on a line on the communications" "controller." "/with a subchannel" ccidetach(1iref)~\*{MBRMAN\*}
.xx "" "/a co-process with the" "controlling FMLI application." "" vsig(1F)~\*{CHAR\*}
.xx "" "tty:" "controlling terminal interface." "" tty(7)~\*{SARM\*}
.xx "_toupper, _tolower, toascii:/" "" "conv: toupper, tolower," "" conv(3C)~\*{PRM\*}
.xx "terminals." "term:" "conventional names for" "" term(5)~\*{SARM\*}
.xx "" "units:" "conversion program." "" units(1)~\*{URM\*}
.xx "" "sfconvert, sgconvert: output" "conversion." "/seconvert," econvert(3)~\*{BSD\*}
.xx "" "iconv: code set" "conversion tables." "" iconv(5)~\*{SARM\*}
.xx "" "character classification and" "conversion tables." "/generate" chrtbl(1M)~\*{SARM\*}
.xx "" "iconv: code set" "conversion utility." "" iconv(1)~\*{URM\*}
.xx "" "vsprintf: formatted output" "conversion." "/vprintf, vfprintf," printf(3S)~\*{BSD\*}
.xx "into a terminfo/" "captoinfo:" "convert a termcap description" "" captoinfo(1M)~\*{CHAR\*}
.xx "into a terminfo/" "captoinfo:" "convert a termcap description" "" captoinfo(1M)~\*{SARM\*}
.xx "" "dd:" "convert and copy a file." "" dd(1M)~\*{SARM\*}
.xx "" "dd:" "convert and copy a file." "" dd(1M)~\*{URM\*}
.xx "formats." "convert:" "convert archive files to common" "" convert(1)~\*{PRM\*}
.xx "and long/" "l3tol, ltol3:" "convert between 3-byte integers" "" l3tol(3C)~\*{PRM\*}
.xx "base-64 ASCII/" "a64l, l64a:" "convert between long integer and" "" a64l(3C)~\*{PRM\*}
.xx "microseconds." "drv_hztousec:" "convert clock ticks to" "" drv_hztousec(D3DK)~\*{DDRM\*}
.xx "to common formats." "" "convert: convert archive files" "" convert(1)~\*{PRM\*}
.xx "" "/gmtime, asctime, tzset:" "convert date and time to string." "" ctime(3C)~\*{PRM\*}
.xx "" "strftime, cftime, ascftime:" "convert date and time to string." "" strftime(3C)~\*{PRM\*}
.xx "" "/decimal_to_extended:" "convert decimal record to/" "" decimal_to_floating(3)~\*{BSD\*}
.xx "pass-through device/" "sdi_getdev:" "convert device number to SCSI" "" sdi_getdev(D3I)~\*{SCSI\*}
.xx "table." "htable:" "convert DoD Internet format host" "" htable(1M)~\*{NUAG\*}
.xx "table." "htable:" "convert DoD Internet format host" "" htable(1M)~\*{SARM\*}
.xx "major device number." "etoimajor:" "convert external to internal" "" etoimajor(D3DK)~\*{DDRM\*}
.xx "" "/ecvtl, fcvt, fcvtl, gcvt, gcvtl:" "convert floating-point number to/" "" ecvt(3C)~\*{PRM\*}
.xx "decimal/" "/extended_to_decimal:" "convert floating-point value to" "" floating_to_decimal(3)~\*{BSD\*}
.xx "" "scanf, fscanf, sscanf:" "convert formatted input." "" scanf(3S)~\*{PRM\*}
.xx "" "/mvscanw, mvwscanw, vwscanw:" "convert formatted input from a/" "" curs_scanw(3X)~\*{CHAR\*}
.xx "major device number." "itoemajor:" "convert internal to external" "" itoemajor(D3DK)~\*{DDRM\*}
.xx "ticks." "drv_usectohz:" "convert microseconds to clock" "" drv_usectohz(D3DK)~\*{DDRM\*}
.xx "ELF." "cvtomflib:" "convert OMF (XENIX) libraries to" "" cvtomflib(1)~\*{ACG\*}
.xx "information to/" "maplocale:" "convert Release 4 locale" "" maplocale(1M)~\*{ACG\*}
.xx "pages (round down)." "btop:" "convert size in bytes to size in" "" btop(D3DK)~\*{DDRM\*}
.xx "pages (round up)." "btopr:" "convert size in bytes to size in" "" btopr(D3DK)~\*{DDRM\*}
.xx "bytes." "ptob:" "convert size in pages to size in" "" ptob(D3DK)~\*{DDRM\*}
.xx "" "strtod, strtold, atof:" "convert string to/" "" strtod(3C)~\*{PRM\*}
.xx "" "strtol, strtoul, atol, atoi:" "convert string to integer." "" strtol(3C)~\*{PRM\*}
.xx "" "mpscnv:" "Convert transport code." "" mpscnv(1iref)~\*{MBRMAN\*}
.xx "time." "getdate:" "convert user format date and" "" getdate(3C)~\*{PRM\*}
.xx "" "/htonl, htons, ntohl, ntohs:" "convert values between host and/" "" byteorder(3N)~\*{NI\*}
.xx "physical address." "vtop:" "convert virtual address to" "" vtop(D3D)~\*{DDRM\*}
.xx "calendar time." "mktime:" "converts a tm structure to a" "" mktime(3C)~\*{PRM\*}
.xx "" "timod: Transport Interface" "cooperating STREAMS module." "" timod(7)~\*{STRM\*}
.xx "application/" "elf_version:" "coordinate ELF library and" "" elf_version(3E)~\*{PRM\*}
.xx "" "get curses cursor and window" "coordinates." "/getmaxyx:" curs_getyx(3X)~\*{CHAR\*}
.xx "message/" "mps_get_soldata:" "copies user data from the" "" mps_get_soldata(D3D)~\*{DDRM\*}
.xx "message/" "mps_get_unsoldata:" "copies user data from the" "" mps_get_unsoldata(D3D)~\*{DDRM\*}
.xx "FMLI/" "vsig: synchronize a" "co-process with the controlling" "" vsig(1F)~\*{CHAR\*}
.xx "" "rcp: remote file" "copy." "" rcp(1)~\*{NUAG\*}
.xx "" "rcp: remote file" "copy." "" rcp(1)~\*{URM\*}
.xx "described by uio(D4DK)/" "ureadc:" "copy a character to space" "" ureadc(D3DK)~\*{DDRM\*}
.xx "" "dd: convert and" "copy a file." "" dd(1M)~\*{SARM\*}
.xx "" "dd: convert and" "copy a file." "" dd(1M)~\*{URM\*}
.xx "" "copylist:" "copy a file into memory." "" copylist(3G)~\*{PRM\*}
.xx "" "tcopy:" "copy a magnetic tape." "" tcopy(1)~\*{BSD\*}
.xx "" "copymsg:" "copy a message." "" copymsg(D3DK)~\*{DDRM\*}
.xx "" "copyb:" "copy a message block." "" copyb(D3DK)~\*{DDRM\*}
.xx "" "" "copy: copy groups of files." "" copy(1)~\*{ACG\*}
.xx "locations in the kernel." "bcopy:" "copy data between address" "" bcopy(D3DK)~\*{DDRM\*}
.xx "to a user buffer." "copyout:" "copy data from a driver buffer" "" copyout(D3DK)~\*{DDRM\*}
.xx "a driver buffer." "copyin:" "copy data from a user buffer to" "" copyin(D3DK)~\*{DDRM\*}
.xx "structure." "uiomove:" "copy data using uio(D4DK)" "" uiomove(D3DK)~\*{DDRM\*}
.xx "" "cpio:" "copy file archives in and out." "" cpio(1)~\*{URM\*}
.xx "access time." "dcopy (generic):" "copy file systems for optimal" "" dcopy(1M)~\*{SARM\*}
.xx "" "cp:" "copy files." "" cp(1)~\*{URM\*}
.xx "" "copy:" "copy groups of files." "" copy(1)~\*{ACG\*}
.xx "" "volcopy (ufs): make a literal" "copy of a ufs file system." "" volcopy(1M)~\*{SARM\*}
.xx "" "volcopy (s5): make a literal" "copy of an s5 file system." "" volcopy(1M)~\*{SARM\*}
.xx "" "volcopy (generic): make literal" "copy of file system." "" volcopy(1M)~\*{SARM\*}
.xx "multiple volumes." "cpout:" "copy out file archives to" "" cpout(1iref)~\*{MBRMAN\*}
.xx "" "/STREAMS transparent ioctl" "copy request structure." "" copyreq(D4DK)~\*{DDRM\*}
.xx "" "/STREAMS transparent ioctl" "copy response structure." "" copyresp(D4DK)~\*{DDRM\*}
.xx "access time." "dcopy (s5):" "copy s5 file systems for optimal" "" dcopy(1M)~\*{SARM\*}
.xx "" "/streadd, strcadd, strecpy:" "copy strings, compressing or/" "" strccpy(3G)~\*{PRM\*}
.xx "" "uuname: UNIX-to-UNIX system" "copy." "uucp, uulog," uucp(1C)~\*{URM\*}
.xx "" "public UNIX-to-UNIX system file" "copy." "uuto, uupick:" uuto(1C)~\*{URM\*}
.xx "" "" "copyb: copy a message block." "" copyb(D3DK)~\*{DDRM\*}
.xx "buffer to a driver buffer." "" "copyin: copy data from a user" "" copyin(D3DK)~\*{DDRM\*}
.xx "memory." "" "copylist: copy a file into" "" copylist(3G)~\*{PRM\*}
.xx "" "" "copymsg: copy a message." "" copymsg(D3DK)~\*{DDRM\*}
.xx "buffer to a user buffer." "" "copyout: copy data from a driver" "" copyout(D3DK)~\*{DDRM\*}
.xx "ioctl copy request structure." "" "copyreq: STREAMS transparent" "" copyreq(D4DK)~\*{DDRM\*}
.xx "ioctl copy response structure." "" "copyresp: STREAMS transparent" "" copyresp(D4DK)~\*{DDRM\*}
.xx "file." "" "copyright: copyright information" "" copyright(4)~\*{ISDG\*}
.xx "" "floor, floorf, ceil, ceilf," "copysign, fmod, fmodf, fabs,/" "" floor(3M)~\*{PRM\*}
.xx "" "ieee_functions, fp_class, isnan," "copysign, scalbn: miscellaneous/" "" ieee_functions(3M)~\*{BSD\*}
.xx "overlapped/" "/overlay, overwrite," "copywin: overlap and manipulate" "" curs_overlay(3X)~\*{CHAR\*}
.xx "" "" "core: core image file." "" core(4)~\*{PRM\*}
.xx "" "" "core: core image file." "" core(4)~\*{SARM\*}
.xx "" "core:" "core image file." "" core(4)~\*{PRM\*}
.xx "" "core:" "core image file." "" core(4)~\*{SARM\*}
.xx "processes." "gcore: get" "core images of running" "" gcore(1)~\*{URM\*}
.xx "" "mem, kmem:" "core memory." "" mem(7)~\*{SARM\*}
.xx "" "cocreate, cosend, cocheck," "coreceive, codestroy:/" "" coproc(1F)~\*{CHAR\*}
.xx "permissions and/" "fixperm:" "correct or initialize file" "" fixperm(1)~\*{ACG\*}
.xx "permissions and/" "fixperm:" "correct or initialize XENIX file" "" fixperm(1M)~\*{SARM\*}
.xx "synchronization of the/" "adjtime:" "correct the time to allow" "" adjtime(2)~\*{PRM\*}
.xx "" "menu_cursor:  pos_menu_cursor:" "correctly position a menus/" "" menu_cursor(3X)~\*{CHAR\*}
.xx "" "getnetpath: get netconfig entry" "corresponding to NETPATH/" "" getnetpath(3N)~\*{NI\*}
.xx "" "/receives solicited data that" "corresponds to an outstanding/" "" mps_AMPreceive(D3D)~\*{DDRM\*}
.xx "asinf, acos,/" "trig: sin, sinf," "cos, cosf, tan, tanf, asin," "" trig(3M)~\*{PRM\*}
.xx "codestroy:/" "cocreate," "cosend, cocheck, coreceive," "" coproc(1F)~\*{CHAR\*}
.xx "acos,/" "trig: sin, sinf, cos," "cosf, tan, tanf, asin, asinf," "" trig(3M)~\*{PRM\*}
.xx "acosh, atanh:/" "sinh, sinhf," "cosh, coshf, tanh, tanhf, asinh," "" sinh(3M)~\*{PRM\*}
.xx "acosh,/" "sinh, sinhf, cosh," "coshf, tanh, tanhf, asinh," "" sinh(3M)~\*{PRM\*}
.xx "" "wc: word" "count." "" wc(1)~\*{URM\*}
.xx "" "sum: print checksum and block" "count of a file." "" sum(1)~\*{URM\*}
.xx "" "display line-by-line execution" "count profile data." "lprof:" lprof(1)~\*{PRM\*}
.xx "" "" "cp: copy files." "" cp(1)~\*{URM\*}
.xx "out." "" "cpio: copy file archives in and" "" cpio(1)~\*{URM\*}
.xx "multiple volumes." "" "cpout: copy out file archives to" "" cpout(1iref)~\*{MBRMAN\*}
.xx "" "clock: report" "CPU time used." "" clock(3C)~\*{PRM\*}
.xx "" "" "cram\- CMOS RAM interface." "" cram(7)~\*{SARM\*}
.xx "" "" "crash: examine system images." "" crash(1M)~\*{SARM\*}
.xx "rewrite an existing one." "" "creat: create a new file or" "" creat(2)~\*{PRM\*}
.xx "" "setcolor: redefine or" "create a color." "" setcolor(1F)~\*{CHAR\*}
.xx "" "makefsys:" "create a file system." "" makefsys(1M)~\*{SARM\*}
.xx "command." "gencc:" "create a front-end to the cc" "" gencc(1M)~\*{SARM\*}
.xx "file." "tmpnam, tempnam:" "create a name for a temporary" "" tmpnam(3S)~\*{PRM\*}
.xx "" "mkfifo:" "create a new FIFO." "" mkfifo(3C)~\*{PRM\*}
.xx "existing one." "creat:" "create a new file or rewrite an" "" creat(2)~\*{PRM\*}
.xx "on the system." "groupadd: add" "(create) a new group definition" "" groupadd(1M)~\*{SARM\*}
.xx "publickey database." "newkey:" "create a new key in the" "" newkey(1M)~\*{NI\*}
.xx "publickey database." "newkey:" "create a new key in the" "" newkey(1M)~\*{NUAG\*}
.xx "" "fork:" "create a new process." "" fork(2)~\*{PRM\*}
.xx "sockets." "socketpair:" "create a pair of connected" "" socketpair(3N)~\*{NI\*}
.xx "vi." "ctags:" "create a tags file for use with" "" ctags(1)~\*{URM\*}
.xx "" "tmpfile:" "create a temporary file." "" tmpfile(3S)~\*{PRM\*}
.xx "communication." "socket:" "create an endpoint for" "" socket(3N)~\*{NI\*}
.xx "semaphore." "creatsem:" "create an instance of a binary" "" creatsem(2)~\*{ACG\*}
.xx "" "pipe:" "create an interprocess channel." "" pipe(2)~\*{PRM\*}
.xx "bibliographic/" "indxbib:" "create an inverted index to a" "" indxbib(1)~\*{BSD\*}
.xx "files." "admin:" "create and administer SCCS" "" admin(1)~\*{PRM\*}
.xx "" "form_new:  new_form, free_form:" "create and destroy forms." "" form_new(3X)~\*{CHAR\*}
.xx "" "/link_field, free_field,:" "create and destroy forms fields." "" form_field_new(3X)~\*{CHAR\*}
.xx "" "menu_new:  new_menu, free_menu:" "create and destroy menus." "" menu_new(3X)~\*{CHAR\*}
.xx "" "/new_item, free_item:" "create and destroy menus items." "" menu_item_new(3X)~\*{CHAR\*}
.xx "" "/new_panel, del_panel:" "create and destroy panels." "" panel_new(3X)~\*{CHAR\*}
.xx "" "/pnoutrefresh, pechochar:" "create and display curses pads." "" curs_pad(3X)~\*{CHAR\*}
.xx "" "colltbl:" "create collation database." "" colltbl(1M)~\*{SARM\*}
.xx "" "hline, whline, vline, wvline:" "create curses borders,/" "/box," curs_border(3X)~\*{CHAR\*}
.xx "" "syncok, wcursyncup, wsyncdown:" "create curses windows." "/wsyncup," curs_window(3X)~\*{CHAR\*}
.xx "gettxt." "mkmsgs:" "create message files for use by" "" mkmsgs(1)~\*{URM\*}
.xx "" "montbl:" "create monetary database." "" montbl(1M)~\*{SARM\*}
.xx "database." "addbib:" "create or extend a bibliographic" "" addbib(1)~\*{BSD\*}
.xx "partition table." "fdisk:" "create or modify hard disk" "" fdisk(1M)~\*{SARM\*}
.xx "file system archive." "fdp:" "create, or restore from, a full" "" fdp(1M)~\*{SARM\*}
.xx "file system archive." "ffile:" "create, or restore from, a full" "" ffile(1M)~\*{SARM\*}
.xx "path." "mkdirp, rmdirp:" "create, remove directories in a" "" mkdirp(3G)~\*{PRM\*}
.xx "of a filesystem." "fimage:" "create, restore an image archive" "" fimage(1M)~\*{SARM\*}
.xx "filesystem archive." "incfile:" "create, restore an incremental" "" incfile(1M)~\*{SARM\*}
.xx "manual." "catman:" "create the cat files for the" "" catman(1M)~\*{BSD\*}
.xx "subchannel on the/" "cciattach:" "Creates a connection to a" "" cciattach(1iref)~\*{MBRMAN\*}
.xx "" "/routines for dealing with" "creation and manipulation of/" "" rpc_clnt_create(3N)~\*{NI\*}
.xx "" "umask: set and get file" "creation mask." "" umask(2)~\*{PRM\*}
.xx "" "/routines for dealing with the" "creation of server handles." "" rpc_svc_create(3N)~\*{NI\*}
.xx "" "data representation stream" "creation." "/routines for external" xdr_create(3N)~\*{NI\*}
.xx "a binary semaphore." "" "creatsem: create an instance of" "" creatsem(2)~\*{ACG\*}
.xx "" "drv_priv: determine whether" "credentials are privileged." "" drv_priv(D3DK)~\*{DDRM\*}
.xx "" "getdev: lists devices based on" "criteria." "" getdev(1M)~\*{SARM\*}
.xx "" "pathconv: search FMLI" "criteria for filename." "" pathconv(1F)~\*{CHAR\*}
.xx "" "which contain devices that match" "criteria." "/lists device groups" getdgrp(1M)~\*{SARM\*}
.xx "" "" "cron." "" cron(4)~\*{SARM\*}
.xx "" "" "cron: clock daemon." "" cron(1M)~\*{SARM\*}
.xx "" "crontab: user" "crontab file." "" crontab(1)~\*{URM\*}
.xx "" "" "crontab: user crontab file." "" crontab(1)~\*{URM\*}
.xx "" "cxref: generate C program" "cross-reference." "" cxref(1)~\*{PRM\*}
.xx "optimization package." "curses:" "CRT screen handling and" "" curses(3X)~\*{CHAR\*}
.xx "" "plot, aedplot, atoplot, bgplot," "crtplot, dumbplot, gigiplot,/" "" plot(1G)~\*{BSD\*}
.xx "" "pg: file perusal filter for" "CRTs." "" pg(1)~\*{URM\*}
.xx "" "" "crypt: encode/decode." "" crypt(1)~\*{URM\*}
.xx "encryption functions." "" "crypt: password and file" "" crypt(3X)~\*{PRM\*}
.xx "encryption." "" "crypt, setkey, encrypt: generate" "" crypt(3C)~\*{PRM\*}
.xx "C program." "" "cscope: interactively examine a" "" cscope(1)~\*{PRM\*}
.xx "with a C-like syntax." "" "csh: shell command interpreter" "" csh(1)~\*{URM\*}
.xx "" "csmclock--Multibus II" "CSM clock driver." "" csmclock(7iref)~\*{MBRMAN\*}
.xx "driver." "" "csmclock--Multibus II CSM clock" "" csmclock(7iref)~\*{MBRMAN\*}
.xx "" "" "csplit: context split." "" csplit(1)~\*{URM\*}
.xx "terminal." "" "ct: spawn login to a remote" "" ct(1C)~\*{URM\*}
.xx "use with vi." "" "ctags: create a tags file for" "" ctags(1)~\*{URM\*}
.xx "terminal." "" "ctermid: generate file name for" "" ctermid(3S)~\*{PRM\*}
.xx "asctime, tzset: convert date/" "" "ctime, localtime, gmtime," "" ctime(3C)~\*{PRM\*}
.xx "" "" "ctrace: C program debugger." "" ctrace(1)~\*{PRM\*}
.xx "islower, isupper, isalpha,/" "" "ctype: isdigit, isxdigit," "" ctype(3C)~\*{PRM\*}
.xx "" "" "cu: call another UNIX system." "" cu(1C)~\*{URM\*}
.xx "endpoint." "t_look: look at the" "current event on a transport" "" t_look(3N)~\*{NI\*}
.xx "default/" "reset: reset the" "current form field to its" "" reset(1F)~\*{CHAR\*}
.xx "" "getfrm: returns the" "current frameID number." "" getfrm(1F)~\*{CHAR\*}
.xx "" "display the architecture of the" "current host." "arch:" arch(1)~\*{BSD\*}
.xx "" "get unique identifier of" "current host." "gethostid:" gethostid(3)~\*{BSD\*}
.xx "" "sethostname: get/set name of" "current host." "gethostname," gethostname(3)~\*{BSD\*}
.xx "" "the numeric identifier of the" "current host." "hostid: print" hostid(1)~\*{BSD\*}
.xx "" "the processor type of the" "current host." "mach: display" mach(1)~\*{BSD\*}
.xx "" "hostname: set or print name of" "current host system." "" hostname(1)~\*{BSD\*}
.xx "" "rename login entry to show" "current layer." "relogin:" relogin(1M)~\*{SARM\*}
.xx "" "rename login entry to show" "current layer." "relogin:" relogin(1M)~\*{URM\*}
.xx "" "/top_row, item_index: set and get" "current menus items." "" menu_item_current(3X)~\*{CHAR\*}
.xx "" "/field_index: set forms" "current page and field." "" form_page(3X)~\*{CHAR\*}
.xx "" "ps: display the status of" "current processes." "" ps(1)~\*{BSD\*}
.xx "activity." "sact: print" "current SCCS file editing" "" sact(1)~\*{PRM\*}
.xx "" "domainname: get/set name of" "current secure RPC domain." "" domainname(1M)~\*{NI\*}
.xx "" "sigsetmask: set" "current signal mask." "" sigsetmask(3)~\*{BSD\*}
.xx "" "t_getstate: get the" "current state." "" t_getstate(3N)~\*{NI\*}
.xx "" "uname: print name of" "current UNIX system." "" uname(1)~\*{URM\*}
.xx "" "uname: get name of" "current UNIX system." "" uname(2)~\*{PRM\*}
.xx "" "/setcontext: get and set" "current user context." "" getcontext(2)~\*{PRM\*}
.xx "" "the slot in the utmp file of the" "current user." "ttyslot: find" ttyslot(3C)~\*{PRM\*}
.xx "" "whoami: display the effective" "current username." "" whoami(1)~\*{BSD\*}
.xx "the NIS server/" "yppoll: return" "current version of the map at" "" yppoll(1M)~\*{NI\*}
.xx "" "/replace_panel: get or set the" "current window of a panels/" "" panel_window(3X)~\*{CHAR\*}
.xx "" "getcwd: get pathname of" "current working directory." "" getcwd(3C)~\*{PRM\*}
.xx "pathname." "getwd: get" "current working directory" "" getwd(3)~\*{BSD\*}
.xx "" "/form_page, set_current_field," "current_field, field_index: set/" "" form_page(3X)~\*{CHAR\*}
.xx "top_row,/" "/set_current_item," "current_item, set_top_row," "" menu_item_current(3X)~\*{CHAR\*}
.xx "" "getitems: return a list of" "currently marked menu items." "" getitems(1F)~\*{CHAR\*}
.xx "" "display environment variables" "currently set." "printenv:" printenv(1)~\*{BSD\*}
.xx "mvaddch, mvwaddch, echochar,/" "" "curs_addch:  addch, waddch," "" curs_addch(3X)~\*{CHAR\*}
.xx "addchnstr, waddchstr,/" "" "curs_addchstr:  addchstr," "" curs_addchstr(3X)~\*{CHAR\*}
.xx "waddstr, waddnstr, mvaddstr,/" "" "curs_addstr:  addstr, addnstr," "" curs_addstr(3X)~\*{CHAR\*}
.xx "attron, wattron, attrset,/" "" "curs_attr:  attroff, wattroff," "" curs_attr(3X)~\*{CHAR\*}
.xx "bell and screen flash routines." "" "curs_beep:  beep, flash: curses" "" curs_beep(3X)~\*{CHAR\*}
.xx "bkgd, wbkgd: curses window/" "" "curs_bkgd:  bkgdset, wbkgdset," "" curs_bkgd(3X)~\*{CHAR\*}
.xx "box, hline, whline, vline,/" "" "curs_border:  border, wborder," "" curs_border(3X)~\*{CHAR\*}
.xx "clear, wclear, clrtobot,/" "" "curs_clear:  erase, werase," "" curs_clear(3X)~\*{CHAR\*}
.xx "init_pair, init_color,/" "" "curs_color:  start_color," "" curs_color(3X)~\*{CHAR\*}
.xx "mvdelch, mvwdelch: delete/" "" "curs_delch:  delch, wdelch," "" curs_delch(3X)~\*{CHAR\*}
.xx "wdeleteln, insdelln,/" "" "curs_deleteln:  deleteln," "" curs_deleteln(3X)~\*{CHAR\*}
.xx "" "curs_beep:  beep, flash:" "curses bell and screen flash/" "" curs_beep(3X)~\*{CHAR\*}
.xx "" "/whline, vline, wvline: create" "curses borders, horizontal and/" "" curs_border(3X)~\*{CHAR\*}
.xx "" "/wstandend, standout, wstandout:" "curses character and window/" "" curs_attr(3X)~\*{CHAR\*}
.xx "" "/color_content, pair_content:" "curses color manipulation/" "" curs_color(3X)~\*{CHAR\*}
.xx "optimization package." "" "curses: CRT screen handling and" "" curses(3X)~\*{CHAR\*}
.xx "" "/getbegyx, getmaxyx: get" "curses cursor and window/" "" curs_getyx(3X)~\*{CHAR\*}
.xx "" "/longname, termattrs, termname:" "curses environment query/" "" curs_termattrs(3X)~\*{CHAR\*}
.xx "" "/tgetnum, tgetstr, tgoto, tputs:" "curses interfaces (emulated) to/" "" curs_termcap(3X)~\*{CHAR\*}
.xx "" "/tigetflag, tigetnum, tigetstr:" "curses interfaces to terminfo/" "" curs_terminfo(3X)~\*{CHAR\*}
.xx "" "pechochar: create and display" "curses pads." "/pnoutrefresh," curs_pad(3X)~\*{CHAR\*}
.xx "" "/is_linetouched, is_wintouched:" "curses refresh control routines." "" curs_touch(3X)~\*{CHAR\*}
.xx "" "curs_set, napms: low-level" "curses routines." "/ripoffline," curs_kernel(3X)~\*{CHAR\*}
.xx "" "/scr_set: read (write) a" "curses screen from (to) a file." "" curs_scr_dump(3X)~\*{CHAR\*}
.xx "" "/isendwin, set_term, delscreen:" "curses screen initialization and/" "" curs_initscr(3X)~\*{CHAR\*}
.xx "" "/slk_attrset, slk_attroff:" "curses soft label  routines." "" curs_slk(3X)~\*{CHAR\*}
.xx "" "/timeout, wtimeout, typeahead:" "curses terminal input option/" "" curs_inopts(3X)~\*{CHAR\*}
.xx "" "/get character strings from" "curses terminal keyboard." "" curs_getstr(3X)~\*{CHAR\*}
.xx "" "(or push back) characters from" "curses terminal keyboard." "/get" curs_getch(3X)~\*{CHAR\*}
.xx "" "/wsetscrreg, scrollok, nl, nonl:" "curses terminal output option/" "" curs_outopts(3X)~\*{CHAR\*}
.xx "" "/flushinp: miscellaneous" "curses utility routines." "" curs_util(3X)~\*{CHAR\*}
.xx "" "convert formatted input from a" "curses widow." "/vwscanw:" curs_scanw(3X)~\*{CHAR\*}
.xx "" "characters (and attributes) to a" "curses window." "/add string of" curs_addchstr(3X)~\*{CHAR\*}
.xx "" "/add a string of characters to a" "curses window and advance/" "" curs_addstr(3X)~\*{CHAR\*}
.xx "" "character (with attributes) to a" "curses window and advance/" "/add a" curs_addch(3X)~\*{CHAR\*}
.xx "" "/bkgdset, wbkgdset, bkgd, wbkgd:" "curses window background/" "" curs_bkgd(3X)~\*{CHAR\*}
.xx "" "character under the cursor in a" "curses window." "/before the" curs_insch(3X)~\*{CHAR\*}
.xx "" "curs_move:  move, wmove: move" "curses window cursor." "" curs_move(3X)~\*{CHAR\*}
.xx "" "scroll, srcl, wscrl: scroll a" "curses window." "curs_scroll: " curs_scroll(3X)~\*{CHAR\*}
.xx "" "and its attributes from a" "curses window." "/get a character" curs_inch(3X)~\*{CHAR\*}
.xx "" "character under cursor in a" "curses window." "/mvwdelch: delete" curs_delch(3X)~\*{CHAR\*}
.xx "" "a string of characters from a" "curses window." "/mvwinnstr: get" curs_instr(3X)~\*{CHAR\*}
.xx "" "(and attributes) from a" "curses window." "/of characters" curs_inchstr(3X)~\*{CHAR\*}
.xx "" "character under the cursor in a" "curses window." "/string before" curs_insstr(3X)~\*{CHAR\*}
.xx "" "clear all or part of a" "curses window." "/wclrtoeol:" curs_clear(3X)~\*{CHAR\*}
.xx "" "delete and insert lines in a" "curses window." "/\%winsertln:" curs_deleteln(3X)~\*{CHAR\*}
.xx "" "/redrawwin, wredrawln: refresh" "curses windows and lines." "" curs_refresh(3X)~\*{CHAR\*}
.xx "" "and manipulate overlapped" "curses windows." "/overlap" curs_overlay(3X)~\*{CHAR\*}
.xx "" "wcursyncup, wsyncdown: create" "curses windows." "/syncok," curs_window(3X)~\*{CHAR\*}
.xx "" "print formatted output in" "curses windows." "/vwprintw:" curs_printw(3X)~\*{CHAR\*}
.xx "mvgetch, mvwgetch, ungetch: get/" "" "curs_getch:  getch, wgetch," "" curs_getch(3X)~\*{CHAR\*}
.xx "mvgetstr, mvwgetstr, wgetnstr:/" "" "curs_getstr:  getstr, wgetstr," "" curs_getstr(3X)~\*{CHAR\*}
.xx "getbegyx, getmaxyx: get curses/" "" "curs_getyx:  getyx, getparyx," "" curs_getyx(3X)~\*{CHAR\*}
.xx "mvwinch: get a character and/" "" "curs_inch:  inch, winch, mvinch," "" curs_inch(3X)~\*{CHAR\*}
.xx "inchnstr, winchstr, winchnstr,/" "" "curs_inchstr:  inchstr," "" curs_inchstr(3X)~\*{CHAR\*}
.xx "endwin, isendwin, set_term,/" "" "curs_initscr:  initscr, newterm," "" curs_initscr(3X)~\*{CHAR\*}
.xx "echo, noecho, halfdelay,/" "" "curs_inopts:  cbreak, nocbreak," "" curs_inopts(3X)~\*{CHAR\*}
.xx "mvinsch, mvwinsch: insert a/" "" "curs_insch:  insch, winsch," "" curs_insch(3X)~\*{CHAR\*}
.xx "winsstr, winsnstr, mvinsstr,/" "" "curs_instr:  insstr, insnstr," "" curs_insstr(3X)~\*{CHAR\*}
.xx "winstr, winnstr, mvinstr,/" "" "curs_instr:  instr, innstr," "" curs_instr(3X)~\*{CHAR\*}
.xx "def_shell_mode,/" "" "curs_kernel:  def_prog_mode," "" curs_kernel(3X)~\*{CHAR\*}
.xx "curses window cursor." "" "curs_move:  move, wmove: move" "" curs_move(3X)~\*{CHAR\*}
.xx "" "to a curses window and advance" "cursor." "/a string of characters" curs_addstr(3X)~\*{CHAR\*}
.xx "" "/getbegyx, getmaxyx: get curses" "cursor and window coordinates." "" curs_getyx(3X)~\*{CHAR\*}
.xx "" "move, wmove: move curses window" "cursor." "curs_move: " curs_move(3X)~\*{CHAR\*}
.xx "" "/mvwdelch: delete character under" "cursor in a curses window." "" curs_delch(3X)~\*{CHAR\*}
.xx "" "/before the character under the" "cursor in a curses window." "" curs_insch(3X)~\*{CHAR\*}
.xx "" "/before character under the" "cursor in a curses window." "" curs_insstr(3X)~\*{CHAR\*}
.xx "" "position forms window" "cursor." "/pos_form_cursor:" form_cursor(3X)~\*{CHAR\*}
.xx "" "correctly position a menus" "cursor." "/pos_menu_cursor:" menu_cursor(3X)~\*{CHAR\*}
.xx "" "to a curses window and advance" "cursor." "/(with attributes)" curs_addch(3X)~\*{CHAR\*}
.xx "idcok immedok, leaveok,/" "" "curs_outopts:  clearok, idlok," "" curs_outopts(3X)~\*{CHAR\*}
.xx "overwrite, copywin: overlap and/" "" "curs_overlay:  overlay," "" curs_overlay(3X)~\*{CHAR\*}
.xx "prefresh, pnoutrefresh,/" "" "curs_pad:  newpad, subpad," "" curs_pad(3X)~\*{CHAR\*}
.xx "mvprintw, mvwprintw, vwprintw:/" "" "curs_printw:  printw, wprintw," "" curs_printw(3X)~\*{CHAR\*}
.xx "wrefresh, wnoutrefresh,/" "" "curs_refresh:  refresh," "" curs_refresh(3X)~\*{CHAR\*}
.xx "mvscanw, mvwscanw, vwscanw:/" "" "curs_scanw:  scanw, wscanw," "" curs_scanw(3X)~\*{CHAR\*}
.xx "scr_restore, scr_init, scr_set:/" "" "curs_scr_dump:  scr_dump," "" curs_scr_dump(3X)~\*{CHAR\*}
.xx "wscrl: scroll a curses window." "" "curs_scroll:  scroll, srcl," "" curs_scroll(3X)~\*{CHAR\*}
.xx "" "/getsyx, setsyx, ripoffline," "curs_set, napms: low-level/" "" curs_kernel(3X)~\*{CHAR\*}
.xx "slk_refresh, slk_noutrefresh,/" "" "curs_slk:  slk_init, slk_set," "" curs_slk(3X)~\*{CHAR\*}
.xx "erasechar, has_ic, has_il,/" "" "curs_termattrs:  baudrate," "" curs_termattrs(3X)~\*{CHAR\*}
.xx "tgetflag, tgetnum, tgetstr,/" "" "curs_termcap:  tgetent," "" curs_termcap(3X)~\*{CHAR\*}
.xx "setterm, set_curterm,/" "" "curs_terminfo:  setupterm," "" curs_terminfo(3X)~\*{CHAR\*}
.xx "touchline, untouchwin,/" "" "curs_touch:  touchwin," "" curs_touch(3X)~\*{CHAR\*}
.xx "filter, use_env, putwin,/" "" "curs_util:  unctrl, keyname," "" curs_util(3X)~\*{CHAR\*}
.xx "mvwin, subwin, derwin,/" "" "curs_window:  newwin, delwin," "" curs_window(3X)~\*{CHAR\*}
.xx "name of the user." "" "cuserid: get character login" "" cuserid(3S)~\*{PRM\*}
.xx "portions of certain UNIX or/" "" "custom: install specific" "" custom(1)~\*{ACG\*}
.xx "portions of a UNIX package." "" "custom: install specific" "" custom(1M)~\*{SARM\*}
.xx "each line of a file." "" "cut: cut out selected fields of" "" cut(1)~\*{URM\*}
.xx "line of a file." "cut:" "cut out selected fields of each" "" cut(1)~\*{URM\*}
.xx "line of a file." "fmlcut:" "cut out selected fields of each" "" fmlcut(1F)~\*{CHAR\*}
.xx "libraries to ELF." "" "cvtomflib: convert OMF (XENIX)" "" cvtomflib(1)~\*{ACG\*}
.xx "cross-reference." "" "cxref: generate C program" "" cxref(1)~\*{PRM\*}
.xx "" "Multibus  flexible disk device" "d rivers." "fd: Information for" fd(7iref)~\*{MBRMAN\*}
.xx "" "" "d258: i82258 ADMA device driver." "" d258(7iref)~\*{MBRMAN\*}
.xx "" "biod: NFS" "daemon." "" biod(1M)~\*{NUAG\*}
.xx "" "biod: NFS" "daemon." "" biod(1M)~\*{SARM\*}
.xx "" "cron: clock" "daemon." "" cron(1M)~\*{SARM\*}
.xx "" "inetd: Internet services" "daemon." "" inetd(1M)~\*{NI\*}
.xx "" "inetd: Internet services" "daemon." "" inetd(1M)~\*{NUAG\*}
.xx "" "inetd: Internet services" "daemon." "" inetd(1M)~\*{SARM\*}
.xx "" "listen: network listener" "daemon." "" listen(1M)~\*{SARM\*}
.xx "" "lockd: network lock" "daemon." "" lockd(1M)~\*{NUAG\*}
.xx "" "nfsd: NFS" "daemon." "" nfsd(1M)~\*{NUAG\*}
.xx "" "nfsd: NFS" "daemon." "" nfsd(1M)~\*{SARM\*}
.xx "" "routed: network routing" "daemon." "" routed(1M)~\*{NUAG\*}
.xx "" "routed: network routing" "daemon." "" routed(1M)~\*{SARM\*}
.xx "" "strerr: STREAMS error logger" "daemon." "" strerr(1M)~\*{SARM\*}
.xx "" "strerr: STREAMS error logger" "daemon." "" strerr(1M)~\*{STRM\*}
.xx "" "a Multibus II boot service" "daemon." "bootserver: starts" bootserver(1iref)~\*{MBRMAN\*}
.xx "" "file for syslogd system log" "daemon." "/configuration" syslog.conf(4)~\*{BSD\*}
.xx "" "rfudaemon: Remote File Sharing" "daemon process." "" rfudaemon(1M)~\*{NUAG\*}
.xx "" "rfudaemon: Remote File Sharing" "daemon process." "" rfudaemon(1M)~\*{SARM\*}
.xx "" "runacct: run" "daily accounting." "" runacct(1M)~\*{SARM\*}
.xx "Protocol server." "rarpd:" "DARPA Reverse Address Resolution" "" rarpd(1M)~\*{NUAG\*}
.xx "Protocol server." "rarpd:" "DARPA Reverse Address Resolution" "" rarpd(1M)~\*{SARM\*}
.xx "" "telnetd:" "DARPA TELNET protocol server." "" telnetd(1M)~\*{NUAG\*}
.xx "" "telnetd:" "DARPA TELNET protocol server." "" telnetd(1M)~\*{SARM\*}
.xx "Protocol server." "tftpd:" "DARPA Trivial File Transfer" "" tftpd(1M)~\*{NUAG\*}
.xx "Protocol server." "tftpd:" "DARPA Trivial File Transfer" "" tftpd(1M)~\*{SARM\*}
.xx "" "tnamed, in.tnamed:" "DARPA trivial name server." "" tnamed(1M)~\*{NUAG\*}
.xx "" "tnamed, in.tnamed:" "DARPA trivial name server." "" tnamed(1M)~\*{SARM\*}
.xx "" "intro: introduction to driver" "data." "" intro(D1DK)~\*{DDRM\*}
.xx "" "netrc: file for ftp remote login" "data." "" netrc(4)~\*{NUAG\*}
.xx "" "netrc: file for ftp remote login" "data." "" netrc(4)~\*{SARM\*}
.xx "" "prof: display profile" "data." "" prof(1)~\*{PRM\*}
.xx "" "sdgetv: synchronize shared" "data access." "" sdgetv(2)~\*{ACG\*}
.xx "" "get device driver configuration" "data." "/add, delete, update, or" idinstall(1M)~\*{ISDG\*}
.xx "" "get device driver configuration" "data." "/add, delete, update, or" idinstall(1M)~\*{SARM\*}
.xx "" "if forms field has off-screen" "data ahead or behind." "/tell" form_data(3X)~\*{CHAR\*}
.xx "" "/time a command; report process" "data and system activity." "" timex(1)~\*{URM\*}
.xx "" "hosts: host name" "data base." "" hosts(4)~\*{NI\*}
.xx "" "hosts: host name" "data base." "" hosts(4)~\*{NUAG\*}
.xx "" "hosts: host name" "data base." "" hosts(4)~\*{SARM\*}
.xx "" "netmasks: network mask" "data base." "" netmasks(4)~\*{SARM\*}
.xx "" "networks: network name" "data base." "" networks(4)~\*{NUAG\*}
.xx "" "networks: network name" "data base." "" networks(4)~\*{SARM\*}
.xx "" "protocols: protocol name" "data base." "" protocols(4)~\*{NUAG\*}
.xx "" "protocols: protocol name" "data base." "" protocols(4)~\*{SARM\*}
.xx "" "rpc: rpc program number" "data base." "" rpc(4)~\*{NI\*}
.xx "" "terminfo: terminal capability" "data base." "" terminfo(4)~\*{CHAR\*}
.xx "" "terminfo: terminal capability" "data base." "" terminfo(4)~\*{SARM\*}
.xx "" "ypcat: print values in a NIS" "data base." "" ypcat(1)~\*{NI\*}
.xx "file." "newaliases: rebuild the" "data base for the mail aliases" "" newaliases(1M)~\*{BSD\*}
.xx "" "a text string from a message" "data base." "gettxt: retrieve" gettxt(1)~\*{URM\*}
.xx "" "/dbm_open, dbm_store:" "data base subroutines." "" ndbm(3)~\*{BSD\*}
.xx "" "delete, firstkey, nextkey:" "data base subroutines." "/store," dbm(3X)~\*{BSD\*}
.xx "" "for a text string in, message" "data bases." "/of, or search" srchtxt(1)~\*{URM\*}
.xx "in the kernel." "bcopy: copy" "data between address locations" "" bcopy(D3DK)~\*{DDRM\*}
.xx "" "datab: STREAMS" "data block structure." "" datab(D4DK)~\*{DDRM\*}
.xx "" "mps_free_dmabuf: frees a list of" "data buffer descriptors." "" mps_free_dmabuf(D3D)~\*{DDRM\*}
.xx "" "/returns a pointer to a list of" "data buffer descriptors." "" mps_get_dmabuf(D3D)~\*{DDRM\*}
.xx "" "generate disk accounting" "data by user ID." "diskusg:" diskusg(1M)~\*{SARM\*}
.xx "" "execution count profile" "data." "/display line-by-line" lprof(1)~\*{PRM\*}
.xx "" "elf_rawdata: get section" "data." "elf_getdata, elf_newdata," elf_getdata(3E)~\*{PRM\*}
.xx "" "retrieve file identification" "data." "elf_getident:" elf_getident(3E)~\*{PRM\*}
.xx "" "t_rcvuderr: receive a unit" "data error indication." "" t_rcvuderr(3N)~\*{NI\*}
.xx "" "/uncompress, zcat: compress" "data for storage, uncompress and/" "" compress(1)~\*{URM\*}
.xx "" "mb2a_getreqfrag: Receives a" "data fragment of a request/" "" mb2a_getreqfrag(3tai)~\*{MBTAI\*}
.xx "" "mb2s_getreqfrag: Receives a" "data fragment of a request/" "" mb2s_getreqfrag(3tai)~\*{MBTAI\*}
.xx "" "read: read" "data from a device." "" read(D2DK)~\*{DDRM\*}
.xx "user buffer." "copyout: copy" "data from a driver buffer to a" "" copyout(D3DK)~\*{DDRM\*}
.xx "driver buffer." "copyin: copy" "data from a user buffer to a" "" copyin(D3DK)~\*{DDRM\*}
.xx "" "mps_get_soldata: copies user" "data from the message buffer." "" mps_get_soldata(D3D)~\*{DDRM\*}
.xx "" "mps_get_unsoldata: copies user" "data from the message buffer." "" mps_get_unsoldata(D3D)~\*{DDRM\*}
.xx "" "/sgetl: access long integer" "data in a machine-independent/" "" sputl(3X)~\*{PRM\*}
.xx "" "return number of bytes of" "data in a message." "msgdsize:" msgdsize(D3DK)~\*{DDRM\*}
.xx "space is not/" "/receives solicited" "data in fragments when buffer" "" mps_AMPreceive_frag(D3D)~\*{DDRM\*}
.xx "network." "spray: scatter" "data in order to check the" "" spray(3N)~\*{NI\*}
.xx "reply." "mps_get_reply_len: get" "data length for a solicited" "" mps_get_reply_len(D3D)~\*{DDRM\*}
.xx "Release 3.0." "edlina: External" "Data Link driver for iNA961" "" edlina(7iref)~\*{MBRMAN\*}
.xx "" "test whether a message is a" "data message." "datamsg:" datamsg(D3DK)~\*{DDRM\*}
.xx "connection." "t_snd: send" "data or expedited data over a" "" t_snd(3N)~\*{NI\*}
.xx "a connection." "t_rcv: receive" "data or expedited data sent over" "" t_rcv(3N)~\*{NI\*}
.xx "" "t_snd: send data or expedited" "data over a connection." "" t_snd(3N)~\*{NI\*}
.xx "" "/restores of filesystems," "data partitions, or disks." "" restore(1M)~\*{SARM\*}
.xx "" "nlsgetcall: get client's" "data passed via the listener." "" nlsgetcall(3N)~\*{NI\*}
.xx "" "or unlock process, text, or" "data." "plock: lock into memory" plock(2)~\*{PRM\*}
.xx "" "be sent to initiate a solicited" "data reply." "/a message to" mps_mk_solrply(D3D)~\*{DDRM\*}
.xx "" "/library routines for external" "data representation." "" xdr_admin(3N)~\*{NI\*}
.xx "" "/library routines for external" "data representation." "" xdr_complex(3N)~\*{NI\*}
.xx "" "/library routines for external" "data representation stream/" "" xdr_create(3N)~\*{NI\*}
.xx "" "library routines for external" "data representation." "xdr:" xdr(3N)~\*{NI\*}
.xx "" "library routines for external" "data representation." "/xdr_void:" xdr_simple(3N)~\*{NI\*}
.xx "call." "stat:" "data returned by stat system" "" stat(4)~\*{ACG\*}
.xx "call." "stat:" "data returned by stat system" "" stat(5)~\*{PRM\*}
.xx "call." "stat:" "data returned by stat system" "" stat(5)~\*{SARM\*}
.xx "" "synchronize access to a shared" "data segment." "sdenter, sdleave:" sdenter(2)~\*{ACG\*}
.xx "" "attach and detach a shared" "data segment." "sdget, sdfree:" sdget(2)~\*{ACG\*}
.xx "" "brk, sbrk: change" "data segment space allocation." "" brk(2)~\*{PRM\*}
.xx "" "t_rcv: receive data or expedited" "data sent over a connection." "" t_rcv(3N)~\*{NI\*}
.xx "using uio(D4DK)." "iovec:" "data storage structure for I/O" "" iovec(D4DK)~\*{DDRM\*}
.xx "" "intro: introduction to kernel" "data structures." "" intro(D4DK)~\*{DDRM\*}
.xx "" "intro: introduction to SCSI" "data structures." "" intro(D4I)~\*{SCSI\*}
.xx "" "intro: introduction to DMA" "data structures." "" intro(D4X)~\*{DDRM\*}
.xx "outstanding/" "/receives solicited" "data that corresponds to an" "" mps_AMPreceive(D3D)~\*{DDRM\*}
.xx "" "/sends solicited" "data that is not part of any/" "" mps_AMPsend_data(D3D)~\*{DDRM\*}
.xx "" "write: write" "data to a device." "" write(D2DK)~\*{DDRM\*}
.xx "" "rdchk: check to see if there is" "data to be read." "" rdchk(2)~\*{ACG\*}
.xx "" "be sent to initiate a solicited" "data transfer." "/a message to" mps_mk_sol(D3D)~\*{DDRM\*}
.xx "" "buf: block I/O" "data transfer structure." "" buf(D4DK)~\*{DDRM\*}
.xx "" "/elf32_xlatetom: class-dependent" "data translation." "" elf_xlate(3E)~\*{PRM\*}
.xx "" "/field_arg: forms field" "data type validation." "" form_field_validation(3X)~\*{CHAR\*}
.xx "" "nl_types: native language" "data types." "" nl_types(5)~\*{PRM\*}
.xx "" "nl_types: native language" "data types." "" nl_types(5)~\*{SARM\*}
.xx "" "types: primitive system" "data types." "" types(5)~\*{PRM\*}
.xx "" "t_rcvudata: receive a" "data unit." "" t_rcvudata(3N)~\*{NI\*}
.xx "" "t_sndudata: send a" "data unit." "" t_sndudata(3N)~\*{NI\*}
.xx "" "uiomove: copy" "data using uio(D4DK) structure." "" uiomove(D3DK)~\*{DDRM\*}
.xx "" "/associate application" "data with a panels panel." "" panel_userptr(3X)~\*{CHAR\*}
.xx "" "associate application" "data with forms." "/field_userptr:" form_field_userptr(3X)~\*{CHAR\*}
.xx "" "associate application" "data with forms." "/form_userptr:" form_userptr(3X)~\*{CHAR\*}
.xx "" "/associate application" "data with menus items." "" menu_item_userptr(3X)~\*{CHAR\*}
.xx "" "associate application" "data with menus." "/menu_userptr:" menu_userptr(3X)~\*{CHAR\*}
.xx "forms field has/" "form_data:" "data_ahead, data_behind: tell if" "" form_data(3X)~\*{CHAR\*}
.xx "structure." "" "datab: STREAMS data block" "" datab(D4DK)~\*{DDRM\*}
.xx "" "colltbl: create collation" "database." "" colltbl(1M)~\*{SARM\*}
.xx "" "inetd.conf: Internet servers" "database." "" inetd.conf(4)~\*{NUAG\*}
.xx "" "inetd.conf: Internet servers" "database." "" inetd.conf(4)~\*{SARM\*}
.xx "" "montbl: create monetary" "database." "" montbl(1M)~\*{SARM\*}
.xx "" "netconfig: network configuration" "database." "" netconfig(4)~\*{NI\*}
.xx "" "netconfig: network configuration" "database." "" netconfig(4)~\*{SARM\*}
.xx "" "publickey: public key" "database." "" publickey(4)~\*{NI\*}
.xx "" "publickey: public key" "database." "" publickey(4)~\*{NUAG\*}
.xx "" "sortbib: sort a bibliographic" "database." "" sortbib(1)~\*{BSD\*}
.xx "" "ypinit: build and install YP" "database." "" ypinit(1M)~\*{NI\*}
.xx "" "ypmake: rebuild YP" "database." "" ypmake(1M)~\*{NI\*}
.xx "" "create or extend a bibliographic" "database." "addbib:" addbib(1)~\*{BSD\*}
.xx "" "Information Service (NIS)" "database and directory/" "/Network" ypfiles(4)~\*{NI\*}
.xx "" "index to a bibliographic" "database." "/create an inverted" indxbib(1)~\*{BSD\*}
.xx "" "grpck: check group" "database entries." "" grpck(1M)~\*{BSD\*}
.xx "" "pwck: check password" "database entries." "" pwck(1M)~\*{BSD\*}
.xx "" "get network configuration" "database entry." "getnetconfig:" getnetconfig(3N)~\*{NI\*}
.xx "" "references from a bibliographic" "database." "/expand and insert" refer(1)~\*{BSD\*}
.xx "" "to the software installation" "database." "installf: add a file" installf(1M)~\*{ISDG\*}
.xx "" "references in a bibliographic" "database." "lookbib: find" lookbib(1)~\*{BSD\*}
.xx "" "a new key in the publickey" "database." "newkey: create" newkey(1M)~\*{NI\*}
.xx "" "a new key in the publickey" "database." "newkey: create" newkey(1M)~\*{NUAG\*}
.xx "" "join: relational" "database operator." "" join(1)~\*{URM\*}
.xx "" "Ethernet address to hostname" "database or domain." "ethers:" ethers(4)~\*{NUAG\*}
.xx "" "Ethernet address to hostname" "database or domain." "ethers:" ethers(4)~\*{SARM\*}
.xx "" "remove a file from software" "database." "removef:" removef(1M)~\*{ISDG\*}
.xx "" "format and print a bibliographic" "database." "roffbib:" roffbib(1)~\*{BSD\*}
.xx "" "delete, firstkey, nextkey:" "database subroutines." "/store," dbm(3)~\*{NI\*}
.xx "" "curses interfaces to terminfo" "database." "/tigetnum, tigetstr:" curs_terminfo(3X)~\*{CHAR\*}
.xx "" "a terminal or query terminfo" "database." "tput: initialize" tput(1)~\*{URM\*}
.xx "has/" "form_data:  data_ahead," "data_behind: tell if forms field" "" form_data(3X)~\*{CHAR\*}
.xx "" "UDP: Internet User" "Datagram Protocol." "" UDP(7)~\*{NI\*}
.xx "" "UDP: Internet User" "Datagram Protocol." "" UDP(7)~\*{NUAG\*}
.xx "" "UDP: Internet User" "Datagram Protocol." "" UDP(7)~\*{SARM\*}
.xx "is a data message." "" "datamsg: test whether a message" "" datamsg(D3DK)~\*{DDRM\*}
.xx "" "date: print and set the" "date." "" date(1)~\*{URM\*}
.xx "" "ftime: get time and" "date." "" ftime(2)~\*{ACG\*}
.xx "" "ftime: get" "date and time." "" ftime(3C)~\*{BSD\*}
.xx "" "getdate: convert user format" "date and time." "" getdate(3C)~\*{PRM\*}
.xx "" "settimeofday: get or set the" "date and time." "gettimeofday," gettimeofday(3)~\*{BSD\*}
.xx "" "settimeofday: get or set the" "date and time." "gettimeofday," gettimeofday(3C)~\*{PRM\*}
.xx "" "/gmtime, asctime, tzset: convert" "date and time to string." "" ctime(3C)~\*{PRM\*}
.xx "" "/cftime, ascftime: convert" "date and time to string." "" strftime(3C)~\*{PRM\*}
.xx "" "rdate: set system" "date from a remote host." "" rdate(1M)~\*{NUAG\*}
.xx "" "rdate: set system" "date from a remote host." "" rdate(1M)~\*{SARM\*}
.xx "" "prompt for and validate a" "date." "/helpdate, valdate:" ckdate(1)~\*{ISDG\*}
.xx "" "prompt for and validate a" "date." "/helpdate, valdate:" ckdate(1)~\*{SARM\*}
.xx "" "" "date: print and set the date." "" date(1)~\*{URM\*}
.xx "" "the access and modification" "dates of files." "settime: change" settime(1)~\*{ACG\*}
.xx "" "verify and return a time of" "day." "cktime: display a prompt;" cktime(1)~\*{ISDG\*}
.xx "" "verify and return a time of" "day." "cktime: display a prompt;" cktime(1)~\*{SARM\*}
.xx "store, delete, firstkey,/" "" "dbm:  dbminit, dbmclose, fetch," "" dbm(3X)~\*{BSD\*}
.xx "store, delete, firstkey,/" "" "dbm, dbminit, dbmclose, fetch," "" dbm(3)~\*{NI\*}
.xx "" "Information Service (NIS)" "dbm file." "/make a Network" makedbm(1M)~\*{NI\*}
.xx "dbm_delete, dbm_error,/" "ndbm:" "dbm_clearerr, dbm_close," "" ndbm(3)~\*{BSD\*}
.xx "dbm_error,/" "ndbm:  dbm_clearerr," "dbm_close, dbm_delete," "" ndbm(3)~\*{BSD\*}
.xx "firstkey,/" "dbm, dbminit," "dbmclose, fetch, store, delete," "" dbm(3)~\*{NI\*}
.xx "firstkey,/" "dbm:  dbminit," "dbmclose, fetch, store, delete," "" dbm(3X)~\*{BSD\*}
.xx "" "ndbm:  dbm_clearerr, dbm_close," "dbm_delete, dbm_error,/" "" ndbm(3)~\*{BSD\*}
.xx "" "/dbm_close, dbm_delete," "dbm_error, dbm_fetch,/" "" ndbm(3)~\*{BSD\*}
.xx "" "/dbm_delete, dbm_error," "dbm_fetch, dbm_firstkey,/" "" ndbm(3)~\*{BSD\*}
.xx "dbm_open,/" "/dbm_error, dbm_fetch," "dbm_firstkey, dbm_nextkey," "" ndbm(3)~\*{BSD\*}
.xx "delete, firstkey, nextkey:/" "dbm," "dbminit, dbmclose, fetch, store," "" dbm(3)~\*{NI\*}
.xx "delete, firstkey, nextkey:/" "dbm:" "dbminit, dbmclose, fetch, store," "" dbm(3X)~\*{BSD\*}
.xx "" "/dbm_fetch, dbm_firstkey," "dbm_nextkey, dbm_open,/" "" ndbm(3)~\*{BSD\*}
.xx "" "/dbm_firstkey, dbm_nextkey," "dbm_open, dbm_store: data base/" "" ndbm(3)~\*{BSD\*}
.xx "" "/dbm_nextkey, dbm_open," "dbm_store: data base/" "" ndbm(3)~\*{BSD\*}
.xx "panel message delivery." "" "dbon: sets target for front" "" dbon(8iref)~\*{MBRMAN\*}
.xx "" "" "dc: desk calculator." "" dc(1)~\*{URM\*}
.xx "systems for optimal access/" "" "dcopy (generic): copy file" "" dcopy(1M)~\*{SARM\*}
.xx "for optimal access time." "" "dcopy (s5): copy s5 file systems" "" dcopy(1M)~\*{SARM\*}
.xx "" "" "dd: convert and copy a file." "" dd(1M)~\*{SARM\*}
.xx "" "" "dd: convert and copy a file." "" dd(1M)~\*{URM\*}
.xx "" "/library routines for" "dealing with creation and/" "" rpc_clnt_create(3N)~\*{NI\*}
.xx "server/" "/library routines for" "dealing with the creation of" "" rpc_svc_create(3N)~\*{NI\*}
.xx "for buffer page/" "bp_mapout:" "deallocate virtual address space" "" bp_mapout(D3DK)~\*{DDRM\*}
.xx "driver." "rci:" "debug console/rci protocol" "" rci(7iref)~\*{MBRMAN\*}
.xx "" "ctrace: C program" "debugger." "" ctrace(1)~\*{PRM\*}
.xx "" "fsdb (s5): s5 file system" "debugger." "" fsdb(1M)~\*{SARM\*}
.xx "" "kdb: kernel" "debugger." "" kdb(1M)~\*{SARM\*}
.xx "" "sdb: symbolic" "debugger." "" sdb(1)~\*{PRM\*}
.xx "" "strip: strip symbol table," "debugging and line number/" "" strip(1)~\*{PRM\*}
.xx "" "to contact remote system with" "debugging on." "Uutry: try" Uutry(1M)~\*{SARM\*}
.xx "" "/convert floating-point value to" "decimal record." "" floating_to_decimal(3)~\*{BSD\*}
.xx "" "/decimal_to_extended: convert" "decimal record to floating-point/" "" decimal_to_floating(3)~\*{BSD\*}
.xx "" "/decimal_to_single," "decimal_to_double,/" "" decimal_to_floating(3)~\*{BSD\*}
.xx "decimal/" "/decimal_to_double," "decimal_to_extended: convert" "" decimal_to_floating(3)~\*{BSD\*}
.xx " decimal_to_single,/" "" "decimal_to_floating:" "" decimal_to_floating(3)~\*{BSD\*}
.xx "" "decimal_to_floating:" "decimal_to_single,/" "" decimal_to_floating(3)~\*{BSD\*}
.xx "" "/hide_panel, panel_hidden: panels" "deck manipulation routines." "" panel_show(3X)~\*{CHAR\*}
.xx "" "/top_panel, bottom_panel: panels" "deck manipulation routines." "" panel_top(3X)~\*{CHAR\*}
.xx "" "/panel_above, panel_below: panels" "deck traversal primitives." "" panel_above(3X)~\*{CHAR\*}
.xx "" "/STREAMS driver and module" "declaration structure." "" streamtab(D4DK)~\*{DDRM\*}
.xx "" "/encode a binary file, or" "decode its ASCII representation." "" uuencode(1C)~\*{URM\*}
.xx "" "/mps_msg_isreq: macros used to" "decode message handler message." "" mps_msg(D3D)~\*{DDRM\*}
.xx "" "keylogin:" "decrypt and store secret key." "" keylogin(1)~\*{NI\*}
.xx "" "keylogin:" "decrypt and store secret key." "" keylogin(1)~\*{NUAG\*}
.xx "" "kill: terminate a process by" "default." "" kill(1)~\*{URM\*}
.xx "" "login: login" "default file." "" login(4)~\*{SARM\*}
.xx "" "timezone: set" "default system time zone." "" timezone(4)~\*{PRM\*}
.xx "" "timezone: set" "default system time zone." "" timezone(4)~\*{SARM\*}
.xx "" "the current form field to its" "default values." "reset: reset" reset(1F)~\*{CHAR\*}
.xx "" "vfstab: table of file system" "defaults." "" vfstab(4)~\*{SARM\*}
.xx "" "admin: installation" "defaults file." "" admin(4)~\*{SARM\*}
.xx "" "write the manufacturer's" "defect list." "/and optionally" mdl(1iref)~\*{MBRMAN\*}
.xx "" "intro: introduction to kernel" "#define's." "" intro(D5DK)~\*{DDRM\*}
.xx "" "groupdel: delete a group" "definition from the system." "" groupdel(1M)~\*{SARM\*}
.xx "" "/add (create) a new group" "definition on the system." "" groupadd(1M)~\*{SARM\*}
.xx "" "groupmod: modify a group" "definition on the system." "" groupmod(1M)~\*{SARM\*}
.xx "" "IEEE floating point" "definitions." "floatingpoint:" floatingpoint(3)~\*{BSD\*}
.xx "" "eqnchar: special character" "definitions for eqn." "" eqnchar(7)~\*{BSD\*}
.xx "reset_prog_mode,/" "curs_kernel:" "def_prog_mode, def_shell_mode," "" curs_kernel(3X)~\*{CHAR\*}
.xx "" "curs_kernel:  def_prog_mode," "def_shell_mode, reset_prog_mode,/" "" curs_kernel(3X)~\*{CHAR\*}
.xx "for a specified number of clock/" "" "delay: delay process execution" "" delay(D3DK)~\*{DDRM\*}
.xx "specified number of/" "delay:" "delay process execution for a" "" delay(D3DK)~\*{DDRM\*}
.xx "" "/filter, use_env, putwin, getwin," "delay_output, flushinp:/" "" curs_util(3X)~\*{CHAR\*}
.xx "mvwdelch: delete/" "curs_delch:" "delch, wdelch, mvdelch," "" curs_delch(3X)~\*{CHAR\*}
.xx "" "/setupterm, setterm, set_curterm," "del_curterm, restartterm, tparm,/" "" curs_terminfo(3X)~\*{CHAR\*}
.xx "the system." "groupdel:" "delete a group definition from" "" groupdel(1M)~\*{SARM\*}
.xx "system." "userdel:" "delete a user's login from the" "" userdel(1M)~\*{SARM\*}
.xx "curses/" "/insertln, \%winsertln:" "delete and insert lines in a" "" curs_deleteln(3X)~\*{CHAR\*}
.xx "a/" "/wdelch, mvdelch, mvwdelch:" "delete character under cursor in" "" curs_delch(3X)~\*{CHAR\*}
.xx "" "/dbminit, dbmclose, fetch, store," "delete, firstkey, nextkey: data/" "" dbm(3X)~\*{BSD\*}
.xx "" "dbminit, dbmclose, fetch, store," "delete, firstkey, nextkey:/" "dbm," dbm(3)~\*{NI\*}
.xx "driver/" "idinstall: add," "delete, update, or get device" "" idinstall(1M)~\*{ISDG\*}
.xx "driver/" "idinstall: add," "delete, update, or get device" "" idinstall(1M)~\*{SARM\*}
.xx "\%winsdelln,/" "curs_deleteln:" "deleteln, wdeleteln, insdelln," "" curs_deleteln(3X)~\*{CHAR\*}
.xx "" "bgets: read stream up to next" "delimiter." "" bgets(3G)~\*{PRM\*}
.xx "" "basename, dirname:" "deliver portions of path names." "" basename(1)~\*{URM\*}
.xx "" "tail:" "deliver the last part of a file." "" tail(1)~\*{URM\*}
.xx "" "smtpqer: queue mail for" "delivery by SMTP." "" smtpqer(1M)~\*{SARM\*}
.xx "" "target for front panel message" "delivery." "dbon: sets" dbon(8iref)~\*{MBRMAN\*}
.xx "panels." "panel_new:  new_panel," "del_panel: create and destroy" "" panel_new(3X)~\*{CHAR\*}
.xx "" "/endwin, isendwin, set_term," "delscreen: curses screen/" "" curs_initscr(3X)~\*{CHAR\*}
.xx "or task removal tool." "" "delsysadm: sysadm interface menu" "" delsysadm(1M)~\*{ISDG\*}
.xx "or task removal tool." "" "delsysadm: sysadm interface menu" "" delsysadm(1M)~\*{SARM\*}
.xx "an SCCS file." "prt: display the" "delta and commentary history of" "" prt(1)~\*{BSD\*}
.xx "" "the delta comment of an SCCS" "delta." "cdc: change" cdc(1)~\*{PRM\*}
.xx "" "delta: make a" "delta (change) to an SCCS file." "" delta(1)~\*{PRM\*}
.xx "" "cdc: change the" "delta comment of an SCCS delta." "" cdc(1)~\*{PRM\*}
.xx "" "rmdel: remove a" "delta from an SCCS file." "" rmdel(1)~\*{PRM\*}
.xx "an SCCS file." "" "delta: make a delta (change) to" "" delta(1)~\*{PRM\*}
.xx "" "comb: combine SCCS" "deltas." "" comb(1)~\*{PRM\*}
.xx "mvderwin,/" "curs_window:  newwin," "delwin, mvwin, subwin, derwin," "" curs_window(3X)~\*{CHAR\*}
.xx "" "mesg: permit or" "deny messages." "" mesg(1)~\*{URM\*}
.xx "files." "" "depend: software dependencies" "" depend(4)~\*{ISDG\*}
.xx "" "ldd: list dynamic" "dependencies." "" ldd(1)~\*{PRM\*}
.xx "" "depend: software" "dependencies files." "" depend(4)~\*{ISDG\*}
.xx "and eqn constructs." "" "deroff: remove nroff, troff, tbl" "" deroff(1)~\*{BSD\*}
.xx "and eqn constructs." "" "deroff: remove nroff/troff, tbl," "" deroff(1)~\*{URM\*}
.xx "" "/newwin, delwin, mvwin, subwin," "derwin, mvderwin, dupwin,/" "" curs_window(3X)~\*{CHAR\*}
.xx "" "copy a character to space" "described by uio(D4DK)/" "ureadc:" ureadc(D3DK)~\*{DDRM\*}
.xx "" "return a character from space" "described by uio(D4DK)/" "uwritec:" uwritec(D3DK)~\*{DDRM\*}
.xx "" "description into a terminfo" "description." "/convert a termcap" captoinfo(1M)~\*{CHAR\*}
.xx "" "description into a terminfo" "description." "/convert a termcap" captoinfo(1M)~\*{SARM\*}
.xx "" "pkgmap: package contents" "description file." "" pkgmap(4)~\*{ISDG\*}
.xx "" "captoinfo: convert a termcap" "description into a terminfo/" "" captoinfo(1M)~\*{CHAR\*}
.xx "" "captoinfo: convert a termcap" "description into a terminfo/" "" captoinfo(1M)~\*{SARM\*}
.xx "" "get menus item name and" "description." "/item_description:" menu_item_name(3X)~\*{CHAR\*}
.xx "" "compare or print out terminfo" "descriptions." "infocmp:" infocmp(1M)~\*{CHAR\*}
.xx "" "compare or print out terminfo" "descriptions." "infocmp:" infocmp(1M)~\*{SARM\*}
.xx "" "close: close a file" "descriptor." "" close(2)~\*{PRM\*}
.xx "" "dup2: duplicate an open file" "descriptor." "" dup2(3C)~\*{PRM\*}
.xx "" "dup: duplicate an open file" "descriptor." "" dup(2)~\*{PRM\*}
.xx "" "elf_begin: make a file" "descriptor." "" elf_begin(3E)~\*{PRM\*}
.xx "" "elf_cntl: control a file" "descriptor." "" elf_cntl(3E)~\*{PRM\*}
.xx "" "elf_update: update an ELF" "descriptor." "" elf_update(3E)~\*{PRM\*}
.xx "" "isastream: test a file" "descriptor." "" isastream(3C)~\*{STRM\*}
.xx "" "allocate a DMA buffer" "descriptor." "dma_get_buf:" dma_get_buf(D3X)~\*{DDRM\*}
.xx "" "a name from a STREAMS-based file" "descriptor." "fdetach: detach" fdetach(1M)~\*{STRM\*}
.xx "" "a name from a STREAMS-based file" "descriptor." "fdetach: detach" fdetach(3C)~\*{STRM\*}
.xx "" "/dev/fd: file" "descriptor files." "" fd(4)~\*{SARM\*}
.xx "" "previously allocated DMA buffer" "descriptor." "/free a" dma_free_buf(D3X)~\*{DDRM\*}
.xx "" "dma_buf: DMA buffer" "descriptor structure." "" dma_buf(D4X)~\*{DDRM\*}
.xx "" "getdtablesize: get" "descriptor table size." "" getdtablesize(3)~\*{BSD\*}
.xx "" "/attach a STREAMS-based file" "descriptor to an object in the/" "" fattach(3C)~\*{STRM\*}
.xx "" "frees a list of data buffer" "descriptors." "mps_free_dmabuf:" mps_free_dmabuf(D3D)~\*{DDRM\*}
.xx "" "pointer to a list of data buffer" "descriptors." "/returns a" mps_get_dmabuf(D3D)~\*{DDRM\*}
.xx "" "for certain board types in the" "designated slot." "/checks" ics_agent_cmp(D3D)~\*{DDRM\*}
.xx "" "dc:" "desk calculator." "" dc(1)~\*{URM\*}
.xx "" "/free_field,: create and" "destroy forms fields." "" form_field_new(3X)~\*{CHAR\*}
.xx "" "new_form, free_form: create and" "destroy forms." "form_new: " form_new(3X)~\*{CHAR\*}
.xx "" "/new_item, free_item: create and" "destroy menus items." "" menu_item_new(3X)~\*{CHAR\*}
.xx "" "new_menu, free_menu: create and" "destroy menus." "menu_new: " menu_new(3X)~\*{CHAR\*}
.xx "" "new_panel, del_panel: create and" "destroy panels." "panel_new: " panel_new(3X)~\*{CHAR\*}
.xx "STREAMS-based file/" "fdetach:" "detach a name from a" "" fdetach(1M)~\*{STRM\*}
.xx "STREAMS-based file/" "fdetach:" "detach a name from a" "" fdetach(3C)~\*{STRM\*}
.xx "" "sdget, sdfree: attach and" "detach a shared data segment." "" sdget(2)~\*{ACG\*}
.xx "" "sigaction:" "detailed signal management." "" sigaction(2)~\*{PRM\*}
.xx "file." "access:" "determine accessibility of a" "" access(2)~\*{PRM\*}
.xx "DMA command." "dma_get_best_mode:" "determine best transfer mode for" "" dma_get_best_mode(D3X)~\*{DDRM\*}
.xx "" "fstyp (generic):" "determine file system type." "" fstyp(1M)~\*{SARM\*}
.xx "" "elf_kind:" "determine file type." "" elf_kind(3E)~\*{PRM\*}
.xx "" "file:" "determine file type." "" file(1)~\*{URM\*}
.xx "pages." "mincore:" "determine residency of memory" "" mincore(2)~\*{PRM\*}
.xx "" "/fpclassl, unordered, unorderedl:" "determine type of floating-point/" "" isnan(3C)~\*{PRM\*}
.xx "buffer is encrypted." "isencrypt:" "determine whether a character" "" isencrypt(3G)~\*{PRM\*}
.xx "are privileged." "drv_priv:" "determine whether credentials" "" drv_priv(D3DK)~\*{DDRM\*}
.xx "can accept binary/" "ckbinarsys:" "determine whether remote system" "" ckbinarsys(1M)~\*{SARM\*}
.xx "attributes." "" "devattr: lists device" "" devattr(1M)~\*{SARM\*}
.xx "" "" "/dev/fd: file descriptor files." "" fd(4)~\*{SARM\*}
.xx "" "" "devflag: driver flags." "" devflag(D1D)~\*{DDRM\*}
.xx "exclusive use." "" "devfree: release devices from" "" devfree(1M)~\*{SARM\*}
.xx "" "close: relinquish access to a" "device." "" close(D2DK)~\*{DDRM\*}
.xx "" "init: initialize a" "device." "" init(D2D)~\*{DDRM\*}
.xx "" "ioctl: control" "device." "" ioctl(2)~\*{PRM\*}
.xx "" "ioctl: control a character" "device." "" ioctl(D2DK)~\*{DDRM\*}
.xx "" "open: gain access to a" "device." "" open(D2DK)~\*{DDRM\*}
.xx "" "read: read data from a" "device." "" read(D2DK)~\*{DDRM\*}
.xx "" "tapecntl: tape control for tape" "device." "" tapecntl(1)~\*{URM\*}
.xx "" "write: write data to a" "device." "" write(D2DK)~\*{DDRM\*}
.xx "" "getvol: verifies" "device accessibility." "" getvol(1M)~\*{SARM\*}
.xx "" "scsi_ad: SCSI" "device address structure." "" scsi_ad(D4I)~\*{SCSI\*}
.xx "" "start: initialize a" "device at system start-up." "" start(D2DK)~\*{DDRM\*}
.xx "" "devattr: lists" "device attributes." "" devattr(1M)~\*{SARM\*}
.xx "" "for Multibus  flexible disk" "device d rivers." "/Information" fd(7iref)~\*{MBRMAN\*}
.xx "" "/terminal controller script" "device driver." "" atcs(7iref)~\*{MBRMAN\*}
.xx "" "console: console port" "device driver." "" console(7iref)~\*{MBRMAN\*}
.xx "" "d258: i82258 ADMA" "device driver." "" d258(7iref)~\*{MBRMAN\*}
.xx "" "dma: DMA" "device driver." "" dma(7iref)~\*{MBRMAN\*}
.xx "" "iasy: asynchronous (terminal)" "device driver." "" iasy(7iref)~\*{MBRMAN\*}
.xx "" "ics: Interconnect Space" "device driver." "" ics(7iref)~\*{MBRMAN\*}
.xx "" "mpc: MPC" "device driver." "" mpc(7iref)~\*{MBRMAN\*}
.xx "" "mps: Message Passing Space" "device driver." "" mps(7iref)~\*{MBRMAN\*}
.xx "" "/iSBC 186/530 Ethernet controller" "device driver and MIX 386/530/" "" i530(7iref)~\*{MBRMAN\*}
.xx "" "controller interface" "device driver." "/communications" cci(7iref)~\*{MBRMAN\*}
.xx "" "/add, delete, update, or get" "device driver configuration/" "" idinstall(1M)~\*{ISDG\*}
.xx "" "/add, delete, update, or get" "device driver configuration/" "" idinstall(1M)~\*{SARM\*}
.xx "" "386/258 peripheral controller" "device driver." "i258: iSBC" i258(7iref)~\*{MBRMAN\*}
.xx "" "354 dual channel serial-port" "device driver." "i354: iSBX" i354(7iref)~\*{MBRMAN\*}
.xx "" "serial communications controller" "device driver." "/iSBC 186/410" i410(7iref)~\*{MBRMAN\*}
.xx "" "peripheral controller tape" "device driver." "/iSBC 386/258" i258tp(7iref)~\*{MBRMAN\*}
.xx "serial, and PS/2/" "mouse: mouse" "device driver supporting bus," "" mouse(7)~\*{ISDG\*}
.xx "serial, and PS/2/" "mouse: mouse" "device driver supporting bus," "" mouse(7)~\*{SARM\*}
.xx "" "4.0 OSI Transport Service (ots)" "device driver." "/V/386 Release" ots(7iref)~\*{MBRMAN\*}
.xx "" "td: Multibus tape" "device drivers." "" td(7iref)~\*{MBRMAN\*}
.xx "" "for Multibus II hard disk" "device drivers." "hd: information" hd(7iref)~\*{MBRMAN\*}
.xx "" "to the slave pseudo-terminal" "device." "grantpt: grant access" grantpt(3C)~\*{STRM\*}
.xx "" "listdgrp: lists members of a" "device group." "" listdgrp(1M)~\*{SARM\*}
.xx "" "putdgrp: edits" "device group table." "" putdgrp(1)~\*{SARM\*}
.xx "devices that/" "getdgrp: lists" "device groups which contain" "" getdgrp(1M)~\*{SARM\*}
.xx "" "archives:" "device header file." "" archives(4)~\*{SARM\*}
.xx "" "intr: process a" "device interrupt." "" intr(D2D)~\*{DDRM\*}
.xx "" "mapchan: Configure tty" "device mapping." "" mapchan(1M)~\*{SARM\*}
.xx "" "mapchan: Format of tty" "device mapping files." "" mapchan(4)~\*{SARM\*}
.xx "" "mapping for memory-mapped" "device." "mmap: check virtual" mmap(D2DK)~\*{DDRM\*}
.xx "" "devnm:" "device name." "" devnm(1M)~\*{SARM\*}
.xx "" "getemajor: get external major" "device number." "" getemajor(D3DK)~\*{DDRM\*}
.xx "" "geteminor: get external minor" "device number." "" geteminor(D3DK)~\*{DDRM\*}
.xx "" "getmajor: get internal major" "device number." "" getmajor(D3DK)~\*{DDRM\*}
.xx "" "getminor: get internal minor" "device number." "" getminor(D3DK)~\*{DDRM\*}
.xx "" "makedev, major, minor: manage a" "device number." "" makedev(3C)~\*{PRM\*}
.xx "" "number to SCSI pass-through" "device number." "/convert device" sdi_getdev(D3I)~\*{SCSI\*}
.xx "" "external to internal major" "device number." "/convert" etoimajor(D3DK)~\*{DDRM\*}
.xx "" "internal to external major" "device number." "/convert" itoemajor(D3DK)~\*{DDRM\*}
.xx "minor numbers." "makedevice: make" "device number from major and" "" makedevice(D3DK)~\*{DDRM\*}
.xx "" "sdi_getdev: convert" "device number to SCSI/" "" sdi_getdev(D3I)~\*{SCSI\*}
.xx "" "clone: open any major/minor" "device pair on a STREAMS driver." "" clone(7)~\*{STRM\*}
.xx "" "of the slave pseudo-terminal" "device." "ptsname: get name" ptsname(3C)~\*{STRM\*}
.xx "" "return size of logical block" "device." "size:" size(D2DK)~\*{DDRM\*}
.xx "" "putdev: edits" "device table." "" putdev(1)~\*{SARM\*}
.xx "" "font and video mode for a video" "device." "vidi: sets the" vidi(1)~\*{SARM\*}
.xx "Administration." "SA:" "devices administered by System" "" sa(7)~\*{SARM\*}
.xx "" "getdev: lists" "devices based on criteria." "" getdev(1M)~\*{SARM\*}
.xx "" "and PS/2 compatible mouse" "devices." "/bus, serial," mouse(7)~\*{ISDG\*}
.xx "" "and PS/2 compatible mouse" "devices." "/bus, serial," mouse(7)~\*{SARM\*}
.xx "" "devreserv: reserves" "devices for exclusive use." "" devreserv(1M)~\*{SARM\*}
.xx "" "devfree: release" "devices from exclusive use." "" devfree(1M)~\*{SARM\*}
.xx "" "/device groups which contain" "devices that match criteria." "" getdgrp(1M)~\*{SARM\*}
.xx "" "" "devnm: device name." "" devnm(1M)~\*{SARM\*}
.xx "exclusive use." "" "devreserv: reserves devices for" "" devreserv(1M)~\*{SARM\*}
.xx "number of free disk blocks and/" "" "df (generic), dfspace: report" "" df(""1M"")~\*{SARM\*}
.xx "number of free disk blocks and/" "" "df (generic), dfspace: report" "" df(""1M"")~\*{URM\*}
.xx "file systems." "" "df: report free disk space on" "" df(1)~\*{BSD\*}
.xx "disk blocks and i-nodes for s5/" "" "df (s5): report number of free" "" df(1M)~\*{SARM\*}
.xx "on ufs file systems." "" "df (ufs): report free disk space" "" df(1M)~\*{SARM\*}
.xx "resource information." "" "dfmounts: display mounted" "" dfmounts(1M)~\*{NUAG\*}
.xx "resource information." "" "dfmounts: display mounted" "" dfmounts(1M)~\*{SARM\*}
.xx "resource information." "" "dfmounts: display mounted NFS" "" dfmounts(1M)~\*{NUAG\*}
.xx "resource information." "" "dfmounts: display mounted NFS" "" dfmounts(1M)~\*{SARM\*}
.xx "resource information." "" "dfmounts: display mounted RFS" "" dfmounts(1M)~\*{NUAG\*}
.xx "resource information." "" "dfmounts: display mounted RFS" "" dfmounts(1M)~\*{SARM\*}
.xx "resources from remote or local/" "" "dfshares: list available" "" dfshares(1M)~\*{NUAG\*}
.xx "resources from remote or local/" "" "dfshares: list available" "" dfshares(1M)~\*{SARM\*}
.xx "resources from remote systems." "" "dfshares: list available NFS" "" dfshares(1M)~\*{NUAG\*}
.xx "resources from remote systems." "" "dfshares: list available NFS" "" dfshares(1M)~\*{SARM\*}
.xx "resources from remote systems." "" "dfshares: list available RFS" "" dfshares(1M)~\*{NUAG\*}
.xx "resources from remote systems." "" "dfshares: list available RFS" "" dfshares(1M)~\*{SARM\*}
.xx "disk blocks and/" "df (generic)," "dfspace: report number of free" "" df(""1M"")~\*{SARM\*}
.xx "disk blocks and/" "df (generic)," "dfspace: report number of free" "" df(""1M"")~\*{URM\*}
.xx "for sharing resources." "" "dfstab: file containing commands" "" dfstab(4)~\*{NUAG\*}
.xx "for sharing resources." "" "dfstab: file containing commands" "" dfstab(4)~\*{SARM\*}
.xx "" "PostScript translator for" "Diablo 630 files." "postdaisy:" postdaisy(1)~\*{URM\*}
.xx "" "dlerror: get" "diagnostic information." "" dlerror(3X)~\*{PRM\*}
.xx "terminal line connection." "" "dial: establish an outgoing" "" dial(3C)~\*{NI\*}
.xx "" "look: find words in the system" "dictionary or lines in a sorted/" "" look(1)~\*{BSD\*}
.xx "" "bdiff: big" "diff." "" bdiff(1)~\*{URM\*}
.xx "comparator." "" "diff: differential file" "" diff(1)~\*{URM\*}
.xx "comparison." "" "diff3: 3-way differential file" "" diff3(1)~\*{URM\*}
.xx "times." "difftime: computes the" "difference between two calendar" "" difftime(3C)~\*{PRM\*}
.xx "a troff input/" "diffmk: mark" "differences between versions of" "" diffmk(1)~\*{BSD\*}
.xx "" "sdiff: print file" "differences side-by-side." "" sdiff(1)~\*{URM\*}
.xx "" "Release 4 locale information to" "different format." "/convert" maplocale(1M)~\*{ACG\*}
.xx "" "diff:" "differential file comparator." "" diff(1)~\*{URM\*}
.xx "" "diff3: 3-way" "differential file comparison." "" diff3(1)~\*{URM\*}
.xx "versions of a troff input file." "" "diffmk: mark differences between" "" diffmk(1)~\*{BSD\*}
.xx "difference between two calendar/" "" "difftime: computes the" "" difftime(3C)~\*{PRM\*}
.xx "" "wd: Western" "Digital 8003 Adapter Board." "" wd(7)~\*{SARM\*}
.xx "directories." "" "dir (s5): format of s5" "" dir(4)~\*{SARM\*}
.xx "directories." "" "dir (ufs): format of ufs" "" dir(4)~\*{SARM\*}
.xx "" "" "dircmp: directory comparison." "" dircmp(1)~\*{URM\*}
.xx "" "send a message in the opposite" "direction in a stream." "qreply:" qreply(D3DK)~\*{DDRM\*}
.xx "" "sockio: ioctls that operate" "directly on sockets." "" sockio(7)~\*{NI\*}
.xx "" "dir (ufs): format of ufs" "directories." "" dir(4)~\*{SARM\*}
.xx "" "mkdir: make" "directories." "" mkdir(1)~\*{URM\*}
.xx "" "rm, rmdir: remove files or" "directories." "" rm(1)~\*{URM\*}
.xx "file." "uucheck: check the uucp" "directories and permissions" "" uucheck(1M)~\*{SARM\*}
.xx "" "mkdirp, rmdirp: create, remove" "directories in a path." "" mkdirp(3G)~\*{PRM\*}
.xx "" "link and unlink files and" "directories." "link, unlink:" link(1M)~\*{SARM\*}
.xx "" "search for named file in named" "directories." "pathfind:" pathfind(3G)~\*{PRM\*}
.xx "" "request restore of files and" "directories." "urestore:" urestore(1M)~\*{SARM\*}
.xx "" "cd: change working" "directory." "" cd(1)~\*{URM\*}
.xx "" "chdir, fchdir: change working" "directory." "" chdir(2)~\*{PRM\*}
.xx "" "chroot: change root" "directory." "" chroot(2)~\*{PRM\*}
.xx "" "ls, lc: list contents of" "directory." "" ls(1)~\*{ACG\*}
.xx "" "ls: list the contents of a" "directory." "" ls(1)~\*{BSD\*}
.xx "" "ls: list contents of" "directory." "" ls(1)~\*{URM\*}
.xx "" "mkdir: make a" "directory." "" mkdir(2)~\*{PRM\*}
.xx "" "mvdir: move a" "directory." "" mvdir(1M)~\*{SARM\*}
.xx "" "rmdir: remove a" "directory." "" rmdir(2)~\*{PRM\*}
.xx "" "scandir, alphasort: scan a" "directory." "" scandir(3)~\*{BSD\*}
.xx "" "uucleanup: uucp spool" "directory clean-up." "" uucleanup(1M)~\*{SARM\*}
.xx "" "dircmp:" "directory comparison." "" dircmp(1)~\*{URM\*}
.xx "file system/" "getdents: read" "directory entries and put in a" "" getdents(2)~\*{PRM\*}
.xx "" "dirent: file system independent" "directory entry." "" dirent(4)~\*{SARM\*}
.xx "" "unlink: remove" "directory entry." "" unlink(2)~\*{PRM\*}
.xx "" "chroot: change root" "directory for a command." "" chroot(1M)~\*{SARM\*}
.xx "" "get pathname of current working" "directory." "getcwd:" getcwd(3C)~\*{PRM\*}
.xx "" "pwd: working" "directory name." "" pwd(1)~\*{URM\*}
.xx "" "dirname: report the parent" "directory name of a file path/" "" dirname(3G)~\*{PRM\*}
.xx "telldir, seekdir, rewinddir,/" "" "directory: opendir, readdir," "" directory(3C)~\*{BSD\*}
.xx "telldir, seekdir, rewinddir,/" "" "directory: opendir, readdir," "" directory(3C)~\*{PRM\*}
.xx "" "seekdir, rewinddir, closedir:" "directory operations." "/telldir," directory(3C)~\*{BSD\*}
.xx "" "seekdir, rewinddir, closedir:" "directory operations." "/telldir," directory(3C)~\*{PRM\*}
.xx "ordinary file." "mknod: make a" "directory, or a special or" "" mknod(2)~\*{ACG\*}
.xx "ordinary file." "mknod: make a" "directory, or a special or" "" mknod(2)~\*{PRM\*}
.xx "" "number of disk blocks used per" "directory or file." "/display the" du(1M)~\*{BSD\*}
.xx "" "getwd: get current working" "directory pathname." "" getwd(3)~\*{BSD\*}
.xx "" "restore file to original" "directory." "restore:" restore(1)~\*{ACG\*}
.xx "ttyname." "ttysrch:" "directory search list for" "" ttysrch(4)~\*{SARM\*}
.xx "" "whois: Internet user name" "directory service." "" whois(1)~\*{NUAG\*}
.xx "" "whois: Internet user name" "directory service." "" whois(1)~\*{URM\*}
.xx "" "/Service (NIS) database and" "directory structure." "" ypfiles(4)~\*{NI\*}
.xx "directory entry." "" "dirent: file system independent" "" dirent(4)~\*{SARM\*}
.xx "path names." "basename," "dirname: deliver portions of" "" basename(1)~\*{URM\*}
.xx "directory name of a file path/" "" "dirname: report the parent" "" dirname(3G)~\*{PRM\*}
.xx "" "" "dis: object code disassembler." "" \*pdis(1)~\*{PRM\*}
.xx "" "t_unbind:" "disable a transport endpoint." "" t_unbind(3N)~\*{NI\*}
.xx "printers." "enable," "disable: enable/disable LP" "" enable(1)~\*{URM\*}
.xx "" "acct: enable or" "disable process accounting." "" acct(2)~\*{PRM\*}
.xx "requests on a DMA/" "dma_disable:" "disable recognition of hardware" "" dma_disable(D3X)~\*{DDRM\*}
.xx "" "dis: object code" "disassembler." "" \*pdis(1)~\*{PRM\*}
.xx "subchannel on a line/" "ccidetach:" "disassociates this host with a" "" ccidetach(1iref)~\*{MBRMAN\*}
.xx "connections." "connld: line" "discipline for unique stream" "" connld(7)~\*{STRM\*}
.xx "" "cciunbind: unbinds a line" "discipline from a line on the/" "" cciunbind(1iref)~\*{MBRMAN\*}
.xx "" "type, modes, speed, and line" "discipline." "getty: set terminal" getty(1M)~\*{SARM\*}
.xx "communications/" "ccildinfo: line" "discipline information on the" "" ccildinfo(1iref)~\*{MBRMAN\*}
.xx "communications/" "ccildlist: line" "discipline list on the" "" ccildlist(1iref)~\*{MBRMAN\*}
.xx "" "standard STREAMS terminal line" "discipline module." "ldterm:" ldterm(7)~\*{STRM\*}
.xx "" "ccifree: frees a line" "discipline program on the/" "" ccifree(1iref)~\*{MBRMAN\*}
.xx "" "cciload: load a line" "discipline program on to the/" "" cciload(1iref)~\*{MBRMAN\*}
.xx "" "type, modes, speed, and line" "discipline." "/set terminal" uugetty(1M)~\*{SARM\*}
.xx "" "type, modes, speed, and line" "discipline." "/sets terminal" vtgetty(1M)~\*{SARM\*}
.xx "" "ccibind: binds a line" "discipline to a line on the/" "" ccibind(1iref)~\*{MBRMAN\*}
.xx "menus." "/item_count: connect and" "dis\%connect items to and from" "" menu_items(3X)~\*{CHAR\*}
.xx "" "t_snddis: send user-initiated" "disconnect request." "" t_snddis(3N)~\*{NI\*}
.xx "" "retrieve information from" "disconnect." "t_rcvdis:" t_rcvdis(3N)~\*{NI\*}
.xx "" "fd: diskette (floppy" "disk)." "" fd(7)~\*{SARM\*}
.xx "" "hd: hard (fixed)" "disk." "" hd(7)~\*{SARM\*}
.xx "" "fusage:" "disk access profiler." "" fusage(1M)~\*{NUAG\*}
.xx "" "fusage:" "disk access profiler." "" fusage(1M)~\*{SARM\*}
.xx "" "diskusg: generate" "disk accounting data by user ID." "" diskusg(1M)~\*{SARM\*}
.xx "" "/dfspace: report number of free" "disk blocks and files/free disk/" "" df(""1M"")~\*{SARM\*}
.xx "" "/dfspace: report number of free" "disk blocks and files/free disk/" "" df(""1M"")~\*{URM\*}
.xx "" "df (s5): report number of free" "disk blocks and i-nodes for s5/" "" df(1M)~\*{SARM\*}
.xx "or/" "du: display the number of" "disk blocks used per directory" "" du(1M)~\*{BSD\*}
.xx "" "/for Multibus  flexible" "disk device d rivers." "" fd(7iref)~\*{MBRMAN\*}
.xx "" "information for Multibus II hard" "disk device drivers." "hd:" hd(7iref)~\*{MBRMAN\*}
.xx "" "ramd: Multibus RAM" "disk driver." "" ramd(7iref)~\*{MBRMAN\*}
.xx "" "scsi_disk: sd01 SCSI" "disk driver." "" scsi_disk(7)~\*{SARM\*}
.xx "" "hdformat: low level hard" "disk formatter." "" hdformat(1iref)~\*{MBRMAN\*}
.xx "" "mkpart:" "disk maintenance utility." "" mkpart(1M)~\*{SARM\*}
.xx "" "fdisk: create or modify hard" "disk partition table." "" fdisk(1M)~\*{SARM\*}
.xx "" "quota: display a user's" "disk quota and usage." "" quota(1M)~\*{SARM\*}
.xx "medium." "" "disk: random access bulk storage" "" disk(7)~\*{SARM\*}
.xx "" "diskadd:" "disk set up utility." "" diskadd(1M)~\*{SARM\*}
.xx "" "disksetup:" "disk set up utility." "" disksetup(1M)~\*{SARM\*}
.xx "" "df: report free" "disk space on file systems." "" df(1)~\*{BSD\*}
.xx "" "df (ufs): report free" "disk space on ufs file systems." "" df(1M)~\*{SARM\*}
.xx "" "free disk blocks and files/free" "disk space." "/report number of" df(""1M"")~\*{SARM\*}
.xx "" "free disk blocks and files/free" "disk space." "/report number of" df(""1M"")~\*{URM\*}
.xx "" "space:" "disk space requirement file." "" space(4)~\*{ISDG\*}
.xx "" "format: format floppy" "disk tracks." "" format(1M)~\*{SARM\*}
.xx "" "du: summarize" "disk usage." "" du(1M)~\*{SARM\*}
.xx "" "du: summarize" "disk usage." "" du(1M)~\*{URM\*}
.xx "" "" "diskadd: disk set up utility." "" diskadd(1M)~\*{SARM\*}
.xx "" "fd:" "diskette (floppy disk)." "" fd(7)~\*{SARM\*}
.xx "" "load system dump from floppy" "diskettes." "ldsysdump:" ldsysdump(1M)~\*{SARM\*}
.xx "" "the system without checking the" "disks." "/fasthalt: reboot/halt" fastboot(1M)~\*{BSD\*}
.xx "" "filesystems, data partitions, or" "disks." "/initiate restores of" restore(1M)~\*{SARM\*}
.xx "" "" "disksetup: disk set up utility." "" disksetup(1M)~\*{SARM\*}
.xx "accounting data by user ID." "" "diskusg: generate disk" "" diskusg(1M)~\*{SARM\*}
.xx "administration." "" "dispadmin: process scheduler" "" dispadmin(1M)~\*{SARM\*}
.xx "" "rt_dptbl: real-time" "dispatcher parameter table." "" rt_dptbl(4)~\*{SARM\*}
.xx "" "ts_dptbl: time-sharing" "dispatcher parameter table." "" ts_dptbl(4)~\*{SARM\*}
.xx "valid group names." "" "dispgid: displays a list of all" "" dispgid(1)~\*{ISDG\*}
.xx "valid group names." "" "dispgid: displays a list of all" "" dispgid(1)~\*{SARM\*}
.xx "" "display: system console" "display." "" display(7)~\*{ISDG\*}
.xx "" "display: system console" "display." "" display(7)~\*{SARM\*}
.xx "logged in." "users:" "display a compact list of users" "" users(1)~\*{BSD\*}
.xx "system console." "print:" "display a driver message on the" "" print(D2DK)~\*{DDRM\*}
.xx "system console." "fmtmsg:" "display a message on stderr or" "" fmtmsg(1)~\*{URM\*}
.xx "system console." "fmtmsg:" "display a message on stderr or" "" fmtmsg(3C)~\*{PRM\*}
.xx "a keyword." "whatis:" "display a one-line summary about" "" whatis(1)~\*{BSD\*}
.xx "return an integer value." "ckint:" "display a prompt; verify and" "" ckint(1)~\*{ISDG\*}
.xx "return an integer value." "ckint:" "display a prompt; verify and" "" ckint(1)~\*{SARM\*}
.xx "return a pathname." "ckpath:" "display a prompt; verify and" "" ckpath(1)~\*{ISDG\*}
.xx "return a pathname." "ckpath:" "display a prompt; verify and" "" ckpath(1)~\*{SARM\*}
.xx "return a string answer." "ckstr:" "display a prompt; verify and" "" ckstr(1)~\*{ISDG\*}
.xx "return a string answer." "ckstr:" "display a prompt; verify and" "" ckstr(1)~\*{SARM\*}
.xx "return a time of day." "cktime:" "display a prompt; verify and" "" cktime(1)~\*{ISDG\*}
.xx "return a time of day." "cktime:" "display a prompt; verify and" "" cktime(1)~\*{SARM\*}
.xx "usage." "quota:" "display a user's disk quota and" "" quota(1M)~\*{SARM\*}
.xx "memberships." "groups:" "display a user's group" "" groups(1)~\*{BSD\*}
.xx "panic the system." "cmn_err:" "display an error message or" "" cmn_err(D3DK)~\*{DDRM\*}
.xx "incremental/" "bkexcept: change or" "display an exception list for" "" bkexcept(1M)~\*{SARM\*}
.xx "" "arp: address resolution" "display and control." "" arp(1M)~\*{NUAG\*}
.xx "" "arp: address resolution" "display and control." "" arp(1M)~\*{SARM\*}
.xx "alarms and/or the/" "indicator:" "display application specific" "" indicator(1F)~\*{CHAR\*}
.xx "" "/menu_pad: control menus" "display attributes." "" menu_attributes(3X)~\*{CHAR\*}
.xx "" "/field_pad: format the general" "display attributes of forms." "" form_field_attributes(3X)~\*{CHAR\*}
.xx "" "/data for storage, uncompress and" "display compressed files." "" compress(1)~\*{URM\*}
.xx "" "conflgs: change and" "display console flags." "" conflgs(1M)~\*{SARM\*}
.xx "for a text string in,/" "srchtxt:" "display contents of, or search" "" srchtxt(1)~\*{URM\*}
.xx "" "/pechochar: create and" "display curses pads." "" curs_pad(3X)~\*{CHAR\*}
.xx "" "vi: screen-oriented (visual)" "display editor based on ex." "" vi(1)~\*{URM\*}
.xx "currently set." "printenv:" "display environment variables" "" printenv(1)~\*{BSD\*}
.xx "format." "hd:" "display files in hexadecimal" "" hd(1)~\*{ACG\*}
.xx "files." "head:" "display first few lines of" "" head(1)~\*{URM\*}
.xx "" "ff (s5):" "display i-list information." "" ff(1M)~\*{SARM\*}
.xx "and remote users." "finger:" "display information about local" "" finger(1)~\*{NUAG\*}
.xx "and remote users." "finger:" "display information about local" "" finger(1)~\*{URM\*}
.xx "" "which: locate a command;" "display its pathname or alias." "" which(1)~\*{BSD\*}
.xx "count profile data." "lprof:" "display line-by-line execution" "" lprof(1)~\*{PRM\*}
.xx "information." "dfmounts:" "display mounted NFS resource" "" dfmounts(1M)~\*{NUAG\*}
.xx "information." "dfmounts:" "display mounted NFS resource" "" dfmounts(1M)~\*{SARM\*}
.xx "information." "dfmounts:" "display mounted resource" "" dfmounts(1M)~\*{NUAG\*}
.xx "information." "dfmounts:" "display mounted resource" "" dfmounts(1M)~\*{SARM\*}
.xx "information." "rmntstat:" "display mounted resource" "" rmntstat(1M)~\*{NUAG\*}
.xx "information." "rmntstat:" "display mounted resource" "" rmntstat(1M)~\*{SARM\*}
.xx "information." "dfmounts:" "display mounted RFS resource" "" dfmounts(1M)~\*{NUAG\*}
.xx "information." "dfmounts:" "display mounted RFS resource" "" dfmounts(1M)~\*{SARM\*}
.xx "" "nroff: format documents for" "display or line-printer." "" nroff(1)~\*{BSD\*}
.xx "" "basename:" "display portions of pathnames." "" basename(1)~\*{BSD\*}
.xx "" "prof:" "display profile data." "" prof(1)~\*{PRM\*}
.xx "printers." "postmd: matrix" "display program for PostScript" "" postmd(1)~\*{URM\*}
.xx "find reference pages by/" "man:" "display reference manual pages;" "" man(1)~\*{BSD\*}
.xx "information." "pkginfo:" "display software package" "" pkginfo(1)~\*{ISDG\*}
.xx "information." "pkginfo:" "display software package" "" pkginfo(1)~\*{SARM\*}
.xx "" "" "display: system console display." "" display(7)~\*{ISDG\*}
.xx "" "" "display: system console display." "" display(7)~\*{SARM\*}
.xx "current host." "arch:" "display the architecture of the" "" arch(1)~\*{BSD\*}
.xx "register." "bkreg: change or" "display the contents of a backup" "" bkreg(1M)~\*{SARM\*}
.xx "history of an SCCS file." "prt:" "display the delta and commentary" "" prt(1)~\*{BSD\*}
.xx "username." "whoami:" "display the effective current" "" whoami(1)~\*{BSD\*}
.xx "at specified times." "atq:" "display the jobs queued to run" "" atq(1)~\*{URM\*}
.xx "blocks used per directory/" "du:" "display the number of disk" "" du(1M)~\*{BSD\*}
.xx "the current host." "mach:" "display the processor type of" "" mach(1)~\*{BSD\*}
.xx "jobs." "lpq:" "display the queue of printer" "" lpq(1)~\*{BSD\*}
.xx "memory." "pagesize:" "display the size of a page of" "" pagesize(1)~\*{BSD\*}
.xx "operations." "bkstatus:" "display the status of backup" "" bkstatus(1M)~\*{SARM\*}
.xx "processes." "ps:" "display the status of current" "" ps(1)~\*{BSD\*}
.xx "group names." "dispgid:" "displays a list of all valid" "" dispgid(1)~\*{ISDG\*}
.xx "group names." "dispgid:" "displays a list of all valid" "" dispgid(1)~\*{SARM\*}
.xx "user names." "dispuid:" "displays a list of all valid" "" dispuid(1)~\*{ISDG\*}
.xx "user names." "dispuid:" "displays a list of all valid" "" dispuid(1)~\*{SARM\*}
.xx "values." "pkgparam:" "displays package parameter" "" pkgparam(1)~\*{ISDG\*}
.xx "values." "pkgparam:" "displays package parameter" "" pkgparam(1)~\*{SARM\*}
.xx "valid user names." "" "dispuid: displays a list of all" "" dispuid(1)~\*{ISDG\*}
.xx "valid user names." "" "dispuid: displays a list of all" "" dispuid(1)~\*{SARM\*}
.xx "" "hypot: Euclidean" "distance function." "" hypot(3M)~\*{PRM\*}
.xx "" "fstypes: file that registers" "distributed file system/" "" fstypes(4)~\*{NUAG\*}
.xx "" "fstypes: file that registers" "distributed file system/" "" fstypes(4)~\*{SARM\*}
.xx "" "/lcong48: generate uniformly" "distributed pseudo-random/" "" drand48(3C)~\*{PRM\*}
.xx "and remainder." "" "div, ldiv: compute the quotient" "" div(3C)~\*{PRM\*}
.xx "" "" "dlclose: close a shared object." "" dlclose(3X)~\*{PRM\*}
.xx "information." "" "dlerror: get diagnostic" "" dlerror(3X)~\*{PRM\*}
.xx "" "" "dlopen: open a shared object." "" dlopen(3X)~\*{PRM\*}
.xx "symbol in shared object." "" "dlsym: get the address of a" "" dlsym(3X)~\*{PRM\*}
.xx "" "/free a previously allocated" "DMA buffer descriptor." "" dma_free_buf(D3X)~\*{DDRM\*}
.xx "" "dma_get_buf: allocate a" "DMA buffer descriptor." "" dma_get_buf(D3X)~\*{DDRM\*}
.xx "" "dma_buf:" "DMA buffer descriptor structure." "" dma_buf(D4X)~\*{DDRM\*}
.xx "" "of hardware requests on a" "DMA channel." "/enable recognition" dma_enable(D3X)~\*{DDRM\*}
.xx "" "of hardware requests on a" "DMA channel." "/recognition" dma_disable(D3X)~\*{DDRM\*}
.xx "" "dma_get_cb: allocate a" "DMA command block." "" dma_get_cb(D3X)~\*{DDRM\*}
.xx "" "free a previously allocated" "DMA command block." "dma_free_cb:" dma_free_cb(D3X)~\*{DDRM\*}
.xx "" "dma_cb:" "DMA command block structure." "" dma_cb(D4X)~\*{DDRM\*}
.xx "" "determine best transfer mode for" "DMA command." "dma_get_best_mode:" dma_get_best_mode(D3X)~\*{DDRM\*}
.xx "" "intro: introduction to" "DMA data structures." "" intro(D4X)~\*{DDRM\*}
.xx "" "dma:" "DMA device driver." "" dma(7iref)~\*{MBRMAN\*}
.xx "" "" "dma: DMA device driver." "" dma(7iref)~\*{MBRMAN\*}
.xx "hardware/" "dma_prog: program a" "DMA operation for a subsequent" "" dma_prog(D3X)~\*{DDRM\*}
.xx "software/" "dma_swsetup: program a" "DMA operation for a subsequent" "" dma_swsetup(D3X)~\*{DDRM\*}
.xx "release/" "/stop software-initiated" "DMA operation on a channel and" "" dma_stop(D3X)~\*{DDRM\*}
.xx "" "dma_swstart: initiate a" "DMA operation via software/" "" dma_swstart(D3X)~\*{DDRM\*}
.xx "" "intro: introduction to" "DMA utility routines." "" intro(D3X)~\*{DDRM\*}
.xx "structure." "" "dma_buf: DMA buffer descriptor" "" dma_buf(D4X)~\*{DDRM\*}
.xx "structure." "" "dma_cb: DMA command block" "" dma_cb(D4X)~\*{DDRM\*}
.xx "of hardware requests on a DMA/" "" "dma_disable: disable recognition" "" dma_disable(D3X)~\*{DDRM\*}
.xx "of hardware requests on a DMA/" "" "dma_enable: enable recognition" "" dma_enable(D3X)~\*{DDRM\*}
.xx "allocated DMA buffer/" "" "dma_free_buf: free a previously" "" dma_free_buf(D3X)~\*{DDRM\*}
.xx "allocated DMA command block." "" "dma_free_cb: free a previously" "" dma_free_cb(D3X)~\*{DDRM\*}
.xx "best transfer mode for DMA/" "" "dma_get_best_mode: determine" "" dma_get_best_mode(D3X)~\*{DDRM\*}
.xx "buffer descriptor." "" "dma_get_buf: allocate a DMA" "" dma_get_buf(D3X)~\*{DDRM\*}
.xx "command block." "" "dma_get_cb: allocate a DMA" "" dma_get_cb(D3X)~\*{DDRM\*}
.xx "request into manageable units." "" "dma_pageio: break up an I/O" "" dma_pageio(D3D)~\*{DDRM\*}
.xx "operation for a subsequent/" "" "dma_prog: program a DMA" "" dma_prog(D3X)~\*{DDRM\*}
.xx "software-initiated DMA/" "" "dma_stop: stop" "" dma_stop(D3X)~\*{DDRM\*}
.xx "operation for a subsequent/" "" "dma_swsetup: program a DMA" "" dma_swsetup(D3X)~\*{DDRM\*}
.xx "operation via software request." "" "dma_swstart: initiate a DMA" "" dma_swstart(D3X)~\*{DDRM\*}
.xx "" "PostScript translator for" "DMD bitmap files." "postdmd:" postdmd(1)~\*{URM\*}
.xx "" "object downloader for the 5620" "DMD terminal." "wtinit:" wtinit(1M)~\*{SARM\*}
.xx "domain and network names." "" "dname: print Remote File Sharing" "" dname(1M)~\*{NUAG\*}
.xx "domain and network names." "" "dname: print Remote File Sharing" "" dname(1M)~\*{SARM\*}
.xx "" "/res_mkquery, res_send, res_init," "dn_comp, dn_expand: resolver/" "" resolver(3N)~\*{NI\*}
.xx "" "/res_mkquery, res_send, res_init," "dn_comp, dn_expand: resolver/" "" resolver(3N)~\*{NUAG\*}
.xx "" "/res_send, res_init, dn_comp," "dn_expand: resolver routines." "" resolver(3N)~\*{NI\*}
.xx "" "/res_send, res_init, dn_comp," "dn_expand: resolver routines." "" resolver(3N)~\*{NUAG\*}
.xx "configuration script." "" "doconfig: execute a" "" doconfig(3N)~\*{NI\*}
.xx "" "troff: typeset or format" "documents." "" troff(1)~\*{BSD\*}
.xx "line-printer." "nroff: format" "documents for display or" "" nroff(1)~\*{BSD\*}
.xx "from a host." "gettable: get" "DoD Internet format host table" "" gettable(1M)~\*{NUAG\*}
.xx "from a host." "gettable: get" "DoD Internet format host table" "" gettable(1M)~\*{SARM\*}
.xx "" "htable: convert" "DoD Internet format host table." "" htable(1M)~\*{NUAG\*}
.xx "" "htable: convert" "DoD Internet format host table." "" htable(1M)~\*{SARM\*}
.xx "nulladm,/" "chargefee, ckpacct," "dodisk, lastlogin, monacct," "" acctsh(1M)~\*{SARM\*}
.xx "" "is logged in, and what are they" "doing." "w: who" w(1)~\*{BSD\*}
.xx "" "whodo: who is" "doing what." "" whodo(1M)~\*{SARM\*}
.xx "" "rfadmin: Remote File Sharing" "domain administration." "" rfadmin(1M)~\*{NUAG\*}
.xx "" "rfadmin: Remote File Sharing" "domain administration." "" rfadmin(1M)~\*{SARM\*}
.xx "" "dname: print Remote File Sharing" "domain and network names." "" dname(1M)~\*{NUAG\*}
.xx "" "dname: print Remote File Sharing" "domain and network names." "" dname(1M)~\*{SARM\*}
.xx "" "name of current secure RPC" "domain." "domainname: get/set" domainname(1M)~\*{NI\*}
.xx "" "address to hostname database or" "domain." "ethers: Ethernet" ethers(4)~\*{NUAG\*}
.xx "" "address to hostname database or" "domain." "ethers: Ethernet" ethers(4)~\*{SARM\*}
.xx "" "named, in.named: Internet" "domain name server." "" named(1M)~\*{NUAG\*}
.xx "" "named, in.named: Internet" "domain name server." "" named(1M)~\*{SARM\*}
.xx "current secure RPC domain." "" "domainname: get/set name of" "" domainname(1M)~\*{NI\*}
.xx "dosformat, dosmkdir, dosls,/" "" "dos: doscat, doscp, dosdir," "" dos(1)~\*{URM\*}
.xx "" "dosrmdir: access and manipulate" "DOS files." "/dosls, dosrm," dos(1)~\*{URM\*}
.xx "dosformat, dosmkdir,/" "dos:" "doscat, doscp, dosdir," "" dos(1)~\*{URM\*}
.xx "dosmkdir, dosls,/" "dos: doscat," "doscp, dosdir, dosformat," "" dos(1)~\*{URM\*}
.xx "dosls,/" "dos: doscat, doscp," "dosdir, dosformat, dosmkdir," "" dos(1)~\*{URM\*}
.xx "" "dos: doscat, doscp, dosdir," "dosformat, dosmkdir, dosls,/" "" dos(1)~\*{URM\*}
.xx "" "/dosdir, dosformat, dosmkdir," "dosls, dosrm, dosrmdir: access/" "" dos(1)~\*{URM\*}
.xx "" "doscp, dosdir, dosformat," "dosmkdir, dosls, dosrm,/" "/doscat," dos(1)~\*{URM\*}
.xx "" "/dosformat, dosmkdir, dosls," "dosrm, dosrmdir: access and/" "" dos(1)~\*{URM\*}
.xx "DOS/" "/dosmkdir, dosls, dosrm," "dosrmdir: access and manipulate" "" dos(1)~\*{URM\*}
.xx "" "/strtold, atof: convert string to" "double-precision number." "" strtod(3C)~\*{PRM\*}
.xx "" "/single_to_decimal," "double_to_decimal,/" "" floating_to_decimal(3)~\*{BSD\*}
.xx "" "/refresh, wrefresh, wnoutrefresh," "doupdate, redrawwin, wredrawln:/" "" curs_refresh(3X)~\*{CHAR\*}
.xx "" "in bytes to size in pages (round" "down)." "btop: convert size" btop(D3DK)~\*{DDRM\*}
.xx "" "the driver when the system shuts" "down." "halt: shut down" halt(D2D)~\*{DDRM\*}
.xx "PostScript font downloader." "" "download: host resident" "" download(1)~\*{URM\*}
.xx "library and object module/" "" "download: loads 8086 absolute" "" download(1iref)~\*{MBRMAN\*}
.xx "" "host resident PostScript font" "downloader." "download:" download(1)~\*{URM\*}
.xx "terminal." "wtinit: object" "downloader for the 5620 DMD" "" wtinit(1M)~\*{SARM\*}
.xx "PostScript printers." "" "dpost: troff postprocessor for" "" dpost(1)~\*{URM\*}
.xx "adapter subsystem." "" "\*(dr: Adaptec 1542A SCSI host" "" scsi_adaptec(7)~\*{SARM\*}
.xx "" "" "\*(dr: CD-ROM Target Driver." "" scsi_cdrom(7)~\*{SARM\*}
.xx "subsystem." "" "\*(dr: \*(ha SCSI host adapter" "" scsi_dpt(7)~\*{SARM\*}
.xx "nrand48, mrand48, jrand48,/" "" "drand48, erand48, lrand48," "" drand48(3C)~\*{PRM\*}
.xx "" "bps: Bootstrap Parameter String" "driver." "" bps(7iref)~\*{MBRMAN\*}
.xx "" "clock: Multibus II clock" "driver." "" clock(7iref)~\*{MBRMAN\*}
.xx "" "console: console port device" "driver." "" console(7iref)~\*{MBRMAN\*}
.xx "" "csmclock--Multibus II CSM clock" "driver." "" csmclock(7iref)~\*{MBRMAN\*}
.xx "" "d258: i82258 ADMA device" "driver." "" d258(7iref)~\*{MBRMAN\*}
.xx "" "dma: DMA device" "driver." "" dma(7iref)~\*{MBRMAN\*}
.xx "" "i350: iSBX 350 parallel printer" "driver." "" i350(7iref)~\*{MBRMAN\*}
.xx "" "i596: 82596 Ethernet" "Driver." "" i596(7iref)~\*{MBRMAN\*}
.xx "" "ics: Interconnect Space device" "driver." "" ics(7iref)~\*{MBRMAN\*}
.xx "" "ie6: 3C503 3Com Ethernet" "Driver." "" ie6(7)~\*{SARM\*}
.xx "" "mpc: MPC device" "driver." "" mpc(7iref)~\*{MBRMAN\*}
.xx "" "ramd: Multibus RAM disk" "driver." "" ramd(7iref)~\*{MBRMAN\*}
.xx "" "rci: debug console/rci protocol" "driver." "" rci(7iref)~\*{MBRMAN\*}
.xx "" "sad: STREAMS Administrative" "Driver." "" sad(7)~\*{STRM\*}
.xx "" "\*(dr: CD-ROM Target" "Driver." "" scsi_cdrom(7)~\*{SARM\*}
.xx "" "scsi_disk: sd01 SCSI disk" "driver." "" scsi_disk(7)~\*{SARM\*}
.xx "" "scsi_tape: st01 SCSI tape" "driver." "" scsi_tape(7)~\*{SARM\*}
.xx "" "scsi_worm: sw01 SCSI WORM Target" "Driver." "" scsi_worm(7)~\*{SARM\*}
.xx "" "sxt: pseudo-device" "driver." "" sxt(7)~\*{SARM\*}
.xx "" "sxt: pseudo-device" "driver." "" sxt(7)~\*{STRM\*}
.xx "" "/Ethernet controller device" "driver and MIX 386/530 Ethernet/" "" i530(7iref)~\*{MBRMAN\*}
.xx "structure." "streamtab: STREAMS" "driver and module declaration" "" streamtab(D4DK)~\*{DDRM\*}
.xx "" "info: STREAMS" "driver and module information." "" info(D1D)~\*{DDRM\*}
.xx "structure." "module_info: STREAMS" "driver and module information" "" module_info(D4DK)~\*{DDRM\*}
.xx "" "data from a user buffer to a" "driver buffer." "copyin: copy" copyin(D3DK)~\*{DDRM\*}
.xx "" "copyout: copy data from a" "driver buffer to a user buffer." "" copyout(D3DK)~\*{DDRM\*}
.xx "" "controller interface device" "driver." "cci: communications" cci(7iref)~\*{MBRMAN\*}
.xx "" "delete, update, or get device" "driver configuration data." "/add," idinstall(1M)~\*{ISDG\*}
.xx "" "delete, update, or get device" "driver configuration data." "/add," idinstall(1M)~\*{SARM\*}
.xx "" "intro: introduction to" "driver data." "" intro(D1DK)~\*{DDRM\*}
.xx "" "intro: introduction to" "driver entry point routines." "" intro(D2DK)~\*{DDRM\*}
.xx "" "communications interface STREAMS" "driver." "/five-line asynchronous" ports(7)~\*{STRM\*}
.xx "" "devflag:" "driver flags." "" devflag(D1D)~\*{DDRM\*}
.xx "" "STREAMS-based multiplexed tty" "driver for AT&T windowing/" "xt:" xt(7)~\*{SARM\*}
.xx "" "STREAMS-based multiplexed tty" "driver for AT&T windowing/" "xt:" xt(7)~\*{STRM\*}
.xx "" "edlina: External Data Link" "driver for iNA961 Release 3.0." "" edlina(7iref)~\*{MBRMAN\*}
.xx "" "hlp \-Parallel printer" "driver for iSBC 486/133SE board." "" hlp(7iref)~\*{MBRMAN\*}
.xx "" "introduction to SCSI target" "driver functions." "intro:" intro(D3I)~\*{SCSI\*}
.xx "" "peripheral controller device" "driver." "i258: iSBC 386/258" i258(7iref)~\*{MBRMAN\*}
.xx "" "dual channel serial-port device" "driver." "i354: iSBX 354" i354(7iref)~\*{MBRMAN\*}
.xx "" "asynchronous (terminal) device" "driver." "iasy:" iasy(7iref)~\*{MBRMAN\*}
.xx "" "/Extended VGA keyboard/display" "driver initialization." "" evgainit(1M)~\*{SARM\*}
.xx "" "communications controller device" "driver." "/iSBC 186/410 serial" i410(7iref)~\*{MBRMAN\*}
.xx "" "controller tape device" "driver." "/iSBC 386/258 peripheral" i258tp(7iref)~\*{MBRMAN\*}
.xx "console." "print: display a" "driver message on the system" "" print(D2DK)~\*{DDRM\*}
.xx "" "Message Passing Space device" "driver." "mps:" mps(7iref)~\*{MBRMAN\*}
.xx "" "device pair on a STREAMS" "driver." "/open any major/minor" clone(7)~\*{STRM\*}
.xx "" "xtt: extract and print xt" "driver packet traces." "" xtt(1M)~\*{SARM\*}
.xx "" "for a non-STREAMS character" "driver." "/poll entry point" chpoll(D2DK)~\*{DDRM\*}
.xx "" "prefix:" "driver prefix." "" prefix(D1DK)~\*{DDRM\*}
.xx "" "a SCSI block for the target" "driver." "sdi_getblk: allocate" sdi_getblk(D3I)~\*{SCSI\*}
.xx "" "xts: extract and print xt" "driver statistics." "" xts(1M)~\*{SARM\*}
.xx "" "submit messages to the log" "driver." "strlog:" strlog(D3DK)~\*{DDRM\*}
.xx "and PS/2/" "mouse: mouse device" "driver supporting bus, serial," "" mouse(7)~\*{ISDG\*}
.xx "and PS/2/" "mouse: mouse device" "driver supporting bus, serial," "" mouse(7)~\*{SARM\*}
.xx "" "controller script device" "driver." "/terminal" atcs(7iref)~\*{MBRMAN\*}
.xx "" "Transport Service (ots) device" "driver." "/V/386 Release 4.0 OSI" ots(7iref)~\*{MBRMAN\*}
.xx "down." "halt: shut down the" "driver when the system shuts" "" halt(D2D)~\*{DDRM\*}
.xx "" "channels protocol used by xt" "driver." "xtproto: multiplexed" xtproto(5)~\*{PRM\*}
.xx "" "channels protocol used by xt" "driver." "xtproto: multiplexed" xtproto(5)~\*{SARM\*}
.xx "" "td: Multibus tape device" "drivers." "" td(7iref)~\*{MBRMAN\*}
.xx "" "for Multibus II hard disk device" "drivers." "hd: information" hd(7iref)~\*{MBRMAN\*}
.xx "structure." "free_rtn: STREAMS" "driver's message free routine" "" free_rtn(D4DK)~\*{DDRM\*}
.xx "state information." "" "drv_getparm: retrieve kernel" "" drv_getparm(D3DK)~\*{DDRM\*}
.xx "ticks to microseconds." "" "drv_hztousec: convert clock" "" drv_hztousec(D3DK)~\*{DDRM\*}
.xx "credentials are privileged." "" "drv_priv: determine whether" "" drv_priv(D3DK)~\*{DDRM\*}
.xx "information." "" "drv_setparm: set kernel state" "" drv_setparm(D3DK)~\*{DDRM\*}
.xx "microseconds to clock ticks." "" "drv_usectohz: convert" "" drv_usectohz(D3DK)~\*{DDRM\*}
.xx "specified interval." "" "drv_usecwait: busy-wait for" "" drv_usecwait(D3DK)~\*{DDRM\*}
.xx "blocks used per directory or/" "" "du: display the number of disk" "" du(1M)~\*{BSD\*}
.xx "" "" "du: summarize disk usage." "" du(1M)~\*{SARM\*}
.xx "" "" "du: summarize disk usage." "" du(1M)~\*{URM\*}
.xx "driver." "i354: iSBX 354" "dual channel serial-port device" "" i354(7iref)~\*{MBRMAN\*}
.xx "" "/atoplot, bgplot, crtplot," "dumbplot, gigiplot, hpplot,/" "" plot(1G)~\*{BSD\*}
.xx "" "" "dump." "" dump(4)~\*{SARM\*}
.xx "" "od: octal" "dump." "" od(1)~\*{URM\*}
.xx "" "ufsdump: incremental file system" "dump." "" ufsdump(1M)~\*{SARM\*}
.xx "object file." "" "dump: dump selected parts of an" "" dump(1)~\*{PRM\*}
.xx "" "ldsysdump: load system" "dump from floppy diskettes." "" ldsysdump(1M)~\*{SARM\*}
.xx "file." "dump:" "dump selected parts of an object" "" dump(1)~\*{PRM\*}
.xx "" "zdump: time zone" "dumper." "" zdump(1M)~\*{SARM\*}
.xx "descriptor." "" "dup: duplicate an open file" "" dup(2)~\*{PRM\*}
.xx "descriptor." "" "dup2: duplicate an open file" "" dup2(3C)~\*{PRM\*}
.xx "" "" "dupb: duplicate a message block." "" dupb(D3DK)~\*{DDRM\*}
.xx "" "form_field_new:  new_field," "dup_field, link_field,/" "" form_field_new(3X)~\*{CHAR\*}
.xx "" "dupmsg:" "duplicate a message." "" dupmsg(D3DK)~\*{DDRM\*}
.xx "" "dupb:" "duplicate a message block." "" dupb(D3DK)~\*{DDRM\*}
.xx "descriptor." "dup2:" "duplicate an open file" "" dup2(3C)~\*{PRM\*}
.xx "descriptor." "dup:" "duplicate an open file" "" dup(2)~\*{PRM\*}
.xx "" "" "dupmsg: duplicate a message." "" dupmsg(D3DK)~\*{DDRM\*}
.xx "" "/mvwin, subwin, derwin, mvderwin," "dupwin, wsyncup, syncok,/" "" curs_window(3X)~\*{CHAR\*}
.xx "" "ldd: list" "dynamic dependencies." "" ldd(1)~\*{PRM\*}
.xx "" "ld: link editor," "dynamic link editor." "" ld(1)~\*{BSD\*}
.xx "" "form_field_info:  field_info," "dynamic_field_info: get forms/" "" form_field_info(3X)~\*{CHAR\*}
.xx "" "echo:" "echo arguments." "" echo(1)~\*{BSD\*}
.xx "" "echo:" "echo arguments." "" echo(1)~\*{URM\*}
.xx "" "" "echo: echo arguments." "" echo(1)~\*{BSD\*}
.xx "" "" "echo: echo arguments." "" echo(1)~\*{URM\*}
.xx "" "curs_inopts:  cbreak, nocbreak," "echo, noecho, halfdelay,/" "" curs_inopts(3X)~\*{CHAR\*}
.xx "output." "" "echo: put string on virtual" "" echo(1F)~\*{CHAR\*}
.xx "" "/waddch, mvaddch, mvwaddch," "echochar, wechochar: add a/" "" curs_addch(3X)~\*{CHAR\*}
.xx "hosts." "ping: send ICMP" "ECHO_REQUEST packets to network" "" ping(1M)~\*{NUAG\*}
.xx "hosts." "ping: send ICMP" "ECHO_REQUEST packets to network" "" ping(1M)~\*{SARM\*}
.xx "seconvert, sfconvert,/" "" "econvert, fconvert, gconvert," "" econvert(3)~\*{BSD\*}
.xx "gcvtl: convert floating-point/" "" "ecvt, ecvtl, fcvt, fcvtl, gcvt," "" ecvt(3C)~\*{PRM\*}
.xx "convert floating-point/" "ecvt," "ecvtl, fcvt, fcvtl, gcvt, gcvtl:" "" ecvt(3C)~\*{PRM\*}
.xx "" "" "ed, red: text editor." "" ed(1)~\*{URM\*}
.xx "program." "end, etext," "edata: last locations in" "" end(3C)~\*{PRM\*}
.xx "for casual users)." "" "edit: text editor (variant of ex" "" edit(1)~\*{URM\*}
.xx "" "edquota:" "edit user quotas." "" edquota(1M)~\*{SARM\*}
.xx "" "sact: print current SCCS file" "editing activity." "" sact(1)~\*{PRM\*}
.xx "" "edsysadm: sysadm interface" "editing tool." "" edsysadm(1M)~\*{ISDG\*}
.xx "" "edsysadm: sysadm interface" "editing tool." "" edsysadm(1M)~\*{SARM\*}
.xx "" "ed, red: text" "editor." "" ed(1)~\*{URM\*}
.xx "" "ex: text" "editor." "" ex(1)~\*{URM\*}
.xx "" "ld: link editor, dynamic link" "editor." "" ld(1)~\*{BSD\*}
.xx "" "sed: stream" "editor." "" sed(1)~\*{URM\*}
.xx "" "screen-oriented (visual) display" "editor based on ex." "vi:" vi(1)~\*{URM\*}
.xx "" "ld: link" "editor, dynamic link editor." "" ld(1)~\*{BSD\*}
.xx "" "ld: link" "editor for object files." "" ld(1)~\*{PRM\*}
.xx "users)." "edit: text" "editor (variant of ex for casual" "" edit(1)~\*{URM\*}
.xx "" "putdgrp:" "edits device group table." "" putdgrp(1)~\*{SARM\*}
.xx "" "putdev:" "edits device table." "" putdev(1)~\*{SARM\*}
.xx "driver for iNA961 Release 3.0." "" "edlina: External Data Link" "" edlina(7iref)~\*{MBRMAN\*}
.xx "" "" "edquota: edit user quotas." "" edquota(1M)~\*{SARM\*}
.xx "editing tool." "" "edsysadm: sysadm interface" "" edsysadm(1M)~\*{ISDG\*}
.xx "editing tool." "" "edsysadm: sysadm interface" "" edsysadm(1M)~\*{SARM\*}
.xx "" "whoami: display the" "effective current username." "" whoami(1)~\*{BSD\*}
.xx "" "setregid: set real and" "effective group IDs." "" setregid(3)~\*{BSD\*}
.xx "" "effective user, real group, and" "effective group IDs." "/real user," getuid(2)~\*{PRM\*}
.xx "" "setreuid: set real and" "effective user IDs." "" setreuid(3)~\*{BSD\*}
.xx "" "/getgid, getegid: get real user," "effective user, real group, and/" "" getuid(2)~\*{PRM\*}
.xx "" "new process in a virtual memory" "efficient way." "vfork: spawn" vfork(2)~\*{PRM\*}
.xx "pattern using full regular/" "" "egrep: search a file for a" "" egrep(1)~\*{URM\*}
.xx "" "insque, remque: insert/remove" "element from a queue." "" insque(3C)~\*{PRM\*}
.xx "" "basename: return the last" "element of a path name." "" basename(3G)~\*{PRM\*}
.xx "" "convert OMF (XENIX) libraries to" "ELF." "cvtomflib:" cvtomflib(1)~\*{ACG\*}
.xx "" "elf_update: update an" "ELF descriptor." "" elf_update(3E)~\*{PRM\*}
.xx "Format) files." "a.out:" "ELF (Executable and Linking" "" a.out(4)~\*{PRM\*}
.xx "" "elf_version: coordinate" "ELF library and application/" "" elf_version(3E)~\*{PRM\*}
.xx "" "" "elf: object file access library." "" elf(3E)~\*{PRM\*}
.xx "" "cof2elf: COFF to" "ELF object file translation." "" cof2elf(1)~\*{PRM\*}
.xx "an object file type." "elf_fsize:" "elf32_fsize: return the size of" "" elf_fsize(3E)~\*{PRM\*}
.xx "retrieve/" "elf_getehdr:" "elf32_getehdr, elf32_newehdr:" "" elf_getehdr(3E)~\*{PRM\*}
.xx "retrieve/" "elf_getphdr:" "elf32_getphdr, elf32_newphdr:" "" elf_getphdr(3E)~\*{PRM\*}
.xx "class-dependent/" "elf_getshdr:" "elf32_getshdr: retrieve" "" elf_getshdr(3E)~\*{PRM\*}
.xx "" "elf_getehdr: elf32_getehdr," "elf32_newehdr: retrieve/" "" elf_getehdr(3E)~\*{PRM\*}
.xx "" "elf_getphdr: elf32_getphdr," "elf32_newphdr: retrieve/" "" elf_getphdr(3E)~\*{PRM\*}
.xx "class-dependent data/" "elf_xlate:" "elf32_xlatetof, elf32_xlatetom:" "" elf_xlate(3E)~\*{PRM\*}
.xx "data/" "elf_xlate: elf32_xlatetof," "elf32_xlatetom: class-dependent" "" elf_xlate(3E)~\*{PRM\*}
.xx "descriptor." "" "elf_begin: make a file" "" elf_begin(3E)~\*{PRM\*}
.xx "descriptor." "" "elf_cntl: control a file" "" elf_cntl(3E)~\*{PRM\*}
.xx "file." "" "elf_end: finish using an object" "" elf_end(3E)~\*{PRM\*}
.xx "handling." "" "elf_errmsg, elf_errno: error" "" elf_error(3E)~\*{PRM\*}
.xx "" "elf_errmsg," "elf_errno: error handling." "" elf_error(3E)~\*{PRM\*}
.xx "" "" "elf_fill: set fill byte." "" elf_fill(3E)~\*{PRM\*}
.xx "elf_flagelf, elf_flagphdr,/" "" "elf_flagdata, elf_flagehdr," "" elf_flag(3E)~\*{PRM\*}
.xx "elf_flagphdr,/" "elf_flagdata," "elf_flagehdr, elf_flagelf," "" elf_flag(3E)~\*{PRM\*}
.xx "" "elf_flagdata, elf_flagehdr," "elf_flagelf, elf_flagphdr,/" "" elf_flag(3E)~\*{PRM\*}
.xx "" "/elf_flagehdr, elf_flagelf," "elf_flagphdr, elf_flagscn,/" "" elf_flag(3E)~\*{PRM\*}
.xx "" "/elf_flagelf, elf_flagphdr," "elf_flagscn, elf_flagshdr:/" "" elf_flag(3E)~\*{PRM\*}
.xx "" "/elf_flagphdr, elf_flagscn," "elf_flagshdr: manipulate flags." "" elf_flag(3E)~\*{PRM\*}
.xx "the size of an object file/" "" "elf_fsize: elf32_fsize: return" "" elf_fsize(3E)~\*{PRM\*}
.xx "member header." "" "elf_getarhdr: retrieve archive" "" elf_getarhdr(3E)~\*{PRM\*}
.xx "symbol table." "" "elf_getarsym: retrieve archive" "" elf_getarsym(3E)~\*{PRM\*}
.xx "for an object file." "" "elf_getbase: get the base offset" "" elf_getbase(3E)~\*{PRM\*}
.xx "elf_rawdata: get section data." "" "elf_getdata, elf_newdata," "" elf_getdata(3E)~\*{PRM\*}
.xx "elf32_newehdr: retrieve/" "" "elf_getehdr: elf32_getehdr," "" elf_getehdr(3E)~\*{PRM\*}
.xx "identification data." "" "elf_getident: retrieve file" "" elf_getident(3E)~\*{PRM\*}
.xx "elf32_newphdr: retrieve/" "" "elf_getphdr: elf32_getphdr," "" elf_getphdr(3E)~\*{PRM\*}
.xx "elf_newscn, elf_nextscn: get/" "" "elf_getscn, elf_ndxscn," "" elf_getscn(3E)~\*{PRM\*}
.xx "retrieve class-dependent/" "" "elf_getshdr: elf32_getshdr:" "" elf_getshdr(3E)~\*{PRM\*}
.xx "" "" "elf_hash: compute hash value." "" elf_hash(3E)~\*{PRM\*}
.xx "" "" "elf_kind: determine file type." "" elf_kind(3E)~\*{PRM\*}
.xx "elf_nextscn: get/" "elf_getscn," "elf_ndxscn, elf_newscn," "" elf_getscn(3E)~\*{PRM\*}
.xx "section data." "elf_getdata," "elf_newdata, elf_rawdata: get" "" elf_getdata(3E)~\*{PRM\*}
.xx "section/" "elf_getscn, elf_ndxscn," "elf_newscn, elf_nextscn: get" "" elf_getscn(3E)~\*{PRM\*}
.xx "member access." "" "elf_next: sequential archive" "" elf_next(3E)~\*{PRM\*}
.xx "" "/elf_ndxscn, elf_newscn," "elf_nextscn: get section/" "" elf_getscn(3E)~\*{PRM\*}
.xx "access." "" "elf_rand: random archive member" "" elf_rand(3E)~\*{PRM\*}
.xx "" "elf_getdata, elf_newdata," "elf_rawdata: get section data." "" elf_getdata(3E)~\*{PRM\*}
.xx "uninterpreted file contents." "" "elf_rawfile: retrieve" "" elf_rawfile(3E)~\*{PRM\*}
.xx "pointer." "" "elf_strptr: make a string" "" elf_strptr(3E)~\*{PRM\*}
.xx "descriptor." "" "elf_update: update an ELF" "" elf_update(3E)~\*{PRM\*}
.xx "library and application/" "" "elf_version: coordinate ELF" "" elf_version(3E)~\*{PRM\*}
.xx "elf32_xlatetom: class-dependent/" "" "elf_xlate: elf32_xlatetof," "" elf_xlate(3E)~\*{PRM\*}
.xx "nroff or/" "soelim: resolve and" "eliminate .so requests from" "" soelim(1)~\*{BSD\*}
.xx "" "geteblk: get an" "empty buffer." "" geteblk(D3DK)~\*{DDRM\*}
.xx "size." "ngeteblk: get an" "empty buffer of the specified" "" ngeteblk(D3DK)~\*{DDRM\*}
.xx "" "x286emul:" "emulate XENIX 80286." "" x286emul(1)~\*{PRM\*}
.xx "" "/tgoto, tputs: curses interfaces" "(emulated) to the termcap/" "" curs_termcap(3X)~\*{CHAR\*}
.xx "" "ptem: STREAMS Pseudo Terminal" "Emulation module." "" ptem(7)~\*{STRM\*}
.xx "LP printers." "" "enable, disable: enable/disable" "" enable(1)~\*{URM\*}
.xx "accounting." "acct:" "enable or disable process" "" acct(2)~\*{PRM\*}
.xx "requests on a DMA/" "dma_enable:" "enable recognition of hardware" "" dma_enable(D3X)~\*{DDRM\*}
.xx "" "enable, disable:" "enable/disable LP printers." "" enable(1)~\*{URM\*}
.xx "serviced." "" "enableok: allow a queue to be" "" enableok(D3DK)~\*{DDRM\*}
.xx "its ASCII/" "uuencode, uudecode:" "encode a binary file, or decode" "" uuencode(1C)~\*{URM\*}
.xx "" "crypt:" "encode/decode." "" crypt(1)~\*{URM\*}
.xx "" "crypt, setkey," "encrypt: generate encryption." "" crypt(3C)~\*{PRM\*}
.xx "" "whether a character buffer is" "encrypted." "isencrypt: determine" isencrypt(3G)~\*{PRM\*}
.xx "" "crypt, setkey, encrypt: generate" "encryption." "" crypt(3C)~\*{PRM\*}
.xx "" "crypt: password and file" "encryption functions." "" crypt(3X)~\*{PRM\*}
.xx "" "chkey: change user" "encryption key." "" chkey(1)~\*{NI\*}
.xx "" "chkey: change user" "encryption key." "" chkey(1)~\*{NUAG\*}
.xx "" "makekey: generate" "encryption key." "" makekey(1)~\*{URM\*}
.xx "locations in program." "" "end, etext, edata: last" "" end(3C)~\*{PRM\*}
.xx "System (SCCS)." "sccs: front" "end for the Source Code Control" "" sccs(1)~\*{BSD\*}
.xx "" "/getgrgid, getgrnam\^, setgrent," "endgrent, fgetgrent: get group/" "" getgrent(3C)~\*{PRM\*}
.xx "" "/gethostbyname, sethostent," "endhostent: get network host/" "" gethostent(3N)~\*{NI\*}
.xx "" "/getnetbyname, setnetent," "endnetent: get network entry." "" getnetent(3N)~\*{NI\*}
.xx "" "t_close: close a transport" "endpoint." "" t_close(3N)~\*{NI\*}
.xx "" "t_open: establish a transport" "endpoint." "" t_open(3N)~\*{NI\*}
.xx "" "t_unbind: disable a transport" "endpoint." "" t_unbind(3N)~\*{NI\*}
.xx "" "Multibus II transport" "endpoint." "/an asynchronous" mb2a_closeport(3tai)~\*{MBTAI\*}
.xx "" "Multibus II transport" "endpoint." "/Closes a synchronous" mb2s_closeport(3tai)~\*{MBTAI\*}
.xx "" "socket: create an" "endpoint for communication." "" socket(3N)~\*{NI\*}
.xx "" "/Gets specific asynchronous" "endpoint information." "" mb2a_getinfo(3tai)~\*{MBTAI\*}
.xx "" "/Gets specific synchronous" "endpoint information." "" mb2s_getinfo(3tai)~\*{MBTAI\*}
.xx "" "Multibus II transport" "endpoint." "/Opens a synchronous" mb2s_openport(3tai)~\*{MBTAI\*}
.xx "" "Multibus II transport" "endpoint." "/Opens an asynchronous" mb2a_openport(3tai)~\*{MBTAI\*}
.xx "" "bind an address to a transport" "endpoint." "t_bind:" t_bind(3N)~\*{NI\*}
.xx "" "the current event on a transport" "endpoint." "t_look: look at" t_look(3N)~\*{NI\*}
.xx "" "manage options for a transport" "endpoint." "t_optmgmt:" t_optmgmt(3N)~\*{NI\*}
.xx "" "/getprotobyname, setprotoent," "endprotoent: get protocol entry." "" getprotoent(3N)~\*{NI\*}
.xx "" "/getpwuid, getpwnam, setpwent," "endpwent, fgetpwent: manipulate/" "" getpwent(3C)~\*{PRM\*}
.xx "" "/getservbyname, setservent," "endservent: get service entry." "" getservent(3N)~\*{NI\*}
.xx "" "getspent, getspnam\^, setspent," "endspent, fgetspent, lckpwdf,/" "" getspent(3C)~\*{PRM\*}
.xx "" "getusershell, setusershell," "endusershell: get legal user/" "" getusershell(3)~\*{BSD\*}
.xx "" "/getutline, pututline, setutent," "endutent, utmpname: access utmp/" "" getut(3C)~\*{PRM\*}
.xx "" "/pututxline, setutxent," "endutxent, utmpxname, getutmp,/" "" getutx(3C)~\*{PRM\*}
.xx "" "curs_initscr:  initscr, newterm," "endwin, isendwin, set_term,/" "" curs_initscr(3X)~\*{CHAR\*}
.xx "on an ethernet node's ethernet/" "" "enetinfo: provides information" "" enetinfo(1iref)~\*{MBRMAN\*}
.xx "ethernet controller." "" "enetload: resets and reloads the" "" enetload(1iref)~\*{MBRMAN\*}
.xx "" "grpck: check group database" "entries." "" grpck(1M)~\*{BSD\*}
.xx "" "pwck: check password database" "entries." "" pwck(1M)~\*{BSD\*}
.xx "" "getdents: read directory" "entries and put in a file system/" "" getdents(2)~\*{PRM\*}
.xx "" "/transmission and sets up table" "entries for reception of reply/" "" mps_AMPsend_rsvp(D3D)~\*{DDRM\*}
.xx "" "nlist: get" "entries from name list." "" nlist(3E)~\*{PRM\*}
.xx "" "nlist: get" "entries from symbol table." "" nlist(3)~\*{BSD\*}
.xx "" "logger: add" "entries to the system log." "" logger(1)~\*{BSD\*}
.xx "" "putpwent: write password file" "entry." "" putpwent(3C)~\*{PRM\*}
.xx "" "unlink: remove directory" "entry." "" unlink(2)~\*{PRM\*}
.xx "" "getnetpath: get netconfig" "entry corresponding to NETPATH/" "" getnetpath(3N)~\*{NI\*}
.xx "" "system independent directory" "entry." "dirent: file" dirent(4)~\*{SARM\*}
.xx "" "manipulate password file" "entry." "/endpwent, fgetpwent:" getpwent(3C)~\*{PRM\*}
.xx "" "utmp, wtmp: utmp and wtmp" "entry formats." "" utmp(4)~\*{PRM\*}
.xx "" "utmp, wtmp: utmp and wtmp" "entry formats." "" utmp(4)~\*{SARM\*}
.xx "" "utmpx, wtmpx: utmpx and wtmpx" "entry formats." "" utmpx(4)~\*{PRM\*}
.xx "" "utmpx, wtmpx: utmpx and wtmpx" "entry formats." "" utmpx(4)~\*{SARM\*}
.xx "" "getmntany: get mnttab file" "entry." "getmntent," getmntent(3C)~\*{PRM\*}
.xx "" "endnetent: get network" "entry." "/getnetbyname, setnetent," getnetent(3N)~\*{NI\*}
.xx "" "network configuration database" "entry." "getnetconfig: get" getnetconfig(3N)~\*{NI\*}
.xx "" "updwtmpx: access utmpx file" "entry." "/getutmpx, updwtmp," getutx(3C)~\*{PRM\*}
.xx "" "getvfsany: get vfstab file" "entry." "/getvfsfile, getvfsspec," getvfsent(3C)~\*{PRM\*}
.xx "" "manipulate shadow password file" "entry." "/lckpwdf, ulckpwdf:" getspent(3C)~\*{PRM\*}
.xx "character driver." "chpoll: poll" "entry point for a non-STREAMS" "" chpoll(D2DK)~\*{DDRM\*}
.xx "" "intro: introduction to driver" "entry point routines." "" intro(D2DK)~\*{DDRM\*}
.xx "" "write shadow password file" "entry." "putspent:" putspent(3C)~\*{PRM\*}
.xx "" "fgetgrent: get group file" "entry." "/setgrent, endgrent," getgrent(3C)~\*{PRM\*}
.xx "" "endhostent: get network host" "entry." "/sethostent," gethostent(3N)~\*{NI\*}
.xx "" "endprotoent: get protocol" "entry." "/setprotoent," getprotoent(3N)~\*{NI\*}
.xx "" "endservent: get service" "entry." "/setservent," getservent(3N)~\*{NI\*}
.xx "" "utmpname: access utmp file" "entry." "/setutent, endutent," getut(3C)~\*{PRM\*}
.xx "" "relogin: rename login" "entry to show current layer." "" relogin(1M)~\*{SARM\*}
.xx "" "relogin: rename login" "entry to show current layer." "" relogin(1M)~\*{URM\*}
.xx "execution." "" "env: set environment for command" "" env(1)~\*{URM\*}
.xx "user-preference variable files/" "" ".environ, .pref, .variables:" "" environ(4)~\*{SARM\*}
.xx "" "" "environ: user environment." "" environ(5)~\*{NI\*}
.xx "" "" "environ: user environment." "" environ(5)~\*{PRM\*}
.xx "" "" "environ: user environment." "" environ(5)~\*{SARM\*}
.xx "" "environ: user" "environment." "" environ(5)~\*{NI\*}
.xx "" "environ: user" "environment." "" environ(5)~\*{PRM\*}
.xx "" "environ: user" "environment." "" environ(5)~\*{SARM\*}
.xx "" "putenv: change or add value to" "environment." "" putenv(3C)~\*{PRM\*}
.xx "" "profile: setting up an" "environment at login time." "" profile(4)~\*{SARM\*}
.xx "" "/fpsetsticky: IEEE floating-point" "environment control." "" fpgetround(3C)~\*{PRM\*}
.xx "execution." "env: set" "environment for command" "" env(1)~\*{URM\*}
.xx "" "scompat: set up compatibility" "environment for console/" "" scompat(1)~\*{ACG\*}
.xx "" "/for the Framed Access Command" "Environment Interface." "" face(1)~\*{URM\*}
.xx "" "getenv: return value for" "environment name." "" getenv(3C)~\*{PRM\*}
.xx "" "/termattrs, termname: curses" "environment query routines." "" curs_termattrs(3X)~\*{CHAR\*}
.xx "" "performed for multi-user" "environment." "rc2: run commands" rc2(1M)~\*{SARM\*}
.xx "" "stop the Remote File Sharing" "environment." "rfstop:" rfstop(1M)~\*{NUAG\*}
.xx "" "stop the Remote File Sharing" "environment." "rfstop:" rfstop(1M)~\*{SARM\*}
.xx "set." "printenv: display" "environment variables currently" "" printenv(1)~\*{BSD\*}
.xx "" "set and unset local or global" "environment variables." "/unset:" set(1F)~\*{CHAR\*}
.xx "" "remove nroff, troff, tbl and" "eqn constructs." "deroff:" deroff(1)~\*{BSD\*}
.xx "" "remove nroff/troff, tbl, and" "eqn constructs." "deroff:" deroff(1)~\*{URM\*}
.xx "" "character definitions for" "eqn." "eqnchar: special" eqnchar(7)~\*{BSD\*}
.xx "mathematics." "" "eqn, neqn, checkeq: typeset" "" eqn(1)~\*{BSD\*}
.xx "definitions for eqn." "" "eqnchar: special character" "" eqnchar(7)~\*{BSD\*}
.xx "mrand48, jrand48,/" "drand48," "erand48, lrand48, nrand48," "" drand48(3C)~\*{PRM\*}
.xx "" "/post_form, unpost_form: write or" "erase forms from associated/" "" form_post(3X)~\*{CHAR\*}
.xx "" "/post_menu, unpost_menu: write or" "erase menus from associated/" "" menu_post(3X)~\*{CHAR\*}
.xx "" "clrbuf:" "erase the contents of a buffer." "" clrbuf(D3DK)~\*{DDRM\*}
.xx "clrtobot,/" "curs_clear:" "erase, werase, clear, wclear," "" curs_clear(3X)~\*{CHAR\*}
.xx "" "curs_termattrs:  baudrate," "erasechar, has_ic, has_il,/" "" curs_termattrs(3X)~\*{CHAR\*}
.xx "complementary error function." "" "erf, erfc: error function and" "" erf(3M)~\*{PRM\*}
.xx "complementary error/" "erf," "erfc: error function and" "" erf(3M)~\*{PRM\*}
.xx "prompt for and validate/" "ckdate," "errdate, helpdate, valdate:" "" ckdate(1)~\*{ISDG\*}
.xx "prompt for and validate/" "ckdate," "errdate, helpdate, valdate:" "" ckdate(1)~\*{SARM\*}
.xx "for and validate a group/" "ckgid," "errgid, helpgid, valgid: prompt" "" ckgid(1)~\*{ISDG\*}
.xx "for and validate a group/" "ckgid," "errgid, helpgid, valgid: prompt" "" ckgid(1)~\*{SARM\*}
.xx "" "" "errnos: error numbers." "" errnos(D5DK)~\*{DDRM\*}
.xx "error function." "erf, erfc:" "error function and complementary" "" erf(3M)~\*{PRM\*}
.xx "" "error function and complementary" "error function." "erf, erfc:" erf(3M)~\*{PRM\*}
.xx "" "elf_errmsg, elf_errno:" "error handling." "" elf_error(3E)~\*{PRM\*}
.xx "" "t_rcvuderr: receive a unit data" "error indication." "" t_rcvuderr(3N)~\*{NI\*}
.xx "" "strclean: STREAMS" "error logger cleanup program." "" strclean(1M)~\*{SARM\*}
.xx "" "strclean: STREAMS" "error logger cleanup program." "" strclean(1M)~\*{STRM\*}
.xx "" "strerr: STREAMS" "error logger daemon." "" strerr(1M)~\*{SARM\*}
.xx "" "strerr: STREAMS" "error logger daemon." "" strerr(1M)~\*{STRM\*}
.xx "" "log: interface to STREAMS" "error logging and event tracing." "" log(7)~\*{STRM\*}
.xx "" "t_error: produce" "error message." "" t_error(3N)~\*{NI\*}
.xx "system." "cmn_err: display an" "error message or panic the" "" cmn_err(D3DK)~\*{DDRM\*}
.xx "" "strerror: get" "error message string." "" strerror(3C)~\*{PRM\*}
.xx "" "perror: print system" "error messages." "" perror(3C)~\*{PRM\*}
.xx "header." "geterror: retrieve" "error number from a buffer" "" geterror(D3DK)~\*{DDRM\*}
.xx "" "errnos:" "error numbers." "" errnos(D5DK)~\*{DDRM\*}
.xx "" "introduction to system calls and" "error numbers." "intro:" intro(2)~\*{PRM\*}
.xx "" "matherr:" "error-handling function." "" matherr(3M)~\*{PRM\*}
.xx "" "input files; report possible" "errors." "/check nroff and troff" checknr(1)~\*{BSD\*}
.xx "" "side remote procedure call" "errors." "/routines for server" rpc_svc_err(3N)~\*{NI\*}
.xx "" "compress: find spelling" "errors." "/spellin, hashcheck," spell(1)~\*{URM\*}
.xx "block using an/" "" "esballoc: allocate a message" "" esballoc(D3DK)~\*{DDRM\*}
.xx "an externally-supplied buffer/" "" "esbbcall: call a function when" "" esbbcall(D3DK)~\*{DDRM\*}
.xx "" "compressing or expanding" "escape codes." "/copy strings," strccpy(3G)~\*{PRM\*}
.xx "another transport/" "t_connect:" "establish a connection with" "" t_connect(3N)~\*{NI\*}
.xx "" "t_open:" "establish a transport endpoint." "" t_open(3N)~\*{NI\*}
.xx "line connection." "dial:" "establish an outgoing terminal" "" dial(3C)~\*{NI\*}
.xx "" "setmnt:" "establish mount table." "" setmnt(1M)~\*{SARM\*}
.xx "characteristics." "tset, reset:" "establish or restore terminal" "" tset(1)~\*{BSD\*}
.xx "" "with information from" "/etc/passwd." "/update /etc/shadow" pwconv(1M)~\*{SARM\*}
.xx "from/" "pwconv: install and update" "/etc/shadow with information" "" pwconv(1M)~\*{SARM\*}
.xx "program." "end," "etext, edata: last locations in" "" end(3C)~\*{PRM\*}
.xx "operations." "ethers:" "Ethernet address mapping" "" ethers(3N)~\*{NI\*}
.xx "operations." "ethers:" "Ethernet address mapping" "" ethers(3N)~\*{NUAG\*}
.xx "database or domain." "ethers:" "Ethernet address to hostname" "" ethers(4)~\*{NUAG\*}
.xx "database or domain." "ethers:" "Ethernet address to hostname" "" ethers(4)~\*{SARM\*}
.xx "" "/on an ethernet node's" "ethernet controller." "" enetinfo(1iref)~\*{MBRMAN\*}
.xx "" "enetload: resets and reloads the" "ethernet controller." "" enetload(1iref)~\*{MBRMAN\*}
.xx "" "/device driver and MIX 386/530" "Ethernet controller board." "" i530(7iref)~\*{MBRMAN\*}
.xx "driver and/" "i530: iSBC 186/530" "Ethernet controller device" "" i530(7iref)~\*{MBRMAN\*}
.xx "" "i596: 82596" "Ethernet Driver." "" i596(7iref)~\*{MBRMAN\*}
.xx "" "ie6: 3C503 3Com" "Ethernet Driver." "" ie6(7)~\*{SARM\*}
.xx "" "/provides information on an" "ethernet node's ethernet/" "" enetinfo(1iref)~\*{MBRMAN\*}
.xx "operations." "" "ethers: Ethernet address mapping" "" ethers(3N)~\*{NI\*}
.xx "operations." "" "ethers: Ethernet address mapping" "" ethers(3N)~\*{NUAG\*}
.xx "hostname database or domain." "" "ethers: Ethernet address to" "" ethers(4)~\*{NUAG\*}
.xx "hostname database or domain." "" "ethers: Ethernet address to" "" ethers(4)~\*{SARM\*}
.xx "internal major device number." "" "etoimajor: convert external to" "" etoimajor(D3DK)~\*{DDRM\*}
.xx "" "hypot:" "Euclidean distance function." "" hypot(3M)~\*{PRM\*}
.xx "expression." "expr:" "evaluate arguments as an" "" expr(1)~\*{URM\*}
.xx "expression." "fmlexpr:" "evaluate arguments as an" "" fmlexpr(1F)~\*{CHAR\*}
.xx "" "test: condition" "evaluation command." "" test(1)~\*{BSD\*}
.xx "" "test: condition" "evaluation command." "" test(1F)~\*{CHAR\*}
.xx "" "test: condition" "evaluation command." "" test(1)~\*{URM\*}
.xx "" "inform polling processes that an" "event has occurred." "pollwakeup:" pollwakeup(D3DK)~\*{DDRM\*}
.xx "" "t_look: look at the current" "event on a transport endpoint." "" t_look(3N)~\*{NI\*}
.xx "" "pending occurrence of an" "event." "/process execution" sleep(D3K)~\*{DDRM\*}
.xx "" "to STREAMS error logging and" "event tracing." "log: interface" log(7)~\*{STRM\*}
.xx "keyboard/display driver/" "" "evgainit: Extended VGA" "" evgainit(1M)~\*{SARM\*}
.xx "" "edit: text editor (variant of" "ex for casual users)." "" edit(1)~\*{URM\*}
.xx "" "" "ex: text editor." "" ex(1)~\*{URM\*}
.xx "" "(visual) display editor based on" "ex." "vi: screen-oriented" vi(1)~\*{URM\*}
.xx "" "cscope: interactively" "examine a C program." "" cscope(1)~\*{PRM\*}
.xx "" "sigprocmask: change or" "examine signal mask." "" sigprocmask(2)~\*{PRM\*}
.xx "and pending." "sigpending:" "examine signals that are blocked" "" sigpending(2)~\*{PRM\*}
.xx "" "crash:" "examine system images." "" crash(1M)~\*{SARM\*}
.xx "" "bkexcept: change or display an" "exception list for incremental/" "" bkexcept(1M)~\*{SARM\*}
.xx "" "ieee_handler: IEEE" "exception trap handler function." "" ieee_handler(3M)~\*{BSD\*}
.xx "" "devfree: release devices from" "exclusive use." "" devfree(1M)~\*{SARM\*}
.xx "" "devreserv: reserves devices for" "exclusive use." "" devreserv(1M)~\*{SARM\*}
.xx "execve, execlp, execvp: execute/" "" "exec: execl, execv, execle," "" exec(2)~\*{PRM\*}
.xx "execlp, execvp: execute a/" "exec:" "execl, execv, execle, execve," "" exec(2)~\*{PRM\*}
.xx "execute a/" "exec: execl, execv," "execle, execve, execlp, execvp:" "" exec(2)~\*{PRM\*}
.xx "" "/execl, execv, execle, execve," "execlp, execvp: execute a file." "" exec(2)~\*{PRM\*}
.xx "" "run: run an" "executable." "" run(1F)~\*{CHAR\*}
.xx "files." "a.out: ELF" "(Executable and Linking Format)" "" a.out(4)~\*{PRM\*}
.xx "Command Environment/" "face:" "executable for the Framed Access" "" face(1)~\*{URM\*}
.xx "System V/386/" "fixshlib: alters" "executables to call SCO UNIX" "" fixshlib(1M)~\*{ACG\*}
.xx "" "doconfig:" "execute a configuration script." "" doconfig(3N)~\*{NI\*}
.xx "" "execle, execve, execlp, execvp:" "execute a file." "/execl, execv," exec(2)~\*{PRM\*}
.xx "specified length of/" "timeout:" "execute a function after a" "" timeout(D3DK)~\*{DDRM\*}
.xx "" "construct argument list(s) and" "execute command." "xargs:" xargs(1)~\*{URM\*}
.xx "time." "at, batch:" "execute commands at a later" "" at(1)~\*{URM\*}
.xx "" "regcmp, regex: compile and" "execute regular expression." "" regcmp(3G)~\*{PRM\*}
.xx "" "uuxqt:" "execute remote command requests." "" uuxqt(1M)~\*{SARM\*}
.xx "" "lastcomm: show the last commands" "executed, in reverse order." "" lastcomm(1)~\*{BSD\*}
.xx "" "env: set environment for command" "execution." "" env(1)~\*{URM\*}
.xx "" "uux: UNIX-to-UNIX system command" "execution." "" uux(1C)~\*{URM\*}
.xx "" "wakeup: resume suspended process" "execution." "" wakeup(D3K)~\*{DDRM\*}
.xx "" "lprof: display line-by-line" "execution count profile data." "" lprof(1)~\*{PRM\*}
.xx "" "nap: suspend" "execution for a short interval." "" nap(2)~\*{ACG\*}
.xx "of clock/" "delay: delay process" "execution for a specified number" "" delay(D3DK)~\*{DDRM\*}
.xx "" "sleep: suspend" "execution for an interval." "" sleep(1)~\*{URM\*}
.xx "" "sleep: suspend" "execution for interval." "" sleep(3)~\*{BSD\*}
.xx "" "sleep: suspend" "execution for interval." "" sleep(3C)~\*{PRM\*}
.xx "microseconds." "usleep: suspend" "execution for interval in" "" usleep(3)~\*{BSD\*}
.xx "an/" "sleep: suspend process" "execution pending occurrence of" "" sleep(D3K)~\*{DDRM\*}
.xx "" "monitor: prepare" "execution profile." "" monitor(3C)~\*{PRM\*}
.xx "" "rexecd: remote" "execution server." "" rexecd(1M)~\*{NUAG\*}
.xx "" "rexecd: remote" "execution server." "" rexecd(1M)~\*{SARM\*}
.xx "" "profil:" "execution time profile." "" profil(2)~\*{PRM\*}
.xx "execvp: execute a/" "exec: execl," "execv, execle, execve, execlp," "" exec(2)~\*{PRM\*}
.xx "a/" "exec: execl, execv, execle," "execve, execlp, execvp: execute" "" exec(2)~\*{PRM\*}
.xx "" "execv, execle, execve, execlp," "execvp: execute a file." "/execl," exec(2)~\*{PRM\*}
.xx "" "tunefs: tune up an" "existing file system." "" tunefs(1M)~\*{SARM\*}
.xx "" "create a new file or rewrite an" "existing one." "creat:" creat(2)~\*{PRM\*}
.xx "" "" "exit, _exit: terminate process." "" exit(2)~\*{PRM\*}
.xx "" "exit," "_exit: terminate process." "" exit(2)~\*{PRM\*}
.xx "log10, log10f, pow, powf, sqrt,/" "" "exp, expf, cbrt, log, logf," "" exp(3M)~\*{PRM\*}
.xx "from a bibliographic/" "refer:" "expand and insert references" "" refer(1)~\*{BSD\*}
.xx "" "pack, pcat, unpack: compress and" "expand files." "" pack(1)~\*{URM\*}
.xx "" "/copy strings, compressing or" "expanding escape codes." "" strccpy(3G)~\*{PRM\*}
.xx "connection." "t_snd: send data or" "expedited data over a" "" t_snd(3N)~\*{NI\*}
.xx "" "t_rcv: receive data or" "expedited data sent over a/" "" t_rcv(3N)~\*{NI\*}
.xx "log10f, pow, powf, sqrt,/" "exp," "expf, cbrt, log, logf, log10," "" exp(3M)~\*{PRM\*}
.xx "" "/log10f, pow, powf, sqrt, sqrtf:" "exponential, logarithm, power,/" "" exp(3M)~\*{PRM\*}
.xx "expression." "" "expr: evaluate arguments as an" "" expr(1)~\*{URM\*}
.xx "" "expr: evaluate arguments as an" "expression." "" expr(1)~\*{URM\*}
.xx "" "regcmp: regular" "expression compile." "" regcmp(1)~\*{PRM\*}
.xx "" "/compile, step, advance: regular" "expression compile and match/" "" regexp(5)~\*{PRM\*}
.xx "" "/compile, step, advance: regular" "expression compile and match/" "" regexp(5)~\*{SARM\*}
.xx "" "/compile, step, advance: regular" "expression compile and match/" "" regexpr(3G)~\*{PRM\*}
.xx "" "evaluate arguments as an" "expression." "fmlexpr:" fmlexpr(1F)~\*{CHAR\*}
.xx "" "regex, re_comp, re_exec: regular" "expression handler." "" regex(3)~\*{BSD\*}
.xx "" "compile and execute regular" "expression." "regcmp, regex:" regcmp(3G)~\*{PRM\*}
.xx "" "for a pattern using full regular" "expressions." "/search a file" egrep(1)~\*{URM\*}
.xx "source files." "" "exstr: extract strings from" "" exstr(1)~\*{URM\*}
.xx "" "addbib: create or" "extend a bibliographic database." "" addbib(1)~\*{BSD\*}
.xx "interface." "termiox:" "extended general terminal" "" termiox(7)~\*{SARM\*}
.xx "driver/" "evgainit:" "Extended VGA keyboard/display" "" evgainit(1M)~\*{SARM\*}
.xx "" "/double_to_decimal," "extended_to_decimal: convert/" "" floating_to_decimal(3)~\*{BSD\*}
.xx "iNA961 Release 3.0." "edlina:" "External Data Link driver for" "" edlina(7iref)~\*{MBRMAN\*}
.xx "" "xdr: library routines for" "external data representation." "" xdr(3N)~\*{NI\*}
.xx "" "/xdr_setpos: library routines for" "external data representation." "" xdr_admin(3N)~\*{NI\*}
.xx "" "/library routines for" "external data representation." "" xdr_complex(3N)~\*{NI\*}
.xx "stream/" "/library routines for" "external data representation" "" xdr_create(3N)~\*{NI\*}
.xx "" "/xdr_void: library routines for" "external data representation." "" xdr_simple(3N)~\*{NI\*}
.xx "" "getemajor: get" "external major device number." "" getemajor(D3DK)~\*{DDRM\*}
.xx "" "itoemajor: convert internal to" "external major device number." "" itoemajor(D3DK)~\*{DDRM\*}
.xx "" "geteminor: get" "external minor device number." "" geteminor(D3DK)~\*{DDRM\*}
.xx "device/" "etoimajor: convert" "external to internal major" "" etoimajor(D3DK)~\*{DDRM\*}
.xx "" "/a message block using an" "externally-supplied buffer." "" esballoc(D3DK)~\*{DDRM\*}
.xx "be/" "/call a function when an" "externally-supplied buffer can" "" esbbcall(D3DK)~\*{DDRM\*}
.xx "statistics." "xts:" "extract and print xt driver" "" xts(1M)~\*{SARM\*}
.xx "packet traces." "xtt:" "extract and print xt driver" "" xtt(1M)~\*{SARM\*}
.xx "files." "exstr:" "extract strings from source" "" exstr(1)~\*{URM\*}
.xx "" "/ceilf, copysign, fmod, fmodf," "fabs, fabsf, rint, remainder:/" "" floor(3M)~\*{PRM\*}
.xx "" "/copysign, fmod, fmodf, fabs," "fabsf, rint, remainder: floor,/" "" floor(3M)~\*{PRM\*}
.xx "" "pathalias: alias file for" "FACE." "" pathalias(4)~\*{SARM\*}
.xx "Access Command Environment/" "" "face: executable for the Framed" "" face(1)~\*{URM\*}
.xx "information." ".ott:" "FACE object architecture" "" ott(4)~\*{SARM\*}
.xx "" "variable files for" "FACE." "/user-preference" environ(4)~\*{SARM\*}
.xx "" "sigvec: software signal" "facilities." "" sigvec(3)~\*{BSD\*}
.xx "" "simplified software signal" "facilities." "signal:" signal(3)~\*{BSD\*}
.xx "" "inter-process communication" "facilities status." "ipcs: report" ipcs(1)~\*{URM\*}
.xx "of a number." "" "factor: obtain the prime factors" "" factor(1)~\*{URM\*}
.xx "" "factor: obtain the prime" "factors of a number." "" factor(1)~\*{URM\*}
.xx "" "loginlog: log of" "failed login attempts." "" loginlog(4)~\*{SARM\*}
.xx "" "true," "false: provide truth values." "" true(1)~\*{URM\*}
.xx "" "inet: Internet protocol" "family." "" inet(7)~\*{NUAG\*}
.xx "" "inet: Internet protocol" "family." "" inet(7)~\*{SARM\*}
.xx "" "data in a machine-independent" "fashion." "/access long integer" sputl(3X)~\*{PRM\*}
.xx "" "scsi_wd7000: WD7000" "FASST2 host adapter subsystem." "" scsi_wd7000(7)~\*{SARM\*}
.xx "the system without checking the/" "" "fastboot, fasthalt: reboot/halt" "" fastboot(1M)~\*{BSD\*}
.xx "without checking the/" "fastboot," "fasthalt: reboot/halt the system" "" fastboot(1M)~\*{BSD\*}
.xx "file descriptor to an object in/" "" "fattach: attach a STREAMS-based" "" fattach(3C)~\*{STRM\*}
.xx "directory." "chdir," "fchdir: change working" "" chdir(2)~\*{PRM\*}
.xx "" "chmod," "fchmod: change mode of file." "" chmod(2)~\*{PRM\*}
.xx "of a file." "chown, lchown," "fchown: change owner and group" "" chown(2)~\*{PRM\*}
.xx "stream." "" "fclose, fflush: close or flush a" "" fclose(3S)~\*{PRM\*}
.xx "" "" "fcntl: file control." "" fcntl(2)~\*{PRM\*}
.xx "" "" "fcntl: file control options." "" fcntl(5)~\*{PRM\*}
.xx "" "" "fcntl: file control options." "" fcntl(5)~\*{SARM\*}
.xx "sfconvert, sgconvert:/" "econvert," "fconvert, gconvert, seconvert," "" econvert(3)~\*{BSD\*}
.xx "convert/" "ecvt, ecvtl," "fcvt, fcvtl, gcvt, gcvtl:" "" ecvt(3C)~\*{PRM\*}
.xx "" "ecvt, ecvtl, fcvt," "fcvtl, gcvt, gcvtl: convert/" "" ecvt(3C)~\*{PRM\*}
.xx "" "" "fd: diskette (floppy disk)." "" fd(7)~\*{SARM\*}
.xx " flexible disk device d rivers." "" "fd: Information for Multibus" "" fd(7iref)~\*{MBRMAN\*}
.xx "STREAMS-based file descriptor." "" "fdetach: detach a name from a" "" fdetach(1M)~\*{STRM\*}
.xx "STREAMS-based file descriptor." "" "fdetach: detach a name from a" "" fdetach(3C)~\*{STRM\*}
.xx "disk partition table." "" "fdisk: create or modify hard" "" fdisk(1M)~\*{SARM\*}
.xx "" "fopen, freopen," "fdopen: open a stream." "" fopen(3S)~\*{BSD\*}
.xx "" "fopen, freopen," "fdopen: open a stream." "" fopen(3S)~\*{PRM\*}
.xx "full file system archive." "" "fdp: create, or restore from, a" "" fdp(1M)~\*{SARM\*}
.xx "status inquiries." "ferror," "feof, clearerr, fileno: stream" "" ferror(3S)~\*{PRM\*}
.xx "stream status inquiries." "" "ferror, feof, clearerr, fileno:" "" ferror(3S)~\*{PRM\*}
.xx "" "dbm, dbminit, dbmclose," "fetch, store, delete, firstkey,/" "" dbm(3)~\*{NI\*}
.xx "" "dbm:  dbminit, dbmclose," "fetch, store, delete, firstkey,/" "" dbm(3X)~\*{BSD\*}
.xx "" "head: display first" "few lines of files." "" head(1)~\*{URM\*}
.xx "and statistics for a file/" "" "ff (generic): list file names" "" ff(1M)~\*{SARM\*}
.xx "information." "" "ff (s5): display i-list" "" ff(1M)~\*{SARM\*}
.xx "statistics for a ufs file/" "" "ff (ufs): list file names and" "" ff(1M)~\*{SARM\*}
.xx "a full file system archive." "" "ffile: create, or restore from," "" ffile(1M)~\*{SARM\*}
.xx "" "fclose," "fflush: close or flush a stream." "" fclose(3S)~\*{PRM\*}
.xx "" "bstring:  bcopy, bcmp, bzero," "ffs: bit and byte string/" "" bstring(3)~\*{BSD\*}
.xx "" "" "ffs: find first set bit." "" ffs(3C)~\*{PRM\*}
.xx "word from a/" "getc, getchar," "fgetc, getw: get character or" "" getc(3S)~\*{PRM\*}
.xx "" "/getgrnam\^, setgrent, endgrent," "fgetgrent: get group file entry." "" getgrent(3C)~\*{PRM\*}
.xx "pointer in a stream." "fsetpos," "fgetpos: reposition a file" "" fsetpos(3C)~\*{PRM\*}
.xx "" "/getpwnam, setpwent, endpwent," "fgetpwent: manipulate password/" "" getpwent(3C)~\*{PRM\*}
.xx "stream." "gets," "fgets: get a string from a" "" gets(3S)~\*{PRM\*}
.xx "" "/getspnam\^, setspent, endspent," "fgetspent, lckpwdf, ulckpwdf:/" "" getspent(3C)~\*{PRM\*}
.xx "character string." "" "fgrep: search a file for a" "" fgrep(1)~\*{URM\*}
.xx "" "set_max_field: set and get forms" "field attributes." "/field_status," form_field_buffer(3X)~\*{CHAR\*}
.xx "" "/dynamic_field_info: get forms" "field characteristics." "" form_field_info(3X)~\*{CHAR\*}
.xx "" "/field_type, field_arg: forms" "field data type validation." "" form_field_validation(3X)~\*{CHAR\*}
.xx "" "set forms current page and" "field." "/field_index:" form_page(3X)~\*{CHAR\*}
.xx "or/" "/data_behind: tell if forms" "field has off-screen data ahead" "" form_data(3X)~\*{CHAR\*}
.xx "" "ics_hostid: returns the host id" "field of the HOST ID record in/" "" ics_hostid(D3D)~\*{DDRM\*}
.xx "" "/field_opts: forms" "field option routines." "" form_field_opts(3X)~\*{CHAR\*}
.xx "" "reset: reset the current form" "field to its default values." "" reset(1F)~\*{CHAR\*}
.xx "" "/set_field_type, field_type," "field_arg: forms field data type/" "" form_field_validation(3X)~\*{CHAR\*}
.xx "" "/field_fore, set_field_back," "field_back, set_field_pad,/" "" form_field_attributes(3X)~\*{CHAR\*}
.xx "field_status,/" "/set_field_buffer," "field_buffer, set_field_status," "" form_field_buffer(3X)~\*{CHAR\*}
.xx "" "/set_form_fields, form_fields," "field_count, move_field: connect/" "" form_field(3X)~\*{CHAR\*}
.xx "field_back,/" "/set_field_fore," "field_fore, set_field_back," "" form_field_attributes(3X)~\*{CHAR\*}
.xx "page and field." "/current_field," "field_index: set forms current" "" form_page(3X)~\*{CHAR\*}
.xx "get forms/" "form_field_info:" "field_info, dynamic_field_info:" "" form_field_info(3X)~\*{CHAR\*}
.xx "" "/form_term, set_field_init," "field_init, set_field_term,/" "" form_hook(3X)~\*{CHAR\*}
.xx "appearance of/" "/set_field_just," "field_just: format the general" "" form_field_just(3X)~\*{CHAR\*}
.xx "" "/field_opts_on, field_opts_off," "field_opts: forms field option/" "" form_field_opts(3X)~\*{CHAR\*}
.xx "" "/set_field_opts, field_opts_on," "field_opts_off, field_opts:/" "" form_field_opts(3X)~\*{CHAR\*}
.xx "field_opts:/" "/set_field_opts," "field_opts_on, field_opts_off," "" form_field_opts(3X)~\*{CHAR\*}
.xx "" "/field_back, set_field_pad," "field_pad: format the general/" "" form_field_attributes(3X)~\*{CHAR\*}
.xx "" "bufsplit: split buffer into" "fields." "" bufsplit(3G)~\*{PRM\*}
.xx "" "create and destroy forms" "fields." "/free_field,:" form_field_new(3X)~\*{CHAR\*}
.xx "" "cut: cut out selected" "fields of each line of a file." "" cut(1)~\*{URM\*}
.xx "" "fmlcut: cut out selected" "fields of each line of a file." "" fmlcut(1F)~\*{CHAR\*}
.xx "" "field_count, move_field: connect" "fields to forms." "/form_fields," form_field(3X)~\*{CHAR\*}
.xx "" "/field_buffer, set_field_status," "field_status, set_max_field: set/" "" form_field_buffer(3X)~\*{CHAR\*}
.xx "" "/field_init, set_field_term," "field_term: assign/" "" form_hook(3X)~\*{CHAR\*}
.xx "field data type/" "/set_field_type," "field_type, field_arg: forms" "" form_field_validation(3X)~\*{CHAR\*}
.xx "" "/link_fieldtype: forms" "fieldtype routines." "" form_fieldtype(3X)~\*{CHAR\*}
.xx "application/" "/set_field_userptr," "field_userptr: associate" "" form_field_userptr(3X)~\*{CHAR\*}
.xx "" "mkfifo: create a new" "FIFO." "" mkfifo(3C)~\*{PRM\*}
.xx "" "mkfifo: make" "FIFO special file." "" mkfifo(1M)~\*{SARM\*}
.xx "" "admin: installation defaults" "file." "" admin(4)~\*{SARM\*}
.xx "" "archives: device header" "file." "" archives(4)~\*{SARM\*}
.xx "" "chmod, fchmod: change mode of" "file." "" chmod(2)~\*{PRM\*}
.xx "" "chsize: change the size of a" "file." "" chsize(2)~\*{ACG\*}
.xx "" "compver: compatible versions" "file." "" compver(4)~\*{ISDG\*}
.xx "" "copyright: copyright information" "file." "" copyright(4)~\*{ISDG\*}
.xx "" "core: core image" "file." "" core(4)~\*{PRM\*}
.xx "" "core: core image" "file." "" core(4)~\*{SARM\*}
.xx "" "crontab: user crontab" "file." "" crontab(1)~\*{URM\*}
.xx "" "dd: convert and copy a" "file." "" dd(1M)~\*{SARM\*}
.xx "" "dd: convert and copy a" "file." "" dd(1M)~\*{URM\*}
.xx "" "elf_end: finish using an object" "file." "" elf_end(3E)~\*{PRM\*}
.xx "" "get: get a version of an SCCS" "file." "" get(1)~\*{PRM\*}
.xx "" "group: group" "file." "" group(4)~\*{SARM\*}
.xx "" "issue: issue identification" "file." "" issue(4)~\*{SARM\*}
.xx "" "link: link to a" "file." "" link(2)~\*{PRM\*}
.xx "" "login: login default" "file." "" login(4)~\*{SARM\*}
.xx "" "mkfifo: make FIFO special" "file." "" mkfifo(1M)~\*{SARM\*}
.xx "" "mknod: make a special" "file." "" mknod(1M)~\*{ACG\*}
.xx "" "mknod: make a special" "file." "" mknod(1M)~\*{SARM\*}
.xx "" "nm: print name list of an object" "file." "" nm(1)~\*{PRM\*}
.xx "" "null: the null" "file." "" null(7)~\*{SARM\*}
.xx "" "passwd: password" "file." "" passwd(4)~\*{SARM\*}
.xx "" "pkginfo: package characteristics" "file." "" pkginfo(4)~\*{ISDG\*}
.xx "" "pkgproto: generate a prototype" "file." "" pkgproto(1)~\*{ISDG\*}
.xx "" "prototype: package information" "file." "" prototype(4)~\*{ISDG\*}
.xx "" "prs: print an SCCS" "file." "" prs(1)~\*{PRM\*}
.xx "" "read: read from" "file." "" read(2)~\*{PRM\*}
.xx "" "reinit: runs an initialization" "file." "" reinit(1F)~\*{CHAR\*}
.xx "" "remove: remove" "file." "" remove(3C)~\*{PRM\*}
.xx "" "rename: change the name of a" "file." "" rename(1)~\*{URM\*}
.xx "" "rename: change the name of a" "file." "" rename(2)~\*{PRM\*}
.xx "" "sccsfile: format of SCCS" "file." "" sccsfile(4)~\*{PRM\*}
.xx "" "sccsfile: format of SCCS" "file." "" sccsfile(4)~\*{SARM\*}
.xx "" "shadow: shadow password" "file." "" shadow(4)~\*{SARM\*}
.xx "" "space: disk space requirement" "file." "" space(4)~\*{ISDG\*}
.xx "" "sum: calculate a checksum for a" "file." "" sum(1)~\*{BSD\*}
.xx "" "tail: deliver the last part of a" "file." "" tail(1)~\*{URM\*}
.xx "" "term: format of compiled term" "file." "" term(4)~\*{CHAR\*}
.xx "" "term: format of compiled term" "file." "" term(4)~\*{SARM\*}
.xx "" "tmpfile: create a temporary" "file." "" tmpfile(3S)~\*{PRM\*}
.xx "" "uniq: report repeated lines in a" "file." "" uniq(1)~\*{URM\*}
.xx "" "val: validate an SCCS" "file." "" val(1)~\*{PRM\*}
.xx "" "write, writev: write on a" "file." "" write(2)~\*{PRM\*}
.xx "" "determine accessibility of a" "file." "access:" access(2)~\*{PRM\*}
.xx "times." "utime: set" "file access and modification" "" utime(2)~\*{PRM\*}
.xx "" "elf: object" "file access library." "" elf(3E)~\*{PRM\*}
.xx "" "tar: tape" "file archiver." "" tar(1)~\*{URM\*}
.xx "" "cpio: copy" "file archives in and out." "" cpio(1)~\*{URM\*}
.xx "volumes." "cpout: copy out" "file archives to multiple" "" cpout(1iref)~\*{MBRMAN\*}
.xx "" "pwck, grpck: password/group" "file checkers." "" pwck(1M)~\*{SARM\*}
.xx "" "change the group ownership of a" "file." "chgrp:" chgrp(1)~\*{URM\*}
.xx "" "change owner and group of a" "file." "chown, lchown, fchown:" chown(2)~\*{PRM\*}
.xx "" "diff: differential" "file comparator." "" diff(1)~\*{URM\*}
.xx "" "diff3: 3-way differential" "file comparison." "" diff3(1)~\*{URM\*}
.xx "sharing resources." "dfstab:" "file containing commands for" "" dfstab(4)~\*{NUAG\*}
.xx "sharing resources." "dfstab:" "file containing commands for" "" dfstab(4)~\*{SARM\*}
.xx "settings information/" "ttydefs:" "file contains terminal line" "" ttydefs(4)~\*{NI\*}
.xx "" "retrieve uninterpreted" "file contents." "elf_rawfile:" elf_rawfile(3E)~\*{PRM\*}
.xx "" "fcntl:" "file control." "" fcntl(2)~\*{PRM\*}
.xx "" "fcntl:" "file control options." "" fcntl(5)~\*{PRM\*}
.xx "" "fcntl:" "file control options." "" fcntl(5)~\*{SARM\*}
.xx "" "rcp: remote" "file copy." "" rcp(1)~\*{NUAG\*}
.xx "" "rcp: remote" "file copy." "" rcp(1)~\*{URM\*}
.xx "" "public UNIX-to-UNIX system" "file copy." "uuto, uupick:" uuto(1C)~\*{URM\*}
.xx "" "umask: set and get" "file creation mask." "" umask(2)~\*{PRM\*}
.xx "" "fields of each line of a" "file." "cut: cut out selected" cut(1)~\*{URM\*}
.xx "" "information from an object" "file." "/debugging and line number" strip(1)~\*{PRM\*}
.xx "" "make a delta (change) to an SCCS" "file." "delta:" delta(1)~\*{PRM\*}
.xx "" "close: close a" "file descriptor." "" close(2)~\*{PRM\*}
.xx "" "dup2: duplicate an open" "file descriptor." "" dup2(3C)~\*{PRM\*}
.xx "" "dup: duplicate an open" "file descriptor." "" dup(2)~\*{PRM\*}
.xx "" "elf_begin: make a" "file descriptor." "" elf_begin(3E)~\*{PRM\*}
.xx "" "elf_cntl: control a" "file descriptor." "" elf_cntl(3E)~\*{PRM\*}
.xx "" "isastream: test a" "file descriptor." "" isastream(3C)~\*{STRM\*}
.xx "" "a name from a STREAMS-based" "file descriptor." "/detach" fdetach(1M)~\*{STRM\*}
.xx "" "a name from a STREAMS-based" "file descriptor." "/detach" fdetach(3C)~\*{STRM\*}
.xx "" "/dev/fd:" "file descriptor files." "" fd(4)~\*{SARM\*}
.xx "" "fattach: attach a STREAMS-based" "file descriptor to an object in/" "" fattach(3C)~\*{STRM\*}
.xx "" "" "file: determine file type." "" file(1)~\*{URM\*}
.xx "" "sdiff: print" "file differences side-by-side." "" sdiff(1)~\*{URM\*}
.xx "" "commentary history of an SCCS" "file." "/display the delta and" prt(1)~\*{BSD\*}
.xx "" "dump selected parts of an object" "file." "dump:" dump(1)~\*{PRM\*}
.xx "" "sact: print current SCCS" "file editing activity." "" sact(1)~\*{PRM\*}
.xx "" "the base offset for an object" "file." "elf_getbase: get" elf_getbase(3E)~\*{PRM\*}
.xx "" "crypt: password and" "file encryption functions." "" crypt(3X)~\*{PRM\*}
.xx "" "getmntent, getmntany: get mnttab" "file entry." "" getmntent(3C)~\*{PRM\*}
.xx "" "putpwent: write password" "file entry." "" putpwent(3C)~\*{PRM\*}
.xx "" "putspent: write shadow password" "file entry." "" putspent(3C)~\*{PRM\*}
.xx "" "updwtmp, updwtmpx: access utmpx" "file entry." "/getutmp, getutmpx," getutx(3C)~\*{PRM\*}
.xx "" "getvfsany: get vfstab" "file entry." "/getvfsspec," getvfsent(3C)~\*{PRM\*}
.xx "" "manipulate shadow password" "file entry." "/lckpwdf, ulckpwdf:" getspent(3C)~\*{PRM\*}
.xx "" "endgrent, fgetgrent: get group" "file entry." "/setgrent," getgrent(3C)~\*{PRM\*}
.xx "" "fgetpwent: manipulate password" "file entry." "/setpwent, endpwent," getpwent(3C)~\*{PRM\*}
.xx "" "endutent, utmpname: access utmp" "file entry." "/setutent," getut(3C)~\*{PRM\*}
.xx "" "execlp, execvp: execute a" "file." "/execv, execle, execve," exec(2)~\*{PRM\*}
.xx "" "fields of each line of a" "file." "fmlcut: cut out selected" fmlcut(1F)~\*{CHAR\*}
.xx "" "fgrep: search a" "file for a character string." "" fgrep(1)~\*{URM\*}
.xx "" "fmlgrep: search a" "file for a pattern." "" fmlgrep(1F)~\*{CHAR\*}
.xx "" "grep: search a" "file for a pattern." "" grep(1)~\*{URM\*}
.xx "regular/" "egrep: search a" "file for a pattern using full" "" egrep(1)~\*{URM\*}
.xx "" "pathalias: alias" "file for FACE." "" pathalias(4)~\*{SARM\*}
.xx "" "netrc:" "file for ftp remote login data." "" netrc(4)~\*{NUAG\*}
.xx "" "netrc:" "file for ftp remote login data." "" netrc(4)~\*{SARM\*}
.xx "constants." "limits: header" "file for implementation-specific" "" limits(4)~\*{PRM\*}
.xx "constants." "limits: header" "file for implementation-specific" "" limits(4)~\*{SARM\*}
.xx "" "resolv.conf: configuration" "file for name server routines." "" resolv.conf(4)~\*{NUAG\*}
.xx "" "resolv.conf: configuration" "file for name server routines." "" resolv.conf(4)~\*{SARM\*}
.xx "Service/" "updaters: configuration" "file for Network Information" "" updaters(4)~\*{NI\*}
.xx "" "strcf: STREAMS Configuration" "File for STREAMS TCP/IP." "" strcf(4)~\*{NUAG\*}
.xx "" "strcf: STREAMS Configuration" "File for STREAMS TCP/IP." "" strcf(4)~\*{SARM\*}
.xx "" "unistd: header" "file for symbolic constants." "" unistd(4)~\*{SARM\*}
.xx "" "syslog.conf: configuration" "file for syslogd system log/" "" syslog.conf(4)~\*{BSD\*}
.xx "" "ctags: create a tags" "file for use with vi." "" ctags(1)~\*{URM\*}
.xx "" "acct: per-process accounting" "file format." "" acct(4)~\*{SARM\*}
.xx "" "ar: archive" "file format." "" ar(4)~\*{PRM\*}
.xx "" "ar: archive" "file format." "" ar(4)~\*{SARM\*}
.xx "" "mdevice:" "file format." "" mdevice(4)~\*{ISDG\*}
.xx "" "mdevice:" "file format." "" mdevice(4)~\*{SARM\*}
.xx "" "mfsys:" "file format." "" mfsys(4)~\*{ISDG\*}
.xx "" "mfsys:" "file format." "" mfsys(4)~\*{SARM\*}
.xx "" "mtune:" "file format." "" mtune(4)~\*{ISDG\*}
.xx "" "mtune:" "file format." "" mtune(4)~\*{SARM\*}
.xx "" "sdevice:" "file format." "" sdevice(4)~\*{ISDG\*}
.xx "" "sdevice:" "file format." "" sdevice(4)~\*{SARM\*}
.xx "" "sfsys:" "file format." "" sfsys(4)~\*{ISDG\*}
.xx "" "sfsys:" "file format." "" sfsys(4)~\*{SARM\*}
.xx "" "stune:" "file format." "" stune(4)~\*{ISDG\*}
.xx "" "stune:" "file format." "" stune(4)~\*{SARM\*}
.xx "" "Multibus II configuration" "file format." "config:" config(4iref)~\*{MBRMAN\*}
.xx "" "pnch:" "file format for card images." "" pnch(4)~\*{SARM\*}
.xx "" "intro: introduction to" "file formats." "" intro(4)~\*{PRM\*}
.xx "" "intro: introduction to" "file formats." "" intro(4)~\*{SARM\*}
.xx "" "removef: remove a" "file from software database." "" removef(1M)~\*{ISDG\*}
.xx "" "readfile, longline: reads" "file, gets longest line." "" readfile(1F)~\*{CHAR\*}
.xx "" "retrieve class-dependent object" "file header." "/elf32_newehdr:" elf_getehdr(3E)~\*{PRM\*}
.xx "files." "filehdr:" "file header for common object" "" filehdr(4)~\*{SARM\*}
.xx "" "elf_getident: retrieve" "file identification data." "" elf_getident(3E)~\*{PRM\*}
.xx "" "pathfind: search for named" "file in named directories." "" pathfind(3G)~\*{PRM\*}
.xx "" "copylist: copy a" "file into memory." "" copylist(3G)~\*{PRM\*}
.xx "" "split: split a" "file into pieces." "" split(1)~\*{URM\*}
.xx "" "Information Service (NIS) dbm" "file." "makedbm: make a Network" makedbm(1M)~\*{NI\*}
.xx "" "versions of a troff input" "file." "/mark differences between" diffmk(1)~\*{BSD\*}
.xx "" "the comment section of an object" "file." "mcs: manipulate" mcs(1)~\*{PRM\*}
.xx "" "or a special or ordinary" "file." "mknod: make a directory," mknod(2)~\*{ACG\*}
.xx "" "or a special or ordinary" "file." "mknod: make a directory," mknod(2)~\*{PRM\*}
.xx "" "chmod: change" "file mode." "" chmod(1)~\*{URM\*}
.xx "" "browse or page through a text" "file." "more, page:" more(1)~\*{URM\*}
.xx "" "mkstemp: make a unique" "file name." "" mkstemp(3)~\*{BSD\*}
.xx "" "mktemp: make a unique" "file name." "" mktemp(3C)~\*{PRM\*}
.xx "" "realpath: returns the real" "file name." "" realpath(3C)~\*{PRM\*}
.xx "" "ctermid: generate" "file name for terminal." "" ctermid(3S)~\*{PRM\*}
.xx "ufs file system." "ff (ufs): list" "file names and statistics for a" "" ff(1M)~\*{SARM\*}
.xx "" "data base for the mail aliases" "file." "newaliases: rebuild the" newaliases(1M)~\*{BSD\*}
.xx "" "change the format of a text" "file." "newform:" newform(1)~\*{URM\*}
.xx "" "/find the slot in the utmp" "file of the current user." "" ttyslot(3C)~\*{PRM\*}
.xx "" "printable strings in an object" "file or binary." "strings: find" strings(1)~\*{URM\*}
.xx "" "/uudecode: encode a binary" "file, or decode its ASCII/" "" uuencode(1C)~\*{URM\*}
.xx "" "identify processes using a" "file or file structure." "fuser:" fuser(1M)~\*{SARM\*}
.xx "" "creat: create a new" "file or rewrite an existing one." "" creat(2)~\*{PRM\*}
.xx "" "chown: change" "file owner." "" chown(1)~\*{BSD\*}
.xx "" "chown: change" "file owner." "" chown(1)~\*{URM\*}
.xx "" "the parent directory name of a" "file path name." "dirname: report" dirname(3G)~\*{PRM\*}
.xx "" "fixperm: correct or initialize" "file permissions and ownership." "" fixperm(1)~\*{ACG\*}
.xx "" "/correct or initialize XENIX" "file permissions and ownership." "" fixperm(1M)~\*{SARM\*}
.xx "" "pg:" "file perusal filter for CRTs." "" pg(1)~\*{URM\*}
.xx "" "package contents description" "file." "pkgmap:" pkgmap(4)~\*{ISDG\*}
.xx "" "lseek: move read/write" "file pointer." "" lseek(2)~\*{PRM\*}
.xx "" "/rewind, ftell: reposition a" "file pointer in a stream." "" fseek(3S)~\*{PRM\*}
.xx "" "fsetpos, fgetpos: reposition a" "file pointer in a stream." "" fsetpos(3C)~\*{PRM\*}
.xx "" "the page order in a PostScript" "file." "postreverse: reverse" postreverse(1)~\*{URM\*}
.xx "" "locking: lock or unlock a" "file region for reading or/" "" locking(2)~\*{ACG\*}
.xx "" "File Sharing name server master" "file." "rfmaster: Remote" rfmaster(4)~\*{NUAG\*}
.xx "" "File Sharing name server master" "file." "rfmaster: Remote" rfmaster(4)~\*{SARM\*}
.xx "" "remove a delta from an SCCS" "file." "rmdel:" rmdel(1)~\*{PRM\*}
.xx "" "files or subsequent lines of one" "file." "/same lines of several" paste(1)~\*{URM\*}
.xx "" "bfs: big" "file scanner." "" bfs(1)~\*{URM\*}
.xx "" "compare two versions of an SCCS" "file." "sccsdiff:" sccsdiff(1)~\*{PRM\*}
.xx "" "a curses screen from (to) a" "file." "/scr_set: read (write)" curs_scr_dump(3X)~\*{CHAR\*}
.xx "" "rfstart: start Remote" "File Sharing." "" rfstart(1M)~\*{NUAG\*}
.xx "" "rfstart: start Remote" "File Sharing." "" rfstart(1M)~\*{SARM\*}
.xx "" "rfudaemon: Remote" "File Sharing daemon process." "" rfudaemon(1M)~\*{NUAG\*}
.xx "" "rfudaemon: Remote" "File Sharing daemon process." "" rfudaemon(1M)~\*{SARM\*}
.xx "administration." "rfadmin: Remote" "File Sharing domain" "" rfadmin(1M)~\*{NUAG\*}
.xx "administration." "rfadmin: Remote" "File Sharing domain" "" rfadmin(1M)~\*{SARM\*}
.xx "names." "dname: print Remote" "File Sharing domain and network" "" dname(1M)~\*{NUAG\*}
.xx "names." "dname: print Remote" "File Sharing domain and network" "" dname(1M)~\*{SARM\*}
.xx "" "rfstop: stop the Remote" "File Sharing environment." "" rfstop(1M)~\*{NUAG\*}
.xx "" "rfstop: stop the Remote" "File Sharing environment." "" rfstop(1M)~\*{SARM\*}
.xx "" "rfpasswd: change Remote" "File Sharing host password." "" rfpasswd(1M)~\*{NUAG\*}
.xx "" "rfpasswd: change Remote" "File Sharing host password." "" rfpasswd(1M)~\*{SARM\*}
.xx "file." "rfmaster: Remote" "File Sharing name server master" "" rfmaster(4)~\*{NUAG\*}
.xx "file." "rfmaster: Remote" "File Sharing name server master" "" rfmaster(4)~\*{SARM\*}
.xx "" "nsquery: Remote" "File Sharing name server query." "" nsquery(1M)~\*{NUAG\*}
.xx "" "nsquery: Remote" "File Sharing name server query." "" nsquery(1M)~\*{SARM\*}
.xx "script." "rfuadmin: Remote" "File Sharing notification shell" "" rfuadmin(1M)~\*{NUAG\*}
.xx "script." "rfuadmin: Remote" "File Sharing notification shell" "" rfuadmin(1M)~\*{SARM\*}
.xx "" "/mount, unmount Remote" "File Sharing resources." "" rmountall(1M)~\*{NUAG\*}
.xx "" "/mount, unmount Remote" "File Sharing resources." "" rmountall(1M)~\*{SARM\*}
.xx "mapping." "idload: Remote" "File Sharing user and group" "" idload(1M)~\*{NUAG\*}
.xx "mapping." "idload: Remote" "File Sharing user and group" "" idload(1M)~\*{SARM\*}
.xx "" "stat, lstat, fstat: get" "file status." "" stat(2)~\*{ACG\*}
.xx "" "stat, lstat, fstat: get" "file status." "" stat(2)~\*{PRM\*}
.xx "" "processes using a file or" "file structure." "fuser: identify" fuser(1M)~\*{SARM\*}
.xx "" "checksum and block count of a" "file." "sum: print" sum(1)~\*{URM\*}
.xx "" "make a symbolic link to a" "file." "symlink:" symlink(2)~\*{PRM\*}
.xx "" "checkfsys: check a" "file system." "" checkfsys(1M)~\*{SARM\*}
.xx "" "makefsys: create a" "file system." "" makefsys(1M)~\*{SARM\*}
.xx "" "mkfs (s5): construct an s5" "file system." "" mkfs(1M)~\*{SARM\*}
.xx "" "mount (s5): mount an s5" "file system." "" mount(1M)~\*{SARM\*}
.xx "" "mount: mount a" "file system." "" mount(2)~\*{PRM\*}
.xx "" "/proc: process" "file system." "" proc(4)~\*{SARM\*}
.xx "" "repquota: summarize quotas for a" "file system." "" repquota(1M)~\*{SARM\*}
.xx "" "tunefs: tune up an existing" "file system." "" tunefs(1M)~\*{SARM\*}
.xx "" "umount: unmount a" "file system." "" umount(2)~\*{PRM\*}
.xx "" "create, or restore from, a full" "file system archive." "fdp:" fdp(1M)~\*{SARM\*}
.xx "" "create, or restore from, a full" "file system archive." "ffile:" ffile(1M)~\*{SARM\*}
.xx "" "ckbupscd: check" "file system backup schedule." "" ckbupscd(1M)~\*{SARM\*}
.xx "" "fsba:" "file system block analyzer." "" fsba(1M)~\*{SARM\*}
.xx "and interactive/" "fsck (ufs):" "file system consistency check" "" fsck(1M)~\*{SARM\*}
.xx "" "fsdb (s5): s5" "file system debugger." "" fsdb(1M)~\*{SARM\*}
.xx "" "vfstab: table of" "file system defaults." "" vfstab(4)~\*{SARM\*}
.xx "" "ufsdump: incremental" "file system dump." "" ufsdump(1M)~\*{SARM\*}
.xx "" "file names and statistics for a" "file system." "ff (generic): list" ff(1M)~\*{SARM\*}
.xx "directory entry." "dirent:" "file system independent" "" dirent(4)~\*{SARM\*}
.xx "" "/directory entries and put in a" "file system independent format." "" getdents(2)~\*{PRM\*}
.xx "" "statvfs, fstatvfs: get" "file system information." "" statvfs(2)~\*{PRM\*}
.xx "" "umountfsys: mount, unmount a" "file system." "mountfsys," mountfsys(1M)~\*{SARM\*}
.xx "" "descriptor to an object in the" "file system name space." "/file" fattach(3C)~\*{STRM\*}
.xx "" "filesystem:" "file system organization." "" filesystem(7)~\*{SARM\*}
.xx "" "quot: summarize" "file system ownership." "" quot(1M)~\*{SARM\*}
.xx "" "file that registers distributed" "file system packages." "fstypes:" fstypes(4)~\*{NUAG\*}
.xx "" "file that registers distributed" "file system packages." "fstypes:" fstypes(4)~\*{SARM\*}
.xx "checker." "quotacheck:" "file system quota consistency" "" quotacheck(1M)~\*{SARM\*}
.xx "" "quotaon, quotaoff: turn" "file system quotas on and off." "" quotaon(1M)~\*{SARM\*}
.xx "" "ufsrestore: incremental" "file system restore." "" ufsrestore(1M)~\*{SARM\*}
.xx "" "nfsstat: Network" "File System statistics." "" nfsstat(1M)~\*{SARM\*}
.xx "" "ustat: get" "file system statistics." "" ustat(2)~\*{PRM\*}
.xx "" "mnttab: mounted" "file system table." "" mnttab(4)~\*{SARM\*}
.xx "" "sharetab: shared" "file system table." "" sharetab(4)~\*{NUAG\*}
.xx "" "sharetab: shared" "file system table." "" sharetab(4)~\*{SARM\*}
.xx "" "fstyp (generic): determine" "file system type." "" fstyp(1M)~\*{SARM\*}
.xx "" "sysfs: get" "file system type information." "" sysfs(2)~\*{PRM\*}
.xx "" "names and statistics for a ufs" "file system." "/(ufs): list file" ff(1M)~\*{SARM\*}
.xx "" "make a literal copy of an s5" "file system." "volcopy (s5):" volcopy(1M)~\*{SARM\*}
.xx "" "make a literal copy of a ufs" "file system." "volcopy (ufs):" volcopy(1M)~\*{SARM\*}
.xx "" "(generic): make literal copy of" "file system." "volcopy" volcopy(1M)~\*{SARM\*}
.xx "" "fs (s5): format of s5" "file system volume." "" fs(4)~\*{SARM\*}
.xx "" "df: report free disk space on" "file systems." "" df(1)~\*{BSD\*}
.xx "" "fsck: check and repair" "file systems." "" fsck(1M)~\*{SARM\*}
.xx "" "mount (ufs): mount ufs" "file systems." "" mount(1M)~\*{SARM\*}
.xx "" "mount, umount: mount or unmount" "file systems and remote/" "" mount(1M)~\*{SARM\*}
.xx "" "automatically mount NFS" "file systems." "automount:" automount(1M)~\*{NUAG\*}
.xx "" "automatically mount NFS" "file systems." "automount:" automount(1M)~\*{SARM\*}
.xx "" "report free disk space on ufs" "file systems." "df (ufs):" df(1M)~\*{SARM\*}
.xx "time." "dcopy (s5): copy s5" "file systems for optimal access" "" dcopy(1M)~\*{SARM\*}
.xx "" "names versus i-numbers for s5" "file systems." "/generate path" ncheck(1M)~\*{SARM\*}
.xx "" "(ufs): provide labels for ufs" "file systems." "labelit" labelit(1M)~\*{SARM\*}
.xx "" "disk blocks and i-nodes for s5" "file systems." "/number of free" df(1M)~\*{SARM\*}
.xx "" "versus i-numbers for ufs" "file systems." "/pathnames" ncheck(1M)~\*{SARM\*}
.xx "" "mount, unmount multiple" "file systems." "/umountall:" mountall(1M)~\*{SARM\*}
.xx "file system packages." "fstypes:" "file that registers distributed" "" fstypes(4)~\*{NUAG\*}
.xx "file system packages." "fstypes:" "file that registers distributed" "" fstypes(4)~\*{SARM\*}
.xx "" "blocks used per directory or" "file." "/the number of disk" du(1M)~\*{BSD\*}
.xx "" "utimes: set" "file times." "" utimes(3)~\*{BSD\*}
.xx "" "create a name for a temporary" "file." "tmpnam, tempnam:" tmpnam(3S)~\*{PRM\*}
.xx "" "truncate, ftruncate: set a" "file to a specified length." "" truncate(3C)~\*{PRM\*}
.xx "" "restore: restore" "file to original directory." "" restore(1)~\*{ACG\*}
.xx "installation/" "installf: add a" "file to the software" "" installf(1M)~\*{ISDG\*}
.xx "" "and modification times of a" "file." "touch: update access" touch(1)~\*{URM\*}
.xx "" "ftp:" "file transfer program." "" ftp(1)~\*{NUAG\*}
.xx "" "ftp:" "file transfer program." "" ftp(1)~\*{URM\*}
.xx "" "tftp: trivial" "file transfer program." "" tftp(1)~\*{NUAG\*}
.xx "" "tftp: trivial" "file transfer program." "" tftp(1)~\*{URM\*}
.xx "" "ftpd:" "file transfer protocol server." "" ftpd(1M)~\*{NUAG\*}
.xx "" "ftpd:" "file transfer protocol server." "" ftpd(1M)~\*{SARM\*}
.xx "" "tftpd: DARPA Trivial" "File Transfer Protocol server." "" tftpd(1M)~\*{NUAG\*}
.xx "" "tftpd: DARPA Trivial" "File Transfer Protocol server." "" tftpd(1M)~\*{SARM\*}
.xx "" "cof2elf: COFF to ELF object" "file translation." "" cof2elf(1)~\*{PRM\*}
.xx "" "/the scheduler for the uucp" "file transport program." "" uusched(1M)~\*{SARM\*}
.xx "uucp system." "uucico:" "file transport program for the" "" uucico(1M)~\*{SARM\*}
.xx "" "ftw, nftw: walk a" "file tree." "" ftw(3C)~\*{PRM\*}
.xx "" "elf_kind: determine" "file type." "" elf_kind(3E)~\*{PRM\*}
.xx "" "file: determine" "file type." "" file(1)~\*{URM\*}
.xx "" "return the size of an object" "file type." "/elf32_fsize:" elf_fsize(3E)~\*{PRM\*}
.xx "" "undo a previous get of an SCCS" "file." "unget:" unget(1)~\*{PRM\*}
.xx "" "uucp directories and permissions" "file." "uucheck: check the" uucheck(1M)~\*{SARM\*}
.xx "" "umask: set" "file-creation mode mask." "" umask(1)~\*{URM\*}
.xx "object files." "" "filehdr: file header for common" "" filehdr(4)~\*{SARM\*}
.xx "" "search FMLI criteria for" "filename." "pathconv:" pathconv(1F)~\*{CHAR\*}
.xx "" "ferror, feof, clearerr," "fileno: stream status inquiries." "" ferror(3S)~\*{PRM\*}
.xx "" "cat: concatenate and print" "files." "" cat(1)~\*{URM\*}
.xx "" "cmp: compare two" "files." "" cmp(1)~\*{URM\*}
.xx "" "copy: copy groups of" "files." "" copy(1)~\*{ACG\*}
.xx "" "cp: copy" "files." "" cp(1)~\*{URM\*}
.xx "" "depend: software dependencies" "files." "" depend(4)~\*{ISDG\*}
.xx "" "/dev/fd: file descriptor" "files." "" fd(4)~\*{SARM\*}
.xx "" "find: find" "files." "" find(1)~\*{URM\*}
.xx "" "head: display first few lines of" "files." "" head(1)~\*{URM\*}
.xx "" "install: install" "files." "" install(1)~\*{BSD\*}
.xx "" "intro: introduction to special" "files." "" intro(7)~\*{SARM\*}
.xx "" "ld: link editor for object" "files." "" ld(1)~\*{PRM\*}
.xx "" "ln: link" "files." "" ln(1)~\*{URM\*}
.xx "" "lockf: record locking on" "files." "" lockf(3C)~\*{PRM\*}
.xx "" "mv: move" "files." "" mv(1)~\*{URM\*}
.xx "" "pr: print" "files." "" pr(1)~\*{URM\*}
.xx "" "sort: sort and/or merge" "files." "" sort(1)~\*{URM\*}
.xx "" "and print process accounting" "file(s)." "acctcom: search" acctcom(1)~\*{URM\*}
.xx "" "merge or add total accounting" "files." "acctmerg:" acctmerg(1M)~\*{SARM\*}
.xx "" "create and administer SCCS" "files." "admin:" admin(1)~\*{PRM\*}
.xx "" "link, unlink: link and unlink" "files and directories." "" link(1M)~\*{SARM\*}
.xx "" "urestore: request restore of" "files and directories." "" urestore(1M)~\*{SARM\*}
.xx "" "(Executable and Linking Format)" "files." "a.out: ELF" a.out(4)~\*{PRM\*}
.xx "" "set and/or verify permissions on" "files." "ckperms:" ckperms(1iref)~\*{MBRMAN\*}
.xx "" "lines common to two sorted" "files." "comm: select or reject" comm(1)~\*{URM\*}
.xx "" "idmkinit: reads" "files containing specifications." "" idmkinit(1M)~\*{ISDG\*}
.xx "" "idmkinit: reads" "files containing specifications." "" idmkinit(1M)~\*{SARM\*}
.xx "" "access and manipulate DOS" "files." "/dosls, dosrm, dosrmdir:" dos(1)~\*{URM\*}
.xx "" "extract strings from source" "files." "exstr:" exstr(1)~\*{URM\*}
.xx "" "file header for common object" "files." "filehdr:" filehdr(4)~\*{SARM\*}
.xx "" "user-preference variable" "files for FACE." "/.variables:" environ(4)~\*{SARM\*}
.xx "" "and display compressed" "files." "/for storage, uncompress" compress(1)~\*{URM\*}
.xx "" "catman: create the cat" "files for the manual." "" catman(1M)~\*{BSD\*}
.xx "" "mkmsgs: create message" "files for use by gettxt." "" mkmsgs(1)~\*{URM\*}
.xx "" "format specification in text" "files." "fspec:" fspec(4)~\*{SARM\*}
.xx "" "hd: display" "files in hexadecimal format." "" hd(1)~\*{ACG\*}
.xx "on the/" "fsync: synchronize a" "file's in-memory state with that" "" fsync(2)~\*{PRM\*}
.xx "" "make hard or symbolic links to" "files." "ln:" ln(1)~\*{BSD\*}
.xx "" "passmgmt: password" "files management." "" passmgmt(1M)~\*{SARM\*}
.xx "" "Format of tty device mapping" "files." "mapchan:" mapchan(4)~\*{SARM\*}
.xx "" "rm, rmdir: remove" "files or directories." "" rm(1)~\*{URM\*}
.xx "" "/merge same lines of several" "files or subsequent lines of one/" "" paste(1)~\*{URM\*}
.xx "" "unpack: compress and expand" "files." "pack, pcat," pack(1)~\*{URM\*}
.xx "" "translator for Diablo 630" "files." "postdaisy: PostScript" postdaisy(1)~\*{URM\*}
.xx "" "translator for DMD bitmap" "files." "postdmd: PostScript" postdmd(1)~\*{URM\*}
.xx "" "translator for plot graphics" "files." "postplot: PostScript" postplot(1)~\*{URM\*}
.xx "" "PostScript translator for text" "files." "postprint:" postprint(1)~\*{URM\*}
.xx "" "translator for tektronix 4014" "files." "posttek: PostScript" posttek(1)~\*{URM\*}
.xx "" "/check nroff and troff input" "files; report possible errors." "" checknr(1)~\*{BSD\*}
.xx "" "access and modification dates of" "files." "settime: change the" settime(1)~\*{ACG\*}
.xx "" "section sizes in bytes of object" "files." "size: print" size(1)~\*{PRM\*}
.xx "" "convert: convert archive" "files to common formats." "" convert(1)~\*{PRM\*}
.xx "" "number of free disk blocks and" "files/free disk space." "/report" df(""1M"")~\*{SARM\*}
.xx "" "number of free disk blocks and" "files/free disk space." "/report" df(""1M"")~\*{URM\*}
.xx "" "create, restore an incremental" "filesystem archive." "incfile:" incfile(1M)~\*{SARM\*}
.xx "organization." "" "filesystem: file system" "" filesystem(7)~\*{SARM\*}
.xx "" "restore an image archive of a" "filesystem." "fimage: create," fimage(1M)~\*{SARM\*}
.xx "" "invoke XENIX incremental" "filesystem restorer." "/xrestor:" xrestore(1M)~\*{SARM\*}
.xx "" "xfsck: check and repair XENIX" "filesystems." "" xfsck(1M)~\*{SARM\*}
.xx "" "restore: initiate restores of" "filesystems, data partitions, or/" "" restore(1M)~\*{SARM\*}
.xx "" "elf_fill: set" "fill byte." "" elf_fill(3E)~\*{PRM\*}
.xx "" "nl: line numbering" "filter." "" nl(1)~\*{URM\*}
.xx "" "pg: file perusal" "filter for CRTs." "" pg(1)~\*{URM\*}
.xx "" "col:" "filter reverse line-feeds." "" col(1)~\*{URM\*}
.xx "" "curs_util:  unctrl, keyname," "filter, use_env, putwin, getwin,/" "" curs_util(3X)~\*{CHAR\*}
.xx "" "/t4013, t450, tek: graphics" "filters for various plotters." "" plot(1G)~\*{BSD\*}
.xx "service." "lpfilter: administer" "filters used with the LP print" "" lpfilter(1M)~\*{SARM\*}
.xx "archive of a filesystem." "" "fimage: create, restore an image" "" fimage(1M)~\*{SARM\*}
.xx "" "find:" "find files." "" find(1)~\*{URM\*}
.xx "" "" "find: find files." "" find(1)~\*{URM\*}
.xx "" "ffs:" "find first set bit." "" ffs(3C)~\*{PRM\*}
.xx "" "ttyname, isatty:" "find name of a terminal." "" ttyname(3C)~\*{PRM\*}
.xx "object library." "lorder:" "find ordering relation for an" "" lorder(1)~\*{PRM\*}
.xx "object file or binary." "strings:" "find printable strings in an" "" strings(1)~\*{URM\*}
.xx "" "/display reference manual pages;" "find reference pages by keyword." "" man(1)~\*{BSD\*}
.xx "bibliographic/" "lookbib:" "find references in a" "" lookbib(1)~\*{BSD\*}
.xx "" "spellin, hashcheck, compress:" "find spelling errors." "/hashmake," spell(1)~\*{URM\*}
.xx "queue." "qsize:" "find the number of messages on a" "" qsize(D3DK)~\*{DDRM\*}
.xx "of the current user." "ttyslot:" "find the slot in the utmp file" "" ttyslot(3C)~\*{PRM\*}
.xx "dictionary or lines in a/" "look:" "find words in the system" "" look(1)~\*{BSD\*}
.xx "interconnect/" "ics_find_rec:" "finds a specific record in the" "" ics_find_rec(3iref)~\*{MBRMAN\*}
.xx "about local and remote users." "" "finger: display information" "" finger(1)~\*{NUAG\*}
.xx "about local and remote users." "" "finger: display information" "" finger(1)~\*{URM\*}
.xx "information server." "" "fingerd, in.fingerd: remote user" "" fingerd(1M)~\*{NUAG\*}
.xx "information server." "" "fingerd, in.fingerd: remote user" "" fingerd(1M)~\*{SARM\*}
.xx "" "elf_end:" "finish using an object file." "" elf_end(3E)~\*{PRM\*}
.xx "" "isnan, isnand, isnanf, isnanl," "finite, finitel, fpclass,/" "" isnan(3C)~\*{PRM\*}
.xx "" "/isnand, isnanf, isnanl, finite," "finitel, fpclass, fpclassl,/" "" isnan(3C)~\*{PRM\*}
.xx "" "/dbmclose, fetch, store, delete," "firstkey, nextkey: data base/" "" dbm(3X)~\*{BSD\*}
.xx "" "/dbmclose, fetch, store, delete," "firstkey, nextkey: database/" "" dbm(3)~\*{NI\*}
.xx "" "tee: pipe" "fitting." "" tee(1)~\*{URM\*}
.xx "communications interface/" "ports:" "five-line asynchronous" "" ports(7)~\*{STRM\*}
.xx "" "hd: hard" "(fixed) disk." "" hd(7)~\*{SARM\*}
.xx "file permissions and ownership." "" "fixperm: correct or initialize" "" fixperm(1)~\*{ACG\*}
.xx "XENIX file permissions and/" "" "fixperm: correct or initialize" "" fixperm(1M)~\*{SARM\*}
.xx "call SCO UNIX System V/386/" "" "fixshlib: alters executables to" "" fixshlib(1M)~\*{ACG\*}
.xx "" "rmsetwant: set the map's wait" "flag for a wakeup." "" rmsetwant(D3K)~\*{DDRM\*}
.xx "" "devflag: driver" "flags." "" devflag(D1D)~\*{DDRM\*}
.xx "" "change and display console" "flags." "conflgs:" conflgs(1M)~\*{SARM\*}
.xx "" "elf_flagshdr: manipulate" "flags." "/elf_flagscn," elf_flag(3E)~\*{PRM\*}
.xx "flash/" "curs_beep:  beep," "flash: curses bell and screen" "" curs_beep(3X)~\*{CHAR\*}
.xx "" "flash: curses bell and screen" "flash routines." "/beep," curs_beep(3X)~\*{CHAR\*}
.xx "" "fd: Information for Multibus" "flexible disk device d rivers." "" fd(7iref)~\*{MBRMAN\*}
.xx "" "floatingpoint: IEEE" "floating point definitions." "" floatingpoint(3)~\*{BSD\*}
.xx "" "/fpgetsticky, fpsetsticky: IEEE" "floating-point environment/" "" fpgetround(3C)~\*{PRM\*}
.xx "point definitions." "" "floatingpoint: IEEE floating" "" floatingpoint(3)~\*{BSD\*}
.xx "" "/unorderedl: determine type of" "floating-point number." "" isnan(3C)~\*{PRM\*}
.xx "" "/fcvtl, gcvt, gcvtl: convert" "floating-point number to string." "" ecvt(3C)~\*{PRM\*}
.xx "" "scalbl: manipulate parts of" "floating-point numbers." "/scalb," frexp(3C)~\*{PRM\*}
.xx "" "/convert decimal record to" "floating-point value." "" decimal_to_floating(3)~\*{BSD\*}
.xx "" "/extended_to_decimal: convert" "floating-point value to decimal/" "" floating_to_decimal(3)~\*{BSD\*}
.xx " single_to_decimal,/" "" "floating_to_decimal:" "" floating_to_decimal(3)~\*{BSD\*}
.xx "" "/fabs, fabsf, rint, remainder:" "floor, ceiling, remainder,/" "" floor(3M)~\*{PRM\*}
.xx "copysign, fmod, fmodf, fabs,/" "" "floor, floorf, ceil, ceilf," "" floor(3M)~\*{PRM\*}
.xx "fmod, fmodf, fabs,/" "floor," "floorf, ceil, ceilf, copysign," "" floor(3M)~\*{PRM\*}
.xx "" "fd: diskette" "(floppy disk)." "" fd(7)~\*{SARM\*}
.xx "" "format: format" "floppy disk tracks." "" format(1M)~\*{SARM\*}
.xx "" "ldsysdump: load system dump from" "floppy diskettes." "" ldsysdump(1M)~\*{SARM\*}
.xx "" "canput: test for" "flow control in a stream." "" canput(D3DK)~\*{DDRM\*}
.xx "priority/" "bcanput: test for" "flow control in specified" "" bcanput(D3DK)~\*{DDRM\*}
.xx "" "cflow: generate C" "flowgraph." "" cflow(1)~\*{PRM\*}
.xx "" "fclose, fflush: close or" "flush a stream." "" fclose(3S)~\*{PRM\*}
.xx "priority band." "flushband:" "flush messages in a specified" "" flushband(D3DK)~\*{DDRM\*}
.xx "" "flushq:" "flush messages on a queue." "" flushq(D3DK)~\*{DDRM\*}
.xx "specified priority band." "" "flushband: flush messages in a" "" flushband(D3DK)~\*{DDRM\*}
.xx "" "/putwin, getwin, delay_output," "flushinp: miscellaneous curses/" "" curs_util(3X)~\*{CHAR\*}
.xx "queue." "" "flushq: flush messages on a" "" flushq(D3DK)~\*{DDRM\*}
.xx "of each line of a file." "" "fmlcut: cut out selected fields" "" fmlcut(1F)~\*{CHAR\*}
.xx "an expression." "" "fmlexpr: evaluate arguments as" "" fmlexpr(1F)~\*{CHAR\*}
.xx "pattern." "" "fmlgrep: search a file for a" "" fmlgrep(1F)~\*{CHAR\*}
.xx "" "fmli: invoke" "FMLI." "" fmli(1)~\*{CHAR\*}
.xx "" "fmli: invoke" "FMLI." "" fmli(1)~\*{URM\*}
.xx "" "co-process with the controlling" "FMLI application." "/synchronize a" vsig(1F)~\*{CHAR\*}
.xx "" "pathconv: search" "FMLI criteria for filename." "" pathconv(1F)~\*{CHAR\*}
.xx "" "" "fmli: invoke FMLI." "" fmli(1)~\*{CHAR\*}
.xx "" "" "fmli: invoke FMLI." "" fmli(1)~\*{URM\*}
.xx "" "message: put arguments on" "FMLI message line." "" message(1F)~\*{CHAR\*}
.xx "" "/floorf, ceil, ceilf, copysign," "fmod, fmodf, fabs, fabsf, rint,/" "" floor(3M)~\*{PRM\*}
.xx "" "/ceil, ceilf, copysign, fmod," "fmodf, fabs, fabsf, rint,/" "" floor(3M)~\*{PRM\*}
.xx "" "" "fmt: simple text formatters." "" fmt(1)~\*{URM\*}
.xx "stderr or system console." "" "fmtmsg: display a message on" "" fmtmsg(1)~\*{URM\*}
.xx "stderr or system console." "" "fmtmsg: display a message on" "" fmtmsg(3C)~\*{PRM\*}
.xx "" "for an application for use with" "fmtmsg." "/list of severity levels" addseverity(3C)~\*{PRM\*}
.xx "" "" "fold: fold long lines." "" fold(1)~\*{URM\*}
.xx "" "fold:" "fold long lines." "" fold(1)~\*{URM\*}
.xx "device." "vidi: sets the" "font and video mode for a video" "" vidi(1)~\*{SARM\*}
.xx "" "host resident PostScript" "font downloader." "download:" download(1)~\*{URM\*}
.xx "stream." "" "fopen, freopen, fdopen: open a" "" fopen(3S)~\*{BSD\*}
.xx "stream." "" "fopen, freopen, fdopen: open a" "" fopen(3S)~\*{PRM\*}
.xx "NIS map." "yppush:" "force propagation of a changed" "" yppush(1M)~\*{NI\*}
.xx "resources." "fumount:" "forced unmount of advertised" "" fumount(1M)~\*{NUAG\*}
.xx "resources." "fumount:" "forced unmount of advertised" "" fumount(1M)~\*{SARM\*}
.xx "" "tcsetpgrp: set terminal" "foreground process group id." "" tcsetpgrp(3C)~\*{PRM\*}
.xx "" "" "fork: create a new process." "" fork(2)~\*{PRM\*}
.xx "" "reset: reset the current" "form field to its default/" "" reset(1F)~\*{CHAR\*}
.xx "" "ar: archive file" "format." "" ar(4)~\*{PRM\*}
.xx "" "ar: archive file" "format." "" ar(4)~\*{SARM\*}
.xx "" "hd: display files in hexadecimal" "format." "" hd(1)~\*{ACG\*}
.xx "" "mdevice: file" "format." "" mdevice(4)~\*{ISDG\*}
.xx "" "mdevice: file" "format." "" mdevice(4)~\*{SARM\*}
.xx "" "mfsys: file" "format." "" mfsys(4)~\*{ISDG\*}
.xx "" "mfsys: file" "format." "" mfsys(4)~\*{SARM\*}
.xx "" "mtune: file" "format." "" mtune(4)~\*{ISDG\*}
.xx "" "mtune: file" "format." "" mtune(4)~\*{SARM\*}
.xx "" "pkgtrans: translate package" "format." "" pkgtrans(1)~\*{ISDG\*}
.xx "" "pkgtrans: translate package" "format." "" pkgtrans(1)~\*{SARM\*}
.xx "" "sdevice: file" "format." "" sdevice(4)~\*{ISDG\*}
.xx "" "sdevice: file" "format." "" sdevice(4)~\*{SARM\*}
.xx "" "sfsys: file" "format." "" sfsys(4)~\*{ISDG\*}
.xx "" "sfsys: file" "format." "" sfsys(4)~\*{SARM\*}
.xx "" "stune: file" "format." "" stune(4)~\*{ISDG\*}
.xx "" "stune: file" "format." "" stune(4)~\*{SARM\*}
.xx "" "per-process accounting file" "format." "acct:" acct(4)~\*{SARM\*}
.xx "monitor-specific/" "ttyadm:" "format and output port" "" ttyadm(1M)~\*{SARM\*}
.xx "database." "roffbib:" "format and print a bibliographic" "" roffbib(1)~\*{BSD\*}
.xx "request message." "nlsrequest:" "format and send listener service" "" nlsrequest(3N)~\*{NI\*}
.xx "" "Multibus II configuration file" "format." "config:" config(4iref)~\*{MBRMAN\*}
.xx "" "locale information to different" "format." "/convert Release 4" maplocale(1M)~\*{ACG\*}
.xx "" "getdate: convert user" "format date and time." "" getdate(3C)~\*{PRM\*}
.xx "" "put in a file system independent" "format." "/directory entries and" getdents(2)~\*{PRM\*}
.xx "" "troff: typeset or" "format documents." "" troff(1)~\*{BSD\*}
.xx "line-printer." "nroff:" "format documents for display or" "" nroff(1)~\*{BSD\*}
.xx "" "ELF (Executable and Linking" "Format) files." "a.out:" a.out(4)~\*{PRM\*}
.xx "" "format:" "format floppy disk tracks." "" format(1M)~\*{SARM\*}
.xx "" "pnch: file" "format for card images." "" pnch(4)~\*{SARM\*}
.xx "tracks." "" "format: format floppy disk" "" format(1M)~\*{SARM\*}
.xx "" "htable: convert DoD Internet" "format host table." "" htable(1M)~\*{NUAG\*}
.xx "" "htable: convert DoD Internet" "format host table." "" htable(1M)~\*{SARM\*}
.xx "" "gettable: get DoD Internet" "format host table from a host." "" gettable(1M)~\*{NUAG\*}
.xx "" "gettable: get DoD Internet" "format host table from a host." "" gettable(1M)~\*{SARM\*}
.xx "" "inode (bfs):" "format of a bfs i-node." "" inode(4)~\*{SARM\*}
.xx "" "newform: change the" "format of a text file." "" newform(1)~\*{URM\*}
.xx "" "inode (ufs):" "format of a ufs inode." "" inode(4)~\*{SARM\*}
.xx "" "inode (s5):" "format of an s5 i-node." "" inode(4)~\*{SARM\*}
.xx "" "term:" "format of compiled term file." "" term(4)~\*{CHAR\*}
.xx "" "term:" "format of compiled term file." "" term(4)~\*{SARM\*}
.xx "" "dir (s5):" "format of s5 directories." "" dir(4)~\*{SARM\*}
.xx "" "fs (s5):" "format of s5 file system volume." "" fs(4)~\*{SARM\*}
.xx "" "sccsfile:" "format of SCCS file." "" sccsfile(4)~\*{PRM\*}
.xx "" "sccsfile:" "format of SCCS file." "" sccsfile(4)~\*{SARM\*}
.xx "volume." "fs (bfs):" "format of the bfs file system" "" fs(4)~\*{SARM\*}
.xx "files." "mapchan:" "Format of tty device mapping" "" mapchan(4)~\*{SARM\*}
.xx "" "dir (ufs):" "format of ufs directories." "" dir(4)~\*{SARM\*}
.xx "volume." "fs (ufs):" "format of ufs file system" "" fs(4)~\*{SARM\*}
.xx "" "man: macros to" "format Reference Manual pages." "" man(7)~\*{BSD\*}
.xx "files." "fspec:" "format specification in text" "" fspec(4)~\*{SARM\*}
.xx "troff." "tbl:" "format tables for nroff or" "" tbl(1)~\*{BSD\*}
.xx "" "/set_field_just, field_just:" "format the general appearance of/" "" form_field_just(3X)~\*{CHAR\*}
.xx "" "/set_field_pad, field_pad:" "format the general display/" "" form_field_attributes(3X)~\*{CHAR\*}
.xx "" "intro: introduction to file" "formats." "" intro(4)~\*{PRM\*}
.xx "" "intro: introduction to file" "formats." "" intro(4)~\*{SARM\*}
.xx "" "utmp, wtmp: utmp and wtmp entry" "formats." "" utmp(4)~\*{PRM\*}
.xx "" "utmp, wtmp: utmp and wtmp entry" "formats." "" utmp(4)~\*{SARM\*}
.xx "" "convert archive files to common" "formats." "convert:" convert(1)~\*{PRM\*}
.xx "" "library and object module" "formats." "/loads 8086 absolute" download(1iref)~\*{MBRMAN\*}
.xx "" "wtmpx: utmpx and wtmpx entry" "formats." "utmpx," utmpx(4)~\*{PRM\*}
.xx "" "wtmpx: utmpx and wtmpx entry" "formats." "utmpx," utmpx(4)~\*{SARM\*}
.xx "" "scanf, fscanf, sscanf: convert" "formatted input." "" scanf(3S)~\*{PRM\*}
.xx "" "/mvwscanw, vwscanw: convert" "formatted input from a curses/" "" curs_scanw(3X)~\*{CHAR\*}
.xx "" "gencat: generate a" "formatted message catalogue." "" gencat(1)~\*{URM\*}
.xx "" "printf: print" "formatted output." "" printf(1)~\*{URM\*}
.xx "" "printf, fprintf, sprintf: print" "formatted output." "" printf(3S)~\*{PRM\*}
.xx "" "/vprintf, vfprintf, vsprintf:" "formatted output conversion." "" printf(3S)~\*{BSD\*}
.xx "" "/mvwprintw, vwprintw: print" "formatted output in curses/" "" curs_printw(3X)~\*{CHAR\*}
.xx "" "/vfprintf, vsprintf: print" "formatted output of a variable/" "" vprintf(3S)~\*{PRM\*}
.xx "" "hdformat: low level hard disk" "formatter." "" hdformat(1iref)~\*{MBRMAN\*}
.xx "" "fmt: simple text" "formatters." "" fmt(1)~\*{URM\*}
.xx "" "localeconv: get numeric" "formatting information." "" localeconv(3C)~\*{PRM\*}
.xx "" "ms: text" "formatting macros." "" ms(7)~\*{BSD\*}
.xx "" "me: macros for" "formatting papers." "" me(7)~\*{BSD\*}
.xx "position forms window cursor." "" "form_cursor:  pos_form_cursor:" "" form_cursor(3X)~\*{CHAR\*}
.xx "data_behind: tell if forms/" "" "form_data:  data_ahead," "" form_data(3X)~\*{CHAR\*}
.xx "for the forms subsystem." "" "form_driver: command processor" "" form_driver(3X)~\*{CHAR\*}
.xx "form_fields, field_count,/" "" "form_field:  set_form_fields," "" form_field(3X)~\*{CHAR\*}
.xx " set_field_fore, field_fore,/" "" "form_field_attributes:" "" form_field_attributes(3X)~\*{CHAR\*}
.xx " set_field_buffer,/" "" "form_field_buffer:" "" form_field_buffer(3X)~\*{CHAR\*}
.xx "dynamic_field_info: get forms/" "" "form_field_info:  field_info," "" form_field_info(3X)~\*{CHAR\*}
.xx " set_field_just, field_just:/" "" "form_field_just:" "" form_field_just(3X)~\*{CHAR\*}
.xx "dup_field, link_field,/" "" "form_field_new:  new_field," "" form_field_new(3X)~\*{CHAR\*}
.xx " set_field_opts, field_opts_on,/" "" "form_field_opts:" "" form_field_opts(3X)~\*{CHAR\*}
.xx "" "form_field:  set_form_fields," "form_fields, field_count,/" "" form_field(3X)~\*{CHAR\*}
.xx "free_fieldtype,/" "" "form_fieldtype:  new_fieldtype," "" form_fieldtype(3X)~\*{CHAR\*}
.xx " set_field_userptr,/" "" "form_field_userptr:" "" form_field_userptr(3X)~\*{CHAR\*}
.xx " set_field_type, field_type,/" "" "form_field_validation:" "" form_field_validation(3X)~\*{CHAR\*}
.xx "form_init, set_form_term,/" "" "form_hook:  set_form_init," "" form_hook(3X)~\*{CHAR\*}
.xx "" "form_hook:  set_form_init," "form_init, set_form_term,/" "" form_hook(3X)~\*{CHAR\*}
.xx "create and destroy forms." "" "form_new:  new_form, free_form:" "" form_new(3X)~\*{CHAR\*}
.xx "new_page: forms pagination." "" "form_new_page:  set_new_page," "" form_new_page(3X)~\*{CHAR\*}
.xx "form_opts_on, form_opts_off,/" "" "form_opts:  set_form_opts," "" form_opts(3X)~\*{CHAR\*}
.xx "" "/form_opts_on, form_opts_off," "form_opts: forms option/" "" form_opts(3X)~\*{CHAR\*}
.xx "" "/set_form_opts, form_opts_on," "form_opts_off, form_opts: forms/" "" form_opts(3X)~\*{CHAR\*}
.xx "" "form_opts:  set_form_opts," "form_opts_on, form_opts_off,/" "" form_opts(3X)~\*{CHAR\*}
.xx "form_page, set_current_field,/" "" "form_page:  set_form_page," "" form_page(3X)~\*{CHAR\*}
.xx "" "form_page:  set_form_page," "form_page, set_current_field,/" "" form_page(3X)~\*{CHAR\*}
.xx "unpost_form: write or erase/" "" "form_post:  post_form," "" form_post(3X)~\*{CHAR\*}
.xx "" "routines for invocation by" "forms." "/application-specific" form_hook(3X)~\*{CHAR\*}
.xx "package." "" "forms: character based forms" "" forms(3X)~\*{CHAR\*}
.xx "" "/current_field, field_index: set" "forms current page and field." "" form_page(3X)~\*{CHAR\*}
.xx "" "/set_max_field: set and get" "forms field attributes." "" form_field_buffer(3X)~\*{CHAR\*}
.xx "" "/dynamic_field_info: get" "forms field characteristics." "" form_field_info(3X)~\*{CHAR\*}
.xx "" "/field_type, field_arg:" "forms field data type/" "" form_field_validation(3X)~\*{CHAR\*}
.xx "" "/data_ahead, data_behind: tell if" "forms field has off-screen data/" "" form_data(3X)~\*{CHAR\*}
.xx "" "/field_opts_off, field_opts:" "forms field option routines." "" form_field_opts(3X)~\*{CHAR\*}
.xx "" "move_field: connect fields to" "forms." "/field_count," form_field(3X)~\*{CHAR\*}
.xx "" "format the general appearance of" "forms." "/field_just:" form_field_just(3X)~\*{CHAR\*}
.xx "" "general display attributes of" "forms." "/field_pad: format the" form_field_attributes(3X)~\*{CHAR\*}
.xx "" "free_field,: create and destroy" "forms fields." "/link_field," form_field_new(3X)~\*{CHAR\*}
.xx "" "/link_fieldtype:" "forms fieldtype routines." "" form_fieldtype(3X)~\*{CHAR\*}
.xx "" "associate application data with" "forms." "/field_userptr:" form_field_userptr(3X)~\*{CHAR\*}
.xx "" "free_form: create and destroy" "forms." "form_new:  new_form," form_new(3X)~\*{CHAR\*}
.xx "" "associate application data with" "forms." "/form_userptr:" form_userptr(3X)~\*{CHAR\*}
.xx "" "/unpost_form: write or erase" "forms from associated/" "" form_post(3X)~\*{CHAR\*}
.xx "" "/form_opts_off, form_opts:" "forms option routines." "" form_opts(3X)~\*{CHAR\*}
.xx "" "forms: character based" "forms package." "" forms(3X)~\*{CHAR\*}
.xx "" "/set_new_page, new_page:" "forms pagination." "" form_new_page(3X)~\*{CHAR\*}
.xx "" "command processor for the" "forms subsystem." "form_driver:" form_driver(3X)~\*{CHAR\*}
.xx "service." "lpforms: administer" "forms used with the LP print" "" lpforms(1M)~\*{SARM\*}
.xx "" "/form_sub, scale_form:" "forms window and subwindow/" "" form_win(3X)~\*{CHAR\*}
.xx "" "/pos_form_cursor: position" "forms window cursor." "" form_cursor(3X)~\*{CHAR\*}
.xx "window/" "/form_win, set_form_sub," "form_sub, scale_form: forms" "" form_win(3X)~\*{CHAR\*}
.xx "" "/form_init, set_form_term," "form_term, set_field_init,/" "" form_hook(3X)~\*{CHAR\*}
.xx "form_userptr: associate/" "" "form_userptr:  set_form_userptr," "" form_userptr(3X)~\*{CHAR\*}
.xx "" "form_userptr:  set_form_userptr," "form_userptr: associate/" "" form_userptr(3X)~\*{CHAR\*}
.xx "form_win, set_form_sub,/" "" "form_win:  set_form_win," "" form_win(3X)~\*{CHAR\*}
.xx "" "form_win:  set_form_win," "form_win, set_form_sub,/" "" form_win(3X)~\*{CHAR\*}
.xx "for/" "aliases, addresses," "forward: addresses and aliases" "" aliases(4)~\*{BSD\*}
.xx "configurable pathname/" "" "fpathconf, pathconf: get" "" fpathconf(2)~\*{PRM\*}
.xx "" "/isnanf, isnanl, finite, finitel," "fpclass, fpclassl, unordered,/" "" isnan(3C)~\*{PRM\*}
.xx "scalbn:/" "ieee_functions," "fp_class, isnan, copysign," "" ieee_functions(3M)~\*{BSD\*}
.xx "" "/finite, finitel, fpclass," "fpclassl, unordered, unorderedl:/" "" isnan(3C)~\*{PRM\*}
.xx "" "fpgetround, fpsetround," "fpgetmask, fpsetmask,/" "" fpgetround(3C)~\*{PRM\*}
.xx "fpgetmask, fpsetmask,/" "" "fpgetround, fpsetround," "" fpgetround(3C)~\*{PRM\*}
.xx "" "/fpgetmask, fpsetmask," "fpgetsticky, fpsetsticky: IEEE/" "" fpgetround(3C)~\*{PRM\*}
.xx "formatted output." "printf," "fprintf, sprintf: print" "" printf(3S)~\*{PRM\*}
.xx "vfprintf, vsprintf:/" "printf," "fprintf, sprintf, vprintf," "" printf(3S)~\*{BSD\*}
.xx "" "/fpsetround, fpgetmask," "fpsetmask, fpgetsticky,/" "" fpgetround(3C)~\*{PRM\*}
.xx "fpsetmask,/" "fpgetround," "fpsetround, fpgetmask," "" fpgetround(3C)~\*{PRM\*}
.xx "" "/fpsetmask, fpgetsticky," "fpsetsticky: IEEE floating-point/" "" fpgetround(3C)~\*{PRM\*}
.xx "word on a/" "putc, putchar," "fputc, putw: put character or" "" putc(3S)~\*{PRM\*}
.xx "" "puts," "fputs: put a string on a stream." "" puts(3S)~\*{PRM\*}
.xx "" "mb2s_getreqfrag: Receives a data" "fragment of a request message." "" mb2s_getreqfrag(3tai)~\*{MBTAI\*}
.xx "" "mb2a_getreqfrag: Receives a data" "fragment of a request message in/" "" mb2a_getreqfrag(3tai)~\*{MBTAI\*}
.xx "not/" "/receives solicited data in" "fragments when buffer space is" "" mps_AMPreceive_frag(D3D)~\*{DDRM\*}
.xx "" "face: executable for the" "Framed Access Command/" "" face(1)~\*{URM\*}
.xx "" "getfrm: returns the current" "frameID number." "" getfrm(1F)~\*{CHAR\*}
.xx "input/output." "" "fread, fwrite: binary" "" fread(3S)~\*{PRM\*}
.xx "" "t_free:" "free a library structure." "" t_free(3N)~\*{NI\*}
.xx "" "freemsg:" "free a message." "" freemsg(D3DK)~\*{DDRM\*}
.xx "" "freeb:" "free a message block." "" freeb(D3DK)~\*{DDRM\*}
.xx "buffer/" "dma_free_buf:" "free a previously allocated DMA" "" dma_free_buf(D3X)~\*{DDRM\*}
.xx "command block." "dma_free_cb:" "free a previously allocated DMA" "" dma_free_cb(D3X)~\*{DDRM\*}
.xx "" "freerbuf:" "free a raw buffer header." "" freerbuf(D3DK)~\*{DDRM\*}
.xx "disk/" "/dfspace: report number of" "free disk blocks and files/free" "" df(""1M"")~\*{SARM\*}
.xx "disk/" "/dfspace: report number of" "free disk blocks and files/free" "" df(""1M"")~\*{URM\*}
.xx "s5/" "df (s5): report number of" "free disk blocks and i-nodes for" "" df(1M)~\*{SARM\*}
.xx "" "df: report" "free disk space on file systems." "" df(1)~\*{BSD\*}
.xx "systems." "df (ufs): report" "free disk space on ufs file" "" df(1M)~\*{SARM\*}
.xx "" "return a buffer to the system's" "free list." "brelse:" brelse(D3DK)~\*{DDRM\*}
.xx "" "and clear space from kernel" "free memory." "/allocate" kmem_zalloc(D3DK)~\*{DDRM\*}
.xx "" "allocate space from kernel" "free memory." "kmem_alloc:" kmem_alloc(D3DK)~\*{DDRM\*}
.xx "" "/puts a buffer back into the" "free memory pool." "" mps_free_msgbuf(D3D)~\*{DDRM\*}
.xx "memory." "kmem_free:" "free previously allocated kernel" "" kmem_free(D3DK)~\*{DDRM\*}
.xx "mallinfo: memory/" "malloc," "free, realloc, calloc, mallopt," "" malloc(3X)~\*{PRM\*}
.xx "valloc,: memory/" "malloc," "free, realloc, calloc, memalign," "" malloc(3C)~\*{PRM\*}
.xx "" "/STREAMS driver's message" "free routine structure." "" free_rtn(D4DK)~\*{DDRM\*}
.xx "" "idspace: investigates" "free space." "" idspace(1M)~\*{ISDG\*}
.xx "" "idspace: investigates" "free space." "" idspace(1M)~\*{SARM\*}
.xx "management map." "rmfree:" "free space into a private space" "" rmfree(D3DK)~\*{DDRM\*}
.xx "physical/" "physmap_free:" "free virtual address mapping for" "" physmap_free(D3D)~\*{DDRM\*}
.xx "" "" "freeb: free a message block." "" freeb(D3DK)~\*{DDRM\*}
.xx "forms/" "/dup_field, link_field," "free_field,: create and destroy" "" form_field_new(3X)~\*{CHAR\*}
.xx "" "form_fieldtype:  new_fieldtype," "free_fieldtype,/" "" form_fieldtype(3X)~\*{CHAR\*}
.xx "forms." "form_new:  new_form," "free_form: create and destroy" "" form_new(3X)~\*{CHAR\*}
.xx "menus/" "menu_item_new:  new_item," "free_item: create and destroy" "" menu_item_new(3X)~\*{CHAR\*}
.xx "menus." "menu_new:  new_menu," "free_menu: create and destroy" "" menu_new(3X)~\*{CHAR\*}
.xx "" "" "freemsg: free a message." "" freemsg(D3DK)~\*{DDRM\*}
.xx "header." "" "freerbuf: free a raw buffer" "" freerbuf(D3DK)~\*{DDRM\*}
.xx "message free routine structure." "" "free_rtn: STREAMS driver's" "" free_rtn(D4DK)~\*{DDRM\*}
.xx "on the communications/" "ccifree:" "frees a line discipline program" "" ccifree(1iref)~\*{MBRMAN\*}
.xx "descriptors." "mps_free_dmabuf:" "frees a list of data buffer" "" mps_free_dmabuf(D3D)~\*{DDRM\*}
.xx "transaction id." "mps_free_tid:" "frees a previously allocated" "" mps_free_tid(D3D)~\*{DDRM\*}
.xx "" "fopen," "freopen, fdopen: open a stream." "" fopen(3S)~\*{BSD\*}
.xx "" "fopen," "freopen, fdopen: open a stream." "" fopen(3S)~\*{PRM\*}
.xx "logb, modf, modff, modfl,/" "" "frexp, frexpl, ldexp, ldexpl," "" frexp(3C)~\*{PRM\*}
.xx "modf, modff, modfl,/" "frexp," "frexpl, ldexp, ldexpl, logb," "" frexp(3C)~\*{PRM\*}
.xx "" "fdp: create, or restore" "from, a full file system/" "" fdp(1M)~\*{SARM\*}
.xx "" "ffile: create, or restore" "from, a full file system/" "" ffile(1M)~\*{SARM\*}
.xx "from SMTP." "" "fromsmtp: receive RFC822 mail" "" fromsmtp(1M)~\*{SARM\*}
.xx "Control System (SCCS)." "sccs:" "front end for the Source Code" "" sccs(1)~\*{BSD\*}
.xx "" "dbon: sets target for" "front panel message delivery." "" dbon(8iref)~\*{MBRMAN\*}
.xx "" "gencc: create a" "front-end to the cc command." "" gencc(1M)~\*{SARM\*}
.xx "system volume." "" "fs (bfs): format of the bfs file" "" fs(4)~\*{SARM\*}
.xx "system volume." "" "fs (s5): format of s5 file" "" fs(4)~\*{SARM\*}
.xx "system volume." "" "fs (ufs): format of ufs file" "" fs(4)~\*{SARM\*}
.xx "analyzer." "" "fsba: file system block" "" fsba(1M)~\*{SARM\*}
.xx "formatted input." "scanf," "fscanf, sscanf: convert" "" scanf(3S)~\*{PRM\*}
.xx "file systems." "" "fsck (bfs): check and repair bfs" "" fsck(1M)~\*{SARM\*}
.xx "systems." "" "fsck: check and repair file" "" fsck(1M)~\*{SARM\*}
.xx "file systems." "" "fsck (s5): check and repair s5" "" fsck(1M)~\*{SARM\*}
.xx "consistency check and/" "" "fsck (ufs): file system" "" fsck(1M)~\*{SARM\*}
.xx "debugger." "" "fsdb (generic): file system" "" fsdb(1M)~\*{SARM\*}
.xx "debugger." "" "fsdb (s5): s5 file system" "" fsdb(1M)~\*{SARM\*}
.xx "debugger." "" "fsdb (ufs): ufs file system" "" fsdb(1M)~\*{SARM\*}
.xx "a file pointer in a stream." "" "fseek, rewind, ftell: reposition" "" fseek(3S)~\*{PRM\*}
.xx "file pointer in a stream." "" "fsetpos, fgetpos: reposition a" "" fsetpos(3C)~\*{PRM\*}
.xx "generation numbers." "" "fsirand: install random inode" "" fsirand(1)~\*{BSD\*}
.xx "text files." "" "fspec: format specification in" "" fspec(4)~\*{SARM\*}
.xx "" "stat, lstat," "fstat: get file status." "" stat(2)~\*{ACG\*}
.xx "" "stat, lstat," "fstat: get file status." "" stat(2)~\*{PRM\*}
.xx "information." "statvfs," "fstatvfs: get file system" "" statvfs(2)~\*{PRM\*}
.xx "system type." "" "fstyp (generic): determine file" "" fstyp(1M)~\*{SARM\*}
.xx "distributed file system/" "" "fstypes: file that registers" "" fstypes(4)~\*{NUAG\*}
.xx "distributed file system/" "" "fstypes: file that registers" "" fstypes(4)~\*{SARM\*}
.xx "in-memory state with that on/" "" "fsync: synchronize a file's" "" fsync(2)~\*{PRM\*}
.xx "in a stream." "fseek, rewind," "ftell: reposition a file pointer" "" fseek(3S)~\*{PRM\*}
.xx "" "" "ftime: get date and time." "" ftime(3C)~\*{BSD\*}
.xx "" "" "ftime: get time and date." "" ftime(2)~\*{ACG\*}
.xx "communication package." "stdipc:" "ftok: standard interprocess" "" stdipc(3C)~\*{PRM\*}
.xx "" "" "ftp: file transfer program." "" ftp(1)~\*{NUAG\*}
.xx "" "" "ftp: file transfer program." "" ftp(1)~\*{URM\*}
.xx "" "netrc: file for" "ftp remote login data." "" netrc(4)~\*{NUAG\*}
.xx "" "netrc: file for" "ftp remote login data." "" netrc(4)~\*{SARM\*}
.xx "server." "" "ftpd: file transfer protocol" "" ftpd(1M)~\*{NUAG\*}
.xx "server." "" "ftpd: file transfer protocol" "" ftpd(1M)~\*{SARM\*}
.xx "specified length." "truncate," "ftruncate: set a file to a" "" truncate(3C)~\*{PRM\*}
.xx "" "" "ftw, nftw: walk a file tree." "" ftw(3C)~\*{PRM\*}
.xx "" "fdp: create, or restore from, a" "full file system archive." "" fdp(1M)~\*{SARM\*}
.xx "" "/create, or restore from, a" "full file system archive." "" ffile(1M)~\*{SARM\*}
.xx "" "/a file for a pattern using" "full regular expressions." "" egrep(1)~\*{URM\*}
.xx "" "shutdown: shut down part of a" "full-duplex connection." "" shutdown(3N)~\*{NI\*}
.xx "advertised resources." "" "fumount: forced unmount of" "" fumount(1M)~\*{NUAG\*}
.xx "advertised resources." "" "fumount: forced unmount of" "" fumount(1M)~\*{SARM\*}
.xx "" "gamma, lgamma: log gamma" "function." "" gamma(3M)~\*{PRM\*}
.xx "" "hypot: Euclidean distance" "function." "" hypot(3M)~\*{PRM\*}
.xx "" "matherr: error-handling" "function." "" matherr(3M)~\*{PRM\*}
.xx "" "prof: profile within a" "function." "" prof(5)~\*{PRM\*}
.xx "length of/" "timeout: execute a" "function after a specified" "" timeout(D3DK)~\*{DDRM\*}
.xx "function." "erf, erfc: error" "function and complementary error" "" erf(3M)~\*{PRM\*}
.xx "" "sfb: SCSI" "function block structure." "" sfb(D4I)~\*{SCSI\*}
.xx "" "function and complementary error" "function." "erf, erfc: error" erf(3M)~\*{PRM\*}
.xx "" "IEEE exception trap handler" "function." "ieee_handler:" ieee_handler(3M)~\*{BSD\*}
.xx "" "setkey: assigns the" "function keys." "" setkey(1)~\*{URM\*}
.xx "" "libwindows: windowing terminal" "function library." "" libwindows(3X)~\*{PRM\*}
.xx "available." "bufcall: call a" "function when a buffer becomes" "" bufcall(D3DK)~\*{DDRM\*}
.xx "" "esbbcall: call a" "function when an/" "" esbbcall(D3DK)~\*{DDRM\*}
.xx "" "backup: perform backup" "functions." "" backup(1)~\*{ACG\*}
.xx "" "sysi86: machine specific" "functions." "" sysi86(2)~\*{PRM\*}
.xx "" "atan2, atan2f: trigonometric" "functions." "/acosf, atan, atanf," trig(3M)~\*{PRM\*}
.xx "" "math: math" "functions and constants." "" math(5)~\*{PRM\*}
.xx "" "intro: introduction to" "functions and libraries." "" intro(3)~\*{PRM\*}
.xx "" "introduction to networking" "functions and libraries." "intro:" intro(3N)~\*{NI\*}
.xx "" "j0, j1, jn, y0, y1, yn: Bessel" "functions." "bessel:" bessel(3M)~\*{PRM\*}
.xx "" "asinh, acosh, atanh: hyperbolic" "functions." "/coshf, tanh, tanhf," sinh(3M)~\*{PRM\*}
.xx "" "password and file encryption" "functions." "crypt:" crypt(3X)~\*{PRM\*}
.xx "" "remainder, absolute value" "functions." "/floor, ceiling," floor(3M)~\*{PRM\*}
.xx "" "/copysign, scalbn: miscellaneous" "functions for IEEE arithmetic." "" ieee_functions(3M)~\*{BSD\*}
.xx "" "to SCSI target driver" "functions." "intro: introduction" intro(D3I)~\*{SCSI\*}
.xx "" "wcstombs: multibyte string" "functions." "mbstring: mbstowcs," mbstring(3C)~\*{PRM\*}
.xx "" "logarithm, power, square root" "functions." "/sqrtf: exponential," exp(3M)~\*{PRM\*}
.xx "" "" "fusage: disk access profiler." "" fusage(1M)~\*{NUAG\*}
.xx "" "" "fusage: disk access profiler." "" fusage(1M)~\*{SARM\*}
.xx "a file or file structure." "" "fuser: identify processes using" "" fuser(1M)~\*{SARM\*}
.xx "" "fread," "fwrite: binary input/output." "" fread(3S)~\*{PRM\*}
.xx "connect accounting records." "" "fwtmp, wtmpfix: manipulate" "" fwtmp(1M)~\*{SARM\*}
.xx "" "open:" "gain access to a device." "" open(D2DK)~\*{DDRM\*}
.xx "" "gamma, lgamma: log" "gamma function." "" gamma(3M)~\*{PRM\*}
.xx "function." "" "gamma, lgamma: log gamma" "" gamma(3M)~\*{PRM\*}
.xx "" "/mdiv, mcmp, min, mout, pow," "gcd, rpow, msqrt, sdiv, itom,/" "" mp(3X)~\*{BSD\*}
.xx "sgconvert:/" "econvert, fconvert," "gconvert, seconvert, sfconvert," "" econvert(3)~\*{BSD\*}
.xx "running processes." "" "gcore: get core images of" "" gcore(1)~\*{URM\*}
.xx "" "ecvt, ecvtl, fcvt, fcvtl," "gcvt, gcvtl: convert/" "" ecvt(3C)~\*{PRM\*}
.xx "" "ecvt, ecvtl, fcvt, fcvtl, gcvt," "gcvtl: convert floating-point/" "" ecvt(3C)~\*{PRM\*}
.xx "message catalogue." "" "gencat: generate a formatted" "" gencat(1)~\*{URM\*}
.xx "cc command." "" "gencc: create a front-end to the" "" gencc(1M)~\*{SARM\*}
.xx "" "/field_just: format the" "general appearance of forms." "" form_field_just(3X)~\*{CHAR\*}
.xx "forms." "/field_pad: format the" "general display attributes of" "" form_field_attributes(3X)~\*{CHAR\*}
.xx "Protocol network/" "if:" "general properties of Internet" "" if(7)~\*{NUAG\*}
.xx "" "termio:" "general terminal interface." "" termio(7)~\*{SARM\*}
.xx "" "/tcgetpgrp, tcsetpgrp, tcgetsid:" "general terminal interface." "" termios(2)~\*{PRM\*}
.xx "" "termiox: extended" "general terminal interface." "" termiox(7)~\*{SARM\*}
.xx "control." "priocntlset:" "generalized process scheduler" "" priocntlset(2)~\*{PRM\*}
.xx "vs i-numbers." "ncheck (generic):" "generate a  list of path names" "" ncheck(1M)~\*{SARM\*}
.xx "catalogue." "gencat:" "generate a formatted message" "" gencat(1)~\*{URM\*}
.xx "" "pkgproto:" "generate a prototype file." "" pkgproto(1)~\*{ISDG\*}
.xx "" "random:" "generate a random number." "" random(1)~\*{ACG\*}
.xx "signal." "abort:" "generate an abnormal termination" "" abort(3C)~\*{PRM\*}
.xx "" "cflow:" "generate C flowgraph." "" cflow(1)~\*{PRM\*}
.xx "cross-reference." "cxref:" "generate C program" "" cxref(1)~\*{PRM\*}
.xx "classification and/" "chrtbl:" "generate character" "" chrtbl(1M)~\*{SARM\*}
.xx "user ID." "diskusg:" "generate disk accounting data by" "" diskusg(1M)~\*{SARM\*}
.xx "" "crypt, setkey, encrypt:" "generate encryption." "" crypt(3C)~\*{PRM\*}
.xx "" "makekey:" "generate encryption key." "" makekey(1)~\*{URM\*}
.xx "" "ctermid:" "generate file name for terminal." "" ctermid(3S)~\*{PRM\*}
.xx "pattern." "lptest:" "generate lineprinter ripple" "" lptest(1)~\*{BSD\*}
.xx "i-numbers for s5/" "ncheck (s5):" "generate path names versus" "" ncheck(1M)~\*{SARM\*}
.xx "i-numbers for ufs/" "ncheck (ufs):" "generate pathnames versus" "" ncheck(1M)~\*{SARM\*}
.xx "lexical tasks." "lex:" "generate programs for simple" "" lex(1)~\*{PRM\*}
.xx "" "/srand48, seed48, lcong48:" "generate uniformly distributed/" "" drand48(3C)~\*{PRM\*}
.xx "" "siginfo: signal" "generation information." "" siginfo(5)~\*{PRM\*}
.xx "" "siginfo: signal" "generation information." "" siginfo(5)~\*{SARM\*}
.xx "" "fsirand: install random inode" "generation numbers." "" fsirand(1)~\*{BSD\*}
.xx "" "srand: simple random number" "generator." "rand," rand(3C)~\*{BSD\*}
.xx "" "srand: simple random-number" "generator." "rand," rand(3C)~\*{PRM\*}
.xx "" "/setstate: better random number" "generator; routines for changing/" "" random(3)~\*{BSD\*}
.xx "" "generator; routines for changing" "generators." "/random number" random(3)~\*{BSD\*}
.xx "system." "mkfs" "(generic): construct a file" "" mkfs(1M)~\*{SARM\*}
.xx "optimal access time." "dcopy" "(generic): copy file systems for" "" dcopy(1M)~\*{SARM\*}
.xx "type." "fstyp" "(generic): determine file system" "" fstyp(1M)~\*{SARM\*}
.xx "number of free disk blocks/" "df" "(generic), dfspace: report" "" df(""1M"")~\*{SARM\*}
.xx "number of free disk blocks/" "df" "(generic), dfspace: report" "" df(""1M"")~\*{URM\*}
.xx "" "fsdb" "(generic): file system debugger." "" fsdb(1M)~\*{SARM\*}
.xx "path names vs i-numbers." "ncheck" "(generic): generate a  list of" "" ncheck(1M)~\*{SARM\*}
.xx "statistics for a file/" "ff" "(generic): list file names and" "" ff(1M)~\*{SARM\*}
.xx "file system." "volcopy" "(generic): make literal copy of" "" volcopy(1M)~\*{SARM\*}
.xx "file systems." "labelit" "(generic): provide labels for" "" labelit(1M)~\*{SARM\*}
.xx "" "netdir_perror, netdir_sperror:" "generic transport/" "/uaddr2taddr," netdir(3N)~\*{NI\*}
.xx "file." "" "get: get a version of an SCCS" "" get(1)~\*{PRM\*}
.xx "" "curs_getyx:  getyx, getparyx," "getbegyx, getmaxyx: get curses/" "" curs_getyx(3X)~\*{CHAR\*}
.xx "character or word from a/" "" "getc, getchar, fgetc, getw: get" "" getc(3S)~\*{PRM\*}
.xx "mvwgetch, ungetch:/" "curs_getch:" "getch, wgetch, mvgetch," "" curs_getch(3X)~\*{CHAR\*}
.xx "character or word from a/" "getc," "getchar, fgetc, getw: get" "" getc(3S)~\*{PRM\*}
.xx "set current user context." "" "getcontext, setcontext: get and" "" getcontext(2)~\*{PRM\*}
.xx "working directory." "" "getcwd: get pathname of current" "" getcwd(3C)~\*{PRM\*}
.xx "date and time." "" "getdate: convert user format" "" getdate(3C)~\*{PRM\*}
.xx "and put in a file system/" "" "getdents: read directory entries" "" getdents(2)~\*{PRM\*}
.xx "criteria." "" "getdev: lists devices based on" "" getdev(1M)~\*{SARM\*}
.xx "which contain devices that/" "" "getdgrp: lists device groups" "" getdgrp(1M)~\*{SARM\*}
.xx "table size." "" "getdtablesize: get descriptor" "" getdtablesize(3)~\*{BSD\*}
.xx "" "" "geteblk: get an empty buffer." "" geteblk(D3DK)~\*{DDRM\*}
.xx "" "getuid, geteuid, getgid," "getegid: get real user,/" "" getuid(2)~\*{PRM\*}
.xx "device number." "" "getemajor: get external major" "" getemajor(D3DK)~\*{DDRM\*}
.xx "device number." "" "geteminor: get external minor" "" geteminor(D3DK)~\*{DDRM\*}
.xx "environment name." "" "getenv: return value for" "" getenv(3C)~\*{PRM\*}
.xx "from a buffer header." "" "geterror: retrieve error number" "" geterror(D3DK)~\*{DDRM\*}
.xx "real user, effective/" "getuid," "geteuid, getgid, getegid: get" "" getuid(2)~\*{PRM\*}
.xx "frameID number." "" "getfrm: returns the current" "" getfrm(1F)~\*{CHAR\*}
.xx "effective/" "getuid, geteuid," "getgid, getegid: get real user," "" getuid(2)~\*{PRM\*}
.xx "setgrent, endgrent, fgetgrent:/" "" "getgrent, getgrgid, getgrnam\^," "" getgrent(3C)~\*{PRM\*}
.xx "endgrent, fgetgrent:/" "getgrent," "getgrgid, getgrnam\^, setgrent," "" getgrent(3C)~\*{PRM\*}
.xx "fgetgrent:/" "getgrent, getgrgid," "getgrnam\^, setgrent, endgrent," "" getgrent(3C)~\*{PRM\*}
.xx "supplementary group access list/" "" "getgroups, setgroups: get or set" "" getgroups(2)~\*{PRM\*}
.xx "sethostent,/" "gethostent," "gethostbyaddr, gethostbyname," "" gethostent(3N)~\*{NI\*}
.xx "" "gethostent, gethostbyaddr," "gethostbyname, sethostent,/" "" gethostent(3N)~\*{NI\*}
.xx "gethostbyname, sethostent,/" "" "gethostent, gethostbyaddr," "" gethostent(3N)~\*{NI\*}
.xx "of current host." "" "gethostid: get unique identifier" "" gethostid(3)~\*{BSD\*}
.xx "get/set name of current host." "" "gethostname, sethostname:" "" gethostname(3)~\*{BSD\*}
.xx "currently marked menu items." "" "getitems: return a list of" "" getitems(1F)~\*{CHAR\*}
.xx "value of interval timer." "" "getitimer, setitimer: get/set" "" getitimer(3C)~\*{PRM\*}
.xx "" "" "getlogin: get login name." "" getlogin(3C)~\*{PRM\*}
.xx "device number." "" "getmajor: get internal major" "" getmajor(D3DK)~\*{DDRM\*}
.xx "" "/getyx, getparyx, getbegyx," "getmaxyx: get curses cursor and/" "" curs_getyx(3X)~\*{CHAR\*}
.xx "device number." "" "getminor: get internal minor" "" getminor(D3DK)~\*{DDRM\*}
.xx "entry." "getmntent," "getmntany: get mnttab file" "" getmntent(3C)~\*{PRM\*}
.xx "file entry." "" "getmntent, getmntany: get mnttab" "" getmntent(3C)~\*{PRM\*}
.xx "stream." "" "getmsg: get next message off a" "" getmsg(2)~\*{PRM\*}
.xx "stream." "" "getmsg: get next message off a" "" getmsg(2)~\*{STRM\*}
.xx "setnetent,/" "getnetent," "getnetbyaddr, getnetbyname," "" getnetent(3N)~\*{NI\*}
.xx "" "getnetent, getnetbyaddr," "getnetbyname, setnetent,/" "" getnetent(3N)~\*{NI\*}
.xx "configuration database entry." "" "getnetconfig: get network" "" getnetconfig(3N)~\*{NI\*}
.xx "getnetbyname, setnetent,/" "" "getnetent, getnetbyaddr," "" getnetent(3N)~\*{NI\*}
.xx "" "/authdes_getucred," "getnetname, host2netname,/" "" secure_rpc(3N)~\*{NI\*}
.xx "corresponding to NETPATH/" "" "getnetpath: get netconfig entry" "" getnetpath(3N)~\*{NI\*}
.xx "argument vector." "" "getopt: get option letter from" "" getopt(3C)~\*{PRM\*}
.xx "" "" "getopt: parse command options." "" getopt(1)~\*{URM\*}
.xx "options." "getopts," "getoptcvt: parse command" "" getopts(1)~\*{URM\*}
.xx "command options." "" "getopts, getoptcvt: parse" "" getopts(1)~\*{URM\*}
.xx "size." "" "getpagesize: get system page" "" getpagesize(3)~\*{BSD\*}
.xx "get curses/" "curs_getyx:  getyx," "getparyx, getbegyx, getmaxyx:" "" curs_getyx(3X)~\*{CHAR\*}
.xx "" "" "getpass: read a password." "" getpass(3C)~\*{PRM\*}
.xx "connected peer." "" "getpeername: get name of" "" getpeername(3N)~\*{NI\*}
.xx "" "getpid, getpgrp, getppid," "getpgid: get process, process/" "" getpid(2)~\*{PRM\*}
.xx "process, process group,/" "getpid," "getpgrp, getppid, getpgid: get" "" getpid(2)~\*{PRM\*}
.xx "getpgid: get process, process/" "" "getpid, getpgrp, getppid," "" getpid(2)~\*{PRM\*}
.xx "process group,/" "getpid, getpgrp," "getppid, getpgid: get process," "" getpid(2)~\*{PRM\*}
.xx "get/set program scheduling/" "" "getpriority, setpriority:" "" getpriority(3)~\*{BSD\*}
.xx "" "getprotoent, getprotobynumber," "getprotobyname, setprotoent,/" "" getprotoent(3N)~\*{NI\*}
.xx "getprotobyname,/" "getprotoent," "getprotobynumber," "" getprotoent(3N)~\*{NI\*}
.xx "getprotobyname, setprotoent,/" "" "getprotoent, getprotobynumber," "" getprotoent(3N)~\*{NI\*}
.xx "retrieve public or/" "publickey:" "getpublickey, getsecretkey:" "" publickey(3N)~\*{NI\*}
.xx "" "" "getpw: get name from UID." "" getpw(3C)~\*{PRM\*}
.xx "setpwent, endpwent, fgetpwent:/" "" "getpwent, getpwuid, getpwnam," "" getpwent(3C)~\*{PRM\*}
.xx "fgetpwent:/" "getpwent, getpwuid," "getpwnam, setpwent, endpwent," "" getpwent(3C)~\*{PRM\*}
.xx "endpwent, fgetpwent:/" "getpwent," "getpwuid, getpwnam, setpwent," "" getpwent(3C)~\*{PRM\*}
.xx "a queue." "" "getq: get the next message from" "" getq(D3DK)~\*{DDRM\*}
.xx "header." "" "getrbuf: get a raw buffer" "" getrbuf(D3DK)~\*{DDRM\*}
.xx "maximum system resource/" "" "getrlimit, setrlimit: control" "" getrlimit(2)~\*{PRM\*}
.xx "resource utilization." "" "getrusage: get information about" "" getrusage(3)~\*{BSD\*}
.xx "stream." "" "gets, fgets: get a string from a" "" gets(3S)~\*{PRM\*}
.xx "" "mb2_gethostid:" "gets host ID." "" mb2_gethostid(3tai)~\*{MBTAI\*}
.xx "" "readfile, longline: reads file," "gets longest line." "" readfile(1F)~\*{CHAR\*}
.xx "endpoint/" "mb2a_getinfo:" "Gets specific asynchronous" "" mb2a_getinfo(3tai)~\*{MBTAI\*}
.xx "endpoint/" "mb2s_getinfo:" "Gets specific synchronous" "" mb2s_getinfo(3tai)~\*{MBTAI\*}
.xx "secret/" "publickey: getpublickey," "getsecretkey: retrieve public or" "" publickey(3N)~\*{NI\*}
.xx "" "getservent, getservbyport," "getservbyname, setservent,/" "" getservent(3N)~\*{NI\*}
.xx "setservent,/" "getservent," "getservbyport, getservbyname," "" getservent(3N)~\*{NI\*}
.xx "getservbyname, setservent,/" "" "getservent, getservbyport," "" getservent(3N)~\*{NI\*}
.xx "" "gethostname, sethostname:" "get/set name of current host." "" gethostname(3)~\*{BSD\*}
.xx "RPC domain." "domainname:" "get/set name of current secure" "" domainname(1M)~\*{NI\*}
.xx "" "getpriority, setpriority:" "get/set program scheduling/" "" getpriority(3)~\*{BSD\*}
.xx "" "getitimer, setitimer:" "get/set value of interval timer." "" getitimer(3C)~\*{PRM\*}
.xx "" "" "getsid: get session ID." "" getsid(2)~\*{PRM\*}
.xx "" "" "getsockname: get socket name." "" getsockname(3N)~\*{NI\*}
.xx "set options on sockets." "" "getsockopt, setsockopt: get and" "" getsockopt(3N)~\*{NI\*}
.xx "endspent, fgetspent, lckpwdf,/" "" "getspent, getspnam\^, setspent," "" getspent(3C)~\*{PRM\*}
.xx "fgetspent, lckpwdf,/" "getspent," "getspnam\^, setspent, endspent," "" getspent(3C)~\*{PRM\*}
.xx "mvwgetstr,/" "curs_getstr:" "getstr, wgetstr, mvgetstr," "" curs_getstr(3X)~\*{CHAR\*}
.xx "a string." "" "getsubopt: parse suboptions from" "" getsubopt(3C)~\*{PRM\*}
.xx "curs_set,/" "/resetty, savetty," "getsyx, setsyx, ripoffline," "" curs_kernel(3X)~\*{CHAR\*}
.xx "format host table from a host." "" "gettable: get DoD Internet" "" gettable(1M)~\*{NUAG\*}
.xx "format host table from a host." "" "gettable: get DoD Internet" "" gettable(1M)~\*{SARM\*}
.xx "or set the date and time." "" "gettimeofday, settimeofday: get" "" gettimeofday(3)~\*{BSD\*}
.xx "or set the date and time." "" "gettimeofday, settimeofday: get" "" gettimeofday(3C)~\*{PRM\*}
.xx "" "create message files for use by" "gettxt." "mkmsgs:" mkmsgs(1)~\*{URM\*}
.xx "from a message data base." "" "gettxt: retrieve a text string" "" gettxt(1)~\*{URM\*}
.xx "" "" "gettxt: retrieve a text string." "" gettxt(3C)~\*{PRM\*}
.xx "speed, and line discipline." "" "getty: set terminal type, modes," "" getty(1M)~\*{SARM\*}
.xx "getegid: get real user,/" "" "getuid, geteuid, getgid," "" getuid(2)~\*{PRM\*}
.xx "endusershell: get legal user/" "" "getusershell, setusershell," "" getusershell(3)~\*{BSD\*}
.xx "getutline, pututline, setutent,/" "" "getut: getutent, getutid," "" getut(3C)~\*{PRM\*}
.xx "pututline, setutent,/" "getut:" "getutent, getutid, getutline," "" getut(3C)~\*{PRM\*}
.xx "setutent,/" "getut: getutent," "getutid, getutline, pututline," "" getut(3C)~\*{PRM\*}
.xx "" "getut: getutent, getutid," "getutline, pututline, setutent,/" "" getut(3C)~\*{PRM\*}
.xx "" "/setutxent, endutxent, utmpxname," "getutmp, getutmpx, updwtmp,/" "" getutx(3C)~\*{PRM\*}
.xx "" "/endutxent, utmpxname, getutmp," "getutmpx, updwtmp, updwtmpx:/" "" getutx(3C)~\*{PRM\*}
.xx "getutxline, pututxline,/" "" "getutx: getutxent, getutxid," "" getutx(3C)~\*{PRM\*}
.xx "pututxline, setutxent,/" "getutx:" "getutxent, getutxid, getutxline," "" getutx(3C)~\*{PRM\*}
.xx "pututxline,/" "getutx: getutxent," "getutxid, getutxline," "" getutx(3C)~\*{PRM\*}
.xx "" "getutx: getutxent, getutxid," "getutxline, pututxline,/" "" getutx(3C)~\*{PRM\*}
.xx "entry." "/getvfsfile, getvfsspec," "getvfsany: get vfstab file" "" getvfsent(3C)~\*{PRM\*}
.xx "getvfsspec, getvfsany: get/" "" "getvfsent, getvfsfile," "" getvfsent(3C)~\*{PRM\*}
.xx "getvfsany: get/" "getvfsent," "getvfsfile, getvfsspec," "" getvfsent(3C)~\*{PRM\*}
.xx "vfstab/" "getvfsent, getvfsfile," "getvfsspec, getvfsany: get" "" getvfsent(3C)~\*{PRM\*}
.xx "accessibility." "" "getvol: verifies device" "" getvol(1M)~\*{SARM\*}
.xx "a stream." "getc, getchar, fgetc," "getw: get character or word from" "" getc(3S)~\*{PRM\*}
.xx "directory pathname." "" "getwd: get current working" "" getwd(3)~\*{BSD\*}
.xx "" "/filter, use_env, putwin," "getwin, delay_output, flushinp:/" "" curs_util(3X)~\*{CHAR\*}
.xx "getmaxyx: get/" "curs_getyx:" "getyx, getparyx, getbegyx," "" curs_getyx(3X)~\*{CHAR\*}
.xx "" "/bgplot, crtplot, dumbplot," "gigiplot, hpplot, implot,/" "" plot(1G)~\*{BSD\*}
.xx "messages." "biff:" "give notice of incoming mail" "" biff(1)~\*{BSD\*}
.xx "" "space registers from a" "given cardslot ID." "/interconnect" ics_rdwr(D3D)~\*{DDRM\*}
.xx "" "bzero: clear memory for a" "given number of bytes." "" bzero(D3DK)~\*{DDRM\*}
.xx "" "timezone: get time zone name" "given offset from GMT." "" timezone(3C)~\*{BSD\*}
.xx "" "reset: resets the processor in a" "given slot." "" reset(8iref)~\*{MBRMAN\*}
.xx "" "string on the processor in the" "given slot." "/bootstrap parameter" initbp(8iref)~\*{MBRMAN\*}
.xx "" "close down the system at a" "given time." "shutdown:" shutdown(1M)~\*{BSD\*}
.xx "" "/unset: set and unset local or" "global environment variables." "" set(1F)~\*{CHAR\*}
.xx "" "gmatch: shell" "global pattern matching." "" gmatch(3G)~\*{PRM\*}
.xx "matching." "" "gmatch: shell global pattern" "" gmatch(3G)~\*{PRM\*}
.xx "" "time zone name given offset from" "GMT." "timezone: get" timezone(3C)~\*{BSD\*}
.xx "date and time/" "ctime, localtime," "gmtime, asctime, tzset: convert" "" ctime(3C)~\*{PRM\*}
.xx "" "setjmp, longjmp: non-local" "goto." "" setjmp(3C)~\*{PRM\*}
.xx "" "sigsetjmp, siglongjmp: non-local" "goto." "/_setjmp, _longjmp," setjmp(3)~\*{BSD\*}
.xx "" "/siglongjmp: a non-local" "goto with signal state." "" sigsetjmp(3C)~\*{PRM\*}
.xx "" "and check access to a resource" "governed by a semaphore." "/await" waitsem(2)~\*{ACG\*}
.xx "system." "uuglist: list service" "grades available on this UNIX" "" uuglist(1C)~\*{URM\*}
.xx "pseudo-terminal/" "grantpt:" "grant access to the slave" "" grantpt(3C)~\*{STRM\*}
.xx "request." "/construct a buffer" "grant in response to a buffer" "" mps_mk_bgrant(D3D)~\*{DDRM\*}
.xx "slave pseudo-terminal device." "" "grantpt: grant access to the" "" grantpt(3C)~\*{STRM\*}
.xx "" "sag: system activity" "graph." "" sag(1M)~\*{SARM\*}
.xx "" "PostScript translator for plot" "graphics files." "postplot:" postplot(1)~\*{URM\*}
.xx "" "/t300, t300s, t4013, t450, tek:" "graphics filters for various/" "" plot(1G)~\*{BSD\*}
.xx "pattern." "" "grep: search a file for a" "" grep(1)~\*{URM\*}
.xx "" "killpg: send signal to a process" "group." "" killpg(3)~\*{BSD\*}
.xx "" "newgrp: log in to a new" "group." "" newgrp(1M)~\*{SARM\*}
.xx "" "newgrp: log in to a new" "group." "" newgrp(1M)~\*{URM\*}
.xx "" "/get or set supplementary" "group access list IDs." "" getgroups(2)~\*{PRM\*}
.xx "" "initialize the supplementary" "group access list." "initgroups:" initgroups(3C)~\*{PRM\*}
.xx "" "/real user, effective user, real" "group, and effective group IDs." "" getuid(2)~\*{PRM\*}
.xx "" "/getpgid: get process, process" "group, and parent process IDs." "" getpid(2)~\*{PRM\*}
.xx "" "grpck: check" "group database entries." "" grpck(1M)~\*{BSD\*}
.xx "system." "groupdel: delete a" "group definition from the" "" groupdel(1M)~\*{SARM\*}
.xx "" "groupadd: add (create) a new" "group definition on the system." "" groupadd(1M)~\*{SARM\*}
.xx "" "groupmod: modify a" "group definition on the system." "" groupmod(1M)~\*{SARM\*}
.xx "" "group:" "group file." "" group(4)~\*{SARM\*}
.xx "" "endgrent, fgetgrent: get" "group file entry." "/setgrent," getgrent(3C)~\*{PRM\*}
.xx "" "" "group: group file." "" group(4)~\*{SARM\*}
.xx "" "setpgid: set process" "group ID." "" setpgid(2)~\*{PRM\*}
.xx "" "setpgrp: set process" "group ID." "" setpgrp(2)~\*{PRM\*}
.xx "" "prompt for and validate a" "group ID." "/helpgid, valgid:" ckgid(1)~\*{ISDG\*}
.xx "" "prompt for and validate a" "group ID." "/helpgid, valgid:" ckgid(1)~\*{SARM\*}
.xx "" "set terminal foreground process" "group id." "tcsetpgrp:" tcsetpgrp(3C)~\*{PRM\*}
.xx "" "setregid: set real and effective" "group IDs." "" setregid(3)~\*{BSD\*}
.xx "" "setuid, setgid: set user and" "group IDs." "" setuid(2)~\*{PRM\*}
.xx "" "user, real group, and effective" "group IDs." "/real user, effective" getuid(2)~\*{PRM\*}
.xx "" "lists members of a device" "group." "listdgrp:" listdgrp(1M)~\*{SARM\*}
.xx "" "Remote File Sharing user and" "group mapping." "idload:" idload(1M)~\*{NUAG\*}
.xx "" "Remote File Sharing user and" "group mapping." "idload:" idload(1M)~\*{SARM\*}
.xx "" "groups: print" "group membership of user." "" groups(1)~\*{URM\*}
.xx "" "groups: display a user's" "group memberships." "" groups(1)~\*{BSD\*}
.xx "" "print the user name and ID, and" "group name and ID." "id:" id(1M)~\*{SARM\*}
.xx "" "print the user name and ID, and" "group name and ID." "id:" id(1M)~\*{URM\*}
.xx "" "displays a list of all valid" "group names." "dispgid:" dispgid(1)~\*{ISDG\*}
.xx "" "displays a list of all valid" "group names." "dispgid:" dispgid(1)~\*{SARM\*}
.xx "" "lchown, fchown: change owner and" "group of a file." "chown," chown(2)~\*{PRM\*}
.xx "" "send a signal to a process or a" "group of processes." "kill:" kill(2)~\*{PRM\*}
.xx "" "send a signal to a process or a" "group of processes." "/sigsendset:" sigsend(2)~\*{PRM\*}
.xx "" "chgrp: change the" "group ownership of a file." "" chgrp(1)~\*{URM\*}
.xx "" "putdgrp: edits device" "group table." "" putdgrp(1)~\*{SARM\*}
.xx "group definition on the system." "" "groupadd: add (create) a new" "" groupadd(1M)~\*{SARM\*}
.xx "definition from the system." "" "groupdel: delete a group" "" groupdel(1M)~\*{SARM\*}
.xx "definition on the system." "" "groupmod: modify a group" "" groupmod(1M)~\*{SARM\*}
.xx "memberships." "" "groups: display a user's group" "" groups(1)~\*{BSD\*}
.xx "" "copy: copy" "groups of files." "" copy(1)~\*{ACG\*}
.xx "" "maintain, update, and regenerate" "groups of programs." "make:" make(1)~\*{PRM\*}
.xx "of user." "" "groups: print group membership" "" groups(1)~\*{URM\*}
.xx "that/" "getdgrp: lists device" "groups which contain devices" "" getdgrp(1M)~\*{SARM\*}
.xx "entries." "" "grpck: check group database" "" grpck(1M)~\*{BSD\*}
.xx "checkers." "pwck," "grpck: password/group file" "" pwck(1M)~\*{SARM\*}
.xx "" "ssignal," "gsignal: software signals." "" ssignal(3C)~\*{PRM\*}
.xx "subsystem." "\*(dr:" "\*(ha SCSI host adapter" "" scsi_dpt(7)~\*{SARM\*}
.xx "" "/cbreak, nocbreak, echo, noecho," "halfdelay, intrflush, keypad,/" "" curs_inopts(3X)~\*{CHAR\*}
.xx "" "reboot: reboot system or" "halt processor." "" reboot(3)~\*{BSD\*}
.xx "the system shuts down." "" "halt: shut down the driver when" "" halt(D2D)~\*{DDRM\*}
.xx "" "" "halt: stop the processor." "" halt(1M)~\*{BSD\*}
.xx "" "stdarg:" "handle variable argument list." "" stdarg(5)~\*{PRM\*}
.xx "" "varargs:" "handle variable argument list." "" varargs(5)~\*{PRM\*}
.xx "" "IEEE exception trap" "handler function." "ieee_handler:" ieee_handler(3M)~\*{BSD\*}
.xx "" "macros used to decode message" "handler message." "/mps_msg_isreq:" mps_msg(D3D)~\*{DDRM\*}
.xx "" "re_exec: regular expression" "handler." "regex, re_comp," regex(3)~\*{BSD\*}
.xx "" "and manipulation of CLIENT" "handles." "/dealing with creation" rpc_clnt_create(3N)~\*{NI\*}
.xx "" "with the creation of server" "handles." "/routines for dealing" rpc_svc_create(3N)~\*{NI\*}
.xx "" "elf_errmsg, elf_errno: error" "handling." "" elf_error(3E)~\*{PRM\*}
.xx "package." "curses: CRT screen" "handling and optimization" "" curses(3X)~\*{CHAR\*}
.xx "codes." "sigfpe: signal" "handling for specific SIGFPE" "" sigfpe(3)~\*{BSD\*}
.xx "" "isgraph, isascii: character" "handling." "/ispunct, isprint," ctype(3C)~\*{PRM\*}
.xx "" "wctomb: multibyte character" "handling." "/mbtowc, mblen," mbchar(3C)~\*{PRM\*}
.xx "" "nohup: run a command immune to" "hangups and quits." "" nohup(1)~\*{URM\*}
.xx "" "hd: information for Multibus II" "hard disk device drivers." "" hd(7iref)~\*{MBRMAN\*}
.xx "" "hdformat: low level" "hard disk formatter." "" hdformat(1iref)~\*{MBRMAN\*}
.xx "" "fdisk: create or modify" "hard disk partition table." "" fdisk(1M)~\*{SARM\*}
.xx "" "hd:" "hard (fixed) disk." "" hd(7)~\*{SARM\*}
.xx "" "ln: make" "hard or symbolic links to files." "" ln(1)~\*{BSD\*}
.xx "" "setclk: set system time from" "hardware clock." "" setclk(1M)~\*{SARM\*}
.xx "" "a DMA operation for a subsequent" "hardware request." "/program" dma_prog(D3X)~\*{DDRM\*}
.xx "channel." "/disable recognition of" "hardware requests on a DMA" "" dma_disable(D3X)~\*{DDRM\*}
.xx "channel." "/enable recognition of" "hardware requests on a DMA" "" dma_enable(D3X)~\*{DDRM\*}
.xx "" "/init_pair, init_color," "has_colors, can_change_color,/" "" curs_color(3X)~\*{CHAR\*}
.xx "" "hcreate, hdestroy: manage" "hash search tables." "hsearch," hsearch(3C)~\*{PRM\*}
.xx "" "elf_hash: compute" "hash value." "" elf_hash(3E)~\*{PRM\*}
.xx "" "spell, hashmake, spellin," "hashcheck, compress: find/" "" spell(1)~\*{URM\*}
.xx "compress: find spelling/" "spell," "hashmake, spellin, hashcheck," "" spell(1)~\*{URM\*}
.xx "longname,/" "/baudrate, erasechar," "has_ic, has_il, killchar," "" curs_termattrs(3X)~\*{CHAR\*}
.xx "" "/baudrate, erasechar, has_ic," "has_il, killchar, longname,/" "" curs_termattrs(3X)~\*{CHAR\*}
.xx "ID for kernel virtual address." "" "hat_getkpfnum: get physical page" "" hat_getkpfnum(D3DK)~\*{DDRM\*}
.xx "ID for physical address." "" "hat_getppfnum: get physical page" "" hat_getppfnum(D3D)~\*{DDRM\*}
.xx "search tables." "hsearch," "hcreate, hdestroy: manage hash" "" hsearch(3C)~\*{PRM\*}
.xx "format." "" "hd: display files in hexadecimal" "" hd(1)~\*{ACG\*}
.xx "" "" "hd: hard (fixed) disk." "" hd(7)~\*{SARM\*}
.xx "hard disk device drivers." "" "hd: information for Multibus II" "" hd(7iref)~\*{MBRMAN\*}
.xx "tables." "hsearch, hcreate," "hdestroy: manage hash search" "" hsearch(3C)~\*{PRM\*}
.xx "formatter." "" "hdformat: low level hard disk" "" hdformat(1iref)~\*{MBRMAN\*}
.xx "files." "" "head: display first few lines of" "" head(1)~\*{URM\*}
.xx "" "remove a message block from the" "head of a message." "unlinkb:" unlinkb(D3DK)~\*{DDRM\*}
.xx "" "putbq: place a message at the" "head of a queue." "" putbq(D3DK)~\*{DDRM\*}
.xx "" "stroptions: stream" "head option structure." "" stroptions(D4DK)~\*{DDRM\*}
.xx "" "freerbuf: free a raw buffer" "header." "" freerbuf(D3DK)~\*{DDRM\*}
.xx "" "getrbuf: get a raw buffer" "header." "" getrbuf(D3DK)~\*{DDRM\*}
.xx "" "retrieve class-dependent section" "header." "/elf32_getshdr:" elf_getshdr(3E)~\*{PRM\*}
.xx "" "class-dependent object file" "header." "/elf32_newehdr: retrieve" elf_getehdr(3E)~\*{PRM\*}
.xx "" "retrieve archive member" "header." "elf_getarhdr:" elf_getarhdr(3E)~\*{PRM\*}
.xx "" "archives: device" "header file." "" archives(4)~\*{SARM\*}
.xx "implementation-specific/" "limits:" "header file for" "" limits(4)~\*{PRM\*}
.xx "implementation-specific/" "limits:" "header file for" "" limits(4)~\*{SARM\*}
.xx "constants." "unistd:" "header file for symbolic" "" unistd(4)~\*{SARM\*}
.xx "" "filehdr: file" "header for common object files." "" filehdr(4)~\*{SARM\*}
.xx "" "error number from a buffer" "header." "geterror: retrieve" geterror(D3DK)~\*{DDRM\*}
.xx "" "retrieve class-dependent program" "header table." "/elf32_newphdr:" elf_getphdr(3E)~\*{PRM\*}
.xx "numbers or SCCS commands." "" "help: ask for help with message" "" help(1)~\*{PRM\*}
.xx "SCCS commands." "help: ask for" "help with message numbers or" "" help(1)~\*{PRM\*}
.xx "and validate a/" "ckdate, errdate," "helpdate, valdate: prompt for" "" ckdate(1)~\*{ISDG\*}
.xx "and validate a/" "ckdate, errdate," "helpdate, valdate: prompt for" "" ckdate(1)~\*{SARM\*}
.xx "validate a group/" "ckgid, errgid," "helpgid, valgid: prompt for and" "" ckgid(1)~\*{ISDG\*}
.xx "validate a group/" "ckgid, errgid," "helpgid, valgid: prompt for and" "" ckgid(1)~\*{SARM\*}
.xx "" "hd: display files in" "hexadecimal format." "" hd(1)~\*{ACG\*}
.xx "deck/" "panel_show:  show_panel," "hide_panel, panel_hidden: panels" "" panel_show(3X)~\*{CHAR\*}
.xx "" "display the delta and commentary" "history of an SCCS file." "prt:" prt(1)~\*{BSD\*}
.xx "create/" "/border, wborder, box," "hline, whline, vline, wvline:" "" curs_border(3X)~\*{CHAR\*}
.xx "for iSBC 486/133SE board." "" "hlp \-Parallel printer driver" "" hlp(7iref)~\*{MBRMAN\*}
.xx "" "/wvline: create curses borders," "horizontal and vertical lines." "" curs_border(3X)~\*{CHAR\*}
.xx "" "sdi_init: initialize the SCSI" "host adapter." "" sdi_init(D3I)~\*{SCSI\*}
.xx "" "to physical address for SCSI" "host adapter." "/scb virtual" sdi_translate(D3I)~\*{SCSI\*}
.xx "" "\*(dr: Adaptec 1542A SCSI" "host adapter subsystem." "" scsi_adaptec(7)~\*{SARM\*}
.xx "" "\*(dr: \*(ha SCSI" "host adapter subsystem." "" scsi_dpt(7)~\*{SARM\*}
.xx "" "scsi_wd7000: WD7000 FASST2" "host adapter subsystem." "" scsi_wd7000(7)~\*{SARM\*}
.xx "" "/ntohs: convert values between" "host and network byte order." "" byteorder(3N)~\*{NI\*}
.xx "" "layers: protocol used between" "host and windowing terminal/" "" layers(5)~\*{PRM\*}
.xx "" "layers: protocol used between" "host and windowing terminal/" "" layers(5)~\*{SARM\*}
.xx "" "the architecture of the current" "host." "arch: display" arch(1)~\*{BSD\*}
.xx "terminal." "jagent:" "host control of windowing" "" jagent(5)~\*{PRM\*}
.xx "terminal." "jagent:" "host control of windowing" "" jagent(5)~\*{SARM\*}
.xx "" "endhostent: get network" "host entry." "/sethostent," gethostent(3N)~\*{NI\*}
.xx "" "format host table from a" "host." "/get DoD Internet" gettable(1M)~\*{NUAG\*}
.xx "" "format host table from a" "host." "/get DoD Internet" gettable(1M)~\*{SARM\*}
.xx "" "get unique identifier of current" "host." "gethostid:" gethostid(3)~\*{BSD\*}
.xx "" "get/set name of current" "host." "gethostname, sethostname:" gethostname(3)~\*{BSD\*}
.xx "" "identifier of the current" "host." "hostid: print the numeric" hostid(1)~\*{BSD\*}
.xx "" "mb2_gethostid: gets" "host ID." "" mb2_gethostid(3tai)~\*{MBTAI\*}
.xx "record/" "ics_hostid: returns the" "host id field of the HOST ID" "" ics_hostid(D3D)~\*{DDRM\*}
.xx "" "/returns the host id field of the" "HOST ID record in this board's/" "" ics_hostid(D3D)~\*{DDRM\*}
.xx "" "processor type of the current" "host." "mach: display the" mach(1)~\*{BSD\*}
.xx "" "hosts:" "host name data base." "" hosts(4)~\*{NI\*}
.xx "" "hosts:" "host name data base." "" hosts(4)~\*{NUAG\*}
.xx "" "hosts:" "host name data base." "" hosts(4)~\*{SARM\*}
.xx "" "/a subchannel on a line to a new" "host on the communications/" "" cciswitch(1iref)~\*{MBRMAN\*}
.xx "" "/switches a line to a new" "host on the communications/" "" ttyswitch(1iref)~\*{MBRMAN\*}
.xx "" "change Remote File Sharing" "host password." "rfpasswd:" rfpasswd(1M)~\*{NUAG\*}
.xx "" "change Remote File Sharing" "host password." "rfpasswd:" rfpasswd(1M)~\*{SARM\*}
.xx "" "set system date from a remote" "host." "rdate:" rdate(1M)~\*{NUAG\*}
.xx "" "set system date from a remote" "host." "rdate:" rdate(1M)~\*{SARM\*}
.xx "downloader." "download:" "host resident PostScript font" "" download(1)~\*{URM\*}
.xx "" "of the map at the NIS server" "host." "/return current version" yppoll(1M)~\*{NI\*}
.xx "" "ruptime: show" "host status of local machines." "" ruptime(1)~\*{NUAG\*}
.xx "" "ruptime: show" "host status of local machines." "" ruptime(1)~\*{URM\*}
.xx "" "set or print name of current" "host system." "hostname:" hostname(1)~\*{BSD\*}
.xx "" "/get DoD Internet format" "host table from a host." "" gettable(1M)~\*{NUAG\*}
.xx "" "/get DoD Internet format" "host table from a host." "" gettable(1M)~\*{SARM\*}
.xx "" "convert DoD Internet format" "host table." "htable:" htable(1M)~\*{NUAG\*}
.xx "" "convert DoD Internet format" "host table." "htable:" htable(1M)~\*{SARM\*}
.xx "" "smtp: send SMTP mail to a remote" "host using Simple Mail Transfer/" "" smtp(1M)~\*{SARM\*}
.xx "" "ccidetach: disassociates this" "host with a subchannel on a line/" "" ccidetach(1iref)~\*{MBRMAN\*}
.xx "" "YP map from a YP server to" "host." "ypxfr: transfer" ypxfr(1M)~\*{NI\*}
.xx "" "/authdes_getucred, getnetname," "host2netname,/" "" secure_rpc(3N)~\*{NI\*}
.xx "identifier of the current host." "" "hostid: print the numeric" "" hostid(1)~\*{BSD\*}
.xx "" "ethers: Ethernet address to" "hostname database or domain." "" ethers(4)~\*{NUAG\*}
.xx "" "ethers: Ethernet address to" "hostname database or domain." "" ethers(4)~\*{SARM\*}
.xx "current host system." "" "hostname: set or print name of" "" hostname(1)~\*{BSD\*}
.xx "" "hosts.equiv, .rhosts: trusted" "hosts by system and by user." "" hosts.equiv(4)~\*{NUAG\*}
.xx "" "hosts.equiv, .rhosts: trusted" "hosts by system and by user." "" hosts.equiv(4)~\*{SARM\*}
.xx "" "" "hosts: host name data base." "" hosts(4)~\*{NI\*}
.xx "" "" "hosts: host name data base." "" hosts(4)~\*{NUAG\*}
.xx "" "" "hosts: host name data base." "" hosts(4)~\*{SARM\*}
.xx "" "ECHO_REQUEST packets to network" "hosts." "ping: send ICMP" ping(1M)~\*{NUAG\*}
.xx "" "ECHO_REQUEST packets to network" "hosts." "ping: send ICMP" ping(1M)~\*{SARM\*}
.xx "hosts by system and by user." "" "hosts.equiv, .rhosts: trusted" "" hosts.equiv(4)~\*{NUAG\*}
.xx "hosts by system and by user." "" "hosts.equiv, .rhosts: trusted" "" hosts.equiv(4)~\*{SARM\*}
.xx "" "/crtplot, dumbplot, gigiplot," "hpplot, implot, plottoa, t300,/" "" plot(1G)~\*{BSD\*}
.xx "manage hash search tables." "" "hsearch, hcreate, hdestroy:" "" hsearch(3C)~\*{PRM\*}
.xx "format host table." "" "htable: convert DoD Internet" "" htable(1M)~\*{NUAG\*}
.xx "format host table." "" "htable: convert DoD Internet" "" htable(1M)~\*{SARM\*}
.xx "convert values/" "byteorder," "htonl, htons, ntohl, ntohs:" "" byteorder(3N)~\*{NI\*}
.xx "values/" "byteorder, htonl," "htons, ntohl, ntohs: convert" "" byteorder(3N)~\*{NI\*}
.xx "" "/maintain line settings and" "hunt sequences for TTY ports." "" sttydefs(1M)~\*{SARM\*}
.xx "" "tanhf, asinh, acosh, atanh:" "hyperbolic functions." "/tanh," sinh(3M)~\*{PRM\*}
.xx "function." "" "hypot: Euclidean distance" "" hypot(3M)~\*{PRM\*}
.xx "controller device driver." "" "i258: iSBC 386/258 peripheral" "" i258(7iref)~\*{MBRMAN\*}
.xx "controller tape device driver." "" "i258tp: iSBC 386/258 peripheral" "" i258tp(7iref)~\*{MBRMAN\*}
.xx "driver." "" "i350: iSBX 350 parallel printer" "" i350(7iref)~\*{MBRMAN\*}
.xx "serial-port device driver." "" "i354: iSBX 354 dual channel" "" i354(7iref)~\*{MBRMAN\*}
.xx "communications controller/" "" "i410: iSBC 186/410 serial" "" i410(7iref)~\*{MBRMAN\*}
.xx "controller device driver and/" "" "i530: iSBC 186/530 Ethernet" "" i530(7iref)~\*{MBRMAN\*}
.xx "" "" "i596: 82596 Ethernet Driver." "" i596(7iref)~\*{MBRMAN\*}
.xx "" "d258:" "i82258 ADMA device driver." "" d258(7iref)~\*{MBRMAN\*}
.xx "device driver." "" "iasy: asynchronous (terminal)" "" iasy(7iref)~\*{MBRMAN\*}
.xx "network hosts." "ping: send" "ICMP ECHO_REQUEST packets to" "" ping(1M)~\*{NUAG\*}
.xx "network hosts." "ping: send" "ICMP ECHO_REQUEST packets to" "" ping(1M)~\*{SARM\*}
.xx "Protocol." "" "ICMP: Internet Control Message" "" ICMP(7)~\*{NI\*}
.xx "Protocol." "" "ICMP: Internet Control Message" "" ICMP(7)~\*{NUAG\*}
.xx "Protocol." "" "ICMP: Internet Control Message" "" ICMP(7)~\*{SARM\*}
.xx "utility." "" "iconv: code set conversion" "" iconv(1)~\*{URM\*}
.xx "tables." "" "iconv: code set conversion" "" iconv(5)~\*{SARM\*}
.xx "driver." "" "ics: Interconnect Space device" "" ics(7iref)~\*{MBRMAN\*}
.xx "certain board types in the/" "" "ics_agent_cmp: checks for" "" ics_agent_cmp(D3D)~\*{DDRM\*}
.xx "interconnect register of the/" "" "ics_find _rec: reads the" "" ics_find_rec(D3D)~\*{DDRM\*}
.xx "record in the interconnect/" "" "ics_find_rec: finds a specific" "" ics_find_rec(3iref)~\*{MBRMAN\*}
.xx "Multibus/" "icsrd, icswr, icsslot," "icsgetrec: utilities to access" "" icsrd(8iref)~\*{MBRMAN\*}
.xx "field of the HOST ID record in/" "" "ics_hostid: returns the host id" "" ics_hostid(D3D)~\*{DDRM\*}
.xx "icsgetrec: utilities to access/" "" "icsrd, icswr, icsslot," "" icsrd(8iref)~\*{MBRMAN\*}
.xx "specified number of/" "" "ics_rdwr: reads or writes a" "" ics_rdwr(D3D)~\*{DDRM\*}
.xx "registers of the board and/" "" "ics_read: reads interconnect" "" ics_read(3iref)~\*{MBRMAN\*}
.xx "register of the board in the/" "" "ics_read: reads the interconnect" "" ics_read(D3D)~\*{DDRM\*}
.xx "access Multibus/" "icsrd, icswr," "icsslot, icsgetrec: utilities to" "" icsrd(8iref)~\*{MBRMAN\*}
.xx "utilities to access/" "icsrd," "icswr, icsslot, icsgetrec:" "" icsrd(8iref)~\*{MBRMAN\*}
.xx "the specified register of the/" "" "ics_write: writes a value into" "" ics_write(D3D)~\*{DDRM\*}
.xx "interconnect registers of the/" "" "ics_write: writes into" "" ics_write(3iref)~\*{MBRMAN\*}
.xx "" "getsid: get session" "ID." "" getsid(2)~\*{PRM\*}
.xx "" "mb2_gethostid: gets host" "ID." "" mb2_gethostid(3tai)~\*{MBTAI\*}
.xx "" "setpgid: set process group" "ID." "" setpgid(2)~\*{PRM\*}
.xx "" "setpgrp: set process group" "ID." "" setpgrp(2)~\*{PRM\*}
.xx "" "setsid: set session" "ID." "" setsid(2)~\*{PRM\*}
.xx "" "id: print the user name and" "ID, and group name and ID." "" id(1M)~\*{SARM\*}
.xx "" "id: print the user name and" "ID, and group name and ID." "" id(1M)~\*{URM\*}
.xx "" "prompt for and validate a user" "ID." "ckuid:" ckuid(1)~\*{ISDG\*}
.xx "" "prompt for and validate a user" "ID." "ckuid:" ckuid(1)~\*{SARM\*}
.xx "" "disk accounting data by user" "ID." "diskusg: generate" diskusg(1M)~\*{SARM\*}
.xx "" "prompt for and validate a group" "ID." "/errgid, helpgid, valgid:" ckgid(1)~\*{ISDG\*}
.xx "" "prompt for and validate a group" "ID." "/errgid, helpgid, valgid:" ckgid(1)~\*{SARM\*}
.xx "in/" "ics_hostid: returns the host" "id field of the HOST ID record" "" ics_hostid(D3D)~\*{DDRM\*}
.xx "" "hat_getkpfnum: get physical page" "ID for kernel virtual address." "" hat_getkpfnum(D3DK)~\*{DDRM\*}
.xx "" "hat_getppfnum: get physical page" "ID for physical address." "" hat_getppfnum(D3D)~\*{DDRM\*}
.xx "" "name and ID, and group name and" "ID." "id: print the user" id(1M)~\*{SARM\*}
.xx "" "name and ID, and group name and" "ID." "id: print the user" id(1M)~\*{URM\*}
.xx "" "previously allocated transaction" "id." "mps_free_tid: frees a" mps_free_tid(D3D)~\*{DDRM\*}
.xx "" "registers from a given cardslot" "ID." "/of interconnect space" ics_rdwr(D3D)~\*{DDRM\*}
.xx "and group name and ID." "" "id: print the user name and ID," "" id(1M)~\*{SARM\*}
.xx "and group name and ID." "" "id: print the user name and ID," "" id(1M)~\*{URM\*}
.xx "" "/the host id field of the HOST" "ID record in this board's/" "" ics_hostid(D3D)~\*{DDRM\*}
.xx "" "semaphore set, or shared memory" "ID." "/remove a message queue," ipcrm(1)~\*{URM\*}
.xx "" "foreground process group" "id." "tcsetpgrp: set terminal" tcsetpgrp(3C)~\*{PRM\*}
.xx "kernel." "" "idbuild: build new UNIX System" "" idbuild(1M)~\*{ISDG\*}
.xx "kernel." "" "idbuild: build new UNIX System" "" idbuild(1M)~\*{SARM\*}
.xx "information." "" "idcheck: returns selected" "" idcheck(1M)~\*{ISDG\*}
.xx "information." "" "idcheck: returns selected" "" idcheck(1M)~\*{SARM\*}
.xx "" "curs_outopts:  clearok, idlok," "idcok immedok, leaveok,/" "" curs_outopts(3X)~\*{CHAR\*}
.xx "configuration." "" "idconfig: produce a new kernel" "" idconfig(1M)~\*{ISDG\*}
.xx "configuration." "" "idconfig: produce a new kernel" "" idconfig(1M)~\*{SARM\*}
.xx "" "elf_getident: retrieve file" "identification data." "" elf_getident(3E)~\*{PRM\*}
.xx "" "issue: issue" "identification file." "" issue(4)~\*{SARM\*}
.xx "" "what: print" "identification strings." "" what(1)~\*{PRM\*}
.xx "" "gethostid: get unique" "identifier of current host." "" gethostid(3)~\*{BSD\*}
.xx "" "hostid: print the numeric" "identifier of the current host." "" hostid(1)~\*{BSD\*}
.xx "" "get shared memory segment" "identifier." "shmget:" shmget(2)~\*{PRM\*}
.xx "or file structure." "fuser:" "identify processes using a file" "" fuser(1M)~\*{SARM\*}
.xx "or get device driver/" "" "idinstall: add, delete, update," "" idinstall(1M)~\*{ISDG\*}
.xx "or get device driver/" "" "idinstall: add, delete, update," "" idinstall(1M)~\*{SARM\*}
.xx "and group mapping." "" "idload: Remote File Sharing user" "" idload(1M)~\*{NUAG\*}
.xx "and group mapping." "" "idload: Remote File Sharing user" "" idload(1M)~\*{SARM\*}
.xx "" "curs_outopts:  clearok," "idlok, idcok immedok, leaveok,/" "" curs_outopts(3X)~\*{CHAR\*}
.xx "specifications." "" "idmkinit: reads files containing" "" idmkinit(1M)~\*{ISDG\*}
.xx "specifications." "" "idmkinit: reads files containing" "" idmkinit(1M)~\*{SARM\*}
.xx "specifications of nodes." "" "idmknod: removes nodes and reads" "" idmknod(1M)~\*{ISDG\*}
.xx "specifications of nodes." "" "idmknod: removes nodes and reads" "" idmknod(1M)~\*{SARM\*}
.xx "kernel." "" "idmkunix: build new UNIX System" "" idmkunix(1M)~\*{ISDG\*}
.xx "kernel." "" "idmkunix: build new UNIX System" "" idmkunix(1M)~\*{SARM\*}
.xx "" "group, and parent process" "IDs." "/get process, process" getpid(2)~\*{PRM\*}
.xx "" "allocates transaction" "ids." "mps_get_tid:" mps_get_tid(D3D)~\*{DDRM\*}
.xx "" "real group, and effective group" "IDs." "/real user, effective user," getuid(2)~\*{PRM\*}
.xx "" "supplementary group access list" "IDs." "/setgroups: get or set" getgroups(2)~\*{PRM\*}
.xx "" "set real and effective group" "IDs." "setregid:" setregid(3)~\*{BSD\*}
.xx "" "set real and effective user" "IDs." "setreuid:" setreuid(3)~\*{BSD\*}
.xx "" "setgid: set user and group" "IDs." "setuid," setuid(2)~\*{PRM\*}
.xx "space." "" "idspace: investigates free" "" idspace(1M)~\*{ISDG\*}
.xx "space." "" "idspace: investigates free" "" idspace(1M)~\*{SARM\*}
.xx "a tunable parameter." "" "idtune: attempts to set value of" "" idtune(1M)~\*{ISDG\*}
.xx "a tunable parameter." "" "idtune: attempts to set value of" "" idtune(1M)~\*{SARM\*}
.xx "" "" "ie6: 3C503 3Com Ethernet Driver." "" ie6(7)~\*{SARM\*}
.xx "" "miscellaneous functions for" "IEEE arithmetic." "/scalbn:" ieee_functions(3M)~\*{BSD\*}
.xx "function." "ieee_handler:" "IEEE exception trap handler" "" ieee_handler(3M)~\*{BSD\*}
.xx "" "floatingpoint:" "IEEE floating point definitions." "" floatingpoint(3)~\*{BSD\*}
.xx "" "/fpgetsticky, fpsetsticky:" "IEEE floating-point environment/" "" fpgetround(3C)~\*{PRM\*}
.xx "copysign, scalbn: miscellaneous/" "" "ieee_functions, fp_class, isnan," "" ieee_functions(3M)~\*{BSD\*}
.xx "trap handler function." "" "ieee_handler: IEEE exception" "" ieee_handler(3M)~\*{BSD\*}
.xx "Internet Protocol network/" "" "if: general properties of" "" if(7)~\*{NUAG\*}
.xx "interface parameters." "" "ifconfig: configure network" "" ifconfig(1M)~\*{NUAG\*}
.xx "interface parameters." "" "ifconfig: configure network" "" ifconfig(1M)~\*{SARM\*}
.xx "" "unifdef: resolve and remove" "ifdef'ed lines from C program/" "" unifdef(1)~\*{BSD\*}
.xx "" "bootserver: starts a Multibus" "II boot service daemon." "" bootserver(1iref)~\*{MBRMAN\*}
.xx "" "clock: Multibus" "II clock driver." "" clock(7iref)~\*{MBRMAN\*}
.xx "" "config: Multibus" "II configuration file format." "" config(4iref)~\*{MBRMAN\*}
.xx "" "csmclock--Multibus" "II CSM clock driver." "" csmclock(7iref)~\*{MBRMAN\*}
.xx "" "hd: information for Multibus" "II hard disk device drivers." "" hd(7iref)~\*{MBRMAN\*}
.xx "" "/utilities to access Multibus" "II interconnect space." "" icsrd(8iref)~\*{MBRMAN\*}
.xx "Subsystem." "scsi: Multibus" "II iSBC 486/133SE SCSI" "" scsi(7iref)~\*{MBRMAN\*}
.xx "" "/Receives incoming Multibus" "II messages in asynchronous/" "" mb2a_receive(3tai)~\*{MBTAI\*}
.xx "" "/Receives incoming Multibus" "II messages in synchronous mode." "" mb2s_receive(3tai)~\*{MBTAI\*}
.xx "" "/Closes an asynchronous Multibus" "II transport endpoint." "" mb2a_closeport(3tai)~\*{MBTAI\*}
.xx "" "/Opens an asynchronous Multibus" "II transport endpoint." "" mb2a_openport(3tai)~\*{MBTAI\*}
.xx "" "/Closes a synchronous Multibus" "II transport endpoint." "" mb2s_closeport(3tai)~\*{MBTAI\*}
.xx "" "/Opens a synchronous Multibus" "II transport endpoint." "" mb2s_openport(3tai)~\*{MBTAI\*}
.xx "" "ff (s5): display" "i-list information." "" ff(1M)~\*{SARM\*}
.xx "" "fimage: create, restore an" "image archive of a filesystem." "" fimage(1M)~\*{SARM\*}
.xx "" "core: core" "image file." "" core(4)~\*{PRM\*}
.xx "" "core: core" "image file." "" core(4)~\*{SARM\*}
.xx "" "crash: examine system" "images." "" crash(1M)~\*{SARM\*}
.xx "" "pnch: file format for card" "images." "" pnch(4)~\*{SARM\*}
.xx "" "gcore: get core" "images of running processes." "" gcore(1)~\*{URM\*}
.xx "" "perform requested SCSI operation" "immediately." "sdi_icmd:" sdi_icmd(D3I)~\*{SCSI\*}
.xx "" "/clearok, idlok, idcok" "immedok, leaveok, setscrreg,/" "" curs_outopts(3X)~\*{CHAR\*}
.xx "" "nohup: run a command" "immune to hangups and quits." "" nohup(1)~\*{URM\*}
.xx "" "limits: header file for" "implementation-specific/" "" limits(4)~\*{PRM\*}
.xx "" "limits: header file for" "implementation-specific/" "" limits(4)~\*{SARM\*}
.xx "" "/dumbplot, gigiplot, hpplot," "implot, plottoa, t300, t300s,/" "" plot(1G)~\*{BSD\*}
.xx "" "w: who is logged" "in, and what are they doing." "" w(1)~\*{BSD\*}
.xx "" "/of, or search for a text string" "in, message data bases." "" srchtxt(1)~\*{URM\*}
.xx "" "a compact list of users logged" "in." "users: display" users(1)~\*{BSD\*}
.xx "" "External Data Link driver for" "iNA961 Release 3.0." "edlina:" edlina(7iref)~\*{MBRMAN\*}
.xx "I/O port." "" "inb: read a byte from a 8 bit" "" inb(D3D)~\*{DDRM\*}
.xx "incremental filesystem archive." "" "incfile: create, restore an" "" incfile(1M)~\*{SARM\*}
.xx "get a character and/" "curs_inch:" "inch, winch, mvinch, mvwinch:" "" curs_inch(3X)~\*{CHAR\*}
.xx "" "curs_inchstr:  inchstr," "inchnstr, winchstr, winchnstr,/" "" curs_inchstr(3X)~\*{CHAR\*}
.xx "winchnstr,/" "curs_inchstr:" "inchstr, inchnstr, winchstr," "" curs_inchstr(3X)~\*{CHAR\*}
.xx "" "invoke recipient command for" "incoming mail." "mail_pipe:" mail_pipe(1M)~\*{SARM\*}
.xx "" "biff: give notice of" "incoming mail messages." "" biff(1)~\*{BSD\*}
.xx "" "/automatically respond to" "incoming mail messages." "" vacation(1)~\*{URM\*}
.xx "" "mb2a_receive: Receives" "incoming Multibus II messages in/" "" mb2a_receive(3tai)~\*{MBTAI\*}
.xx "" "mb2s_receive: Receives" "incoming Multibus II messages in/" "" mb2s_receive(3tai)~\*{MBTAI\*}
.xx "" "smtpd: receive" "incoming SMTP messages." "" smtpd(1M)~\*{SARM\*}
.xx "" "comsat," "in.comsat: biff server." "" comsat(1M)~\*{NUAG\*}
.xx "" "comsat," "in.comsat: biff server." "" comsat(1M)~\*{SARM\*}
.xx "" "or display an exception list for" "incremental backups." "/change" bkexcept(1M)~\*{SARM\*}
.xx "" "ufsdump:" "incremental file system dump." "" ufsdump(1M)~\*{SARM\*}
.xx "" "ufsrestore:" "incremental file system restore." "" ufsrestore(1M)~\*{SARM\*}
.xx "" "incfile: create, restore an" "incremental filesystem archive." "" incfile(1M)~\*{SARM\*}
.xx "" "xrestore, xrestor: invoke XENIX" "incremental filesystem restorer." "" xrestore(1M)~\*{SARM\*}
.xx "" "dirent: file system" "independent directory entry." "" dirent(4)~\*{SARM\*}
.xx "" "entries and put in a file system" "independent format." "/directory" getdents(2)~\*{PRM\*}
.xx "operations." "" "index, rindex: string" "" index(3)~\*{BSD\*}
.xx "" "indxbib: create an inverted" "index to a bibliographic/" "" indxbib(1)~\*{BSD\*}
.xx "logins." "last:" "indicate last user or terminal" "" last(1)~\*{URM\*}
.xx "" "receipt of an orderly release" "indication." "/acknowledge" t_rcvrel(3N)~\*{NI\*}
.xx "" "receive a unit data error" "indication." "t_rcvuderr:" t_rcvuderr(3N)~\*{NI\*}
.xx "" "alarms and/or the ``working''" "indicator." "/application specific" indicator(1F)~\*{CHAR\*}
.xx "specific alarms and/or the/" "" "indicator: display application" "" indicator(1F)~\*{CHAR\*}
.xx "" "syscall:" "indirect system call." "" syscall(3)~\*{BSD\*}
.xx "index to a bibliographic/" "" "indxbib: create an inverted" "" indxbib(1)~\*{BSD\*}
.xx "inet_makeaddr, inet_lnaof,/" "" "inet: inet_addr, inet_network," "" inet(3N)~\*{NI\*}
.xx "" "" "inet: Internet protocol family." "" inet(7)~\*{NUAG\*}
.xx "" "" "inet: Internet protocol family." "" inet(7)~\*{SARM\*}
.xx "inet_makeaddr,/" "inet:" "inet_addr, inet_network," "" inet(3N)~\*{NI\*}
.xx "" "" "inetd: Internet services daemon." "" inetd(1M)~\*{NI\*}
.xx "" "" "inetd: Internet services daemon." "" inetd(1M)~\*{NUAG\*}
.xx "" "" "inetd: Internet services daemon." "" inetd(1M)~\*{SARM\*}
.xx "database." "" "inetd.conf: Internet servers" "" inetd.conf(4)~\*{NUAG\*}
.xx "database." "" "inetd.conf: Internet servers" "" inetd.conf(4)~\*{SARM\*}
.xx "" "/inet_network, inet_makeaddr," "inet_lnaof, inet_netof,/" "" inet(3N)~\*{NI\*}
.xx "" "inet: inet_addr, inet_network," "inet_makeaddr, inet_lnaof,/" "" inet(3N)~\*{NI\*}
.xx "" "/inet_makeaddr, inet_lnaof," "inet_netof, inet_ntoa: Internet/" "" inet(3N)~\*{NI\*}
.xx "inet_lnaof,/" "inet: inet_addr," "inet_network, inet_makeaddr," "" inet(3N)~\*{NI\*}
.xx "" "/inet_lnaof, inet_netof," "inet_ntoa: Internet address/" "" inet(3N)~\*{NI\*}
.xx "information server." "fingerd," "in.fingerd: remote user" "" fingerd(1M)~\*{NUAG\*}
.xx "information server." "fingerd," "in.fingerd: remote user" "" fingerd(1M)~\*{SARM\*}
.xx "information." "" "info: STREAMS driver and module" "" info(D1D)~\*{DDRM\*}
.xx "terminfo descriptions." "" "infocmp: compare or print out" "" infocmp(1M)~\*{CHAR\*}
.xx "terminfo descriptions." "" "infocmp: compare or print out" "" infocmp(1M)~\*{SARM\*}
.xx "event has occurred." "pollwakeup:" "inform polling processes that an" "" pollwakeup(D3DK)~\*{DDRM\*}
.xx "" "dlerror: get diagnostic" "information." "" dlerror(3X)~\*{PRM\*}
.xx "" "drv_setparm: set kernel state" "information." "" drv_setparm(D3DK)~\*{DDRM\*}
.xx "" "ff (s5): display i-list" "information." "" ff(1M)~\*{SARM\*}
.xx "" "idcheck: returns selected" "information." "" idcheck(1M)~\*{ISDG\*}
.xx "" "idcheck: returns selected" "information." "" idcheck(1M)~\*{SARM\*}
.xx "" "info: STREAMS driver and module" "information." "" info(D1D)~\*{DDRM\*}
.xx "" "listusers: list user login" "information." "" listusers(1)~\*{URM\*}
.xx "" "nl_langinfo: language" "information." "" nl_langinfo(3C)~\*{PRM\*}
.xx "" ".ott: FACE object architecture" "information." "" ott(4)~\*{SARM\*}
.xx "" "rpcinfo: report RPC" "information." "" rpcinfo(1M)~\*{NI\*}
.xx "" "rpcinfo: report RPC" "information." "" rpcinfo(1M)~\*{NUAG\*}
.xx "" "setuname: changes machine" "information." "" setuname(1M)~\*{SARM\*}
.xx "" "siginfo: signal generation" "information." "" siginfo(5)~\*{PRM\*}
.xx "" "siginfo: signal generation" "information." "" siginfo(5)~\*{SARM\*}
.xx "" "sysfs: get file system type" "information." "" sysfs(2)~\*{PRM\*}
.xx "" "yp_update: change NIS" "information." "" ypupdate(3N)~\*{NI\*}
.xx "band of the queue." "strqget: get" "information about a queue or" "" strqget(D3DK)~\*{DDRM\*}
.xx "band of the/" "strqset: change" "information about a queue or" "" strqset(D3DK)~\*{DDRM\*}
.xx "remote users." "finger: display" "information about local and" "" finger(1)~\*{NUAG\*}
.xx "remote users." "finger: display" "information about local and" "" finger(1)~\*{URM\*}
.xx "utilization." "getrusage: get" "information about resource" "" getrusage(3)~\*{BSD\*}
.xx "the LP print/" "lpstat: print" "information about the status of" "" lpstat(1)~\*{URM\*}
.xx "remote machines." "rusers: return" "information about users on" "" rusers(3N)~\*{NI\*}
.xx "" "langinfo: language" "information constants." "" langinfo(5)~\*{PRM\*}
.xx "" "langinfo: language" "information constants." "" langinfo(5)~\*{SARM\*}
.xx "" "display mounted NFS resource" "information." "dfmounts:" dfmounts(1M)~\*{NUAG\*}
.xx "" "display mounted resource" "information." "dfmounts:" dfmounts(1M)~\*{SARM\*}
.xx "" "retrieve kernel state" "information." "drv_getparm:" drv_getparm(D3DK)~\*{DDRM\*}
.xx "" "elf_nextscn: get section" "information." "/elf_newscn," elf_getscn(3E)~\*{PRM\*}
.xx "" "copyright: copyright" "information file." "" copyright(4)~\*{ISDG\*}
.xx "" "prototype: package" "information file." "" prototype(4)~\*{ISDG\*}
.xx "" "mailcnfg: initialization" "information for mail and rmail." "" mailcnfg(4)~\*{SARM\*}
.xx " flexible disk device d/" "fd:" "Information for Multibus" "" fd(7iref)~\*{MBRMAN\*}
.xx "disk device drivers." "hd:" "information for Multibus II hard" "" hd(7iref)~\*{MBRMAN\*}
.xx "modes." "tset: provide" "information for setting terminal" "" tset(1)~\*{ACG\*}
.xx "" "binarsys: remote system" "information for the ckbinarsys/" "" binarsys(4)~\*{SARM\*}
.xx "" "contains terminal line settings" "information for ttymon." "/file" ttydefs(4)~\*{NI\*}
.xx "" "/table, debugging and line number" "information from an object file." "" strip(1)~\*{PRM\*}
.xx "" "t_rcvdis: retrieve" "information from disconnect." "" t_rcvdis(3N)~\*{NI\*}
.xx "" "/and update /etc/shadow with" "information from /etc/passwd." "" pwconv(1M)~\*{SARM\*}
.xx "" "get numeric formatting" "information." "localeconv:" localeconv(3C)~\*{PRM\*}
.xx "" "list user and system login" "information." "logins:" logins(1M)~\*{SARM\*}
.xx "" "specific asynchronous endpoint" "information." "mb2a_getinfo: Gets" mb2a_getinfo(3tai)~\*{MBTAI\*}
.xx "" "specific synchronous endpoint" "information." "mb2s_getinfo: Gets" mb2s_getinfo(3tai)~\*{MBTAI\*}
.xx "node's/" "enetinfo: provides" "information on an ethernet" "" enetinfo(1iref)~\*{MBRMAN\*}
.xx "" "ccildinfo: line discipline" "information on the/" "" ccildinfo(1iref)~\*{MBRMAN\*}
.xx "communications/" "ccilinfo: line" "information on the" "" ccilinfo(1iref)~\*{MBRMAN\*}
.xx "" "ccisrvinfo: CCI server" "information on the/" "" ccisrvinfo(1iref)~\*{MBRMAN\*}
.xx "" "ccisubinfo: subchannel" "information on the/" "" ccisubinfo(1iref)~\*{MBRMAN\*}
.xx "" "usermod: modify a user's login" "information on the system." "" usermod(1M)~\*{SARM\*}
.xx "" "display software package" "information." "pkginfo:" pkginfo(1)~\*{ISDG\*}
.xx "" "display software package" "information." "pkginfo:" pkginfo(1)~\*{SARM\*}
.xx "" "display mounted resource" "information." "rmntstat:" rmntstat(1M)~\*{NUAG\*}
.xx "" "display mounted resource" "information." "rmntstat:" rmntstat(1M)~\*{SARM\*}
.xx "" "fingerd, in.fingerd: remote user" "information server." "" fingerd(1M)~\*{NUAG\*}
.xx "" "fingerd, in.fingerd: remote user" "information server." "" fingerd(1M)~\*{SARM\*}
.xx "" "/configuration file for Network" "Information Service (NIS)/" "" updaters(4)~\*{NI\*}
.xx "database/" "ypfiles: the Network" "Information Service (NIS)" "" ypfiles(4)~\*{NI\*}
.xx "file." "makedbm: make a Network" "Information Service (NIS) dbm" "" makedbm(1M)~\*{NI\*}
.xx "" "fstatvfs: get file system" "information." "statvfs," statvfs(2)~\*{PRM\*}
.xx "" "sysinfo: get and set system" "information strings." "" sysinfo(2)~\*{PRM\*}
.xx "" "/STREAMS driver and module" "information structure." "" module_info(D4DK)~\*{DDRM\*}
.xx "" "get protocol-specific service" "information." "t_getinfo:" t_getinfo(3N)~\*{NI\*}
.xx "" "/convert Release 4 locale" "information to different format." "" maplocale(1M)~\*{ACG\*}
.xx "modes." "tset: provide" "information to set terminal" "" tset(1)~\*{URM\*}
.xx "" "and output port monitor-specific" "information." "ttyadm: format" ttyadm(1M)~\*{SARM\*}
.xx "" "server for changing NIS" "information." "ypupdated:" ypupdated(1M)~\*{NI\*}
.xx "" "inittab: script for" "init." "" inittab(4)~\*{SARM\*}
.xx "" "" "init: initialize a device." "" init(D2D)~\*{DDRM\*}
.xx "initialization." "" "init, telinit: process control" "" init(1M)~\*{SARM\*}
.xx "bootstrap parameter string on/" "" "initbp: initializes the" "" initbp(8iref)~\*{MBRMAN\*}
.xx "" "/start_color, init_pair," "init_color, has_colors,/" "" curs_color(3X)~\*{CHAR\*}
.xx "supplementary group access/" "" "initgroups: initialize the" "" initgroups(3C)~\*{PRM\*}
.xx "" "init, telinit: process control" "initialization." "" init(1M)~\*{SARM\*}
.xx "" "/delscreen: curses screen" "initialization and manipulation/" "" curs_initscr(3X)~\*{CHAR\*}
.xx "" "VGA keyboard/display driver" "initialization." "/Extended" evgainit(1M)~\*{SARM\*}
.xx "" "reinit: runs an" "initialization file." "" reinit(1F)~\*{CHAR\*}
.xx "mail and rmail." "mailcnfg:" "initialization information for" "" mailcnfg(4)~\*{SARM\*}
.xx "" "brc, bcheckrc: system" "initialization procedures." "" brc(1M)~\*{SARM\*}
.xx "" "qinit: STREAMS queue" "initialization structure." "" qinit(D4DK)~\*{DDRM\*}
.xx "" "init:" "initialize a device." "" init(D2D)~\*{DDRM\*}
.xx "start-up." "start:" "initialize a device at system" "" start(D2DK)~\*{DDRM\*}
.xx "management map." "rminit:" "initialize a private space" "" rminit(D3K)~\*{DDRM\*}
.xx "terminfo database." "tput:" "initialize a terminal or query" "" tput(1)~\*{URM\*}
.xx "ownership." "fixperm: correct or" "initialize file permissions and" "" fixperm(1)~\*{ACG\*}
.xx "user." "setup:" "initialize system for first" "" setup(1M)~\*{SARM\*}
.xx "adapter." "sdi_init:" "initialize the SCSI host" "" sdi_init(D3I)~\*{SCSI\*}
.xx "group access list." "initgroups:" "initialize the supplementary" "" initgroups(3C)~\*{PRM\*}
.xx "permissions/" "fixperm: correct or" "initialize XENIX file" "" fixperm(1M)~\*{SARM\*}
.xx "parameter string on the/" "initbp:" "initializes the bootstrap" "" initbp(8iref)~\*{MBRMAN\*}
.xx "socket." "connect:" "initiate a connection on a" "" connect(3N)~\*{NI\*}
.xx "software request." "dma_swstart:" "initiate a DMA operation via" "" dma_swstart(D3X)~\*{DDRM\*}
.xx "" "/a message to be sent to" "initiate a solicited data/" "" mps_mk_sol(D3D)~\*{DDRM\*}
.xx "" "/a message to be sent to" "initiate a solicited data reply." "" mps_mk_solrply(D3D)~\*{DDRM\*}
.xx "" "t_sndrel:" "initiate an orderly release." "" t_sndrel(3N)~\*{NI\*}
.xx "backup session." "backup:" "initiate or control a system" "" backup(1M)~\*{SARM\*}
.xx "" "popen, pclose:" "initiate pipe to/from a process." "" popen(3S)~\*{PRM\*}
.xx "filesystems, data/" "restore:" "initiate restores of" "" restore(1M)~\*{SARM\*}
.xx "" "curs_color:  start_color," "init_pair, init_color,/" "" curs_color(3X)~\*{CHAR\*}
.xx "isendwin,/" "curs_initscr:" "initscr, newterm, endwin," "" curs_initscr(3X)~\*{CHAR\*}
.xx "random number/" "random, srandom," "initstate, setstate: better" "" random(3)~\*{BSD\*}
.xx "" "" "inittab: script for init." "" inittab(4)~\*{SARM\*}
.xx "32 bit I/O port." "" "inl: read a 32 bit word from a" "" inl(D3D)~\*{DDRM\*}
.xx "" "fsync: synchronize a file's" "in-memory state with that on the/" "" fsync(2)~\*{PRM\*}
.xx "server." "named," "in.named: Internet domain name" "" named(1M)~\*{NUAG\*}
.xx "server." "named," "in.named: Internet domain name" "" named(1M)~\*{SARM\*}
.xx "mvinstr,/" "curs_instr:  instr," "innstr, winstr, winnstr," "" curs_instr(3X)~\*{CHAR\*}
.xx "" "inode (bfs): format of a bfs" "i-node." "" inode(4)~\*{SARM\*}
.xx "i-node." "" "inode (bfs): format of a bfs" "" inode(4)~\*{SARM\*}
.xx "" "fsirand: install random" "inode generation numbers." "" fsirand(1)~\*{BSD\*}
.xx "i-node." "" "inode (s5): format of an s5" "" inode(4)~\*{SARM\*}
.xx "inode." "" "inode (ufs): format of a ufs" "" inode(4)~\*{SARM\*}
.xx "" "/number of free disk blocks and" "i-nodes for s5 file systems." "" df(1M)~\*{SARM\*}
.xx "" "between versions of a troff" "input file." "/mark differences" diffmk(1)~\*{BSD\*}
.xx "" "checknr: check nroff and troff" "input files; report possible/" "" checknr(1)~\*{BSD\*}
.xx "" "/vwscanw: convert formatted" "input from a curses widow." "" curs_scanw(3X)~\*{CHAR\*}
.xx "" "/typeahead: curses terminal" "input option control routines." "" curs_inopts(3X)~\*{CHAR\*}
.xx "" ".so requests from nroff or troff" "input." "/resolve and eliminate" soelim(1)~\*{BSD\*}
.xx "" "sscanf: convert formatted" "input." "scanf, fscanf," scanf(3S)~\*{PRM\*}
.xx "" "ungetc: push character back onto" "input stream." "" ungetc(3S)~\*{PRM\*}
.xx "" "fread, fwrite: binary" "input/output." "" fread(3S)~\*{PRM\*}
.xx "" "poll:" "input/output multiplexing." "" poll(2)~\*{PRM\*}
.xx "" "poll:" "input/output multiplexing." "" poll(2)~\*{STRM\*}
.xx "" "stdio: standard buffered" "input/output package." "" stdio(3S)~\*{PRM\*}
.xx "" "clearerr, fileno: stream status" "inquiries." "ferror, feof," ferror(3S)~\*{PRM\*}
.xx "" "uustat: uucp status" "inquiry and job control." "" uustat(1C)~\*{URM\*}
.xx "" "rwhod," "in.rwhod: system status server." "" rwhod(1M)~\*{NUAG\*}
.xx "" "rwhod," "in.rwhod: system status server." "" rwhod(1M)~\*{SARM\*}
.xx "mvwinsch: insert a/" "curs_insch:" "insch, winsch, mvinsch," "" curs_insch(3X)~\*{CHAR\*}
.xx "" "/deleteln, wdeleteln," "insdelln, \%winsdelln, insertln,/" "" curs_deleteln(3X)~\*{CHAR\*}
.xx "" "/winsch, mvinsch, mvwinsch:" "insert a character before the/" "" curs_insch(3X)~\*{CHAR\*}
.xx "" "insq:" "insert a message into a queue." "" insq(D3DK)~\*{DDRM\*}
.xx "" "/\%winsertln: delete and" "insert lines in a curses window." "" curs_deleteln(3X)~\*{CHAR\*}
.xx "bibliographic/" "refer: expand and" "insert references from a" "" refer(1)~\*{BSD\*}
.xx "under/" "/mvwinsstr, mvwinsnstr:" "insert string before character" "" curs_insstr(3X)~\*{CHAR\*}
.xx "" "requests and service media" "insertion prompts." "/restore" rsoper(1M)~\*{SARM\*}
.xx "" "operations to service media" "insertion prompts." "/with backup" bkoper(1M)~\*{SARM\*}
.xx "and/" "/insdelln, \%winsdelln," "insertln, \%winsertln: delete" "" curs_deleteln(3X)~\*{CHAR\*}
.xx "queue." "insque, remque:" "insert/remove element from a" "" insque(3C)~\*{PRM\*}
.xx "mvinsstr,/" "curs_instr:  insstr," "insnstr, winsstr, winsnstr," "" curs_insstr(3X)~\*{CHAR\*}
.xx "queue." "" "insq: insert a message into a" "" insq(D3DK)~\*{DDRM\*}
.xx "element from a queue." "" "insque, remque: insert/remove" "" insque(3C)~\*{PRM\*}
.xx "winsnstr, mvinsstr,/" "curs_instr:" "insstr, insnstr, winsstr," "" curs_insstr(3X)~\*{CHAR\*}
.xx "suspend process/" "sigsuspend:" "install a signal mask and" "" sigsuspend(2)~\*{PRM\*}
.xx "with information from/" "pwconv:" "install and update /etc/shadow" "" pwconv(1M)~\*{SARM\*}
.xx "" "install:" "install commands." "" install(1M)~\*{PRM\*}
.xx "" "install:" "install commands." "" install(1M)~\*{SARM\*}
.xx "" "xinstall:" "install commands." "" xinstall(1M)~\*{ACG\*}
.xx "" "install:" "install files." "" install(1)~\*{BSD\*}
.xx "" "" "install: install commands." "" install(1M)~\*{PRM\*}
.xx "" "" "install: install commands." "" install(1M)~\*{SARM\*}
.xx "" "" "install: install files." "" install(1)~\*{BSD\*}
.xx "loaders." "sgib:" "install Multibus bootstrap" "" sgib(1iref)~\*{MBRMAN\*}
.xx "numbers." "fsirand:" "install random inode generation" "" fsirand(1)~\*{BSD\*}
.xx "certain UNIX or XENIX/" "custom:" "install specific portions of" "" custom(1)~\*{ACG\*}
.xx "UNIX package." "custom:" "install specific portions of a" "" custom(1M)~\*{SARM\*}
.xx "" "ypinit: build and" "install YP database." "" ypinit(1M)~\*{NI\*}
.xx "" "pkgmk: produce an" "installable package." "" pkgmk(1)~\*{ISDG\*}
.xx "" "pkgchk: check accuracy of" "installation." "" pkgchk(1M)~\*{ISDG\*}
.xx "" "pkgchk: check accuracy of" "installation." "" pkgchk(1M)~\*{SARM\*}
.xx "" "/add a file to the software" "installation database." "" installf(1M)~\*{ISDG\*}
.xx "" "admin:" "installation defaults file." "" admin(4)~\*{SARM\*}
.xx "" "xinstall: XENIX" "installation shell script." "" xinstall(1M)~\*{SARM\*}
.xx "software installation database." "" "installf: add a file to the" "" installf(1M)~\*{ISDG\*}
.xx "" "creatsem: create an" "instance of a binary semaphore." "" creatsem(2)~\*{ACG\*}
.xx "mvinstr, mvinnstr,/" "curs_instr:" "instr, innstr, winstr, winnstr," "" curs_instr(3X)~\*{CHAR\*}
.xx "program." "talkd," "in.talkd: server for talk" "" talkd(1M)~\*{NUAG\*}
.xx "program." "talkd," "in.talkd: server for talk" "" talkd(1M)~\*{SARM\*}
.xx "" "abs, labs: return" "integer absolute value." "" abs(3C)~\*{PRM\*}
.xx "" "a64l, l64a: convert between long" "integer and base-64 ASCII/" "" a64l(3C)~\*{PRM\*}
.xx "" "mtox, mfree: multiple precision" "integer arithmetic." "/itom, xtom," mp(3X)~\*{BSD\*}
.xx "" "prompt for and validate an" "integer." "ckrange:" ckrange(1)~\*{ISDG\*}
.xx "" "prompt for and validate an" "integer." "ckrange:" ckrange(1)~\*{SARM\*}
.xx "" "sputl, sgetl: access long" "integer data in a/" "" sputl(3X)~\*{PRM\*}
.xx "" "atol, atoi: convert string to" "integer." "strtol, strtoul," strtol(3C)~\*{PRM\*}
.xx "" "a prompt; verify and return an" "integer value." "ckint: display" ckint(1)~\*{ISDG\*}
.xx "" "a prompt; verify and return an" "integer value." "ckint: display" ckint(1)~\*{SARM\*}
.xx "" "max: return the larger of two" "integers." "" max(D3DK)~\*{DDRM\*}
.xx "" "min: return the lesser of two" "integers." "" min(D3DK)~\*{DDRM\*}
.xx "" "/ltol3: convert between 3-byte" "integers and long integers." "" l3tol(3C)~\*{PRM\*}
.xx "" "between 3-byte integers and long" "integers." "l3tol, ltol3: convert" l3tol(3C)~\*{PRM\*}
.xx "to service media/" "bkoper:" "interact with backup operations" "" bkoper(1M)~\*{SARM\*}
.xx "system." "mailx:" "interactive message processing" "" mailx(1)~\*{URM\*}
.xx "" "system consistency check and" "interactive repair." "/(ufs): file" fsck(1M)~\*{SARM\*}
.xx "" "nslookup: query name servers" "interactively." "" nslookup(1M)~\*{NUAG\*}
.xx "" "nslookup: query name servers" "interactively." "" nslookup(1M)~\*{SARM\*}
.xx "program." "cscope:" "interactively examine a C" "" cscope(1)~\*{PRM\*}
.xx "board/" "ics_find _rec: reads the" "interconnect register of the" "" ics_find_rec(D3D)~\*{DDRM\*}
.xx "board in/" "ics_read: reads the" "interconnect register of the" "" ics_read(D3D)~\*{DDRM\*}
.xx "board and/" "ics_read: reads" "interconnect registers of the" "" ics_read(3iref)~\*{MBRMAN\*}
.xx "board." "ics_write: writes into" "interconnect registers of the" "" ics_write(3iref)~\*{MBRMAN\*}
.xx "driver." "ics:" "Interconnect Space device" "" ics(7iref)~\*{MBRMAN\*}
.xx "" "utilities to access Multibus II" "interconnect space." "/icsgetrec:" icsrd(8iref)~\*{MBRMAN\*}
.xx "" "/finds a specific record in the" "interconnect space of a board." "" ics_find_rec(3iref)~\*{MBRMAN\*}
.xx "" "HOST ID record in this board's" "interconnect space." "/of the" ics_hostid(D3D)~\*{DDRM\*}
.xx "" "/or writes a specified number of" "interconnect space registers/" "" ics_rdwr(D3D)~\*{DDRM\*}
.xx "" "console: STREAMS-based console" "interface." "" console(7)~\*{STRM\*}
.xx "" "cram\- CMOS RAM" "interface." "" cram(7)~\*{SARM\*}
.xx "" "lo: software loopback network" "interface." "" lo(7)~\*{NUAG\*}
.xx "" "lo: software loopback network" "interface." "" lo(7)~\*{SARM\*}
.xx "" "lp: parallel port" "interface." "" lp(7)~\*{SARM\*}
.xx "" "rtc: real time clock" "interface." "" rtc(7)~\*{SARM\*}
.xx "" "swap: swap administrative" "interface." "" swap(1M)~\*{SARM\*}
.xx "" "termio: general terminal" "interface." "" termio(7)~\*{SARM\*}
.xx "" "tty: controlling terminal" "interface." "" tty(7)~\*{SARM\*}
.xx "module." "timod: Transport" "Interface cooperating STREAMS" "" timod(7)~\*{STRM\*}
.xx "" "cci: communications controller" "interface device driver." "" cci(7iref)~\*{MBRMAN\*}
.xx "" "edsysadm: sysadm" "interface editing tool." "" edsysadm(1M)~\*{ISDG\*}
.xx "" "edsysadm: sysadm" "interface editing tool." "" edsysadm(1M)~\*{SARM\*}
.xx "printers." "postio: serial" "interface for PostScript" "" postio(1)~\*{SARM\*}
.xx "" "Access Command Environment" "Interface." "/for the Framed" face(1)~\*{URM\*}
.xx "tool." "delsysadm: sysadm" "interface menu or task removal" "" delsysadm(1M)~\*{ISDG\*}
.xx "tool." "delsysadm: sysadm" "interface menu or task removal" "" delsysadm(1M)~\*{SARM\*}
.xx "" "ifconfig: configure network" "interface parameters." "" ifconfig(1M)~\*{NUAG\*}
.xx "" "ifconfig: configure network" "interface parameters." "" ifconfig(1M)~\*{SARM\*}
.xx "" "cartridge magnetic tape streamer" "interface." "qt: QIC" qt(7)~\*{SARM\*}
.xx "STREAMS/" "tirdwr: Transport" "Interface read/write interface" "" tirdwr(7)~\*{STRM\*}
.xx "" "/asynchronous communications" "interface STREAMS driver." "" ports(7)~\*{STRM\*}
.xx "" "/Transport Interface read/write" "interface STREAMS module." "" tirdwr(7)~\*{STRM\*}
.xx "" "tcgetsid: general terminal" "interface." "/tcsetpgrp," termios(2)~\*{PRM\*}
.xx "" "extended general terminal" "interface." "termiox:" termiox(7)~\*{SARM\*}
.xx "using the TELNET/" "telnet: user" "interface to a remote system" "" telnet(1)~\*{NUAG\*}
.xx "using the TELNET/" "telnet: user" "interface to a remote system" "" telnet(1)~\*{URM\*}
.xx "administration." "sysadm: visual" "interface to perform system" "" sysadm(1M)~\*{SARM\*}
.xx "logging and event tracing." "log:" "interface to STREAMS error" "" log(7)~\*{STRM\*}
.xx "" "ypprot_err: NIS client" "interface." "/yperr_string," ypclnt(3N)~\*{NI\*}
.xx "" "/tgetstr, tgoto, tputs: curses" "interfaces (emulated) to the/" "" curs_termcap(3X)~\*{CHAR\*}
.xx "" "of Internet Protocol network" "interfaces." "/general properties" if(7)~\*{NUAG\*}
.xx "" "/tigetnum, tigetstr: curses" "interfaces to terminfo database." "" curs_terminfo(3X)~\*{CHAR\*}
.xx "" "etoimajor: convert external to" "internal major device number." "" etoimajor(D3DK)~\*{DDRM\*}
.xx "" "getmajor: get" "internal major device number." "" getmajor(D3DK)~\*{DDRM\*}
.xx "" "getminor: get" "internal minor device number." "" getminor(D3DK)~\*{DDRM\*}
.xx "device/" "itoemajor: convert" "internal to external major" "" itoemajor(D3DK)~\*{DDRM\*}
.xx "" "sendmail: send mail over the" "internet." "" sendmail(1M)~\*{BSD\*}
.xx "" "/inet_netof, inet_ntoa:" "Internet address manipulation." "" inet(3N)~\*{NI\*}
.xx "Protocol." "ICMP:" "Internet Control Message" "" ICMP(7)~\*{NI\*}
.xx "Protocol." "ICMP:" "Internet Control Message" "" ICMP(7)~\*{NUAG\*}
.xx "Protocol." "ICMP:" "Internet Control Message" "" ICMP(7)~\*{SARM\*}
.xx "" "named, in.named:" "Internet domain name server." "" named(1M)~\*{NUAG\*}
.xx "" "named, in.named:" "Internet domain name server." "" named(1M)~\*{SARM\*}
.xx "" "htable: convert DoD" "Internet format host table." "" htable(1M)~\*{NUAG\*}
.xx "" "htable: convert DoD" "Internet format host table." "" htable(1M)~\*{SARM\*}
.xx "a host." "gettable: get DoD" "Internet format host table from" "" gettable(1M)~\*{NUAG\*}
.xx "a host." "gettable: get DoD" "Internet format host table from" "" gettable(1M)~\*{SARM\*}
.xx "" "IP:" "Internet Protocol." "" IP(7)~\*{NI\*}
.xx "" "IP:" "Internet Protocol." "" IP(7)~\*{NUAG\*}
.xx "" "IP:" "Internet Protocol." "" IP(7)~\*{SARM\*}
.xx "" "inet:" "Internet protocol family." "" inet(7)~\*{NUAG\*}
.xx "" "inet:" "Internet protocol family." "" inet(7)~\*{SARM\*}
.xx "" "if: general properties of" "Internet Protocol network/" "" if(7)~\*{NUAG\*}
.xx "" "inetd.conf:" "Internet servers database." "" inetd.conf(4)~\*{NUAG\*}
.xx "" "inetd.conf:" "Internet servers database." "" inetd.conf(4)~\*{SARM\*}
.xx "" "services:" "Internet services and aliases." "" services(4)~\*{NUAG\*}
.xx "" "services:" "Internet services and aliases." "" services(4)~\*{SARM\*}
.xx "" "inetd:" "Internet services daemon." "" inetd(1M)~\*{NI\*}
.xx "" "inetd:" "Internet services daemon." "" inetd(1M)~\*{NUAG\*}
.xx "" "inetd:" "Internet services daemon." "" inetd(1M)~\*{SARM\*}
.xx "Protocol." "TCP:" "Internet Transmission Control" "" TCP(7)~\*{NI\*}
.xx "Protocol." "TCP:" "Internet Transmission Control" "" TCP(7)~\*{NUAG\*}
.xx "Protocol." "TCP:" "Internet Transmission Control" "" TCP(7)~\*{SARM\*}
.xx "" "UDP:" "Internet User Datagram Protocol." "" UDP(7)~\*{NI\*}
.xx "" "UDP:" "Internet User Datagram Protocol." "" UDP(7)~\*{NUAG\*}
.xx "" "UDP:" "Internet User Datagram Protocol." "" UDP(7)~\*{SARM\*}
.xx "service." "whois:" "Internet user name directory" "" whois(1)~\*{NUAG\*}
.xx "service." "whois:" "Internet user name directory" "" whois(1)~\*{URM\*}
.xx "syntax." "csh: shell command" "interpreter with a C-like" "" csh(1)~\*{URM\*}
.xx "job/" "sh, jsh, rsh: command" "interpreters: standard shell," "" sh(1)~\*{URM\*}
.xx "" "pipe: create an" "interprocess channel." "" pipe(2)~\*{PRM\*}
.xx "facilities status." "ipcs: report" "inter-process communication" "" ipcs(1)~\*{URM\*}
.xx "package." "stdipc: ftok: standard" "interprocess communication" "" stdipc(3C)~\*{PRM\*}
.xx "" "intr: process a device" "interrupt." "" intr(D2D)~\*{DDRM\*}
.xx "" "blocked signals and wait for" "interrupt." "/automically release" sigpause(3)~\*{BSD\*}
.xx "" "siginterrupt: allow signals to" "interrupt system calls." "" siginterrupt(3)~\*{BSD\*}
.xx "" "spl: block/allow" "interrupts." "" spl(D3D)~\*{DDRM\*}
.xx "" "sleep: suspend execution for an" "interval." "" sleep(1)~\*{URM\*}
.xx "" "sleep: suspend execution for" "interval." "" sleep(3)~\*{BSD\*}
.xx "" "sleep: suspend execution for" "interval." "" sleep(3C)~\*{PRM\*}
.xx "" "busy-wait for specified" "interval." "drv_usecwait:" drv_usecwait(D3DK)~\*{DDRM\*}
.xx "" "ualarm: schedule signal after" "interval in microseconds." "" ualarm(3)~\*{BSD\*}
.xx "" "usleep: suspend execution for" "interval in microseconds." "" usleep(3)~\*{BSD\*}
.xx "" "suspend execution for a short" "interval." "nap:" nap(2)~\*{ACG\*}
.xx "" "setitimer: get/set value of" "interval timer." "getitimer," getitimer(3C)~\*{PRM\*}
.xx "server." "tnamed," "in.tnamed: DARPA trivial name" "" tnamed(1M)~\*{NUAG\*}
.xx "server." "tnamed," "in.tnamed: DARPA trivial name" "" tnamed(1M)~\*{SARM\*}
.xx "interrupt." "" "intr: process a device" "" intr(D2D)~\*{DDRM\*}
.xx "" "/echo, noecho, halfdelay," "intrflush, keypad, meta,/" "" curs_inopts(3X)~\*{CHAR\*}
.xx "" "" "intro." "" intro(2)~\*{ACG\*}
.xx "maintenance commands and/" "" "intro: introduction to" "" intro(1M)~\*{SARM\*}
.xx "programming commands." "" "intro: introduction to" "" intro(1)~\*{PRM\*}
.xx "networking functions and/" "" "intro: introduction to" "" intro(3N)~\*{NI\*}
.xx "miscellany." "" "intro: introduction to" "" intro(5)~\*{PRM\*}
.xx "miscellany." "" "intro: introduction to" "" intro(5)~\*{SARM\*}
.xx "and application programs." "" "intro: introduction to commands" "" intro(1)~\*{URM\*}
.xx "utility routines." "" "intro: introduction to DMA" "" intro(D3X)~\*{DDRM\*}
.xx "structures." "" "intro: introduction to DMA data" "" intro(D4X)~\*{DDRM\*}
.xx "data." "" "intro: introduction to driver" "" intro(D1DK)~\*{DDRM\*}
.xx "entry point routines." "" "intro: introduction to driver" "" intro(D2DK)~\*{DDRM\*}
.xx "formats." "" "intro: introduction to file" "" intro(4)~\*{PRM\*}
.xx "formats." "" "intro: introduction to file" "" intro(4)~\*{SARM\*}
.xx "and libraries." "" "intro: introduction to functions" "" intro(3)~\*{PRM\*}
.xx "utility routines." "" "intro: introduction to kernel" "" intro(D3DK)~\*{DDRM\*}
.xx "data structures." "" "intro: introduction to kernel" "" intro(D4DK)~\*{DDRM\*}
.xx "#define's." "" "intro: introduction to kernel" "" intro(D5DK)~\*{DDRM\*}
.xx "libraries." "" "intro: introduction to math" "" intro(3M)~\*{PRM\*}
.xx "target driver functions." "" "intro: introduction to SCSI" "" intro(D3I)~\*{SCSI\*}
.xx "structures." "" "intro: introduction to SCSI data" "" intro(D4I)~\*{SCSI\*}
.xx "files." "" "intro: introduction to special" "" intro(7)~\*{SARM\*}
.xx "calls and error numbers." "" "intro: introduction to system" "" intro(2)~\*{PRM\*}
.xx "application programs." "intro:" "introduction to commands and" "" intro(1)~\*{URM\*}
.xx "structures." "intro:" "introduction to DMA data" "" intro(D4X)~\*{DDRM\*}
.xx "routines." "intro:" "introduction to DMA utility" "" intro(D3X)~\*{DDRM\*}
.xx "" "intro:" "introduction to driver data." "" intro(D1DK)~\*{DDRM\*}
.xx "point routines." "intro:" "introduction to driver entry" "" intro(D2DK)~\*{DDRM\*}
.xx "" "intro:" "introduction to file formats." "" intro(4)~\*{PRM\*}
.xx "" "intro:" "introduction to file formats." "" intro(4)~\*{SARM\*}
.xx "libraries." "intro:" "introduction to functions and" "" intro(3)~\*{PRM\*}
.xx "#define's." "intro:" "introduction to kernel" "" intro(D5DK)~\*{DDRM\*}
.xx "structures." "intro:" "introduction to kernel data" "" intro(D4DK)~\*{DDRM\*}
.xx "routines." "intro:" "introduction to kernel utility" "" intro(D3DK)~\*{DDRM\*}
.xx "commands and application/" "intro:" "introduction to maintenance" "" intro(1M)~\*{SARM\*}
.xx "" "intro:" "introduction to math libraries." "" intro(3M)~\*{PRM\*}
.xx "" "intro:" "introduction to miscellany." "" intro(5)~\*{PRM\*}
.xx "" "intro:" "introduction to miscellany." "" intro(5)~\*{SARM\*}
.xx "functions and libraries." "intro:" "introduction to networking" "" intro(3N)~\*{NI\*}
.xx "commands." "intro:" "introduction to programming" "" intro(1)~\*{PRM\*}
.xx "structures." "intro:" "introduction to SCSI data" "" intro(D4I)~\*{SCSI\*}
.xx "driver functions." "intro:" "introduction to SCSI target" "" intro(D3I)~\*{SCSI\*}
.xx "" "intro:" "introduction to special files." "" intro(7)~\*{SARM\*}
.xx "error numbers." "intro:" "introduction to system calls and" "" intro(2)~\*{PRM\*}
.xx "" "/(s5): generate path names versus" "i-numbers for s5 file systems." "" ncheck(1M)~\*{SARM\*}
.xx "" "/(ufs): generate pathnames versus" "i-numbers for ufs file systems." "" ncheck(1M)~\*{SARM\*}
.xx "" "a  list of path names vs" "i-numbers." "/(generic): generate" ncheck(1M)~\*{SARM\*}
.xx "" "indxbib: create an" "inverted index to a/" "" indxbib(1)~\*{BSD\*}
.xx "" "idspace:" "investigates free space." "" idspace(1M)~\*{ISDG\*}
.xx "" "idspace:" "investigates free space." "" idspace(1M)~\*{SARM\*}
.xx "" "/routines for" "invocation by forms." "" form_hook(3X)~\*{CHAR\*}
.xx "" "/routines for automatic" "invocation by menus." "" menu_hook(3X)~\*{CHAR\*}
.xx "" "fmli:" "invoke FMLI." "" fmli(1)~\*{CHAR\*}
.xx "" "fmli:" "invoke FMLI." "" fmli(1)~\*{URM\*}
.xx "incoming mail." "mail_pipe:" "invoke recipient command for" "" mail_pipe(1M)~\*{SARM\*}
.xx "filesystem/" "xrestore, xrestor:" "invoke XENIX incremental" "" xrestore(1M)~\*{SARM\*}
.xx "from a 16 bit I/O port." "" "inw: read a 16 bit short word" "" inw(D3D)~\*{DDRM\*}
.xx "" "strategy: perform block" "I/O." "" strategy(D2DK)~\*{DDRM\*}
.xx "" "/release buffer after block" "I/O and wakeup processes." "" biodone(D3DK)~\*{DDRM\*}
.xx "" "pending completion of block" "I/O." "biowait: suspend processes" biowait(D3DK)~\*{DDRM\*}
.xx "" "buf: block" "I/O data transfer structure." "" buf(D4DK)~\*{DDRM\*}
.xx "" "select: synchronous" "I/O multiplexing." "" select(3C)~\*{NI\*}
.xx "" "inb: read a byte from a 8 bit" "I/O port." "" inb(D3D)~\*{DDRM\*}
.xx "" "outb: write a byte to an 8 bit" "I/O port." "" outb(D3D)~\*{DDRM\*}
.xx "" "read a 32 bit word from a 32 bit" "I/O port." "inl:" inl(D3D)~\*{DDRM\*}
.xx "" "16 bit short word from a 16 bit" "I/O port." "inw: read a" inw(D3D)~\*{DDRM\*}
.xx "" "a 32 bit long word to a 32 bit" "I/O port." "outl: write" outl(D3D)~\*{DDRM\*}
.xx "" "a 16 bit short word to a 16 bit" "I/O port." "outw: write" outw(D3D)~\*{DDRM\*}
.xx "" "write bytes from buffer to an" "I/O port." "repoutsb:" repoutsb(D3D)~\*{DDRM\*}
.xx "" "32 bit words from buffer to an" "I/O port." "repoutsd: write" repoutsd(D3D)~\*{DDRM\*}
.xx "" "16 bit words from buffer to an" "I/O port." "repoutsw: write" repoutsw(D3D)~\*{DDRM\*}
.xx "" "repinsb: read bytes from" "I/O port to buffer." "" repinsb(D3D)~\*{DDRM\*}
.xx "" "repinsd: read 32 bit words from" "I/O port to buffer." "" repinsd(D3D)~\*{DDRM\*}
.xx "" "repinsw: read 16 bit words from" "I/O port to buffer." "" repinsw(D3D)~\*{DDRM\*}
.xx "" "physiock: validate and issue raw" "I/O request." "" physiock(D3DK)~\*{DDRM\*}
.xx "units." "dma_pageio: break up an" "I/O request into manageable" "" dma_pageio(D3D)~\*{DDRM\*}
.xx "" "uio: scatter/gather" "I/O request structure." "" uio(D4DK)~\*{DDRM\*}
.xx "" "data storage structure for" "I/O using uio(D4DK)." "iovec:" iovec(D4DK)~\*{DDRM\*}
.xx "" "" "iocblk: STREAMS ioctl structure." "" iocblk(D4DK)~\*{DDRM\*}
.xx "" "streamio: STREAMS" "ioctl commands." "" streamio(7)~\*{STRM\*}
.xx "device." "" "ioctl: control a character" "" ioctl(D2DK)~\*{DDRM\*}
.xx "" "" "ioctl: control device." "" ioctl(2)~\*{PRM\*}
.xx "" "copyreq: STREAMS transparent" "ioctl copy request structure." "" copyreq(D4DK)~\*{DDRM\*}
.xx "" "copyresp: STREAMS transparent" "ioctl copy response structure." "" copyresp(D4DK)~\*{DDRM\*}
.xx "" "iocblk: STREAMS" "ioctl structure." "" iocblk(D4DK)~\*{DDRM\*}
.xx "sockets." "sockio:" "ioctls that operate directly on" "" sockio(7)~\*{NI\*}
.xx "for I/O using uio(D4DK)." "" "iovec: data storage structure" "" iovec(D4DK)~\*{DDRM\*}
.xx "" "" "IP: Internet Protocol." "" IP(7)~\*{NI\*}
.xx "" "" "IP: Internet Protocol." "" IP(7)~\*{NUAG\*}
.xx "" "" "IP: Internet Protocol." "" IP(7)~\*{SARM\*}
.xx "semaphore set, or shared memory/" "" "ipcrm: remove a message queue," "" ipcrm(1)~\*{URM\*}
.xx "communication facilities/" "" "ipcs: report inter-process" "" ipcs(1)~\*{URM\*}
.xx "" "/islower, isupper, isalpha," "isalnum, isspace, iscntrl,/" "" ctype(3C)~\*{PRM\*}
.xx "" "/isxdigit, islower, isupper," "isalpha, isalnum, isspace,/" "" ctype(3C)~\*{PRM\*}
.xx "" "/ispunct, isprint, isgraph," "isascii: character handling." "" ctype(3C)~\*{PRM\*}
.xx "descriptor." "" "isastream: test a file" "" isastream(3C)~\*{STRM\*}
.xx "" "ttyname," "isatty: find name of a terminal." "" ttyname(3C)~\*{PRM\*}
.xx "communications controller/" "i410:" "iSBC 186/410 serial" "" i410(7iref)~\*{MBRMAN\*}
.xx "communications/" "186/450:" "iSBC 186/450 serial" "" 186/450(7iref)~\*{MBRMAN\*}
.xx "device driver and MIX/" "i530:" "iSBC 186/530 Ethernet controller" "" i530(7iref)~\*{MBRMAN\*}
.xx "controller device driver." "i258:" "iSBC 386/258 peripheral" "" i258(7iref)~\*{MBRMAN\*}
.xx "controller tape device/" "i258tp:" "iSBC 386/258 peripheral" "" i258tp(7iref)~\*{MBRMAN\*}
.xx "" "\-Parallel printer driver for" "iSBC 486/133SE board." "hlp" hlp(7iref)~\*{MBRMAN\*}
.xx "" "scsi: Multibus II" "iSBC 486/133SE SCSI Subsystem." "" scsi(7iref)~\*{MBRMAN\*}
.xx "controller." "mpi/450:" "iSBC MPI/450 MPI-based terminal" "" mpi/450(7iref)~\*{MBRMAN\*}
.xx "driver." "i350:" "iSBX 350 parallel printer" "" i350(7iref)~\*{MBRMAN\*}
.xx "serial-port device/" "i354:" "iSBX 354 dual channel" "" i354(7iref)~\*{MBRMAN\*}
.xx "" "/isalpha, isalnum, isspace," "iscntrl, ispunct, isprint,/" "" ctype(3C)~\*{PRM\*}
.xx "isupper, isalpha,/" "ctype:" "isdigit, isxdigit, islower," "" ctype(3C)~\*{PRM\*}
.xx "character buffer is encrypted." "" "isencrypt: determine whether a" "" isencrypt(3G)~\*{PRM\*}
.xx "" "/initscr, newterm, endwin," "isendwin, set_term, delscreen:/" "" curs_initscr(3X)~\*{CHAR\*}
.xx "" "/iscntrl, ispunct, isprint," "isgraph, isascii: character/" "" ctype(3C)~\*{PRM\*}
.xx "" "/touchline, untouchwin, wtouchln," "is_linetouched, is_wintouched:/" "" curs_touch(3X)~\*{CHAR\*}
.xx "" "ctype: isdigit, isxdigit," "islower, isupper, isalpha,/" "" ctype(3C)~\*{PRM\*}
.xx "state." "" "ismpx: return windowing terminal" "" ismpx(1)~\*{URM\*}
.xx "" "ieee_functions, fp_class," "isnan, copysign, scalbn:/" "" ieee_functions(3M)~\*{BSD\*}
.xx "finite, finitel, fpclass,/" "" "isnan, isnand, isnanf, isnanl," "" isnan(3C)~\*{PRM\*}
.xx "finitel, fpclass,/" "isnan," "isnand, isnanf, isnanl, finite," "" isnan(3C)~\*{PRM\*}
.xx "fpclass,/" "isnan, isnand," "isnanf, isnanl, finite, finitel," "" isnan(3C)~\*{PRM\*}
.xx "fpclass,/" "isnan, isnand, isnanf," "isnanl, finite, finitel," "" isnan(3C)~\*{PRM\*}
.xx "" "/isspace, iscntrl, ispunct," "isprint, isgraph, isascii:/" "" ctype(3C)~\*{PRM\*}
.xx "" "/isalnum, isspace, iscntrl," "ispunct, isprint, isgraph,/" "" ctype(3C)~\*{PRM\*}
.xx "" "/isupper, isalpha, isalnum," "isspace, iscntrl, ispunct,/" "" ctype(3C)~\*{PRM\*}
.xx "" "system:" "issue a shell command." "" system(3S)~\*{PRM\*}
.xx "" "issue:" "issue identification file." "" issue(4)~\*{SARM\*}
.xx "file." "" "issue: issue identification" "" issue(4)~\*{SARM\*}
.xx "" "physiock: validate and" "issue raw I/O request." "" physiock(D3DK)~\*{DDRM\*}
.xx "" "/isdigit, isxdigit, islower," "isupper, isalpha, isalnum,/" "" ctype(3C)~\*{PRM\*}
.xx "" "/wtouchln, is_linetouched," "is_wintouched: curses refresh/" "" curs_touch(3X)~\*{CHAR\*}
.xx "isalpha,/" "ctype: isdigit," "isxdigit, islower, isupper," "" ctype(3C)~\*{PRM\*}
.xx "" "on a channel and release" "it." "/DMA operation" dma_stop(D3X)~\*{DDRM\*}
.xx "" "prompt for and return a menu" "item." "ckitem: build a menu;" ckitem(1)~\*{ISDG\*}
.xx "" "prompt for and return a menu" "item." "ckitem: build a menu;" ckitem(1)~\*{SARM\*}
.xx "" "/item_visible: tell if menus" "item is visible." "" menu_item_visible(3X)~\*{CHAR\*}
.xx "" "/item_description: get menus" "item name and description." "" menu_item_name(3X)~\*{CHAR\*}
.xx "" "/item_opts_off, item_opts: menus" "item option routines." "" menu_item_opts(3X)~\*{CHAR\*}
.xx "" "item_value: set and get menus" "item values." "/set_item_value," menu_item_value(3X)~\*{CHAR\*}
.xx "" "/set_menu_items, menu_items," "item_count: connect and/" "" menu_items(3X)~\*{CHAR\*}
.xx "" "menu_item_name:  item_name," "item_description: get menus item/" "" menu_item_name(3X)~\*{CHAR\*}
.xx "menus/" "/set_top_row, top_row," "item_index: set and get current" "" menu_item_current(3X)~\*{CHAR\*}
.xx "" "menu_hook: set_item_init," "item_init, set_item_term,/" "" menu_hook(3X)~\*{CHAR\*}
.xx "menus item name/" "menu_item_name:" "item_name, item_description: get" "" menu_item_name(3X)~\*{CHAR\*}
.xx "" "/item_opts_on, item_opts_off," "item_opts: menus item option/" "" menu_item_opts(3X)~\*{CHAR\*}
.xx "" "/set_item_opts, item_opts_on," "item_opts_off, item_opts: menus/" "" menu_item_opts(3X)~\*{CHAR\*}
.xx "" "menu_item_opts:  set_item_opts," "item_opts_on, item_opts_off,/" "" menu_item_opts(3X)~\*{CHAR\*}
.xx "" "news: print news" "items." "" news(1)~\*{URM\*}
.xx "" "a list of currently marked menu" "items." "getitems: return" getitems(1F)~\*{CHAR\*}
.xx "" "application data with menus" "items." "/item_userptr: associate" menu_item_userptr(3X)~\*{CHAR\*}
.xx "" "create and destroy menus" "items." "/new_item, free_item:" menu_item_new(3X)~\*{CHAR\*}
.xx "" "/connect and dis\%connect" "items to and from menus." "" menu_items(3X)~\*{CHAR\*}
.xx "" "set and get current menus" "items." "/top_row, item_index:" menu_item_current(3X)~\*{CHAR\*}
.xx "" "/item_init, set_item_term," "item_term, set_menu_init,/" "" menu_hook(3X)~\*{CHAR\*}
.xx "application/" "/set_item_userptr," "item_userptr: associate" "" menu_item_userptr(3X)~\*{CHAR\*}
.xx "item values." "/set_item_value," "item_value: set and get menus" "" menu_item_value(3X)~\*{CHAR\*}
.xx "is visible." "menu_item_visible:" "item_visible: tell if menus item" "" menu_item_visible(3X)~\*{CHAR\*}
.xx "external major device number." "" "itoemajor: convert internal to" "" itoemajor(D3DK)~\*{DDRM\*}
.xx "" "pow, gcd, rpow, msqrt, sdiv," "itom, xtom, mtox, mfree:/" "/mout," mp(3X)~\*{BSD\*}
.xx "functions." "bessel:" "j0, j1, jn, y0, y1, yn: Bessel" "" bessel(3M)~\*{PRM\*}
.xx "functions." "bessel: j0," "j1, jn, y0, y1, yn: Bessel" "" bessel(3M)~\*{PRM\*}
.xx "windowing terminal." "" "jagent: host control of" "" jagent(5)~\*{PRM\*}
.xx "windowing terminal." "" "jagent: host control of" "" jagent(5)~\*{SARM\*}
.xx "functions." "bessel: j0, j1," "jn, y0, y1, yn: Bessel" "" bessel(3M)~\*{PRM\*}
.xx "" "uustat: uucp status inquiry and" "job control." "" uustat(1C)~\*{URM\*}
.xx "" "/interpreters: standard shell," "job control shell, restricted/" "" sh(1)~\*{URM\*}
.xx "" "lpr: send a" "job to the printer." "" lpr(1)~\*{BSD\*}
.xx "" "lprm: remove" "jobs from the printer queue." "" lprm(1)~\*{BSD\*}
.xx "" "display the queue of printer" "jobs." "lpq:" lpq(1)~\*{BSD\*}
.xx "times." "atq: display the" "jobs queued to run at specified" "" atq(1)~\*{URM\*}
.xx "" "atrm: remove" "jobs spooled by at or batch." "" atrm(1)~\*{URM\*}
.xx "operator." "" "join: relational database" "" join(1)~\*{URM\*}
.xx "" "/lrand48, nrand48, mrand48," "jrand48, srand48, seed48,/" "" drand48(3C)~\*{PRM\*}
.xx "standard shell, job control/" "sh," "jsh, rsh: command interpreters:" "" sh(1)~\*{URM\*}
.xx "terminal." "" "jterm: reset layer of windowing" "" jterm(1)~\*{URM\*}
.xx "" "" "jwin: print size of layer." "" jwin(1)~\*{URM\*}
.xx "" "" "kdb: kernel debugger." "" kdb(1M)~\*{SARM\*}
.xx "" "idbuild: build new UNIX System" "kernel." "" idbuild(1M)~\*{ISDG\*}
.xx "" "idbuild: build new UNIX System" "kernel." "" idbuild(1M)~\*{SARM\*}
.xx "" "idmkunix: build new UNIX System" "kernel." "" idmkunix(1M)~\*{ISDG\*}
.xx "" "idmkunix: build new UNIX System" "kernel." "" idmkunix(1M)~\*{SARM\*}
.xx "" "between address locations in the" "kernel." "bcopy: copy data" bcopy(D3DK)~\*{DDRM\*}
.xx "" "idconfig: produce a new" "kernel configuration." "" idconfig(1M)~\*{ISDG\*}
.xx "" "idconfig: produce a new" "kernel configuration." "" idconfig(1M)~\*{SARM\*}
.xx "" "intro: introduction to" "kernel data structures." "" intro(D4DK)~\*{DDRM\*}
.xx "" "kdb:" "kernel debugger." "" kdb(1M)~\*{SARM\*}
.xx "" "intro: introduction to" "kernel #define's." "" intro(D5DK)~\*{DDRM\*}
.xx "" "kmem_alloc: allocate space from" "kernel free memory." "" kmem_alloc(D3DK)~\*{DDRM\*}
.xx "" "/allocate and clear space from" "kernel free memory." "" kmem_zalloc(D3DK)~\*{DDRM\*}
.xx "" "free previously allocated" "kernel memory." "kmem_free:" kmem_free(D3DK)~\*{DDRM\*}
.xx "" "drv_getparm: retrieve" "kernel state information." "" drv_getparm(D3DK)~\*{DDRM\*}
.xx "" "drv_setparm: set" "kernel state information." "" drv_setparm(D3DK)~\*{DDRM\*}
.xx "" "intro: introduction to" "kernel utility routines." "" intro(D3DK)~\*{DDRM\*}
.xx "" "/get physical page ID for" "kernel virtual address." "" hat_getkpfnum(D3DK)~\*{DDRM\*}
.xx "" "chkey: change user encryption" "key." "" chkey(1)~\*{NI\*}
.xx "" "chkey: change user encryption" "key." "" chkey(1)~\*{NUAG\*}
.xx "" "makekey: generate encryption" "key." "" makekey(1)~\*{URM\*}
.xx "" "publickey: public" "key database." "" publickey(4)~\*{NI\*}
.xx "" "publickey: public" "key database." "" publickey(4)~\*{NUAG\*}
.xx "" "retrieve public or secret" "key." "/getsecretkey:" publickey(3N)~\*{NI\*}
.xx "" "newkey: create a new" "key in the publickey database." "" newkey(1M)~\*{NI\*}
.xx "" "newkey: create a new" "key in the publickey database." "" newkey(1M)~\*{NUAG\*}
.xx "" "decrypt and store secret" "key." "keylogin:" keylogin(1)~\*{NI\*}
.xx "" "decrypt and store secret" "key." "keylogin:" keylogin(1)~\*{NUAG\*}
.xx "" "keyboard: system console" "keyboard." "" keyboard(7)~\*{ISDG\*}
.xx "" "keyboard: system console" "keyboard." "" keyboard(7)~\*{SARM\*}
.xx "" "strings from curses terminal" "keyboard." "/get character" curs_getstr(3X)~\*{CHAR\*}
.xx "" "characters from curses terminal" "keyboard." "/get (or push back)" curs_getch(3X)~\*{CHAR\*}
.xx "keyboard." "" "keyboard: system console" "" keyboard(7)~\*{ISDG\*}
.xx "keyboard." "" "keyboard: system console" "" keyboard(7)~\*{SARM\*}
.xx "" "evgainit: Extended VGA" "keyboard/display driver/" "" evgainit(1M)~\*{SARM\*}
.xx "" "/getnetname, host2netname," "key_decryptsession,/" "" secure_rpc(3N)~\*{NI\*}
.xx "" "/key_decryptsession," "key_encryptsession, key_gendes,/" "" secure_rpc(3N)~\*{NI\*}
.xx "" "/key_encryptsession," "key_gendes, key_setsecret,/" "" secure_rpc(3N)~\*{NI\*}
.xx "secret key." "" "keylogin: decrypt and store" "" keylogin(1)~\*{NI\*}
.xx "secret key." "" "keylogin: decrypt and store" "" keylogin(1)~\*{NUAG\*}
.xx "putwin,/" "curs_util:  unctrl," "keyname, filter, use_env," "" curs_util(3X)~\*{CHAR\*}
.xx "" "noecho, halfdelay, intrflush," "keypad, meta, nodelay,/" "/echo," curs_inopts(3X)~\*{CHAR\*}
.xx "" "setkey: assigns the function" "keys." "" setkey(1)~\*{URM\*}
.xx "" "print the value of one or more" "keys from the NIS map." "ypmatch:" ypmatch(1)~\*{NI\*}
.xx "" "for storing public and private" "keys." "keyserv: server" keyserv(1M)~\*{NI\*}
.xx "" "for storing public and private" "keys." "keyserv: server" keyserv(1M)~\*{NUAG\*}
.xx "public and private keys." "" "keyserv: server for storing" "" keyserv(1M)~\*{NI\*}
.xx "public and private keys." "" "keyserv: server for storing" "" keyserv(1M)~\*{NUAG\*}
.xx "" "/key_encryptsession, key_gendes," "key_setsecret, netname2host,/" "" secure_rpc(3N)~\*{NI\*}
.xx "" "prompt for and validate a" "keyword." "ckkeywd:" ckkeywd(1)~\*{ISDG\*}
.xx "" "prompt for and validate a" "keyword." "ckkeywd:" ckkeywd(1)~\*{SARM\*}
.xx "" "apropos: locate commands by" "keyword lookup." "" apropos(1)~\*{BSD\*}
.xx "" "pages; find reference pages by" "keyword." "/reference manual" man(1)~\*{BSD\*}
.xx "" "a one-line summary about a" "keyword." "whatis: display" whatis(1)~\*{BSD\*}
.xx "" "killall:" "kill all active processes." "" killall(1M)~\*{SARM\*}
.xx "or a group of processes." "" "kill: send a signal to a process" "" kill(2)~\*{PRM\*}
.xx "default." "" "kill: terminate a process by" "" kill(1)~\*{URM\*}
.xx "processes." "" "killall: kill all active" "" killall(1M)~\*{SARM\*}
.xx "" "/erasechar, has_ic, has_il," "killchar, longname, termattrs,/" "" curs_termattrs(3X)~\*{CHAR\*}
.xx "group." "" "killpg: send signal to a process" "" killpg(3)~\*{BSD\*}
.xx "" "mem," "kmem: core memory." "" mem(7)~\*{SARM\*}
.xx "kernel free memory." "" "kmem_alloc: allocate space from" "" kmem_alloc(D3DK)~\*{DDRM\*}
.xx "allocated kernel memory." "" "kmem_free: free previously" "" kmem_free(D3DK)~\*{DDRM\*}
.xx "space from kernel free memory." "" "kmem_zalloc: allocate and clear" "" kmem_zalloc(D3DK)~\*{DDRM\*}
.xx "command and/" "ksh, rksh:" "KornShell, a standard/restricted" "" ksh(1)~\*{URM\*}
.xx "standard/restricted command and/" "" "ksh, rksh: KornShell, a" "" ksh(1)~\*{URM\*}
.xx "3-byte integers and long/" "" "l3tol, ltol3: convert between" "" l3tol(3C)~\*{PRM\*}
.xx "integer and base-64 ASCII/" "a64l," "l64a: convert between long" "" a64l(3C)~\*{PRM\*}
.xx "" "slk_attroff: curses soft" "label  routines." "/slk_attrset," curs_slk(3X)~\*{CHAR\*}
.xx "labels for file systems." "" "labelit (generic): provide" "" labelit(1M)~\*{SARM\*}
.xx "s5 file systems." "" "labelit (s5): provide labels for" "" labelit(1M)~\*{SARM\*}
.xx "for ufs file systems." "" "labelit (ufs): provide labels" "" labelit(1M)~\*{SARM\*}
.xx "" "labelit (generic): provide" "labels for file systems." "" labelit(1M)~\*{SARM\*}
.xx "" "labelit (s5): provide" "labels for s5 file systems." "" labelit(1M)~\*{SARM\*}
.xx "" "labelit (ufs): provide" "labels for ufs file systems." "" labelit(1M)~\*{SARM\*}
.xx "value." "abs," "labs: return integer absolute" "" abs(3C)~\*{PRM\*}
.xx "constants." "" "langinfo: language information" "" langinfo(5)~\*{PRM\*}
.xx "constants." "" "langinfo: language information" "" langinfo(5)~\*{SARM\*}
.xx "" "command and programming" "language." "/a standard/restricted" ksh(1)~\*{URM\*}
.xx "" "pattern scanning and processing" "language." "awk:" awk(1)~\*{URM\*}
.xx "" "arbitrary-precision arithmetic" "language." "bc:" bc(1)~\*{URM\*}
.xx "" "nl_types: native" "language data types." "" nl_types(5)~\*{PRM\*}
.xx "" "nl_types: native" "language data types." "" nl_types(5)~\*{SARM\*}
.xx "" "nl_langinfo:" "language information." "" nl_langinfo(3C)~\*{PRM\*}
.xx "" "langinfo:" "language information constants." "" langinfo(5)~\*{PRM\*}
.xx "" "langinfo:" "language information constants." "" langinfo(5)~\*{SARM\*}
.xx "" "pattern scanning and processing" "language." "nawk:" nawk(1)~\*{URM\*}
.xx "" "strftime:" "language specific strings." "" strftime(4)~\*{PRM\*}
.xx "" "strftime:" "language specific strings." "" strftime(4)~\*{SARM\*}
.xx "" "max: return the" "larger of two integers." "" max(D3DK)~\*{DDRM\*}
.xx "terminal logins." "" "last: indicate last user or" "" last(1)~\*{URM\*}
.xx "executed, in reverse order." "" "lastcomm: show the last commands" "" lastcomm(1)~\*{BSD\*}
.xx "" "chargefee, ckpacct, dodisk," "lastlogin, monacct, nulladm,/" "" acctsh(1M)~\*{SARM\*}
.xx "" "at, batch: execute commands at a" "later time." "" at(1)~\*{URM\*}
.xx "" "jwin: print size of" "layer." "" jwin(1)~\*{URM\*}
.xx "" "shl: shell" "layer manager." "" shl(1)~\*{URM\*}
.xx "terminals." "layers:" "layer multiplexor for windowing" "" layers(1)~\*{URM\*}
.xx "" "jterm: reset" "layer of windowing terminal." "" jterm(1)~\*{URM\*}
.xx "" "login entry to show current" "layer." "relogin: rename" relogin(1M)~\*{SARM\*}
.xx "" "login entry to show current" "layer." "relogin: rename" relogin(1M)~\*{URM\*}
.xx "windowing terminals." "" "layers: layer multiplexor for" "" layers(1)~\*{URM\*}
.xx "host and windowing terminal/" "" "layers: protocol used between" "" layers(5)~\*{PRM\*}
.xx "host and windowing terminal/" "" "layers: protocol used between" "" layers(5)~\*{SARM\*}
.xx "" "and windowing terminal under" "layers(1)." "/used between host" layers(5)~\*{PRM\*}
.xx "" "and windowing terminal under" "layers(1)." "/used between host" layers(5)~\*{SARM\*}
.xx "" "ls," "lc: list contents of directory." "" ls(1)~\*{ACG\*}
.xx "group of a file." "chown," "lchown, fchown: change owner and" "" chown(2)~\*{PRM\*}
.xx "" "/setspent, endspent, fgetspent," "lckpwdf, ulckpwdf: manipulate/" "" getspent(3C)~\*{PRM\*}
.xx "" "/jrand48, srand48, seed48," "lcong48: generate uniformly/" "" drand48(3C)~\*{PRM\*}
.xx "editor." "" "ld: link editor, dynamic link" "" ld(1)~\*{BSD\*}
.xx "files." "" "ld: link editor for object" "" ld(1)~\*{PRM\*}
.xx "" "" "ldd: list dynamic dependencies." "" ldd(1)~\*{PRM\*}
.xx "modff, modfl,/" "frexp, frexpl," "ldexp, ldexpl, logb, modf," "" frexp(3C)~\*{PRM\*}
.xx "modfl,/" "frexp, frexpl, ldexp," "ldexpl, logb, modf, modff," "" frexp(3C)~\*{PRM\*}
.xx "remainder." "div," "ldiv: compute the quotient and" "" div(3C)~\*{PRM\*}
.xx "floppy diskettes." "" "ldsysdump: load system dump from" "" ldsysdump(1M)~\*{SARM\*}
.xx "terminal line discipline/" "" "ldterm: standard STREAMS" "" ldterm(7)~\*{STRM\*}
.xx "" "/clearok, idlok, idcok immedok," "leaveok, setscrreg, wsetscrreg,/" "" curs_outopts(3X)~\*{CHAR\*}
.xx "" "/setusershell, endusershell: get" "legal user shells." "" getusershell(3)~\*{BSD\*}
.xx "" "mps_get_reply_len: get data" "length for a solicited reply." "" mps_get_reply_len(D3D)~\*{DDRM\*}
.xx "" "a function after a specified" "length of time." "/execute" timeout(D3DK)~\*{DDRM\*}
.xx "" "set a file to a specified" "length." "truncate, ftruncate:" truncate(3C)~\*{PRM\*}
.xx "" "min: return the" "lesser of two integers." "" min(D3DK)~\*{DDRM\*}
.xx "" "getopt: get option" "letter from argument vector." "" getopt(3C)~\*{PRM\*}
.xx "" "hdformat: low" "level hard disk formatter." "" hdformat(1iref)~\*{MBRMAN\*}
.xx "use/" "/build a list of severity" "levels for an application for" "" addseverity(3C)~\*{PRM\*}
.xx "simple lexical tasks." "" "lex: generate programs for" "" lex(1)~\*{PRM\*}
.xx "" "generate programs for simple" "lexical tasks." "lex:" lex(1)~\*{PRM\*}
.xx "" "lsearch," "lfind: linear search and update." "" lsearch(3C)~\*{PRM\*}
.xx "" "gamma," "lgamma: log gamma function." "" gamma(3M)~\*{PRM\*}
.xx "" "V/386 Release 3.2-compatible" "libnsl." "/to call SCO UNIX System" fixshlib(1M)~\*{ACG\*}
.xx "" "intro: introduction to math" "libraries." "" intro(3M)~\*{PRM\*}
.xx "" "tam: TAM transition" "libraries." "" tam(3X)~\*{CHAR\*}
.xx "" "introduction to functions and" "libraries." "intro:" intro(3)~\*{PRM\*}
.xx "" "to networking functions and" "libraries." "intro: introduction" intro(3N)~\*{NI\*}
.xx "" "cvtomflib: convert OMF (XENIX)" "libraries to ELF." "" cvtomflib(1)~\*{ACG\*}
.xx "" "ar: maintain portable archive or" "library." "" ar(1)~\*{PRM\*}
.xx "" "ar: maintain portable archive or" "library." "" ar(1)~\*{URM\*}
.xx "" "elf: object file access" "library." "" elf(3E)~\*{PRM\*}
.xx "" "t_sync: synchronize transport" "library." "" t_sync(3N)~\*{NI\*}
.xx "" "elf_version: coordinate ELF" "library and application/" "" elf_version(3E)~\*{PRM\*}
.xx "" "download: loads 8086 absolute" "library and object module/" "" download(1iref)~\*{MBRMAN\*}
.xx "" "(emulated) to the termcap" "library." "/curses interfaces" curs_termcap(3X)~\*{CHAR\*}
.xx "" "windowing terminal function" "library." "libwindows:" libwindows(3X)~\*{PRM\*}
.xx "" "ordering relation for an object" "library." "lorder: find" lorder(1)~\*{PRM\*}
.xx "remote/" "/authsys_create_default:" "library routines for client side" "" rpc_clnt_auth(3N)~\*{NI\*}
.xx "calls." "/rpc_broadcast, rpc_call:" "library routines for client side" "" rpc_clnt_calls(3N)~\*{NI\*}
.xx "" "/clnt_tp_create, clnt_vc_create:" "library routines for dealing/" "" rpc_clnt_create(3N)~\*{NI\*}
.xx "" "/svc_tp_create, svc_vc_create:" "library routines for dealing/" "" rpc_svc_create(3N)~\*{NI\*}
.xx "data representation." "xdr:" "library routines for external" "" xdr(3N)~\*{NI\*}
.xx "data/" "/xdrrec_eof, xdr_setpos:" "library routines for external" "" xdr_admin(3N)~\*{NI\*}
.xx "" "/xdr_vector, xdr_wrapstring:" "library routines for external/" "" xdr_complex(3N)~\*{NI\*}
.xx "" "/xdrrec_create, xdrstdio_create:" "library routines for external/" "" xdr_create(3N)~\*{NI\*}
.xx "data/" "/xdr_u_short, xdr_void:" "library routines for external" "" xdr_simple(3N)~\*{NI\*}
.xx "" "/xprt_register, xprt_unregister:" "library routines for registering/" "" rpc_svc_calls(3N)~\*{NI\*}
.xx "procedure calls." "rpc:" "library routines for remote" "" rpc(3N)~\*{NI\*}
.xx "procedure/" "/xdr_replymsg: XDR" "library routines for remote" "" rpc_xdr(3N)~\*{NI\*}
.xx "" "/svc_run, svc_sendreply:" "library routines for RPC/" "" rpc_svc_reg(3N)~\*{NI\*}
.xx "service." "/rpcb_set, rpcb_unset:" "library routines for RPC bind" "" rpcbind(3N)~\*{NI\*}
.xx "" "/netname2user, user2netname:" "library routines for secure/" "" secure_rpc(3N)~\*{NI\*}
.xx "remote/" "/svcerr_weakauth:" "library routines for server side" "" rpc_svc_err(3N)~\*{NI\*}
.xx "" "t_alloc: allocate a" "library structure." "" t_alloc(3N)~\*{NI\*}
.xx "" "t_free: free a" "library structure." "" t_free(3N)~\*{NI\*}
.xx "function library." "" "libwindows: windowing terminal" "" libwindows(3X)~\*{PRM\*}
.xx "" "ulimit: get and set user" "limits." "" ulimit(2)~\*{PRM\*}
.xx "implementation-specific/" "" "limits: header file for" "" limits(4)~\*{PRM\*}
.xx "implementation-specific/" "" "limits: header file for" "" limits(4)~\*{SARM\*}
.xx "" "line: read one" "line." "" line(1)~\*{URM\*}
.xx "" "establish an outgoing terminal" "line connection." "dial:" dial(3C)~\*{NI\*}
.xx "stream connections." "connld:" "line discipline for unique" "" connld(7)~\*{STRM\*}
.xx "the/" "cciunbind: unbinds a" "line discipline from a line on" "" cciunbind(1iref)~\*{MBRMAN\*}
.xx "" "terminal type, modes, speed, and" "line discipline." "getty: set" getty(1M)~\*{SARM\*}
.xx "the communications/" "ccildinfo:" "line discipline information on" "" ccildinfo(1iref)~\*{MBRMAN\*}
.xx "communications/" "ccildlist:" "line discipline list on the" "" ccildlist(1iref)~\*{MBRMAN\*}
.xx "" "standard STREAMS terminal" "line discipline module." "ldterm:" ldterm(7)~\*{STRM\*}
.xx "communications/" "ccifree: frees a" "line discipline program on the" "" ccifree(1iref)~\*{MBRMAN\*}
.xx "the/" "cciload: load a" "line discipline program on to" "" cciload(1iref)~\*{MBRMAN\*}
.xx "communication/" "ccibind: binds a" "line discipline to a line on the" "" ccibind(1iref)~\*{MBRMAN\*}
.xx "" "terminal type, modes, speed, and" "line discipline." "uugetty: set" uugetty(1M)~\*{SARM\*}
.xx "" "terminal type, modes, speed, and" "line discipline." "vtgetty: sets" vtgetty(1M)~\*{SARM\*}
.xx "communications/" "ccilinfo:" "line information on the" "" ccilinfo(1iref)~\*{MBRMAN\*}
.xx "" "put arguments on FMLI message" "line." "message:" message(1F)~\*{CHAR\*}
.xx "" "/symbol table, debugging and" "line number information from an/" "" strip(1)~\*{PRM\*}
.xx "" "nl:" "line numbering filter." "" nl(1)~\*{URM\*}
.xx "" "cut out selected fields of each" "line of a file." "cut:" cut(1)~\*{URM\*}
.xx "" "cut out selected fields of each" "line of a file." "fmlcut:" fmlcut(1F)~\*{CHAR\*}
.xx "" "/binds a line discipline to a" "line on the communication/" "" ccibind(1iref)~\*{MBRMAN\*}
.xx "" "/this host with a subchannel on a" "line on the communications/" "" ccidetach(1iref)~\*{MBRMAN\*}
.xx "" "/unbinds a line discipline from a" "line on the communications/" "" cciunbind(1iref)~\*{MBRMAN\*}
.xx "" "lpc:" "line printer control program." "" lpc(1M)~\*{BSD\*}
.xx "" "" "line: read one line." "" line(1)~\*{URM\*}
.xx "" "reads file, gets longest" "line." "readfile, longline:" readfile(1F)~\*{CHAR\*}
.xx "for TTY/" "sttydefs: maintain" "line settings and hunt sequences" "" sttydefs(1M)~\*{SARM\*}
.xx "" "ttydefs: file contains terminal" "line settings information for/" "" ttydefs(4)~\*{NI\*}
.xx "" "/switch a subchannel on a" "line to a new host on the/" "" cciswitch(1iref)~\*{MBRMAN\*}
.xx "" "ttyswitch: switches a" "line to a new host on the/" "" ttyswitch(1iref)~\*{MBRMAN\*}
.xx "" "lsearch, lfind:" "linear search and update." "" lsearch(3C)~\*{PRM\*}
.xx "profile data." "lprof: display" "line-by-line execution count" "" lprof(1)~\*{PRM\*}
.xx "" "col: filter reverse" "line-feeds." "" col(1)~\*{URM\*}
.xx "" "format documents for display or" "line-printer." "nroff:" nroff(1)~\*{BSD\*}
.xx "" "lptest: generate" "lineprinter ripple pattern." "" lptest(1)~\*{BSD\*}
.xx "" "fold: fold long" "lines." "" fold(1)~\*{URM\*}
.xx "files." "comm: select or reject" "lines common to two sorted" "" comm(1)~\*{URM\*}
.xx "" "/resolve and remove ifdef'ed" "lines from C program source." "" unifdef(1)~\*{BSD\*}
.xx "" "/\%winsertln: delete and insert" "lines in a curses window." "" curs_deleteln(3X)~\*{CHAR\*}
.xx "" "uniq: report repeated" "lines in a file." "" uniq(1)~\*{URM\*}
.xx "" "in the system dictionary or" "lines in a sorted list." "/words" look(1)~\*{BSD\*}
.xx "" "head: display first few" "lines of files." "" head(1)~\*{URM\*}
.xx "" "of several files or subsequent" "lines of one file." "/same lines" paste(1)~\*{URM\*}
.xx "subsequent/" "paste: merge same" "lines of several files or" "" paste(1)~\*{URM\*}
.xx "" "refresh curses windows and" "lines." "/redrawwin, wredrawln:" curs_refresh(3X)~\*{CHAR\*}
.xx "" "borders, horizontal and vertical" "lines." "/wvline: create curses" curs_border(3X)~\*{CHAR\*}
.xx "directories." "link, unlink:" "link and unlink files and" "" link(1M)~\*{SARM\*}
.xx "3.0." "edlina: External Data" "Link driver for iNA961 Release" "" edlina(7iref)~\*{MBRMAN\*}
.xx "" "ld: link editor, dynamic" "link editor." "" ld(1)~\*{BSD\*}
.xx "editor." "ld:" "link editor, dynamic link" "" ld(1)~\*{BSD\*}
.xx "" "ld:" "link editor for object files." "" ld(1)~\*{PRM\*}
.xx "" "ln:" "link files." "" ln(1)~\*{URM\*}
.xx "" "" "link: link to a file." "" link(2)~\*{PRM\*}
.xx "" "read the value of a symbolic" "link." "readlink:" readlink(2)~\*{PRM\*}
.xx "" "linkblk: STREAMS multiplexor" "link structure." "" linkblk(D4DK)~\*{DDRM\*}
.xx "" "link:" "link to a file." "" link(2)~\*{PRM\*}
.xx "" "symlink: make a symbolic" "link to a file." "" symlink(2)~\*{PRM\*}
.xx "files and directories." "" "link, unlink: link and unlink" "" link(1M)~\*{SARM\*}
.xx "blocks." "" "linkb: concatenate two message" "" linkb(D3DK)~\*{DDRM\*}
.xx "link structure." "" "linkblk: STREAMS multiplexor" "" linkblk(D4DK)~\*{DDRM\*}
.xx "" "slink: streams" "linker." "" slink(1M)~\*{NUAG\*}
.xx "" "slink: streams" "linker." "" slink(1M)~\*{SARM\*}
.xx "and/" "/new_field, dup_field," "link_field, free_field,: create" "" form_field_new(3X)~\*{CHAR\*}
.xx "routines." "/set_fieldtype_choice," "link_fieldtype: forms fieldtype" "" form_fieldtype(3X)~\*{CHAR\*}
.xx "" "a.out: ELF (Executable and" "Linking Format) files." "" a.out(4)~\*{PRM\*}
.xx "" "ln: make hard or symbolic" "links to files." "" ln(1)~\*{BSD\*}
.xx "" "" "lint: a C program checker." "" lint(1)~\*{PRM\*}
.xx "" "nlist: get entries from name" "list." "" nlist(3E)~\*{PRM\*}
.xx "" "stdarg: handle variable argument" "list." "" stdarg(5)~\*{PRM\*}
.xx "" "address space for buffer page" "list." "/allocate virtual" bp_mapin(D3DK)~\*{DDRM\*}
.xx "from remote systems." "dfshares:" "list available NFS resources" "" dfshares(1M)~\*{NUAG\*}
.xx "from remote systems." "dfshares:" "list available NFS resources" "" dfshares(1M)~\*{SARM\*}
.xx "remote or local/" "dfshares:" "list available resources from" "" dfshares(1M)~\*{NUAG\*}
.xx "remote or local/" "dfshares:" "list available resources from" "" dfshares(1M)~\*{SARM\*}
.xx "from remote systems." "dfshares:" "list available RFS resources" "" dfshares(1M)~\*{NUAG\*}
.xx "from remote systems." "dfshares:" "list available RFS resources" "" dfshares(1M)~\*{SARM\*}
.xx "" "a buffer to the system's free" "list." "brelse: return" brelse(D3DK)~\*{DDRM\*}
.xx "" "ls, lc:" "list contents of directory." "" ls(1)~\*{ACG\*}
.xx "" "ls:" "list contents of directory." "" ls(1)~\*{URM\*}
.xx "" "address space for buffer page" "list." "/deallocate virtual" bp_mapout(D3DK)~\*{DDRM\*}
.xx "" "ldd:" "list dynamic dependencies." "" ldd(1)~\*{PRM\*}
.xx "for a file/" "ff (generic):" "list file names and statistics" "" ff(1M)~\*{SARM\*}
.xx "" "dictionary or lines in a sorted" "list." "/find words in the system" look(1)~\*{BSD\*}
.xx "" "/change or display an exception" "list for incremental backups." "" bkexcept(1M)~\*{SARM\*}
.xx "" "ttysrch: directory search" "list for ttyname." "" ttysrch(4)~\*{SARM\*}
.xx "" "set supplementary group access" "list IDs." "/setgroups: get or" getgroups(2)~\*{PRM\*}
.xx "" "the supplementary group access" "list." "initgroups: initialize" initgroups(3C)~\*{PRM\*}
.xx "" "write the manufacturer's defect" "list." "mdl: read and optionally" mdl(1iref)~\*{MBRMAN\*}
.xx "" "dispgid: displays a" "list of all valid group names." "" dispgid(1)~\*{ISDG\*}
.xx "" "dispgid: displays a" "list of all valid group names." "" dispgid(1)~\*{SARM\*}
.xx "" "dispuid: displays a" "list of all valid user names." "" dispuid(1)~\*{ISDG\*}
.xx "" "dispuid: displays a" "list of all valid user names." "" dispuid(1)~\*{SARM\*}
.xx "" "nm: print name" "list of an object file." "" nm(1)~\*{PRM\*}
.xx "items." "getitems: return a" "list of currently marked menu" "" getitems(1F)~\*{CHAR\*}
.xx "" "mps_free_dmabuf: frees a" "list of data buffer descriptors." "" mps_free_dmabuf(D3D)~\*{DDRM\*}
.xx "" "/returns a pointer to a" "list of data buffer descriptors." "" mps_get_dmabuf(D3D)~\*{DDRM\*}
.xx "" "ncheck (generic): generate a" "list of path names vs i-numbers." "" ncheck(1M)~\*{SARM\*}
.xx "" "addseverity: build a" "list of severity levels for an/" "" addseverity(3C)~\*{PRM\*}
.xx "" "users: display a compact" "list of users logged in." "" users(1)~\*{BSD\*}
.xx "" "ccildlist: line discipline" "list on the communications/" "" ccildlist(1iref)~\*{MBRMAN\*}
.xx "this UNIX system." "uuglist:" "list service grades available on" "" uuglist(1C)~\*{URM\*}
.xx "directory." "ls:" "list the contents of a" "" ls(1)~\*{BSD\*}
.xx "information." "logins:" "list user and system login" "" logins(1M)~\*{SARM\*}
.xx "" "listusers:" "list user login information." "" listusers(1)~\*{URM\*}
.xx "" "handle variable argument" "list." "varargs:" varargs(5)~\*{PRM\*}
.xx "" "output of a variable argument" "list." "/vsprintf: print formatted" vprintf(3S)~\*{PRM\*}
.xx "device group." "" "listdgrp: lists members of a" "" listdgrp(1M)~\*{SARM\*}
.xx "" "t_listen:" "listen for a connect request." "" t_listen(3N)~\*{NI\*}
.xx "socket." "listen:" "listen for connections on a" "" listen(3N)~\*{NI\*}
.xx "on a socket." "" "listen: listen for connections" "" listen(3N)~\*{NI\*}
.xx "" "" "listen: network listener daemon." "" listen(1M)~\*{SARM\*}
.xx "" "listen: network" "listener daemon." "" listen(1M)~\*{SARM\*}
.xx "" "get client's data passed via the" "listener." "nlsgetcall:" nlsgetcall(3N)~\*{NI\*}
.xx "" "nlsadmin: network" "listener service administration." "" nlsadmin(1M)~\*{SARM\*}
.xx "" "nlsrequest: format and send" "listener service request/" "" nlsrequest(3N)~\*{NI\*}
.xx "" "xargs: construct argument" "list(s) and execute command." "" xargs(1)~\*{URM\*}
.xx "" "devattr:" "lists device attributes." "" devattr(1M)~\*{SARM\*}
.xx "contain devices that/" "getdgrp:" "lists device groups which" "" getdgrp(1M)~\*{SARM\*}
.xx "" "getdev:" "lists devices based on criteria." "" getdev(1M)~\*{SARM\*}
.xx "" "listdgrp:" "lists members of a device group." "" listdgrp(1M)~\*{SARM\*}
.xx "STREAMS/" "autopush: configure" "lists of automatically pushed" "" autopush(1M)~\*{SARM\*}
.xx "STREAMS/" "autopush: configure" "lists of automatically pushed" "" autopush(1M)~\*{STRM\*}
.xx "information." "" "listusers: list user login" "" listusers(1)~\*{URM\*}
.xx "system." "volcopy (ufs): make a" "literal copy of a ufs file" "" volcopy(1M)~\*{SARM\*}
.xx "system." "volcopy (s5): make a" "literal copy of an s5 file" "" volcopy(1M)~\*{SARM\*}
.xx "" "volcopy (generic): make" "literal copy of file system." "" volcopy(1M)~\*{SARM\*}
.xx "" "" "ln: link files." "" ln(1)~\*{URM\*}
.xx "to files." "" "ln: make hard or symbolic links" "" ln(1)~\*{BSD\*}
.xx "interface." "" "lo: software loopback network" "" lo(7)~\*{NUAG\*}
.xx "interface." "" "lo: software loopback network" "" lo(7)~\*{SARM\*}
.xx "on to the/" "cciload:" "load a line discipline program" "" cciload(1iref)~\*{MBRMAN\*}
.xx "diskettes." "ldsysdump:" "load system dump from floppy" "" ldsysdump(1M)~\*{SARM\*}
.xx "" "sgib: install Multibus bootstrap" "loaders." "" sgib(1iref)~\*{MBRMAN\*}
.xx "object module/" "download:" "loads 8086 absolute library and" "" download(1iref)~\*{MBRMAN\*}
.xx "" "display information about" "local and remote users." "finger:" finger(1)~\*{NUAG\*}
.xx "" "display information about" "local and remote users." "finger:" finger(1)~\*{URM\*}
.xx "" "ruptime: show host status of" "local machines." "" ruptime(1)~\*{NUAG\*}
.xx "" "ruptime: show host status of" "local machines." "" ruptime(1)~\*{URM\*}
.xx "" "rusers: who's logged in on" "local machines." "" rusers(1)~\*{NI\*}
.xx "" "rusers: who's logged in on" "local machines." "" rusers(1)~\*{NUAG\*}
.xx "" "rwho: who's logged in on" "local machines." "" rwho(1)~\*{NUAG\*}
.xx "" "rwho: who's logged in on" "local machines." "" rwho(1)~\*{URM\*}
.xx "mounting by remote/" "share: make" "local NFS resource available for" "" share(1M)~\*{NUAG\*}
.xx "mounting by remote/" "share: make" "local NFS resource available for" "" share(1M)~\*{SARM\*}
.xx "for mounting by/" "unshare: make" "local NFS resource unavailable" "" unshare(1M)~\*{NUAG\*}
.xx "for mounting by/" "unshare: make" "local NFS resource unavailable" "" unshare(1M)~\*{SARM\*}
.xx "" "set, unset: set and unset" "local or global environment/" "" set(1F)~\*{CHAR\*}
.xx "mounting by remote/" "share: make" "local resource available for" "" share(1M)~\*{NUAG\*}
.xx "mounting by remote/" "share: make" "local resource available for" "" share(1M)~\*{SARM\*}
.xx "mounting by/" "unshare: make" "local resource unavailable for" "" unshare(1M)~\*{NUAG\*}
.xx "mounting by/" "unshare: make" "local resource unavailable for" "" unshare(1M)~\*{SARM\*}
.xx "mounting by remote/" "share: make" "local RFS resource available for" "" share(1M)~\*{NUAG\*}
.xx "mounting by remote/" "share: make" "local RFS resource available for" "" share(1M)~\*{SARM\*}
.xx "for mounting by/" "unshare: make" "local RFS resource unavailable" "" unshare(1M)~\*{NUAG\*}
.xx "for mounting by/" "unshare: make" "local RFS resource unavailable" "" unshare(1M)~\*{SARM\*}
.xx "" "resources from remote or" "local systems." "/list available" dfshares(1M)~\*{NUAG\*}
.xx "" "resources from remote or" "local systems." "/list available" dfshares(1M)~\*{SARM\*}
.xx "" "maplocale: convert Release 4" "locale information to different/" "" maplocale(1M)~\*{ACG\*}
.xx "" "modify and query a program's" "locale." "setlocale:" setlocale(3C)~\*{PRM\*}
.xx "formatting information." "" "localeconv: get numeric" "" localeconv(3C)~\*{PRM\*}
.xx "tzset: convert date and/" "ctime," "localtime, gmtime, asctime," "" ctime(3C)~\*{PRM\*}
.xx "pathname or alias." "which:" "locate a command; display its" "" which(1)~\*{BSD\*}
.xx "lookup." "apropos:" "locate commands by keyword" "" apropos(1)~\*{BSD\*}
.xx "" "end, etext, edata: last" "locations in program." "" end(3C)~\*{PRM\*}
.xx "" "bcopy: copy data between address" "locations in the kernel." "" bcopy(D3DK)~\*{DDRM\*}
.xx "memory." "lock:" "lock a process in primary" "" lock(2)~\*{ACG\*}
.xx "" "lockd: network" "lock daemon." "" lockd(1M)~\*{NUAG\*}
.xx "process, text, or data." "plock:" "lock into memory or unlock" "" plock(2)~\*{PRM\*}
.xx "memory." "" "lock: lock a process in primary" "" lock(2)~\*{ACG\*}
.xx "reading or writing." "locking:" "lock or unlock a file region for" "" locking(2)~\*{ACG\*}
.xx "" "mlockall, munlockall:" "lock or unlock address space." "" mlockall(3C)~\*{PRM\*}
.xx "memory." "mlock, munlock:" "lock (or unlock) pages in" "" mlock(3C)~\*{PRM\*}
.xx "" "" "lockd: network lock daemon." "" lockd(1M)~\*{NUAG\*}
.xx "" "" "lockf: record locking on files." "" lockf(3C)~\*{PRM\*}
.xx "" "maillock: manage" "lockfile for user's mailbox." "" maillock(3X)~\*{PRM\*}
.xx "region for reading or writing." "" "locking: lock or unlock a file" "" locking(2)~\*{ACG\*}
.xx "" "lockf: record" "locking on files." "" lockf(3C)~\*{PRM\*}
.xx "" "file for syslogd system" "log daemon." "/configuration" syslog.conf(4)~\*{BSD\*}
.xx "" "strlog: submit messages to the" "log driver." "" strlog(D3DK)~\*{DDRM\*}
.xx "" "gamma, lgamma:" "log gamma function." "" gamma(3M)~\*{PRM\*}
.xx "" "newgrp:" "log in to a new group." "" newgrp(1M)~\*{SARM\*}
.xx "" "newgrp:" "log in to a new group." "" newgrp(1M)~\*{URM\*}
.xx "logging and event tracing." "" "log: interface to STREAMS error" "" log(7)~\*{STRM\*}
.xx "powf, sqrt,/" "exp, expf, cbrt," "log, logf, log10, log10f, pow," "" exp(3M)~\*{PRM\*}
.xx "" "add entries to the system" "log." "logger:" logger(1)~\*{BSD\*}
.xx "" "loginlog:" "log of failed login attempts." "" loginlog(4)~\*{SARM\*}
.xx "" "setlogmask: control system" "log." "syslog, openlog, closelog," syslog(3)~\*{BSD\*}
.xx "" "syslogd:" "log system messages." "" syslogd(1M)~\*{BSD\*}
.xx "" "exp, expf, cbrt, log, logf," "log10, log10f, pow, powf, sqrt,/" "" exp(3M)~\*{PRM\*}
.xx "" "/expf, cbrt, log, logf, log10," "log10f, pow, powf, sqrt, sqrtf:/" "" exp(3M)~\*{PRM\*}
.xx "" "/powf, sqrt, sqrtf: exponential," "logarithm, power, square root/" "" exp(3M)~\*{PRM\*}
.xx "" "frexp, frexpl, ldexp, ldexpl," "logb, modf, modff, modfl,/" "" frexp(3C)~\*{PRM\*}
.xx "sqrt,/" "exp, expf, cbrt, log," "logf, log10, log10f, pow, powf," "" exp(3M)~\*{PRM\*}
.xx "doing." "w: who is" "logged in, and what are they" "" w(1)~\*{BSD\*}
.xx "" "rusers: who's" "logged in on local machines." "" rusers(1)~\*{NI\*}
.xx "" "rusers: who's" "logged in on local machines." "" rusers(1)~\*{NUAG\*}
.xx "" "rwho: who's" "logged in on local machines." "" rwho(1)~\*{NUAG\*}
.xx "" "rwho: who's" "logged in on local machines." "" rwho(1)~\*{URM\*}
.xx "" "display a compact list of users" "logged in." "users:" users(1)~\*{BSD\*}
.xx "system log." "" "logger: add entries to the" "" logger(1)~\*{BSD\*}
.xx "" "strclean: STREAMS error" "logger cleanup program." "" strclean(1M)~\*{SARM\*}
.xx "" "strclean: STREAMS error" "logger cleanup program." "" strclean(1M)~\*{STRM\*}
.xx "" "strerr: STREAMS error" "logger daemon." "" strerr(1M)~\*{SARM\*}
.xx "" "strerr: STREAMS error" "logger daemon." "" strerr(1M)~\*{STRM\*}
.xx "" "log: interface to STREAMS error" "logging and event tracing." "" log(7)~\*{STRM\*}
.xx "" "size: return size of" "logical block device." "" size(D2DK)~\*{DDRM\*}
.xx "" "rlogin: remote" "login." "" rlogin(1)~\*{NUAG\*}
.xx "" "rlogin: remote" "login." "" rlogin(1)~\*{URM\*}
.xx "" "loginlog: log of failed" "login attempts." "" loginlog(4)~\*{SARM\*}
.xx "" "netrc: file for ftp remote" "login data." "" netrc(4)~\*{NUAG\*}
.xx "" "netrc: file for ftp remote" "login data." "" netrc(4)~\*{SARM\*}
.xx "" "login:" "login default file." "" login(4)~\*{SARM\*}
.xx "layer." "relogin: rename" "login entry to show current" "" relogin(1M)~\*{SARM\*}
.xx "layer." "relogin: rename" "login entry to show current" "" relogin(1M)~\*{URM\*}
.xx "" "userdel: delete a user's" "login from the system." "" userdel(1M)~\*{SARM\*}
.xx "" "listusers: list user" "login information." "" listusers(1)~\*{URM\*}
.xx "" "logins: list user and system" "login information." "" logins(1M)~\*{SARM\*}
.xx "" "usermod: modify a user's" "login information on the system." "" usermod(1M)~\*{SARM\*}
.xx "" "" "login: login default file." "" login(4)~\*{SARM\*}
.xx "" "getlogin: get" "login name." "" getlogin(3C)~\*{PRM\*}
.xx "" "logname: get" "login name." "" logname(1)~\*{URM\*}
.xx "" "cuserid: get character" "login name of the user." "" cuserid(3S)~\*{PRM\*}
.xx "" "useradd: administer a new user" "login on the system." "" useradd(1M)~\*{SARM\*}
.xx "attributes." "passwd: change" "login password and password" "" passwd(1)~\*{URM\*}
.xx "" "rlogind: remote" "login server." "" rlogind(1M)~\*{NUAG\*}
.xx "" "rlogind: remote" "login server." "" rlogind(1M)~\*{SARM\*}
.xx "" "" "login: sign on." "" login(1)~\*{URM\*}
.xx "" "setting up an environment at" "login time." "profile:" profile(4)~\*{SARM\*}
.xx "" "ct: spawn" "login to a remote terminal." "" ct(1C)~\*{URM\*}
.xx "attempts." "" "loginlog: log of failed login" "" loginlog(4)~\*{SARM\*}
.xx "" "indicate last user or terminal" "logins." "last:" last(1)~\*{URM\*}
.xx "login information." "" "logins: list user and system" "" logins(1M)~\*{SARM\*}
.xx "" "" "logname: get login name." "" logname(1)~\*{URM\*}
.xx "" "longline: reads file, gets" "longest line." "readfile," readfile(1F)~\*{CHAR\*}
.xx "" "setjmp," "longjmp: non-local goto." "" setjmp(3C)~\*{PRM\*}
.xx "sigsetjmp, siglongjmp:/" "setjmp," "longjmp, _setjmp, _longjmp," "" setjmp(3)~\*{BSD\*}
.xx "" "setjmp, longjmp, _setjmp," "_longjmp, sigsetjmp, siglongjmp:/" "" setjmp(3)~\*{BSD\*}
.xx "longest line." "readfile," "longline: reads file, gets" "" readfile(1F)~\*{CHAR\*}
.xx "" "/has_ic, has_il, killchar," "longname, termattrs, termname:/" "" curs_termattrs(3X)~\*{CHAR\*}
.xx "transport endpoint." "t_look:" "look at the current event on a" "" t_look(3N)~\*{NI\*}
.xx "dictionary or lines in a sorted/" "" "look: find words in the system" "" look(1)~\*{BSD\*}
.xx "bibliographic database." "" "lookbib: find references in a" "" lookbib(1)~\*{BSD\*}
.xx "" "locate commands by keyword" "lookup." "apropos:" apropos(1)~\*{BSD\*}
.xx "" "lo: software" "loopback network interface." "" lo(7)~\*{NUAG\*}
.xx "" "lo: software" "loopback network interface." "" lo(7)~\*{SARM\*}
.xx "" "ticlts, ticots, ticotsord:" "loopback transport providers." "" ticlts(7)~\*{NI\*}
.xx "for an object library." "" "lorder: find ordering relation" "" lorder(1)~\*{PRM\*}
.xx "" "hdformat:" "low level hard disk formatter." "" hdformat(1iref)~\*{MBRMAN\*}
.xx "" "nice: run a command at" "low priority." "" nice(1)~\*{URM\*}
.xx "" "/ripoffline, curs_set, napms:" "low-level curses routines." "" curs_kernel(3X)~\*{CHAR\*}
.xx "to an LP print service." "" "lp, cancel: send/cancel requests" "" lp(1)~\*{URM\*}
.xx "" "" "lp: parallel port interface." "" lp(7)~\*{SARM\*}
.xx "" "lpadmin: configure the" "LP print service." "" lpadmin(1M)~\*{SARM\*}
.xx "" "/lpshut, lpmove: start/stop the" "LP print service and move/" "" lpsched(1M)~\*{SARM\*}
.xx "" "about the status of the" "LP print service." "/information" lpstat(1)~\*{URM\*}
.xx "" "send/cancel requests to an" "LP print service." "lp, cancel:" lp(1)~\*{URM\*}
.xx "" "administer filters used with the" "LP print service." "lpfilter:" lpfilter(1M)~\*{SARM\*}
.xx "" "administer forms used with the" "LP print service." "lpforms:" lpforms(1M)~\*{SARM\*}
.xx "" "enable, disable: enable/disable" "LP printers." "" enable(1)~\*{URM\*}
.xx "service." "" "lpadmin: configure the LP print" "" lpadmin(1M)~\*{SARM\*}
.xx "program." "" "lpc: line printer control" "" lpc(1M)~\*{BSD\*}
.xx "used with the LP print service." "" "lpfilter: administer filters" "" lpfilter(1M)~\*{SARM\*}
.xx "with the LP print service." "" "lpforms: administer forms used" "" lpforms(1M)~\*{SARM\*}
.xx "service and/" "lpsched, lpshut," "lpmove: start/stop the LP print" "" lpsched(1M)~\*{SARM\*}
.xx "printer jobs." "" "lpq: display the queue of" "" lpq(1)~\*{BSD\*}
.xx "" "" "lpr: send a job to the printer." "" lpr(1)~\*{BSD\*}
.xx "printer queue." "" "lprm: remove jobs from the" "" lprm(1)~\*{BSD\*}
.xx "execution count profile data." "" "lprof: display line-by-line" "" lprof(1)~\*{PRM\*}
.xx "start/stop the LP print service/" "" "lpsched, lpshut, lpmove:" "" lpsched(1M)~\*{SARM\*}
.xx "LP print service and/" "lpsched," "lpshut, lpmove: start/stop the" "" lpsched(1M)~\*{SARM\*}
.xx "the status of the LP print/" "" "lpstat: print information about" "" lpstat(1)~\*{URM\*}
.xx "systems with the print service." "" "lpsystem: register remote" "" lpsystem(1M)~\*{SARM\*}
.xx "ripple pattern." "" "lptest: generate lineprinter" "" lptest(1)~\*{BSD\*}
.xx "priorities." "" "lpusers: set printing queue" "" lpusers(1M)~\*{SARM\*}
.xx "jrand48,/" "drand48, erand48," "lrand48, nrand48, mrand48," "" drand48(3C)~\*{PRM\*}
.xx "directory." "" "ls, lc: list contents of" "" ls(1)~\*{ACG\*}
.xx "" "" "ls: list contents of directory." "" ls(1)~\*{URM\*}
.xx "directory." "" "ls: list the contents of a" "" ls(1)~\*{BSD\*}
.xx "and update." "" "lsearch, lfind: linear search" "" lsearch(3C)~\*{PRM\*}
.xx "pointer." "" "lseek: move read/write file" "" lseek(2)~\*{PRM\*}
.xx "" "stat," "lstat, fstat: get file status." "" stat(2)~\*{ACG\*}
.xx "" "stat," "lstat, fstat: get file status." "" stat(2)~\*{PRM\*}
.xx "integers and long/" "l3tol," "ltol3: convert between 3-byte" "" l3tol(3C)~\*{PRM\*}
.xx "" "" "m4: macro processor." "" m4(1)~\*{PRM\*}
.xx "of the current host." "" "mach: display the processor type" "" mach(1)~\*{BSD\*}
.xx "value." "" "machid: get processor type truth" "" machid(1)~\*{URM\*}
.xx "" "setuname: changes" "machine information." "" setuname(1M)~\*{SARM\*}
.xx "" "sysi86:" "machine specific functions." "" sysi86(2)~\*{PRM\*}
.xx "" "values:" "machine-dependent values." "" values(5)~\*{PRM\*}
.xx "" "/access long integer data in a" "machine-independent fashion." "" sputl(3X)~\*{PRM\*}
.xx "" "rusers: who's logged in on local" "machines." "" rusers(1)~\*{NI\*}
.xx "" "rusers: who's logged in on local" "machines." "" rusers(1)~\*{NUAG\*}
.xx "" "rwall: write to specified remote" "machines." "" rwall(3N)~\*{NI\*}
.xx "" "rwho: who's logged in on local" "machines." "" rwho(1)~\*{NUAG\*}
.xx "" "rwho: who's logged in on local" "machines." "" rwho(1)~\*{URM\*}
.xx "" "about users on remote" "machines." "/return information" rusers(3N)~\*{NI\*}
.xx "" "show host status of local" "machines." "ruptime:" ruptime(1)~\*{NUAG\*}
.xx "" "show host status of local" "machines." "ruptime:" ruptime(1)~\*{URM\*}
.xx "" "m4:" "macro processor." "" m4(1)~\*{PRM\*}
.xx "" "ms: text formatting" "macros." "" ms(7)~\*{BSD\*}
.xx "" "me:" "macros for formatting papers." "" me(7)~\*{BSD\*}
.xx "Manual pages." "man:" "macros to format Reference" "" man(7)~\*{BSD\*}
.xx "handler message." "/mps_msg_isreq:" "macros used to decode message" "" mps_msg(D3D)~\*{DDRM\*}
.xx "min, mout, pow, gcd, rpow,/" "mp:" "madd, msub, mult, mdiv, mcmp," "" mp(3X)~\*{BSD\*}
.xx "" "tcopy: copy a" "magnetic tape." "" tcopy(1)~\*{BSD\*}
.xx "" "mt:" "magnetic tape control." "" mt(1)~\*{BSD\*}
.xx "" "tape:" "magnetic tape maintenance." "" tape(1)~\*{URM\*}
.xx "interface." "qt: QIC cartridge" "magnetic tape streamer" "" qt(7)~\*{SARM\*}
.xx "" "mailalias: translate" "mail alias names." "" mailalias(1)~\*{URM\*}
.xx "" "rebuild the data base for the" "mail aliases file." "newaliases:" newaliases(1M)~\*{BSD\*}
.xx "" "initialization information for" "mail and rmail." "mailcnfg:" mailcnfg(4)~\*{SARM\*}
.xx "" "vacation: reply to" "mail automatically." "" vacation(1)~\*{BSD\*}
.xx "" "smtpqer: queue" "mail for delivery by SMTP." "" smtpqer(1M)~\*{SARM\*}
.xx "" "fromsmtp: receive RFC822" "mail from SMTP." "" fromsmtp(1M)~\*{SARM\*}
.xx "" "recipient command for incoming" "mail." "mail_pipe: invoke" mail_pipe(1M)~\*{SARM\*}
.xx "" "biff: give notice of incoming" "mail messages." "" biff(1)~\*{BSD\*}
.xx "" "respond to incoming" "mail messages." "/automatically" vacation(1)~\*{URM\*}
.xx "" "user of the arrival of new" "mail." "notify: notify" notify(1)~\*{URM\*}
.xx "" "mail, rmail: read" "mail or send mail to users." "" mail(1)~\*{URM\*}
.xx "" "sendmail: send" "mail over the internet." "" sendmail(1M)~\*{BSD\*}
.xx "" "messages queued in the SMTP" "mail queue." "smtpsched: process" smtpsched(1M)~\*{SARM\*}
.xx "mail to users." "" "mail, rmail: read mail or send" "" mail(1)~\*{URM\*}
.xx "" "mconnect: connect to SMTP" "mail server socket." "" mconnect(1M)~\*{BSD\*}
.xx "" "for routing and transport of" "mail." "/surrogate commands" mailsurr(4)~\*{SARM\*}
.xx "Simple Mail/" "smtp: send SMTP" "mail to a remote host using" "" smtp(1M)~\*{SARM\*}
.xx "" "tosmtp: send" "mail to SMTP." "" tosmtp(1M)~\*{SARM\*}
.xx "" "mail, rmail: read mail or send" "mail to users." "" mail(1)~\*{URM\*}
.xx "" "to a remote host using Simple" "Mail Transfer Protocol." "/mail" smtp(1M)~\*{SARM\*}
.xx "names." "" "mailalias: translate mail alias" "" mailalias(1)~\*{URM\*}
.xx "" "manage lockfile for user's" "mailbox." "maillock:" maillock(3X)~\*{PRM\*}
.xx "information for mail and rmail." "" "mailcnfg: initialization" "" mailcnfg(4)~\*{SARM\*}
.xx "user's mailbox." "" "maillock: manage lockfile for" "" maillock(3X)~\*{PRM\*}
.xx "command for incoming mail." "" "mail_pipe: invoke recipient" "" mail_pipe(1M)~\*{SARM\*}
.xx "collected by sendmail." "" "mailstats: print statistics" "" mailstats(1M)~\*{BSD\*}
.xx "routing and transport of mail." "" "mailsurr: surrogate commands for" "" mailsurr(4)~\*{SARM\*}
.xx "processing system." "" "mailx: interactive message" "" mailx(1)~\*{URM\*}
.xx "sequences for TTY/" "sttydefs:" "maintain line settings and hunt" "" sttydefs(1M)~\*{SARM\*}
.xx "library." "ar:" "maintain portable archive or" "" ar(1)~\*{PRM\*}
.xx "library." "ar:" "maintain portable archive or" "" ar(1)~\*{URM\*}
.xx "groups of programs." "make:" "maintain, update, and regenerate" "" make(1)~\*{PRM\*}
.xx "" "tape: magnetic tape" "maintenance." "" tape(1)~\*{URM\*}
.xx "" "intro: introduction to" "maintenance commands and/" "" intro(1M)~\*{SARM\*}
.xx "" "mkpart: disk" "maintenance utility." "" mkpart(1M)~\*{SARM\*}
.xx "" "/make device number from" "major and minor numbers." "" makedevice(D3DK)~\*{DDRM\*}
.xx "" "getemajor: get external" "major device number." "" getemajor(D3DK)~\*{DDRM\*}
.xx "" "getmajor: get internal" "major device number." "" getmajor(D3DK)~\*{DDRM\*}
.xx "" "convert external to internal" "major device number." "etoimajor:" etoimajor(D3DK)~\*{DDRM\*}
.xx "" "convert internal to external" "major device number." "itoemajor:" itoemajor(D3DK)~\*{DDRM\*}
.xx "number." "makedev," "major, minor: manage a device" "" makedev(3C)~\*{PRM\*}
.xx "STREAMS driver." "clone: open any" "major/minor device pair on a" "" clone(7)~\*{STRM\*}
.xx "regenerate groups of programs." "" "make: maintain, update, and" "" make(1)~\*{PRM\*}
.xx "manipulate user contexts." "" "makecontext, swapcontext:" "" makecontext(3C)~\*{PRM\*}
.xx "Information Service (NIS) dbm/" "" "makedbm: make a Network" "" makedbm(1M)~\*{NI\*}
.xx "device number." "" "makedev, major, minor: manage a" "" makedev(3C)~\*{PRM\*}
.xx "from major and minor numbers." "" "makedevice: make device number" "" makedevice(D3DK)~\*{DDRM\*}
.xx "" "" "makefsys: create a file system." "" makefsys(1M)~\*{SARM\*}
.xx "key." "" "makekey: generate encryption" "" makekey(1)~\*{URM\*}
.xx "" "/free, realloc, calloc, mallopt," "mallinfo: memory allocator." "" malloc(3X)~\*{PRM\*}
.xx "memalign, valloc,: memory/" "" "malloc, free, realloc, calloc," "" malloc(3C)~\*{PRM\*}
.xx "mallopt, mallinfo: memory/" "" "malloc, free, realloc, calloc," "" malloc(3X)~\*{PRM\*}
.xx "" "malloc, free, realloc, calloc," "mallopt, mallinfo: memory/" "" malloc(3X)~\*{PRM\*}
.xx "pages; find reference pages by/" "" "man: display reference manual" "" man(1)~\*{BSD\*}
.xx "Manual pages." "" "man: macros to format Reference" "" man(7)~\*{BSD\*}
.xx "" "makedev, major, minor:" "manage a device number." "" makedev(3C)~\*{PRM\*}
.xx "" "tsearch, tfind, tdelete, twalk:" "manage binary search trees." "" tsearch(3C)~\*{PRM\*}
.xx "" "hsearch, hcreate, hdestroy:" "manage hash search tables." "" hsearch(3C)~\*{PRM\*}
.xx "mailbox." "maillock:" "manage lockfile for user's" "" maillock(3X)~\*{PRM\*}
.xx "endpoint." "t_optmgmt:" "manage options for a transport" "" t_optmgmt(3N)~\*{NI\*}
.xx "" "swapctl:" "manage swap space." "" swapctl(2)~\*{PRM\*}
.xx "" "break up an I/O request into" "manageable units." "dma_pageio:" dma_pageio(D3D)~\*{DDRM\*}
.xx "" "passmgmt: password files" "management." "" passmgmt(1M)~\*{SARM\*}
.xx "" "sigaction: detailed signal" "management." "" sigaction(2)~\*{PRM\*}
.xx "" "mctl: memory" "management control." "" mctl(3)~\*{BSD\*}
.xx "" "memcntl: memory" "management control." "" memcntl(2)~\*{PRM\*}
.xx "" "space from a private space" "management map." "/allocate" rmalloc(D3DK)~\*{DDRM\*}
.xx "" "free space into a private space" "management map." "rmfree:" rmfree(D3DK)~\*{DDRM\*}
.xx "" "initialize a private space" "management map." "rminit:" rminit(D3K)~\*{DDRM\*}
.xx "" "sigpause: simplified signal" "management." "/sigignore," signal(2)~\*{PRM\*}
.xx "" "shl: shell layer" "manager." "" shl(1)~\*{URM\*}
.xx "records." "fwtmp, wtmpfix:" "manipulate connect accounting" "" fwtmp(1M)~\*{SARM\*}
.xx "" "dosrm, dosrmdir: access and" "manipulate DOS files." "/dosls," dos(1)~\*{URM\*}
.xx "" "elf_flagscn, elf_flagshdr:" "manipulate flags." "/elf_flagphdr," elf_flag(3E)~\*{PRM\*}
.xx "" "/overwrite, copywin: overlap and" "manipulate overlapped curses/" "" curs_overlay(3X)~\*{CHAR\*}
.xx "" "modfl, nextafter, scalb, scalbl:" "manipulate parts of/" "/modff," frexp(3C)~\*{PRM\*}
.xx "" "/setpwent, endpwent, fgetpwent:" "manipulate password file entry." "" getpwent(3C)~\*{PRM\*}
.xx "" "/sigdelset, sigismember:" "manipulate sets of signals." "" sigsetops(3C)~\*{PRM\*}
.xx "" "/fgetspent, lckpwdf, ulckpwdf:" "manipulate shadow password file/" "" getspent(3C)~\*{PRM\*}
.xx "of an object file." "mcs:" "manipulate the comment section" "" mcs(1)~\*{PRM\*}
.xx "" "route: manually" "manipulate the routing tables." "" route(1M)~\*{NUAG\*}
.xx "" "route: manually" "manipulate the routing tables." "" route(1M)~\*{SARM\*}
.xx "" "makecontext, swapcontext:" "manipulate user contexts." "" makecontext(3C)~\*{PRM\*}
.xx "" "inet_ntoa: Internet address" "manipulation." "/inet_netof," inet(3N)~\*{NI\*}
.xx "" "/for dealing with creation and" "manipulation of CLIENT handles." "" rpc_clnt_create(3N)~\*{NI\*}
.xx "" "/pair_content: curses color" "manipulation routines." "" curs_color(3X)~\*{CHAR\*}
.xx "" "/curses screen initialization and" "manipulation routines." "" curs_initscr(3X)~\*{CHAR\*}
.xx "" "/panel_hidden: panels deck" "manipulation routines." "" panel_show(3X)~\*{CHAR\*}
.xx "" "/bottom_panel: panels deck" "manipulation routines." "" panel_top(3X)~\*{CHAR\*}
.xx "" "wbkgd: curses window background" "manipulation routines." "/bkgd," curs_bkgd(3X)~\*{CHAR\*}
.xx "" "strrspn, strtrns: string" "manipulations." "str: strfind," str(3G)~\*{PRM\*}
.xx "" "create the cat files for the" "manual." "catman:" catman(1M)~\*{BSD\*}
.xx "" "man: macros to format Reference" "Manual pages." "" man(7)~\*{BSD\*}
.xx "pages by/" "man: display reference" "manual pages; find reference" "" man(1)~\*{BSD\*}
.xx "tables." "route:" "manually manipulate the routing" "" route(1M)~\*{NUAG\*}
.xx "tables." "route:" "manually manipulate the routing" "" route(1M)~\*{SARM\*}
.xx "" "/read and optionally write the" "manufacturer's defect list." "" mdl(1iref)~\*{MBRMAN\*}
.xx "" "/return current version of the" "map at the NIS server host." "" yppoll(1M)~\*{NI\*}
.xx "" "ypxfr: transfer YP" "map from a YP server to host." "" ypxfr(1M)~\*{NI\*}
.xx "" "return name of NIS server or" "map master." "ypwhich:" ypwhich(1)~\*{NI\*}
.xx "" "ascii:" "map of ASCII character set." "" ascii(5)~\*{PRM\*}
.xx "" "ascii:" "map of ASCII character set." "" ascii(5)~\*{SARM\*}
.xx "" "mmap:" "map pages of memory." "" mmap(2)~\*{PRM\*}
.xx "" "from a private space management" "map." "rmalloc: allocate space" rmalloc(D3DK)~\*{DDRM\*}
.xx "" "into a private space management" "map." "rmfree: free space" rmfree(D3DK)~\*{DDRM\*}
.xx "" "a private space management" "map." "rminit: initialize" rminit(D3K)~\*{DDRM\*}
.xx "" "of one or more keys from the NIS" "map." "ypmatch: print the value" ypmatch(1)~\*{NI\*}
.xx "" "propagation of a changed NIS" "map." "yppush: force" yppush(1M)~\*{NI\*}
.xx "mapping." "" "mapchan: Configure tty device" "" mapchan(1M)~\*{SARM\*}
.xx "mapping files." "" "mapchan: Format of tty device" "" mapchan(4)~\*{SARM\*}
.xx "configure monitor screen/" "" "mapkey, mapscrn, mapstr:" "" mapkey(1M)~\*{SARM\*}
.xx "locale information to different/" "" "maplocale: convert Release 4" "" maplocale(1M)~\*{ACG\*}
.xx "" "addresses to RPC program number" "mapper." "rpcbind: universal" rpcbind(1M)~\*{NI\*}
.xx "" "addresses to RPC program number" "mapper." "rpcbind: universal" rpcbind(1M)~\*{NUAG\*}
.xx "" "mapchan: Configure tty device" "mapping." "" mapchan(1M)~\*{SARM\*}
.xx "" "mapchan: Format of tty device" "mapping files." "" mapchan(4)~\*{SARM\*}
.xx "device." "mmap: check virtual" "mapping for memory-mapped" "" mmap(D2DK)~\*{DDRM\*}
.xx "" "physmap: obtain virtual address" "mapping for physical addresses." "" physmap(D3D)~\*{DDRM\*}
.xx "" "/free virtual address" "mapping for physical addresses." "" physmap_free(D3D)~\*{DDRM\*}
.xx "" "File Sharing user and group" "mapping." "idload: Remote" idload(1M)~\*{NUAG\*}
.xx "" "File Sharing user and group" "mapping." "idload: Remote" idload(1M)~\*{SARM\*}
.xx "" "mapstr: configure monitor screen" "mapping." "mapkey, mapscrn," mapkey(1M)~\*{SARM\*}
.xx "" "set protection of memory" "mapping." "mprotect:" mprotect(2)~\*{PRM\*}
.xx "" "ethers: Ethernet address" "mapping operations." "" ethers(3N)~\*{NI\*}
.xx "" "ethers: Ethernet address" "mapping operations." "" ethers(3N)~\*{NUAG\*}
.xx "" "rmsetwant: set the" "map's wait flag for a wakeup." "" rmsetwant(D3K)~\*{DDRM\*}
.xx "monitor screen mapping." "mapkey," "mapscrn, mapstr: configure" "" mapkey(1M)~\*{SARM\*}
.xx "mapping." "mapkey, mapscrn," "mapstr: configure monitor screen" "" mapkey(1M)~\*{SARM\*}
.xx "versions of a troff/" "diffmk:" "mark differences between" "" diffmk(1)~\*{BSD\*}
.xx "" "/set_menu_mark, menu_mark: menus" "mark string routines." "" menu_mark(3X)~\*{CHAR\*}
.xx "" "return a list of currently" "marked menu items." "getitems:" getitems(1F)~\*{CHAR\*}
.xx "" "sigsetmask: set current signal" "mask." "" sigsetmask(3)~\*{BSD\*}
.xx "" "umask: set file-creation mode" "mask." "" umask(1)~\*{URM\*}
.xx "" "umask: set and get file creation" "mask." "" umask(2)~\*{PRM\*}
.xx "" "sigsuspend: install a signal" "mask and suspend process until/" "" sigsuspend(2)~\*{PRM\*}
.xx "" "netmasks: network" "mask data base." "" netmasks(4)~\*{SARM\*}
.xx "" "change or examine signal" "mask." "sigprocmask:" sigprocmask(2)~\*{PRM\*}
.xx "" "Remote File Sharing name server" "master file." "rfmaster:" rfmaster(4)~\*{NUAG\*}
.xx "" "Remote File Sharing name server" "master file." "rfmaster:" rfmaster(4)~\*{SARM\*}
.xx "" "return name of NIS server or map" "master." "ypwhich:" ypwhich(1)~\*{NI\*}
.xx "" "unlock a pseudo-terminal" "master/slave pair." "unlockpt:" unlockpt(3C)~\*{STRM\*}
.xx "" "set and get menus pattern" "match buffer." "/menu_pattern:" menu_pattern(3X)~\*{CHAR\*}
.xx "" "which contain devices that" "match criteria." "/device groups" getdgrp(1M)~\*{SARM\*}
.xx "" "regex:" "match patterns against a string." "" regex(1F)~\*{CHAR\*}
.xx "" "regular expression compile and" "match routines." "/step, advance:" regexp(5)~\*{PRM\*}
.xx "" "regular expression compile and" "match routines." "/step, advance:" regexp(5)~\*{SARM\*}
.xx "" "regular expression compile and" "match routines." "/step, advance:" regexpr(3G)~\*{PRM\*}
.xx "" "gmatch: shell global pattern" "matching." "" gmatch(3G)~\*{PRM\*}
.xx "" "math:" "math functions and constants." "" math(5)~\*{PRM\*}
.xx "" "intro: introduction to" "math libraries." "" intro(3M)~\*{PRM\*}
.xx "constants." "" "math: math functions and" "" math(5)~\*{PRM\*}
.xx "" "eqn, neqn, checkeq: typeset" "mathematics." "" eqn(1)~\*{BSD\*}
.xx "function." "" "matherr: error-handling" "" matherr(3M)~\*{PRM\*}
.xx "PostScript printers." "postmd:" "matrix display program for" "" postmd(1)~\*{URM\*}
.xx "integers." "" "max: return the larger of two" "" max(D3DK)~\*{DDRM\*}
.xx "" "/menu_format: set and get" "maximum numbers of rows and/" "" menu_format(3X)~\*{CHAR\*}
.xx "" "getrlimit, setrlimit: control" "maximum system resource/" "" getrlimit(2)~\*{PRM\*}
.xx "message in asynchronous mode." "" "mb2a_brdcst: Sends a broadcast" "" mb2a_brdcst(3tai)~\*{MBTAI\*}
.xx "asynchronous Multibus II/" "" "mb2a_closeport: Closes an" "" mb2a_closeport(3tai)~\*{MBTAI\*}
.xx "asynchronous endpoint/" "" "mb2a_getinfo: Gets specific" "" mb2a_getinfo(3tai)~\*{MBTAI\*}
.xx "fragment of a request message/" "" "mb2a_getreqfrag: Receives a data" "" mb2a_getreqfrag(3tai)~\*{MBTAI\*}
.xx "asynchronous Multibus II/" "" "mb2a_openport: Opens an" "" mb2a_openport(3tai)~\*{MBTAI\*}
.xx "Multibus II messages in/" "" "mb2a_receive: Receives incoming" "" mb2a_receive(3tai)~\*{MBTAI\*}
.xx "transactionless message in/" "" "mb2a_send: Sends a" "" mb2a_send(3tai)~\*{MBTAI\*}
.xx "message asynchronously." "" "mb2a_sendcancel: Sends a cancel" "" mb2a_sendcancel(3tai)~\*{MBTAI\*}
.xx "message asynchronously." "" "mb2a_sendreply: Sends a reply" "" mb2a_sendreply(3tai)~\*{MBTAI\*}
.xx "request message." "" "mb2a_sendrsvp: Sends a rsvp" "" mb2a_sendrsvp(3tai)~\*{MBTAI\*}
.xx "" "" "mb2_gethostid: gets host ID." "" mb2_gethostid(3tai)~\*{MBTAI\*}
.xx "message in synchronous mode." "" "mb2s_brdcst: Sends a broadcast" "" mb2s_brdcst(3tai)~\*{MBTAI\*}
.xx "synchronous Multibus II/" "" "mb2s_closeport: Closes a" "" mb2s_closeport(3tai)~\*{MBTAI\*}
.xx "synchronous endpoint/" "" "mb2s_getinfo: Gets specific" "" mb2s_getinfo(3tai)~\*{MBTAI\*}
.xx "fragment of a request message." "" "mb2s_getreqfrag: Receives a data" "" mb2s_getreqfrag(3tai)~\*{MBTAI\*}
.xx "synchronous Multibus II/" "" "mb2s_openport: Opens a" "" mb2s_openport(3tai)~\*{MBTAI\*}
.xx "Multibus II messages in/" "" "mb2s_receive: Receives incoming" "" mb2s_receive(3tai)~\*{MBTAI\*}
.xx "transactionless message in/" "" "mb2s_send: Sends a" "" mb2s_send(3tai)~\*{MBTAI\*}
.xx "message in synchronous mode." "" "mb2s_sendcancel: Sends a cancel" "" mb2s_sendcancel(3tai)~\*{MBTAI\*}
.xx "message in synchronous mode." "" "mb2s_sendreply: Sends a reply" "" mb2s_sendreply(3tai)~\*{MBTAI\*}
.xx "message and receives a/" "" "mb2s_sendrsvp: Sends a request" "" mb2s_sendrsvp(3tai)~\*{MBTAI\*}
.xx "multibyte character handling." "" "mbchar: mbtowc, mblen, wctomb:" "" mbchar(3C)~\*{PRM\*}
.xx "character/" "mbchar: mbtowc," "mblen, wctomb: multibyte" "" mbchar(3C)~\*{PRM\*}
.xx "string functions." "mbstring:" "mbstowcs, wcstombs: multibyte" "" mbstring(3C)~\*{PRM\*}
.xx "multibyte string functions." "" "mbstring: mbstowcs, wcstombs:" "" mbstring(3C)~\*{PRM\*}
.xx "character handling." "mbchar:" "mbtowc, mblen, wctomb: multibyte" "" mbchar(3C)~\*{PRM\*}
.xx "" "mp:  madd, msub, mult, mdiv," "mcmp, min, mout, pow, gcd, rpow,/" "" mp(3X)~\*{BSD\*}
.xx "server socket." "" "mconnect: connect to SMTP mail" "" mconnect(1M)~\*{BSD\*}
.xx "section of an object file." "" "mcs: manipulate the comment" "" mcs(1)~\*{PRM\*}
.xx "" "" "mctl: memory management control." "" mctl(3)~\*{BSD\*}
.xx "" "" "mdevice: file format." "" mdevice(4)~\*{ISDG\*}
.xx "" "" "mdevice: file format." "" mdevice(4)~\*{SARM\*}
.xx "rpow,/" "mp:  madd, msub, mult," "mdiv, mcmp, min, mout, pow, gcd," "" mp(3X)~\*{BSD\*}
.xx "the manufacturer's defect list." "" "mdl: read and optionally write" "" mdl(1iref)~\*{MBRMAN\*}
.xx "papers." "" "me: macros for formatting" "" me(7)~\*{BSD\*}
.xx "" "/restore requests and service" "media insertion prompts." "" rsoper(1M)~\*{SARM\*}
.xx "" "backup operations to service" "media insertion prompts." "/with" bkoper(1M)~\*{SARM\*}
.xx "" "disk: random access bulk storage" "medium." "" disk(7)~\*{SARM\*}
.xx "" "state with that on the physical" "medium." "/a file's in-memory" fsync(2)~\*{PRM\*}
.xx "" "" "mem, kmem: core memory." "" mem(7)~\*{SARM\*}
.xx "" "malloc, free, realloc, calloc," "memalign, valloc,: memory/" "" malloc(3C)~\*{PRM\*}
.xx "" "offsetof: offset of structure" "member." "" offsetof(3C)~\*{PRM\*}
.xx "" "elf_next: sequential archive" "member access." "" elf_next(3E)~\*{PRM\*}
.xx "" "elf_rand: random archive" "member access." "" elf_rand(3E)~\*{PRM\*}
.xx "" "elf_getarhdr: retrieve archive" "member header." "" elf_getarhdr(3E)~\*{PRM\*}
.xx "" "listdgrp: lists" "members of a device group." "" listdgrp(1M)~\*{SARM\*}
.xx "" "groups: print group" "membership of user." "" groups(1)~\*{URM\*}
.xx "" "groups: display a user's group" "memberships." "" groups(1)~\*{BSD\*}
.xx "memmove, memset: memory/" "memory:" "memccpy, memchr, memcmp, memcpy," "" memory(3C)~\*{PRM\*}
.xx "memset: memory/" "memory: memccpy," "memchr, memcmp, memcpy, memmove," "" memory(3C)~\*{PRM\*}
.xx "memory/" "memory: memccpy, memchr," "memcmp, memcpy, memmove, memset:" "" memory(3C)~\*{PRM\*}
.xx "control." "" "memcntl: memory management" "" memcntl(2)~\*{PRM\*}
.xx "" "memory: memccpy, memchr, memcmp," "memcpy, memmove, memset: memory/" "" memory(3C)~\*{PRM\*}
.xx "" "memccpy, memchr, memcmp, memcpy," "memmove, memset: memory/" "memory:" memory(3C)~\*{PRM\*}
.xx "" "copylist: copy a file into" "memory." "" copylist(3G)~\*{PRM\*}
.xx "" "lock: lock a process in primary" "memory." "" lock(2)~\*{ACG\*}
.xx "" "mem, kmem: core" "memory." "" mem(7)~\*{SARM\*}
.xx "" "mmap: map pages of" "memory." "" mmap(2)~\*{PRM\*}
.xx "" "munmap: unmap pages of" "memory." "" munmap(2)~\*{PRM\*}
.xx "" "alloca:" "memory allocator." "" alloca(3)~\*{BSD\*}
.xx "" "calloc, memalign, valloc,:" "memory allocator." "/realloc," malloc(3C)~\*{PRM\*}
.xx "" "calloc, mallopt, mallinfo:" "memory allocator." "/realloc," malloc(3X)~\*{PRM\*}
.xx "" "shmctl: shared" "memory control operations." "" shmctl(2)~\*{PRM\*}
.xx "" "spawn new process in a virtual" "memory efficient way." "vfork:" vfork(2)~\*{PRM\*}
.xx "bytes." "bzero: clear" "memory for a given number of" "" bzero(D3DK)~\*{DDRM\*}
.xx "" "queue, semaphore set, or shared" "memory ID." "/remove a message" ipcrm(1)~\*{URM\*}
.xx "" "allocate space from kernel free" "memory." "kmem_alloc:" kmem_alloc(D3DK)~\*{DDRM\*}
.xx "" "free previously allocated kernel" "memory." "kmem_free:" kmem_free(D3DK)~\*{DDRM\*}
.xx "" "and clear space from kernel free" "memory." "kmem_zalloc: allocate" kmem_zalloc(D3DK)~\*{DDRM\*}
.xx "" "mctl:" "memory management control." "" mctl(3)~\*{BSD\*}
.xx "" "memcntl:" "memory management control." "" memcntl(2)~\*{PRM\*}
.xx "" "mprotect: set protection of" "memory mapping." "" mprotect(2)~\*{PRM\*}
.xx "memcpy, memmove, memset: memory/" "" "memory: memccpy, memchr, memcmp," "" memory(3C)~\*{PRM\*}
.xx "" "lock (or unlock) pages in" "memory." "mlock, munlock:" mlock(3C)~\*{PRM\*}
.xx "" "shmop: shmat, shmdt: shared" "memory operations." "" shmop(2)~\*{PRM\*}
.xx "" "memcmp, memcpy, memmove, memset:" "memory operations." "/memchr," memory(3C)~\*{PRM\*}
.xx "or data." "plock: lock into" "memory or unlock process, text," "" plock(2)~\*{PRM\*}
.xx "" "mincore: determine residency of" "memory pages." "" mincore(2)~\*{PRM\*}
.xx "" "display the size of a page of" "memory." "pagesize:" pagesize(1)~\*{BSD\*}
.xx "" "puts a buffer back into the free" "memory pool." "mps_free_msgbuf:" mps_free_msgbuf(D3D)~\*{DDRM\*}
.xx "" "shmget: get shared" "memory segment identifier." "" shmget(2)~\*{PRM\*}
.xx "" "msync: synchronize" "memory with physical storage." "" msync(3C)~\*{PRM\*}
.xx "" "mmap: check virtual mapping for" "memory-mapped device." "" mmap(D2DK)~\*{DDRM\*}
.xx "" "/memchr, memcmp, memcpy, memmove," "memset: memory operations." "" memory(3C)~\*{PRM\*}
.xx "" "a menu; prompt for and return a" "menu item." "ckitem: build" ckitem(1)~\*{ISDG\*}
.xx "" "a menu; prompt for and return a" "menu item." "ckitem: build" ckitem(1)~\*{SARM\*}
.xx "" "a list of currently marked" "menu items." "getitems: return" getitems(1F)~\*{CHAR\*}
.xx "" "delsysadm: sysadm interface" "menu or task removal tool." "" delsysadm(1M)~\*{ISDG\*}
.xx "" "delsysadm: sysadm interface" "menu or task removal tool." "" delsysadm(1M)~\*{SARM\*}
.xx "menu item." "ckitem: build a" "menu; prompt for and return a" "" ckitem(1)~\*{ISDG\*}
.xx "menu item." "ckitem: build a" "menu; prompt for and return a" "" ckitem(1)~\*{SARM\*}
.xx "menu_fore, set_menu_back,/" "" "menu_attributes:  set_menu_fore," "" menu_attributes(3X)~\*{CHAR\*}
.xx "" "/menu_fore, set_menu_back," "menu_back, set_menu_grey,/" "" menu_attributes(3X)~\*{CHAR\*}
.xx "correctly position a menus/" "" "menu_cursor:  pos_menu_cursor:" "" menu_cursor(3X)~\*{CHAR\*}
.xx "for the menus subsystem." "" "menu_driver: command processor" "" menu_driver(3X)~\*{CHAR\*}
.xx "" "menu_attributes:  set_menu_fore," "menu_fore, set_menu_back,/" "" menu_attributes(3X)~\*{CHAR\*}
.xx "menu_format: set and get/" "" "menu_format:  set_menu_format," "" menu_format(3X)~\*{CHAR\*}
.xx "" "menu_format:  set_menu_format," "menu_format: set and get maximum/" "" menu_format(3X)~\*{CHAR\*}
.xx "" "/menu_back, set_menu_grey," "menu_grey, set_menu_pad,/" "" menu_attributes(3X)~\*{CHAR\*}
.xx "item_init, set_item_term,/" "" "menu_hook: set_item_init," "" menu_hook(3X)~\*{CHAR\*}
.xx "" "/item_term, set_menu_init," "menu_init, set_menu_term,/" "" menu_hook(3X)~\*{CHAR\*}
.xx " set_current_item,/" "" "menu_item_current:" "" menu_item_current(3X)~\*{CHAR\*}
.xx "item_description: get menus/" "" "menu_item_name:  item_name," "" menu_item_name(3X)~\*{CHAR\*}
.xx "free_item: create and destroy/" "" "menu_item_new:  new_item," "" menu_item_new(3X)~\*{CHAR\*}
.xx "item_opts_on, item_opts_off,/" "" "menu_item_opts:  set_item_opts," "" menu_item_opts(3X)~\*{CHAR\*}
.xx "menu_items, item_count: connect/" "" "menu_items:  set_menu_items," "" menu_items(3X)~\*{CHAR\*}
.xx "" "menu_items:  set_menu_items," "menu_items, item_count: connect/" "" menu_items(3X)~\*{CHAR\*}
.xx " set_item_userptr,/" "" "menu_item_userptr:" "" menu_item_userptr(3X)~\*{CHAR\*}
.xx " set_item_value, item_value:/" "" "menu_item_value:" "" menu_item_value(3X)~\*{CHAR\*}
.xx " item_visible: tell if menus/" "" "menu_item_visible:" "" menu_item_visible(3X)~\*{CHAR\*}
.xx "menu_mark: menus mark string/" "" "menu_mark:  set_menu_mark," "" menu_mark(3X)~\*{CHAR\*}
.xx "" "menu_mark:  set_menu_mark," "menu_mark: menus mark string/" "" menu_mark(3X)~\*{CHAR\*}
.xx "create and destroy menus." "" "menu_new:  new_menu, free_menu:" "" menu_new(3X)~\*{CHAR\*}
.xx "menu_opts_on, menu_opts_off,/" "" "menu_opts:  set_menu_opts," "" menu_opts(3X)~\*{CHAR\*}
.xx "" "/menu_opts_on, menu_opts_off," "menu_opts: menus option/" "" menu_opts(3X)~\*{CHAR\*}
.xx "" "/set_menu_opts, menu_opts_on," "menu_opts_off, menu_opts: menus/" "" menu_opts(3X)~\*{CHAR\*}
.xx "" "menu_opts:  set_menu_opts," "menu_opts_on, menu_opts_off,/" "" menu_opts(3X)~\*{CHAR\*}
.xx "" "/menu_grey, set_menu_pad," "menu_pad: control menus display/" "" menu_attributes(3X)~\*{CHAR\*}
.xx "menu_pattern: set and get menus/" "" "menu_pattern:  set_menu_pattern," "" menu_pattern(3X)~\*{CHAR\*}
.xx "" "menu_pattern:  set_menu_pattern," "menu_pattern: set and get menus/" "" menu_pattern(3X)~\*{CHAR\*}
.xx "unpost_menu: write or erase/" "" "menu_post:  post_menu," "" menu_post(3X)~\*{CHAR\*}
.xx "package." "" "menus: character based menus" "" menus(3X)~\*{CHAR\*}
.xx "" "correctly position a" "menus cursor." "/pos_menu_cursor:" menu_cursor(3X)~\*{CHAR\*}
.xx "" "/set_menu_pad, menu_pad: control" "menus display attributes." "" menu_attributes(3X)~\*{CHAR\*}
.xx "" "/unpost_menu: write or erase" "menus from associated/" "" menu_post(3X)~\*{CHAR\*}
.xx "" "/item_visible: tell if" "menus item is visible." "" menu_item_visible(3X)~\*{CHAR\*}
.xx "" "/item_name, item_description: get" "menus item name and description." "" menu_item_name(3X)~\*{CHAR\*}
.xx "" "/item_opts_off, item_opts:" "menus item option routines." "" menu_item_opts(3X)~\*{CHAR\*}
.xx "" "/item_value: set and get" "menus item values." "" menu_item_value(3X)~\*{CHAR\*}
.xx "" "dis\%connect items to and from" "menus." "/item_count: connect and" menu_items(3X)~\*{CHAR\*}
.xx "" "associate application data with" "menus items." "/item_userptr:" menu_item_userptr(3X)~\*{CHAR\*}
.xx "" "free_item: create and destroy" "menus items." "/new_item," menu_item_new(3X)~\*{CHAR\*}
.xx "" "item_index: set and get current" "menus items." "/top_row," menu_item_current(3X)~\*{CHAR\*}
.xx "" "/set_menu_mark, menu_mark:" "menus mark string routines." "" menu_mark(3X)~\*{CHAR\*}
.xx "" "free_menu: create and destroy" "menus." "menu_new:  new_menu," menu_new(3X)~\*{CHAR\*}
.xx "" "associate application data with" "menus." "/menu_userptr:" menu_userptr(3X)~\*{CHAR\*}
.xx "" "/menu_opts_off, menu_opts:" "menus option routines." "" menu_opts(3X)~\*{CHAR\*}
.xx "" "menus: character based" "menus package." "" menus(3X)~\*{CHAR\*}
.xx "" "/menu_pattern: set and get" "menus pattern match buffer." "" menu_pattern(3X)~\*{CHAR\*}
.xx "" "for automatic invocation by" "menus." "/routines" menu_hook(3X)~\*{CHAR\*}
.xx "" "numbers of rows and columns in" "menus." "/set and get maximum" menu_format(3X)~\*{CHAR\*}
.xx "" "command processor for the" "menus subsystem." "menu_driver:" menu_driver(3X)~\*{CHAR\*}
.xx "" "/menu_sub, scale_menu:" "menus window and subwindow/" "" menu_win(3X)~\*{CHAR\*}
.xx "window/" "/menu_win, set_menu_sub," "menu_sub, scale_menu: menus" "" menu_win(3X)~\*{CHAR\*}
.xx "" "/menu_init, set_menu_term," "menu_term: assign/" "" menu_hook(3X)~\*{CHAR\*}
.xx "menu_userptr: associate/" "" "menu_userptr:  set_menu_userptr," "" menu_userptr(3X)~\*{CHAR\*}
.xx "" "menu_userptr:  set_menu_userptr," "menu_userptr: associate/" "" menu_userptr(3X)~\*{CHAR\*}
.xx "menu_win, set_menu_sub,/" "" "menu_win:  set_menu_win," "" menu_win(3X)~\*{CHAR\*}
.xx "" "menu_win:  set_menu_win," "menu_win, set_menu_sub,/" "" menu_win(3X)~\*{CHAR\*}
.xx "" "sort: sort and/or" "merge files." "" sort(1)~\*{URM\*}
.xx "files." "acctmerg:" "merge or add total accounting" "" acctmerg(1M)~\*{SARM\*}
.xx "files or subsequent/" "paste:" "merge same lines of several" "" paste(1)~\*{URM\*}
.xx "" "" "mesg: permit or deny messages." "" mesg(1)~\*{URM\*}
.xx "" "adjmsg: trim bytes from a" "message." "" adjmsg(D3DK)~\*{DDRM\*}
.xx "" "catgets: read a program" "message." "" catgets(3C)~\*{PRM\*}
.xx "" "copymsg: copy a" "message." "" copymsg(D3DK)~\*{DDRM\*}
.xx "" "dupmsg: duplicate a" "message." "" dupmsg(D3DK)~\*{DDRM\*}
.xx "" "freemsg: free a" "message." "" freemsg(D3DK)~\*{DDRM\*}
.xx "" "t_error: produce error" "message." "" t_error(3N)~\*{NI\*}
.xx "" "mb2s_sendrsvp: Sends a request" "message and receives a response." "" mb2s_sendrsvp(3tai)~\*{MBTAI\*}
.xx "" "mb2a_sendcancel: Sends a cancel" "message asynchronously." "" mb2a_sendcancel(3tai)~\*{MBTAI\*}
.xx "" "mb2a_sendreply: Sends a reply" "message asynchronously." "" mb2a_sendreply(3tai)~\*{MBTAI\*}
.xx "" "putbq: place a" "message at the head of a queue." "" putbq(D3DK)~\*{DDRM\*}
.xx "" "allocb: allocate a" "message block." "" allocb(D3DK)~\*{DDRM\*}
.xx "" "copyb: copy a" "message block." "" copyb(D3DK)~\*{DDRM\*}
.xx "" "dupb: duplicate a" "message block." "" dupb(D3DK)~\*{DDRM\*}
.xx "" "freeb: free a" "message block." "" freeb(D3DK)~\*{DDRM\*}
.xx "" "rmvb: remove a" "message block from a message." "" rmvb(D3DK)~\*{DDRM\*}
.xx "message." "unlinkb: remove a" "message block from the head of a" "" unlinkb(D3DK)~\*{DDRM\*}
.xx "" "msgb: STREAMS" "message block structure." "" msgb(D4DK)~\*{DDRM\*}
.xx "" "esballoc: allocate a" "message block using an/" "" esballoc(D3DK)~\*{DDRM\*}
.xx "" "linkb: concatenate two" "message blocks." "" linkb(D3DK)~\*{DDRM\*}
.xx "" "mps_get_msgbuf: allocates a" "message buffer." "" mps_get_msgbuf(D3D)~\*{DDRM\*}
.xx "" "/copies user data from the" "message buffer." "" mps_get_soldata(D3D)~\*{DDRM\*}
.xx "" "/copies user data from the" "message buffer." "" mps_get_unsoldata(D3D)~\*{DDRM\*}
.xx "" "catopen, catclose: open/close a" "message catalogue." "" catopen(3C)~\*{PRM\*}
.xx "" "gencat: generate a formatted" "message catalogue." "" gencat(1)~\*{URM\*}
.xx "" "msgctl:" "message control operations." "" msgctl(2)~\*{PRM\*}
.xx "" "retrieve a text string from a" "message data base." "gettxt:" gettxt(1)~\*{URM\*}
.xx "" "or search for a text string in," "message data bases." "/of," srchtxt(1)~\*{URM\*}
.xx "" "test whether a message is a data" "message." "datamsg:" datamsg(D3DK)~\*{DDRM\*}
.xx "" "sets target for front panel" "message delivery." "dbon:" dbon(8iref)~\*{MBRMAN\*}
.xx "" "mkmsgs: create" "message files for use by gettxt." "" mkmsgs(1)~\*{URM\*}
.xx "" "free_rtn: STREAMS driver's" "message free routine structure." "" free_rtn(D4DK)~\*{DDRM\*}
.xx "" "getq: get the next" "message from a queue." "" getq(D3DK)~\*{DDRM\*}
.xx "" "rmvq: remove a" "message from a queue." "" rmvq(D3DK)~\*{DDRM\*}
.xx "" "send, sendto, sendmsg: send a" "message from a socket." "" send(3N)~\*{NI\*}
.xx "" "recvfrom, recvmsg: receive a" "message from a socket." "recv," recv(3N)~\*{NI\*}
.xx "" "/macros used to decode" "message handler message." "" mps_msg(D3D)~\*{DDRM\*}
.xx "" "mb2a_brdcst: Sends a broadcast" "message in asynchronous mode." "" mb2a_brdcst(3tai)~\*{MBTAI\*}
.xx "" "/a data fragment of a request" "message in asynchronous mode." "" mb2a_getreqfrag(3tai)~\*{MBTAI\*}
.xx "" "/Sends a transactionless" "message in asynchronous mode." "" mb2a_send(3tai)~\*{MBTAI\*}
.xx "" "mb2s_brdcst: Sends a broadcast" "message in synchronous mode." "" mb2s_brdcst(3tai)~\*{MBTAI\*}
.xx "" "/Sends a transactionless" "message in synchronous mode." "" mb2s_send(3tai)~\*{MBTAI\*}
.xx "" "mb2s_sendcancel: Sends a cancel" "message in synchronous mode." "" mb2s_sendcancel(3tai)~\*{MBTAI\*}
.xx "" "mb2s_sendreply: Sends a reply" "message in synchronous mode." "" mb2s_sendreply(3tai)~\*{MBTAI\*}
.xx "direction in a/" "qreply: send a" "message in the opposite" "" qreply(D3DK)~\*{DDRM\*}
.xx "" "insq: insert a" "message into a queue." "" insq(D3DK)~\*{DDRM\*}
.xx "" "datamsg: test whether a" "message is a data message." "" datamsg(D3DK)~\*{DDRM\*}
.xx "" "message: put arguments on FMLI" "message line." "" message(1F)~\*{CHAR\*}
.xx "" "Sends a rsvp request" "message." "mb2a_sendrsvp:" mb2a_sendrsvp(3tai)~\*{MBTAI\*}
.xx "" "used to decode message handler" "message." "/mps_msg_isreq: macros" mps_msg(D3D)~\*{DDRM\*}
.xx "" "number of bytes of data in a" "message." "msgdsize: return" msgdsize(D3DK)~\*{DDRM\*}
.xx "" "send listener service request" "message." "nlsrequest: format and" nlsrequest(3N)~\*{NI\*}
.xx "" "help: ask for help with" "message numbers or SCCS/" "" help(1)~\*{PRM\*}
.xx "" "getmsg: get next" "message off a stream." "" getmsg(2)~\*{PRM\*}
.xx "" "getmsg: get next" "message off a stream." "" getmsg(2)~\*{STRM\*}
.xx "" "putq: put a" "message on a queue." "" putq(D3DK)~\*{DDRM\*}
.xx "" "putmsg: send a" "message on a stream." "" putmsg(2)~\*{PRM\*}
.xx "" "putmsg: send a" "message on a stream." "" putmsg(2)~\*{STRM\*}
.xx "console." "fmtmsg: display a" "message on stderr or system" "" fmtmsg(1)~\*{URM\*}
.xx "console." "fmtmsg: display a" "message on stderr or system" "" fmtmsg(3C)~\*{PRM\*}
.xx "" "print: display a driver" "message on the system console." "" print(D2DK)~\*{DDRM\*}
.xx "" "msgop: msgsnd, msgrcv:" "message operations." "" msgop(2)~\*{PRM\*}
.xx "" "cmn_err: display an error" "message or panic the system." "" cmn_err(D3DK)~\*{DDRM\*}
.xx "driver." "mps:" "Message Passing Space device" "" mps(7iref)~\*{MBRMAN\*}
.xx "" "mailx: interactive" "message processing system." "" mailx(1)~\*{URM\*}
.xx "" "ICMP: Internet Control" "Message Protocol." "" ICMP(7)~\*{NI\*}
.xx "" "ICMP: Internet Control" "Message Protocol." "" ICMP(7)~\*{NUAG\*}
.xx "" "ICMP: Internet Control" "Message Protocol." "" ICMP(7)~\*{SARM\*}
.xx "" "concatenate bytes in a" "message." "pullupmsg:" pullupmsg(D3DK)~\*{DDRM\*}
.xx "message line." "" "message: put arguments on FMLI" "" message(1F)~\*{CHAR\*}
.xx "" "msgget: get" "message queue." "" msgget(2)~\*{PRM\*}
.xx "shared memory/" "ipcrm: remove a" "message queue, semaphore set, or" "" ipcrm(1)~\*{URM\*}
.xx "" "a data fragment of a request" "message." "/Receives" mb2s_getreqfrag(3tai)~\*{MBTAI\*}
.xx "" "remove a message block from a" "message." "rmvb:" rmvb(D3DK)~\*{DDRM\*}
.xx "" "strerror: get error" "message string." "" strerror(3C)~\*{PRM\*}
.xx "" "putctl: send a control" "message to a queue." "" putctl(D3DK)~\*{DDRM\*}
.xx "" "/constructs a broadcast" "message to be sent." "" mps_mk_brdcst(D3D)~\*{DDRM\*}
.xx "" "/constructs an unsolicited" "message to be sent." "" mps_mk_unsol(D3D)~\*{DDRM\*}
.xx "" "/constructs a unsolicited reply" "message to be sent." "" mps_mk_unsolrply(D3D)~\*{DDRM\*}
.xx "" "mps_mk_sol: constructs a" "message to be sent to initiate a/" "" mps_mk_sol(D3D)~\*{DDRM\*}
.xx "" "mps_mk_solrply: constructs a" "message to be sent to initiate a/" "" mps_mk_solrply(D3D)~\*{DDRM\*}
.xx "" "putnext: send a" "message to the next queue." "" putnext(D3DK)~\*{DDRM\*}
.xx "" "message block from the head of a" "message." "unlinkb: remove a" unlinkb(D3DK)~\*{DDRM\*}
.xx "" "putctl1: send a control" "message with a one-byte/" "" putctl1(D3DK)~\*{DDRM\*}
.xx "" "mesg: permit or deny" "messages." "" mesg(1)~\*{URM\*}
.xx "" "messages: STREAMS" "messages." "" messages(D5DK)~\*{DDRM\*}
.xx "" "perror: print system error" "messages." "" perror(3C)~\*{PRM\*}
.xx "" "psignal, psiginfo: system signal" "messages." "" psignal(3C)~\*{PRM\*}
.xx "" "smtpd: receive incoming SMTP" "messages." "" smtpd(1M)~\*{SARM\*}
.xx "" "srv: service queued" "messages." "" srv(D2DK)~\*{DDRM\*}
.xx "" "strace: print STREAMS trace" "messages." "" strace(1M)~\*{SARM\*}
.xx "" "strace: print STREAMS trace" "messages." "" strace(1M)~\*{STRM\*}
.xx "" "syslogd: log system" "messages." "" syslogd(1M)~\*{BSD\*}
.xx "" "entries for reception of reply" "messages." "/and sets up table" mps_AMPsend_rsvp(D3D)~\*{DDRM\*}
.xx "" "respond to incoming mail" "messages." "/automatically" vacation(1)~\*{URM\*}
.xx "" "give notice of incoming mail" "messages." "biff:" biff(1)~\*{BSD\*}
.xx "" "remote system can accept binary" "messages." "/determine whether" ckbinarsys(1M)~\*{SARM\*}
.xx "" "mps_AMPsend_rsvp: queues request" "messages for transmission and/" "" mps_AMPsend_rsvp(D3D)~\*{DDRM\*}
.xx "queue." "put: receive" "messages from the preceding" "" put(D2DK)~\*{DDRM\*}
.xx "band." "flushband: flush" "messages in a specified priority" "" flushband(D3DK)~\*{DDRM\*}
.xx "" "/Receives incoming Multibus II" "messages in asynchronous mode." "" mb2a_receive(3tai)~\*{MBTAI\*}
.xx "" "/Receives incoming Multibus II" "messages in synchronous mode." "" mb2s_receive(3tai)~\*{MBTAI\*}
.xx "" "flushq: flush" "messages on a queue." "" flushq(D3DK)~\*{DDRM\*}
.xx "" "qsize: find the number of" "messages on a queue." "" qsize(D3DK)~\*{DDRM\*}
.xx "" "sys_siglist: system signal" "messages." "psignal," psignal(3)~\*{BSD\*}
.xx "queue." "smtpsched: process" "messages queued in the SMTP mail" "" smtpsched(1M)~\*{SARM\*}
.xx "" "" "messages: STREAMS messages." "" messages(D5DK)~\*{DDRM\*}
.xx "" "mps_AMPsend: sends unsolicited" "messages that are not part of/" "" mps_AMPsend(D3D)~\*{DDRM\*}
.xx "" "strlog: submit" "messages to the log driver." "" strlog(D3DK)~\*{DDRM\*}
.xx "" "/halfdelay, intrflush, keypad," "meta, nodelay, notimeout, raw,/" "" curs_inopts(3X)~\*{CHAR\*}
.xx "" "msqrt, sdiv, itom, xtom, mtox," "mfree: multiple precision/" "/rpow," mp(3X)~\*{BSD\*}
.xx "" "" "mfsys: file format." "" mfsys(4)~\*{ISDG\*}
.xx "" "" "mfsys: file format." "" mfsys(4)~\*{SARM\*}
.xx "" "convert clock ticks to" "microseconds." "drv_hztousec:" drv_hztousec(D3DK)~\*{DDRM\*}
.xx "" "drv_usectohz: convert" "microseconds to clock ticks." "" drv_usectohz(D3DK)~\*{DDRM\*}
.xx "" "signal after interval in" "microseconds." "ualarm: schedule" ualarm(3)~\*{BSD\*}
.xx "" "execution for interval in" "microseconds." "usleep: suspend" usleep(3)~\*{BSD\*}
.xx "one set of volumes to another." "" "migration: move an archive from" "" migration(1M)~\*{SARM\*}
.xx "" "madd, msub, mult, mdiv, mcmp," "min, mout, pow, gcd, rpow,/" "mp: " mp(3X)~\*{BSD\*}
.xx "integers." "" "min: return the lesser of two" "" min(D3DK)~\*{DDRM\*}
.xx "memory pages." "" "mincore: determine residency of" "" mincore(2)~\*{PRM\*}
.xx "" "geteminor: get external" "minor device number." "" geteminor(D3DK)~\*{DDRM\*}
.xx "" "getminor: get internal" "minor device number." "" getminor(D3DK)~\*{DDRM\*}
.xx "" "makedev, major," "minor: manage a device number." "" makedev(3C)~\*{PRM\*}
.xx "" "device number from major and" "minor numbers." "makedevice: make" makedevice(D3DK)~\*{DDRM\*}
.xx "" "/overview of accounting and" "miscellaneous accounting/" "" acct(1M)~\*{SARM\*}
.xx "" "/getwin, delay_output, flushinp:" "miscellaneous curses utility/" "" curs_util(3X)~\*{CHAR\*}
.xx "" "/isnan, copysign, scalbn:" "miscellaneous functions for IEEE/" "" ieee_functions(3M)~\*{BSD\*}
.xx "" "intro: introduction to" "miscellany." "" intro(5)~\*{PRM\*}
.xx "" "intro: introduction to" "miscellany." "" intro(5)~\*{SARM\*}
.xx "" "/controller device driver and" "MIX 386/530 Ethernet controller/" "" i530(7iref)~\*{MBRMAN\*}
.xx "controller module and/" "" "mix386/450: MIX-based terminal" "" mix386/450(7iref)~\*{MBRMAN\*}
.xx "module and/" "mix386/450:" "MIX-based terminal controller" "" mix386/450(7iref)~\*{MBRMAN\*}
.xx "" "" "mkdir: make a directory." "" mkdir(2)~\*{PRM\*}
.xx "" "" "mkdir: make directories." "" mkdir(1)~\*{URM\*}
.xx "directories in a path." "" "mkdirp, rmdirp: create, remove" "" mkdirp(3G)~\*{PRM\*}
.xx "" "" "mkfifo: create a new FIFO." "" mkfifo(3C)~\*{PRM\*}
.xx "" "" "mkfifo: make FIFO special file." "" mkfifo(1M)~\*{SARM\*}
.xx "file system." "" "mkfs (bfs): construct a boot" "" mkfs(1M)~\*{SARM\*}
.xx "system." "" "mkfs (generic): construct a file" "" mkfs(1M)~\*{SARM\*}
.xx "system." "" "mkfs (s5): construct an s5 file" "" mkfs(1M)~\*{SARM\*}
.xx "system." "" "mkfs (ufs): construct a ufs file" "" mkfs(1M)~\*{SARM\*}
.xx "use by gettxt." "" "mkmsgs: create message files for" "" mkmsgs(1)~\*{URM\*}
.xx "special or ordinary file." "" "mknod: make a directory, or a" "" mknod(2)~\*{ACG\*}
.xx "special or ordinary file." "" "mknod: make a directory, or a" "" mknod(2)~\*{PRM\*}
.xx "" "" "mknod: make a special file." "" mknod(1M)~\*{ACG\*}
.xx "" "" "mknod: make a special file." "" mknod(1M)~\*{SARM\*}
.xx "utility." "" "mkpart: disk maintenance" "" mkpart(1M)~\*{SARM\*}
.xx "name." "" "mkstemp: make a unique file" "" mkstemp(3)~\*{BSD\*}
.xx "" "" "mktemp: make a unique file name." "" mktemp(3C)~\*{PRM\*}
.xx "to a calendar time." "" "mktime: converts a tm structure" "" mktime(3C)~\*{PRM\*}
.xx "pages in memory." "" "mlock, munlock: lock (or unlock)" "" mlock(3C)~\*{PRM\*}
.xx "unlock address space." "" "mlockall, munlockall: lock or" "" mlockall(3C)~\*{PRM\*}
.xx "memory-mapped device." "" "mmap: check virtual mapping for" "" mmap(D2DK)~\*{DDRM\*}
.xx "" "" "mmap: map pages of memory." "" mmap(2)~\*{PRM\*}
.xx "" "getmntent, getmntany: get" "mnttab file entry." "" getmntent(3C)~\*{PRM\*}
.xx "table." "" "mnttab: mounted file system" "" mnttab(4)~\*{SARM\*}
.xx "" "chmod: change file" "mode." "" chmod(1)~\*{URM\*}
.xx "" "sulogin: access single-user" "mode." "" sulogin(1M)~\*{SARM\*}
.xx "" "request message in asynchronous" "mode." "/a data fragment of a" mb2a_getreqfrag(3tai)~\*{MBTAI\*}
.xx "" "vidi: sets the font and video" "mode for a video device." "" vidi(1)~\*{SARM\*}
.xx "" "/determine best transfer" "mode for DMA command." "" dma_get_best_mode(D3X)~\*{DDRM\*}
.xx "" "II messages in asynchronous" "mode." "/incoming Multibus" mb2a_receive(3tai)~\*{MBTAI\*}
.xx "" "II messages in synchronous" "mode." "/incoming Multibus" mb2s_receive(3tai)~\*{MBTAI\*}
.xx "" "umask: set file-creation" "mode mask." "" umask(1)~\*{URM\*}
.xx "" "broadcast message in synchronous" "mode." "mb2s_brdcst: Sends a" mb2s_brdcst(3tai)~\*{MBTAI\*}
.xx "" "a cancel message in synchronous" "mode." "mb2s_sendcancel: Sends" mb2s_sendcancel(3tai)~\*{MBTAI\*}
.xx "" "a reply message in synchronous" "mode." "mb2s_sendreply: Sends" mb2s_sendreply(3tai)~\*{MBTAI\*}
.xx "" "pckt: STREAMS Packet" "Mode module." "" pckt(7)~\*{STRM\*}
.xx "" "chmod, fchmod: change" "mode of file." "" chmod(2)~\*{PRM\*}
.xx "" "message in asynchronous" "mode." "/Sends a broadcast" mb2a_brdcst(3tai)~\*{MBTAI\*}
.xx "" "message in asynchronous" "mode." "/Sends a transactionless" mb2a_send(3tai)~\*{MBTAI\*}
.xx "" "message in synchronous" "mode." "/Sends a transactionless" mb2s_send(3tai)~\*{MBTAI\*}
.xx "" "getty: set terminal type," "modes, speed, and line/" "" getty(1M)~\*{SARM\*}
.xx "" "uugetty: set terminal type," "modes, speed, and line/" "" uugetty(1M)~\*{SARM\*}
.xx "" "vtgetty: sets terminal type," "modes, speed, and line/" "" vtgetty(1M)~\*{SARM\*}
.xx "" "information for setting terminal" "modes." "tset: provide" tset(1)~\*{ACG\*}
.xx "" "information to set terminal" "modes." "tset: provide" tset(1)~\*{URM\*}
.xx "" "/frexpl, ldexp, ldexpl, logb," "modf, modff, modfl, nextafter,/" "" frexp(3C)~\*{PRM\*}
.xx "" "/ldexp, ldexpl, logb, modf," "modff, modfl, nextafter, scalb,/" "" frexp(3C)~\*{PRM\*}
.xx "" "/ldexpl, logb, modf, modff," "modfl, nextafter, scalb, scalbl:/" "" frexp(3C)~\*{PRM\*}
.xx "" "settime: change the access and" "modification dates of files." "" settime(1)~\*{ACG\*}
.xx "" "utime: set file access and" "modification times." "" utime(2)~\*{PRM\*}
.xx "" "touch: update access and" "modification times of a file." "" touch(1)~\*{URM\*}
.xx "system." "groupmod:" "modify a group definition on the" "" groupmod(1M)~\*{SARM\*}
.xx "information on the/" "usermod:" "modify a user's login" "" usermod(1M)~\*{SARM\*}
.xx "locale." "setlocale:" "modify and query a program's" "" setlocale(3C)~\*{PRM\*}
.xx "table." "fdisk: create or" "modify hard disk partition" "" fdisk(1M)~\*{SARM\*}
.xx "" "pckt: STREAMS Packet Mode" "module." "" pckt(7)~\*{STRM\*}
.xx "" "/MIX-based terminal controller" "module and baseboard." "" mix386/450(7iref)~\*{MBRMAN\*}
.xx "" "streamtab: STREAMS driver and" "module declaration structure." "" streamtab(D4DK)~\*{DDRM\*}
.xx "" "8086 absolute library and object" "module formats." "download: loads" download(1iref)~\*{MBRMAN\*}
.xx "" "info: STREAMS driver and" "module information." "" info(D1D)~\*{DDRM\*}
.xx "" "module_info: STREAMS driver and" "module information structure." "" module_info(D4DK)~\*{DDRM\*}
.xx "" "STREAMS terminal line discipline" "module." "ldterm: standard" ldterm(7)~\*{STRM\*}
.xx "" "Pseudo Terminal Emulation" "module." "ptem: STREAMS" ptem(7)~\*{STRM\*}
.xx "" "Interface cooperating STREAMS" "module." "timod: Transport" timod(7)~\*{STRM\*}
.xx "" "read/write interface STREAMS" "module." "/Transport Interface" tirdwr(7)~\*{STRM\*}
.xx "" "and XENIX STREAMS compatibility" "module." "ttcompat: V7, 4BSD" ttcompat(7)~\*{SARM\*}
.xx "module information structure." "" "module_info: STREAMS driver and" "" module_info(D4DK)~\*{DDRM\*}
.xx "" "of automatically pushed STREAMS" "modules." "/configure lists" autopush(1M)~\*{SARM\*}
.xx "" "of automatically pushed STREAMS" "modules." "/configure lists" autopush(1M)~\*{STRM\*}
.xx "" "/ckpacct, dodisk, lastlogin," "monacct, nulladm, prctmp,/" "" acctsh(1M)~\*{SARM\*}
.xx "" "montbl: create" "monetary database." "" montbl(1M)~\*{SARM\*}
.xx "" "statd: network status" "monitor." "" statd(1M)~\*{NUAG\*}
.xx "" "pmadm: port" "monitor administration." "" pmadm(1M)~\*{NI\*}
.xx "" "pmadm: port" "monitor administration." "" pmadm(1M)~\*{SARM\*}
.xx "" "ttymon: port" "monitor for terminal ports." "" ttymon(1M)~\*{SARM\*}
.xx "profile." "" "monitor: prepare execution" "" monitor(3C)~\*{PRM\*}
.xx "" "mapscrn, mapstr: configure" "monitor screen mapping." "mapkey," mapkey(1M)~\*{SARM\*}
.xx "terminals." "vtlmgr:" "monitors and opens virtual" "" vtlmgr(1)~\*{ISDG\*}
.xx "terminals." "vtlmgr:" "monitors and opens virtual" "" vtlmgr(1)~\*{URM\*}
.xx "" "ttyadm: format and output port" "monitor-specific information." "" ttyadm(1M)~\*{SARM\*}
.xx "database." "" "montbl: create monetary" "" montbl(1M)~\*{SARM\*}
.xx "through a text file." "" "more, page: browse or page" "" more(1)~\*{URM\*}
.xx "" "mount:" "mount a file system." "" mount(2)~\*{PRM\*}
.xx "" "mount (s5):" "mount an s5 file system." "" mount(1M)~\*{SARM\*}
.xx "" "mount (bfs):" "mount bfs file systems." "" mount(1M)~\*{SARM\*}
.xx "systems." "" "mount (bfs): mount bfs file" "" mount(1M)~\*{SARM\*}
.xx "" "" "mount: mount a file system." "" mount(2)~\*{PRM\*}
.xx "resources." "" "mount: mount remote NFS" "" mount(1M)~\*{NUAG\*}
.xx "resources." "" "mount: mount remote NFS" "" mount(1M)~\*{SARM\*}
.xx "" "" "mount: mount remote resources." "" mount(1M)~\*{NUAG\*}
.xx "" "" "mount: mount remote resources." "" mount(1M)~\*{SARM\*}
.xx "" "automount: automatically" "mount NFS file systems." "" automount(1M)~\*{NUAG\*}
.xx "" "automount: automatically" "mount NFS file systems." "" automount(1M)~\*{SARM\*}
.xx "and remote/" "mount, umount:" "mount or unmount file systems" "" mount(1M)~\*{SARM\*}
.xx "" "rmnttry: attempt to" "mount queued remote resources." "" rmnttry(1M)~\*{NUAG\*}
.xx "" "rmnttry: attempt to" "mount queued remote resources." "" rmnttry(1M)~\*{SARM\*}
.xx "" "mount:" "mount remote NFS resources." "" mount(1M)~\*{NUAG\*}
.xx "" "mount:" "mount remote NFS resources." "" mount(1M)~\*{SARM\*}
.xx "" "mount:" "mount remote resources." "" mount(1M)~\*{NUAG\*}
.xx "" "mount:" "mount remote resources." "" mount(1M)~\*{SARM\*}
.xx "" "mountd: NFS" "mount request server." "" mountd(1M)~\*{NUAG\*}
.xx "" "mountd: NFS" "mount request server." "" mountd(1M)~\*{SARM\*}
.xx "system." "" "mount (s5): mount an s5 file" "" mount(1M)~\*{SARM\*}
.xx "" "setmnt: establish" "mount table." "" setmnt(1M)~\*{SARM\*}
.xx "" "mount (ufs):" "mount ufs file systems." "" mount(1M)~\*{SARM\*}
.xx "systems." "" "mount (ufs): mount ufs file" "" mount(1M)~\*{SARM\*}
.xx "file systems and remote/" "" "mount, umount: mount or unmount" "" mount(1M)~\*{SARM\*}
.xx "" "mountfsys, umountfsys:" "mount, unmount a file system." "" mountfsys(1M)~\*{SARM\*}
.xx "systems." "mountall, umountall:" "mount, unmount multiple file" "" mountall(1M)~\*{SARM\*}
.xx "Sharing/" "rmountall, rumountall:" "mount, unmount Remote File" "" rmountall(1M)~\*{NUAG\*}
.xx "Sharing/" "rmountall, rumountall:" "mount, unmount Remote File" "" rmountall(1M)~\*{SARM\*}
.xx "unmount multiple file systems." "" "mountall, umountall: mount," "" mountall(1M)~\*{SARM\*}
.xx "server." "" "mountd: NFS mount request" "" mountd(1M)~\*{NUAG\*}
.xx "server." "" "mountd: NFS mount request" "" mountd(1M)~\*{SARM\*}
.xx "" "mnttab:" "mounted file system table." "" mnttab(4)~\*{SARM\*}
.xx "information." "dfmounts: display" "mounted NFS resource" "" dfmounts(1M)~\*{NUAG\*}
.xx "information." "dfmounts: display" "mounted NFS resource" "" dfmounts(1M)~\*{SARM\*}
.xx "" "dfmounts: display" "mounted resource information." "" dfmounts(1M)~\*{NUAG\*}
.xx "" "dfmounts: display" "mounted resource information." "" dfmounts(1M)~\*{SARM\*}
.xx "" "rmntstat: display" "mounted resource information." "" rmntstat(1M)~\*{NUAG\*}
.xx "" "rmntstat: display" "mounted resource information." "" rmntstat(1M)~\*{SARM\*}
.xx "information." "dfmounts: display" "mounted RFS resource" "" dfmounts(1M)~\*{NUAG\*}
.xx "information." "dfmounts: display" "mounted RFS resource" "" dfmounts(1M)~\*{SARM\*}
.xx "unmount a file system." "" "mountfsys, umountfsys: mount," "" mountfsys(1M)~\*{SARM\*}
.xx "" "/local NFS resource available for" "mounting by remote systems." "" share(1M)~\*{NUAG\*}
.xx "" "/local NFS resource available for" "mounting by remote systems." "" share(1M)~\*{SARM\*}
.xx "" "/NFS resource unavailable for" "mounting by remote systems." "" unshare(1M)~\*{NUAG\*}
.xx "" "/NFS resource unavailable for" "mounting by remote systems." "" unshare(1M)~\*{SARM\*}
.xx "" "rmount: queue remote resource" "mounts." "" rmount(1M)~\*{NUAG\*}
.xx "" "rmount: queue remote resource" "mounts." "" rmount(1M)~\*{SARM\*}
.xx "" "mouseadmin:" "mouse administration." "" mouseadmin(1)~\*{ISDG\*}
.xx "" "mouseadmin:" "mouse administration." "" mouseadmin(1)~\*{SARM\*}
.xx "bus, serial, and PS/2/" "mouse:" "mouse device driver supporting" "" mouse(7)~\*{ISDG\*}
.xx "bus, serial, and PS/2/" "mouse:" "mouse device driver supporting" "" mouse(7)~\*{SARM\*}
.xx "" "bus, serial, and PS/2 compatible" "mouse devices." "/supporting" mouse(7)~\*{ISDG\*}
.xx "" "bus, serial, and PS/2 compatible" "mouse devices." "/supporting" mouse(7)~\*{SARM\*}
.xx "supporting bus, serial, and/" "" "mouse: mouse device driver" "" mouse(7)~\*{ISDG\*}
.xx "supporting bus, serial, and/" "" "mouse: mouse device driver" "" mouse(7)~\*{SARM\*}
.xx "administration." "" "mouseadmin: mouse" "" mouseadmin(1)~\*{ISDG\*}
.xx "administration." "" "mouseadmin: mouse" "" mouseadmin(1)~\*{SARM\*}
.xx "" "/msub, mult, mdiv, mcmp, min," "mout, pow, gcd, rpow, msqrt,/" "" mp(3X)~\*{BSD\*}
.xx "" "mvdir:" "move a directory." "" mvdir(1M)~\*{SARM\*}
.xx "" "panel_move:  move_panel:" "move a panels window on the/" "" panel_move(3X)~\*{CHAR\*}
.xx "volumes to another." "migration:" "move an archive from one set of" "" migration(1M)~\*{SARM\*}
.xx "" "curs_move:  move, wmove:" "move curses window cursor." "" curs_move(3X)~\*{CHAR\*}
.xx "" "mv:" "move files." "" mv(1)~\*{URM\*}
.xx "" "lseek:" "move read/write file pointer." "" lseek(2)~\*{PRM\*}
.xx "" "the LP print service and" "move requests." "/start/stop" lpsched(1M)~\*{SARM\*}
.xx "cursor." "curs_move:" "move, wmove: move curses window" "" curs_move(3X)~\*{CHAR\*}
.xx "" "/form_fields, field_count," "move_field: connect fields to/" "" form_field(3X)~\*{CHAR\*}
.xx "on the virtual/" "panel_move:" "move_panel: move a panels window" "" panel_move(3X)~\*{CHAR\*}
.xx "mcmp, min, mout, pow, gcd,/" "" "mp:  madd, msub, mult, mdiv," "" mp(3X)~\*{BSD\*}
.xx "" "mpc:" "MPC device driver." "" mpc(7iref)~\*{MBRMAN\*}
.xx "" "" "mpc: MPC device driver." "" mpc(7iref)~\*{MBRMAN\*}
.xx "terminal controller." "" "mpi/450: iSBC MPI/450 MPI-based" "" mpi/450(7iref)~\*{MBRMAN\*}
.xx "controller." "mpi/450: iSBC" "MPI/450 MPI-based terminal" "" mpi/450(7iref)~\*{MBRMAN\*}
.xx "" "mpi/450: iSBC MPI/450" "MPI-based terminal controller." "" mpi/450(7iref)~\*{MBRMAN\*}
.xx "memory mapping." "" "mprotect: set protection of" "" mprotect(2)~\*{PRM\*}
.xx "device driver." "" "mps: Message Passing Space" "" mps(7iref)~\*{MBRMAN\*}
.xx "ongoing rsvp transaction." "" "mps_AMPcancel: cancels an" "" mps_AMPcancel(D3D)~\*{DDRM\*}
.xx "solicited data that corresponds/" "" "mps_AMPreceive: receives" "" mps_AMPreceive(D3D)~\*{DDRM\*}
.xx "solicited data in fragments/" "" "mps_AMPreceive_frag: receives" "" mps_AMPreceive_frag(D3D)~\*{DDRM\*}
.xx "messages that are not part of/" "" "mps_AMPsend: sends unsolicited" "" mps_AMPsend(D3D)~\*{DDRM\*}
.xx "solicited data that is not part/" "" "mps_AMPsend_data: sends" "" mps_AMPsend_data(D3D)~\*{DDRM\*}
.xx "received request that is part/" "" "mps_AMPsend_reply: replies to a" "" mps_AMPsend_reply(D3D)~\*{DDRM\*}
.xx "messages for transmission and/" "" "mps_AMPsend_rsvp: queues request" "" mps_AMPsend_rsvp(D3D)~\*{DDRM\*}
.xx "previously opened channel." "" "mps_close_chan: closes a" "" mps_close_chan(D3D)~\*{DDRM\*}
.xx "" "" "mpscnv: Convert transport code." "" mpscnv(1iref)~\*{MBRMAN\*}
.xx "data buffer descriptors." "" "mps_free_dmabuf: frees a list of" "" mps_free_dmabuf(D3D)~\*{DDRM\*}
.xx "back into the free memory pool." "" "mps_free_msgbuf: puts a buffer" "" mps_free_msgbuf(D3D)~\*{DDRM\*}
.xx "allocated transaction id." "" "mps_free_tid: frees a previously" "" mps_free_tid(D3D)~\*{DDRM\*}
.xx "pointer to a list of data/" "" "mps_get_dmabuf: returns a" "" mps_get_dmabuf(D3D)~\*{DDRM\*}
.xx "message buffer." "" "mps_get_msgbuf: allocates a" "" mps_get_msgbuf(D3D)~\*{DDRM\*}
.xx "length for a solicited reply." "" "mps_get_reply_len: get data" "" mps_get_reply_len(D3D)~\*{DDRM\*}
.xx "data from the message buffer." "" "mps_get_soldata: copies user" "" mps_get_soldata(D3D)~\*{DDRM\*}
.xx "transaction ids." "" "mps_get_tid: allocates" "" mps_get_tid(D3D)~\*{DDRM\*}
.xx "data from the message buffer." "" "mps_get_unsoldata: copies user" "" mps_get_unsoldata(D3D)~\*{DDRM\*}
.xx "buffer grant in response to a/" "" "mps_mk_bgrant: construct a" "" mps_mk_bgrant(D3D)~\*{DDRM\*}
.xx "broadcast message to be sent." "" "mps_mk_brdcst: constructs a" "" mps_mk_brdcst(D3D)~\*{DDRM\*}
.xx "buffer reject in response to a/" "" "mps_mk_breject: construct a" "" mps_mk_breject(D3D)~\*{DDRM\*}
.xx "to be sent to initiate a/" "" "mps_mk_sol: constructs a message" "" mps_mk_sol(D3D)~\*{DDRM\*}
.xx "message to be sent to initiate/" "" "mps_mk_solrply: constructs a" "" mps_mk_solrply(D3D)~\*{DDRM\*}
.xx "unsolicited message to be sent." "" "mps_mk_unsol: constructs an" "" mps_mk_unsol(D3D)~\*{DDRM\*}
.xx "unsolicited reply message to be/" "" "mps_mk_unsolrply: constructs a" "" mps_mk_unsolrply(D3D)~\*{DDRM\*}
.xx "mps_msg_getmsgtyp,/" "" "mps_msg: mps_msg_getsrcmid," "" mps_msg(D3D)~\*{DDRM\*}
.xx "" "/mps_msg_getmsgtyp," "mps_msg_getbrlen,/" "" mps_msg(D3D)~\*{DDRM\*}
.xx "" "/mps_msg_getreqid," "mps_msg_getlsnid,/" "" mps_msg(D3D)~\*{DDRM\*}
.xx "" "mps_msg: mps_msg_getsrcmid," "mps_msg_getmsgtyp,/" "" mps_msg(D3D)~\*{DDRM\*}
.xx "" "/mps_msg_getbrlen," "mps_msg_getreqid,/" "" mps_msg(D3D)~\*{DDRM\*}
.xx "mps_msg_getmsgtyp,/" "mps_msg:" "mps_msg_getsrcmid," "" mps_msg(D3D)~\*{DDRM\*}
.xx "" "/mps_msg_getlsnid," "mps_msg_getsrcpid,/" "" mps_msg(D3D)~\*{DDRM\*}
.xx "" "/mps_msg_getsrcpid," "mps_msg_gettrnsid,/" "" mps_msg(D3D)~\*{DDRM\*}
.xx "" "/mps_msg_gettrnsid," "mps_msg_getudp,/" "" mps_msg(D3D)~\*{DDRM\*}
.xx "" "/mps_msg_getudp," "mps_msg_iscancel, mps_msg_iseot,/" "" mps_msg(D3D)~\*{DDRM\*}
.xx "" "/mps_msg_iseot, mps_msg_iserror," "mps_msg_iscompletion,/" "" mps_msg(D3D)~\*{DDRM\*}
.xx "" "/mps_msg_iscancel," "mps_msg_iseot, mps_msg_iserror,/" "" mps_msg(D3D)~\*{DDRM\*}
.xx "" "/mps_msg_iscancel, mps_msg_iseot," "mps_msg_iserror,/" "" mps_msg(D3D)~\*{DDRM\*}
.xx "decode/" "/mps_msg_iscompletion," "mps_msg_isreq: macros used to" "" mps_msg(D3D)~\*{DDRM\*}
.xx "" "" "mps_open_chan: opens a channel." "" mps_open_chan(D3D)~\*{DDRM\*}
.xx "" "/erand48, lrand48, nrand48," "mrand48, jrand48, srand48,/" "" drand48(3C)~\*{PRM\*}
.xx "" "" "ms: text formatting macros." "" ms(7)~\*{BSD\*}
.xx "structure." "" "msgb: STREAMS message block" "" msgb(D4DK)~\*{DDRM\*}
.xx "operations." "" "msgctl: message control" "" msgctl(2)~\*{PRM\*}
.xx "of data in a message." "" "msgdsize: return number of bytes" "" msgdsize(D3DK)~\*{DDRM\*}
.xx "" "" "msgget: get message queue." "" msgget(2)~\*{PRM\*}
.xx "operations." "" "msgop: msgsnd, msgrcv: message" "" msgop(2)~\*{PRM\*}
.xx "" "msgop: msgsnd," "msgrcv: message operations." "" msgop(2)~\*{PRM\*}
.xx "operations." "msgop:" "msgsnd, msgrcv: message" "" msgop(2)~\*{PRM\*}
.xx "" "/mcmp, min, mout, pow, gcd, rpow," "msqrt, sdiv, itom, xtom, mtox,/" "" mp(3X)~\*{BSD\*}
.xx "mout, pow, gcd,/" "mp:  madd," "msub, mult, mdiv, mcmp, min," "" mp(3X)~\*{BSD\*}
.xx "physical storage." "" "msync: synchronize memory with" "" msync(3C)~\*{PRM\*}
.xx "" "" "mt: magnetic tape control." "" mt(1)~\*{BSD\*}
.xx "" "/rpow, msqrt, sdiv, itom, xtom," "mtox, mfree: multiple precision/" "" mp(3X)~\*{BSD\*}
.xx "" "" "mtune: file format." "" mtune(4)~\*{ISDG\*}
.xx "" "" "mtune: file format." "" mtune(4)~\*{SARM\*}
.xx "pow, gcd,/" "mp:  madd, msub," "mult, mdiv, mcmp, min, mout," "" mp(3X)~\*{BSD\*}
.xx "rivers." "fd: Information for" "Multibus  flexible disk device d" "" fd(7iref)~\*{MBRMAN\*}
.xx "" "sgib: install" "Multibus bootstrap loaders." "" sgib(1iref)~\*{MBRMAN\*}
.xx "" "bootserver: starts a" "Multibus II boot service daemon." "" bootserver(1iref)~\*{MBRMAN\*}
.xx "" "clock:" "Multibus II clock driver." "" clock(7iref)~\*{MBRMAN\*}
.xx "format." "config:" "Multibus II configuration file" "" config(4iref)~\*{MBRMAN\*}
.xx "drivers." "hd: information for" "Multibus II hard disk device" "" hd(7iref)~\*{MBRMAN\*}
.xx "" "/icsgetrec: utilities to access" "Multibus II interconnect space." "" icsrd(8iref)~\*{MBRMAN\*}
.xx "Subsystem." "scsi:" "Multibus II iSBC 486/133SE SCSI" "" scsi(7iref)~\*{MBRMAN\*}
.xx "" "mb2a_receive: Receives incoming" "Multibus II messages in/" "" mb2a_receive(3tai)~\*{MBTAI\*}
.xx "" "mb2s_receive: Receives incoming" "Multibus II messages in/" "" mb2s_receive(3tai)~\*{MBTAI\*}
.xx "" "/Closes an asynchronous" "Multibus II transport endpoint." "" mb2a_closeport(3tai)~\*{MBTAI\*}
.xx "" "/Opens an asynchronous" "Multibus II transport endpoint." "" mb2a_openport(3tai)~\*{MBTAI\*}
.xx "" "/Closes a synchronous" "Multibus II transport endpoint." "" mb2s_closeport(3tai)~\*{MBTAI\*}
.xx "" "/Opens a synchronous" "Multibus II transport endpoint." "" mb2s_openport(3tai)~\*{MBTAI\*}
.xx "" "ramd:" "Multibus RAM disk driver." "" ramd(7iref)~\*{MBRMAN\*}
.xx "" "td:" "Multibus tape device drivers." "" td(7iref)~\*{MBRMAN\*}
.xx "" "mbchar: mbtowc, mblen, wctomb:" "multibyte character handling." "" mbchar(3C)~\*{PRM\*}
.xx "" "mbstring: mbstowcs, wcstombs:" "multibyte string functions." "" mbstring(3C)~\*{PRM\*}
.xx "" "/umountall: mount, unmount" "multiple file systems." "" mountall(1M)~\*{SARM\*}
.xx "" "/sdiv, itom, xtom, mtox, mfree:" "multiple precision integer/" "" mp(3X)~\*{BSD\*}
.xx "" "unshareall: share, unshare" "multiple resources." "shareall," shareall(1M)~\*{NUAG\*}
.xx "" "unshareall: share, unshare" "multiple resources." "shareall," shareall(1M)~\*{SARM\*}
.xx "" "cpout: copy out file archives to" "multiple volumes." "" cpout(1iref)~\*{MBRMAN\*}
.xx "used by xt driver." "xtproto:" "multiplexed channels protocol" "" xtproto(5)~\*{PRM\*}
.xx "used by xt driver." "xtproto:" "multiplexed channels protocol" "" xtproto(5)~\*{SARM\*}
.xx "windowing/" "xt: STREAMS-based" "multiplexed tty driver for AT&T" "" xt(7)~\*{SARM\*}
.xx "windowing/" "xt: STREAMS-based" "multiplexed tty driver for AT&T" "" xt(7)~\*{STRM\*}
.xx "" "poll: input/output" "multiplexing." "" poll(2)~\*{PRM\*}
.xx "" "poll: input/output" "multiplexing." "" poll(2)~\*{STRM\*}
.xx "" "select: synchronous I/O" "multiplexing." "" select(3C)~\*{NI\*}
.xx "terminals." "layers: layer" "multiplexor for windowing" "" layers(1)~\*{URM\*}
.xx "" "linkblk: STREAMS" "multiplexor link structure." "" linkblk(D4DK)~\*{DDRM\*}
.xx "" "rc2: run commands performed for" "multi-user environment." "" rc2(1M)~\*{SARM\*}
.xx "in memory." "mlock," "munlock: lock (or unlock) pages" "" mlock(3C)~\*{PRM\*}
.xx "address space." "mlockall," "munlockall: lock or unlock" "" mlockall(3C)~\*{PRM\*}
.xx "" "" "munmap: unmap pages of memory." "" munmap(2)~\*{PRM\*}
.xx "" "" "mv: move files." "" mv(1)~\*{URM\*}
.xx "" "curs_addch:  addch, waddch," "mvaddch, mvwaddch, echochar,/" "" curs_addch(3X)~\*{CHAR\*}
.xx "" "/waddchnstr, mvaddchstr," "mvaddchnstr, mvwaddchstr,/" "" curs_addchstr(3X)~\*{CHAR\*}
.xx "" "/waddchstr, waddchnstr," "mvaddchstr, mvaddchnstr,/" "" curs_addchstr(3X)~\*{CHAR\*}
.xx "" "waddstr, waddnstr, mvaddstr," "mvaddnstr, mvwaddstr,/" "/addnstr," curs_addstr(3X)~\*{CHAR\*}
.xx "" "/addnstr, waddstr, waddnstr," "mvaddstr, mvaddnstr, mvwaddstr,/" "" curs_addstr(3X)~\*{CHAR\*}
.xx "" "/tputs, putp, vidputs, vidattr," "mvcur, tigetflag, tigetnum,/" "" curs_terminfo(3X)~\*{CHAR\*}
.xx "" "curs_delch:  delch, wdelch," "mvdelch, mvwdelch: delete/" "" curs_delch(3X)~\*{CHAR\*}
.xx "" "/delwin, mvwin, subwin, derwin," "mvderwin, dupwin, wsyncup,/" "" curs_window(3X)~\*{CHAR\*}
.xx "" "" "mvdir: move a directory." "" mvdir(1M)~\*{SARM\*}
.xx "(or/" "curs_getch:  getch, wgetch," "mvgetch, mvwgetch, ungetch: get" "" curs_getch(3X)~\*{CHAR\*}
.xx "" "curs_getstr:  getstr, wgetstr," "mvgetstr, mvwgetstr, wgetnstr:/" "" curs_getstr(3X)~\*{CHAR\*}
.xx "and/" "curs_inch:  inch, winch," "mvinch, mvwinch: get a character" "" curs_inch(3X)~\*{CHAR\*}
.xx "" "/winchstr, winchnstr, mvinchstr," "mvinchnstr, mvwinchstr,/" "" curs_inchstr(3X)~\*{CHAR\*}
.xx "" "inchnstr, winchstr, winchnstr," "mvinchstr, mvinchnstr,/" "/inchstr," curs_inchstr(3X)~\*{CHAR\*}
.xx "get a/" "/winstr, winnstr, mvinstr," "mvinnstr, mvwinstr, mvwinnstr:" "" curs_instr(3X)~\*{CHAR\*}
.xx "" "curs_insch:  insch, winsch," "mvinsch, mvwinsch: insert a/" "" curs_insch(3X)~\*{CHAR\*}
.xx "" "winsstr, winsnstr, mvinsstr," "mvinsnstr, mvwinsstr,/" "/insnstr," curs_insstr(3X)~\*{CHAR\*}
.xx "" "/insnstr, winsstr, winsnstr," "mvinsstr, mvinsnstr, mvwinsstr,/" "" curs_insstr(3X)~\*{CHAR\*}
.xx "" "/instr, innstr, winstr, winnstr," "mvinstr, mvinnstr, mvwinstr,/" "" curs_instr(3X)~\*{CHAR\*}
.xx "" "curs_printw:  printw, wprintw," "mvprintw, mvwprintw, vwprintw:/" "" curs_printw(3X)~\*{CHAR\*}
.xx "" "curs_scanw:  scanw, wscanw," "mvscanw, mvwscanw, vwscanw:/" "" curs_scanw(3X)~\*{CHAR\*}
.xx "add a/" "/addch, waddch, mvaddch," "mvwaddch, echochar, wechochar:" "" curs_addch(3X)~\*{CHAR\*}
.xx "" "/mvaddchnstr, mvwaddchstr," "mvwaddchnstr: add string of/" "" curs_addchstr(3X)~\*{CHAR\*}
.xx "string/" "/mvaddchstr, mvaddchnstr," "mvwaddchstr, mvwaddchnstr: add" "" curs_addchstr(3X)~\*{CHAR\*}
.xx "" "/mvaddstr, mvaddnstr, mvwaddstr," "mvwaddnstr: add a string of/" "" curs_addstr(3X)~\*{CHAR\*}
.xx "" "/waddnstr, mvaddstr, mvaddnstr," "mvwaddstr, mvwaddnstr: add a/" "" curs_addstr(3X)~\*{CHAR\*}
.xx "cursor/" "/delch, wdelch, mvdelch," "mvwdelch: delete character under" "" curs_delch(3X)~\*{CHAR\*}
.xx "back)/" "/getch, wgetch, mvgetch," "mvwgetch, ungetch: get (or push" "" curs_getch(3X)~\*{CHAR\*}
.xx "" "/getstr, wgetstr, mvgetstr," "mvwgetstr, wgetnstr: get/" "" curs_getstr(3X)~\*{CHAR\*}
.xx "" "curs_window:  newwin, delwin," "mvwin, subwin, derwin, mvderwin,/" "" curs_window(3X)~\*{CHAR\*}
.xx "" "curs_inch:  inch, winch, mvinch," "mvwinch: get a character and its/" "" curs_inch(3X)~\*{CHAR\*}
.xx "" "/mvinchnstr, mvwinchstr," "mvwinchnstr: get a string of/" "" curs_inchstr(3X)~\*{CHAR\*}
.xx "string/" "/mvinchstr, mvinchnstr," "mvwinchstr, mvwinchnstr: get a" "" curs_inchstr(3X)~\*{CHAR\*}
.xx "" "/mvinstr, mvinnstr, mvwinstr," "mvwinnstr: get a string of/" "" curs_instr(3X)~\*{CHAR\*}
.xx "before/" "/insch, winsch, mvinsch," "mvwinsch: insert a character" "" curs_insch(3X)~\*{CHAR\*}
.xx "" "/mvinsstr, mvinsnstr, mvwinsstr," "mvwinsnstr: insert string before/" "" curs_insstr(3X)~\*{CHAR\*}
.xx "" "/winsnstr, mvinsstr, mvinsnstr," "mvwinsstr, mvwinsnstr: insert/" "" curs_insstr(3X)~\*{CHAR\*}
.xx "" "/winnstr, mvinstr, mvinnstr," "mvwinstr, mvwinnstr: get a/" "" curs_instr(3X)~\*{CHAR\*}
.xx "" "/printw, wprintw, mvprintw," "mvwprintw, vwprintw: print/" "" curs_printw(3X)~\*{CHAR\*}
.xx "" "/scanw, wscanw, mvscanw," "mvwscanw, vwscanw: convert/" "" curs_scanw(3X)~\*{CHAR\*}
.xx "" "devnm: device" "name." "" devnm(1M)~\*{SARM\*}
.xx "" "getlogin: get login" "name." "" getlogin(3C)~\*{PRM\*}
.xx "" "getsockname: get socket" "name." "" getsockname(3N)~\*{NI\*}
.xx "" "logname: get login" "name." "" logname(1)~\*{URM\*}
.xx "" "mkstemp: make a unique file" "name." "" mkstemp(3)~\*{BSD\*}
.xx "" "mktemp: make a unique file" "name." "" mktemp(3C)~\*{PRM\*}
.xx "" "pwd: working directory" "name." "" pwd(1)~\*{URM\*}
.xx "" "realpath: returns the real file" "name." "" realpath(3C)~\*{PRM\*}
.xx "" "/item_description: get menus item" "name and description." "" menu_item_name(3X)~\*{CHAR\*}
.xx "ID." "id: print the user" "name and ID, and group name and" "" id(1M)~\*{SARM\*}
.xx "ID." "id: print the user" "name and ID, and group name and" "" id(1M)~\*{URM\*}
.xx "" "the user name and ID, and group" "name and ID." "id: print" id(1M)~\*{SARM\*}
.xx "" "the user name and ID, and group" "name and ID." "id: print" id(1M)~\*{URM\*}
.xx "" "the last element of a path" "name." "basename: return" basename(3G)~\*{PRM\*}
.xx "" "hosts: host" "name data base." "" hosts(4)~\*{NI\*}
.xx "" "hosts: host" "name data base." "" hosts(4)~\*{NUAG\*}
.xx "" "hosts: host" "name data base." "" hosts(4)~\*{SARM\*}
.xx "" "networks: network" "name data base." "" networks(4)~\*{NUAG\*}
.xx "" "networks: network" "name data base." "" networks(4)~\*{SARM\*}
.xx "" "protocols: protocol" "name data base." "" protocols(4)~\*{NUAG\*}
.xx "" "protocols: protocol" "name data base." "" protocols(4)~\*{SARM\*}
.xx "" "whois: Internet user" "name directory service." "" whois(1)~\*{NUAG\*}
.xx "" "whois: Internet user" "name directory service." "" whois(1)~\*{URM\*}
.xx "" "tmpnam, tempnam: create a" "name for a temporary file." "" tmpnam(3S)~\*{PRM\*}
.xx "" "ctermid: generate file" "name for terminal." "" ctermid(3S)~\*{PRM\*}
.xx "descriptor." "fdetach: detach a" "name from a STREAMS-based file" "" fdetach(1M)~\*{STRM\*}
.xx "descriptor." "fdetach: detach a" "name from a STREAMS-based file" "" fdetach(3C)~\*{STRM\*}
.xx "" "getpw: get" "name from UID." "" getpw(3C)~\*{PRM\*}
.xx "" "return value for environment" "name." "getenv:" getenv(3C)~\*{PRM\*}
.xx "" "timezone: get time zone" "name given offset from GMT." "" timezone(3C)~\*{BSD\*}
.xx "" "nlist: get entries from" "name list." "" nlist(3E)~\*{PRM\*}
.xx "" "nm: print" "name list of an object file." "" nm(1)~\*{PRM\*}
.xx "" "rename: change the" "name of a file." "" rename(1)~\*{URM\*}
.xx "" "rename: change the" "name of a file." "" rename(2)~\*{PRM\*}
.xx "" "/report the parent directory" "name of a file path name." "" dirname(3G)~\*{PRM\*}
.xx "" "ttyname, isatty: find" "name of a terminal." "" ttyname(3C)~\*{PRM\*}
.xx "controller." "sdi_name: get" "name of addressed SCSI" "" sdi_name(D3I)~\*{SCSI\*}
.xx "" "getpeername: get" "name of connected peer." "" getpeername(3N)~\*{NI\*}
.xx "" "/sethostname: get/set" "name of current host." "" gethostname(3)~\*{BSD\*}
.xx "" "hostname: set or print" "name of current host system." "" hostname(1)~\*{BSD\*}
.xx "domain." "domainname: get/set" "name of current secure RPC" "" domainname(1M)~\*{NI\*}
.xx "" "uname: print" "name of current UNIX system." "" uname(1)~\*{URM\*}
.xx "" "uname: get" "name of current UNIX system." "" uname(2)~\*{PRM\*}
.xx "master." "ypwhich: return" "name of NIS server or map" "" ypwhich(1)~\*{NI\*}
.xx "pseudo-terminal/" "ptsname: get" "name of the slave" "" ptsname(3C)~\*{STRM\*}
.xx "" "tty: get the" "name of the terminal." "" tty(1)~\*{URM\*}
.xx "" "cuserid: get character login" "name of the user." "" cuserid(3S)~\*{PRM\*}
.xx "" "nlsprovider: get" "name of transport provider." "" nlsprovider(3N)~\*{NI\*}
.xx "" "directory name of a file path" "name." "/report the parent" dirname(3G)~\*{PRM\*}
.xx "" "named, in.named: Internet domain" "name server." "" named(1M)~\*{NUAG\*}
.xx "" "named, in.named: Internet domain" "name server." "" named(1M)~\*{SARM\*}
.xx "" "tnamed, in.tnamed: DARPA trivial" "name server." "" tnamed(1M)~\*{NUAG\*}
.xx "" "tnamed, in.tnamed: DARPA trivial" "name server." "" tnamed(1M)~\*{SARM\*}
.xx "" "rfmaster: Remote File Sharing" "name server master file." "" rfmaster(4)~\*{NUAG\*}
.xx "" "rfmaster: Remote File Sharing" "name server master file." "" rfmaster(4)~\*{SARM\*}
.xx "" "nsquery: Remote File Sharing" "name server query." "" nsquery(1M)~\*{NUAG\*}
.xx "" "nsquery: Remote File Sharing" "name server query." "" nsquery(1M)~\*{SARM\*}
.xx "" "/configuration file for" "name server routines." "" resolv.conf(4)~\*{NUAG\*}
.xx "" "/configuration file for" "name server routines." "" resolv.conf(4)~\*{SARM\*}
.xx "" "nslookup: query" "name servers interactively." "" nslookup(1M)~\*{NUAG\*}
.xx "" "nslookup: query" "name servers interactively." "" nslookup(1M)~\*{SARM\*}
.xx "" "to an object in the file system" "name space." "/file descriptor" fattach(3C)~\*{STRM\*}
.xx "" "bind: bind a" "name to a socket." "" bind(3N)~\*{NI\*}
.xx "" "search for named file in" "named directories." "pathfind:" pathfind(3G)~\*{PRM\*}
.xx "" "pathfind: search for" "named file in named directories." "" pathfind(3G)~\*{PRM\*}
.xx "name server." "" "named, in.named: Internet domain" "" named(1M)~\*{NUAG\*}
.xx "name server." "" "named, in.named: Internet domain" "" named(1M)~\*{SARM\*}
.xx "" "mailalias: translate mail alias" "names." "" mailalias(1)~\*{URM\*}
.xx "system." "ff (generic): list file" "names and statistics for a file" "" ff(1M)~\*{SARM\*}
.xx "file/" "ff (ufs): list file" "names and statistics for a ufs" "" ff(1M)~\*{SARM\*}
.xx "" "deliver portions of path" "names." "basename, dirname:" basename(1)~\*{URM\*}
.xx "" "a list of all valid group" "names." "dispgid: displays" dispgid(1)~\*{ISDG\*}
.xx "" "a list of all valid group" "names." "dispgid: displays" dispgid(1)~\*{SARM\*}
.xx "" "a list of all valid user" "names." "dispuid: displays" dispuid(1)~\*{ISDG\*}
.xx "" "a list of all valid user" "names." "dispuid: displays" dispuid(1)~\*{SARM\*}
.xx "" "File Sharing domain and network" "names." "dname: print Remote" dname(1M)~\*{NUAG\*}
.xx "" "File Sharing domain and network" "names." "dname: print Remote" dname(1M)~\*{SARM\*}
.xx "" "term: conventional" "names for terminals." "" term(5)~\*{SARM\*}
.xx "file/" "ncheck (s5): generate path" "names versus i-numbers for s5" "" ncheck(1M)~\*{SARM\*}
.xx "" "generate a  list of path" "names vs i-numbers." "/(generic):" ncheck(1M)~\*{SARM\*}
.xx "" "/generic transport" "name-to-address translation." "" netdir(3N)~\*{NI\*}
.xx "short interval." "" "nap: suspend execution for a" "" nap(2)~\*{ACG\*}
.xx "" "setsyx, ripoffline, curs_set," "napms: low-level curses/" "/getsyx," curs_kernel(3X)~\*{CHAR\*}
.xx "" "nl_types:" "native language data types." "" nl_types(5)~\*{PRM\*}
.xx "" "nl_types:" "native language data types." "" nl_types(5)~\*{SARM\*}
.xx "processing language." "" "nawk: pattern scanning and" "" nawk(1)~\*{URM\*}
.xx "access to a resource/" "waitsem," "nbwaitsem: await and check" "" waitsem(2)~\*{ACG\*}
.xx " list of path names vs/" "" "ncheck (generic): generate a" "" ncheck(1M)~\*{SARM\*}
.xx "versus i-numbers for s5 file/" "" "ncheck (s5): generate path names" "" ncheck(1M)~\*{SARM\*}
.xx "versus i-numbers for ufs file/" "" "ncheck (ufs): generate pathnames" "" ncheck(1M)~\*{SARM\*}
.xx "dbm_delete, dbm_error,/" "" "ndbm:  dbm_clearerr, dbm_close," "" ndbm(3)~\*{BSD\*}
.xx "mathematics." "eqn," "neqn, checkeq: typeset" "" eqn(1)~\*{BSD\*}
.xx "NETPATH/" "getnetpath: get" "netconfig entry corresponding to" "" getnetpath(3N)~\*{NI\*}
.xx "database." "" "netconfig: network configuration" "" netconfig(4)~\*{NI\*}
.xx "database." "" "netconfig: network configuration" "" netconfig(4)~\*{SARM\*}
.xx "taddr2uaddr,/" "/netdir_getbyaddr," "netdir_free, netdir_mergeaddr," "" netdir(3N)~\*{NI\*}
.xx "" "netdir_getbyname," "netdir_getbyaddr, netdir_free,/" "" netdir(3N)~\*{NI\*}
.xx "netdir_getbyaddr, netdir_free,/" "" "netdir_getbyname," "" netdir(3N)~\*{NI\*}
.xx "" "/netdir_getbyaddr, netdir_free," "netdir_mergeaddr, taddr2uaddr,/" "" netdir(3N)~\*{NI\*}
.xx "" "/taddr2uaddr, uaddr2taddr," "netdir_perror, netdir_sperror:/" "" netdir(3N)~\*{NI\*}
.xx "" "/uaddr2taddr, netdir_perror," "netdir_sperror: generic/" "" netdir(3N)~\*{NI\*}
.xx "base." "" "netmasks: network mask data" "" netmasks(4)~\*{SARM\*}
.xx "" "/key_gendes, key_setsecret," "netname2host, netname2user,/" "" secure_rpc(3N)~\*{NI\*}
.xx "" "/key_setsecret, netname2host," "netname2user, user2netname:/" "" secure_rpc(3N)~\*{NI\*}
.xx "" "netconfig entry corresponding to" "NETPATH component." "/get" getnetpath(3N)~\*{NI\*}
.xx "data." "" "netrc: file for ftp remote login" "" netrc(4)~\*{NUAG\*}
.xx "data." "" "netrc: file for ftp remote login" "" netrc(4)~\*{SARM\*}
.xx "" "" "netstat: show network status." "" netstat(1M)~\*{NUAG\*}
.xx "" "" "netstat: show network status." "" netstat(1M)~\*{SARM\*}
.xx "" "rwall: write to all users over a" "network." "" rwall(1M)~\*{NI\*}
.xx "" "rwall: write to all users over a" "network." "" rwall(1M)~\*{NUAG\*}
.xx "" "convert values between host and" "network byte order." "/ntohs:" byteorder(3N)~\*{NI\*}
.xx "entry." "getnetconfig: get" "network configuration database" "" getnetconfig(3N)~\*{NI\*}
.xx "" "netconfig:" "network configuration database." "" netconfig(4)~\*{NI\*}
.xx "" "netconfig:" "network configuration database." "" netconfig(4)~\*{SARM\*}
.xx "" "setnetent, endnetent: get" "network entry." "/getnetbyname," getnetent(3N)~\*{NI\*}
.xx "" "nfsstat:" "Network File System statistics." "" nfsstat(1M)~\*{SARM\*}
.xx "" "/sethostent, endhostent: get" "network host entry." "" gethostent(3N)~\*{NI\*}
.xx "" "ICMP ECHO_REQUEST packets to" "network hosts." "ping: send" ping(1M)~\*{NUAG\*}
.xx "" "ICMP ECHO_REQUEST packets to" "network hosts." "ping: send" ping(1M)~\*{SARM\*}
.xx "(NIS) dbm file." "makedbm: make a" "Network Information Service" "" makedbm(1M)~\*{NI\*}
.xx "" "updaters: configuration file for" "Network Information Service/" "" updaters(4)~\*{NI\*}
.xx "(NIS) database and/" "ypfiles: the" "Network Information Service" "" ypfiles(4)~\*{NI\*}
.xx "" "lo: software loopback" "network interface." "" lo(7)~\*{NUAG\*}
.xx "" "lo: software loopback" "network interface." "" lo(7)~\*{SARM\*}
.xx "" "ifconfig: configure" "network interface parameters." "" ifconfig(1M)~\*{NUAG\*}
.xx "" "ifconfig: configure" "network interface parameters." "" ifconfig(1M)~\*{SARM\*}
.xx "" "properties of Internet Protocol" "network interfaces." "if: general" if(7)~\*{NUAG\*}
.xx "" "listen:" "network listener daemon." "" listen(1M)~\*{SARM\*}
.xx "administration." "nlsadmin:" "network listener service" "" nlsadmin(1M)~\*{SARM\*}
.xx "" "lockd:" "network lock daemon." "" lockd(1M)~\*{NUAG\*}
.xx "" "netmasks:" "network mask data base." "" netmasks(4)~\*{SARM\*}
.xx "" "networks:" "network name data base." "" networks(4)~\*{NUAG\*}
.xx "" "networks:" "network name data base." "" networks(4)~\*{SARM\*}
.xx "" "Remote File Sharing domain and" "network names." "dname: print" dname(1M)~\*{NUAG\*}
.xx "" "Remote File Sharing domain and" "network names." "dname: print" dname(1M)~\*{SARM\*}
.xx "" "routed:" "network routing daemon." "" routed(1M)~\*{NUAG\*}
.xx "" "routed:" "network routing daemon." "" routed(1M)~\*{SARM\*}
.xx "" "system supporting for packet" "network routing." "routing:" routing(4)~\*{NUAG\*}
.xx "" "system supporting for packet" "network routing." "routing:" routing(4)~\*{SARM\*}
.xx "" "rpc.rwalld:" "network rwall server." "" rwalld(1M)~\*{NI\*}
.xx "" "rpc.rwalld:" "network rwall server." "" rwalld(1M)~\*{NUAG\*}
.xx "" "data in order to check the" "network." "spray: scatter" spray(3N)~\*{NI\*}
.xx "" "netstat: show" "network status." "" netstat(1M)~\*{NUAG\*}
.xx "" "netstat: show" "network status." "" netstat(1M)~\*{SARM\*}
.xx "" "statd:" "network status monitor." "" statd(1M)~\*{NUAG\*}
.xx "" "rpc.rusersd:" "network username server." "" rusersd(1M)~\*{NI\*}
.xx "" "rpc.rusersd:" "network username server." "" rusersd(1M)~\*{NUAG\*}
.xx "" "intro: introduction to" "networking functions and/" "" intro(3N)~\*{NI\*}
.xx "base." "" "networks: network name data" "" networks(4)~\*{NUAG\*}
.xx "base." "" "networks: network name data" "" networks(4)~\*{SARM\*}
.xx "base for the mail aliases file." "" "newaliases: rebuild the data" "" newaliases(1M)~\*{BSD\*}
.xx "link_field,/" "form_field_new:" "new_field, dup_field," "" form_field_new(3X)~\*{CHAR\*}
.xx "" "form_fieldtype:" "new_fieldtype, free_fieldtype,/" "" form_fieldtype(3X)~\*{CHAR\*}
.xx "text file." "" "newform: change the format of a" "" newform(1)~\*{URM\*}
.xx "destroy forms." "form_new:" "new_form, free_form: create and" "" form_new(3X)~\*{CHAR\*}
.xx "" "" "newgrp: log in to a new group." "" newgrp(1M)~\*{SARM\*}
.xx "" "" "newgrp: log in to a new group." "" newgrp(1M)~\*{URM\*}
.xx "destroy menus/" "menu_item_new:" "new_item, free_item: create and" "" menu_item_new(3X)~\*{CHAR\*}
.xx "publickey database." "" "newkey: create a new key in the" "" newkey(1M)~\*{NI\*}
.xx "publickey database." "" "newkey: create a new key in the" "" newkey(1M)~\*{NUAG\*}
.xx "destroy menus." "menu_new:" "new_menu, free_menu: create and" "" menu_new(3X)~\*{CHAR\*}
.xx "pnoutrefresh,/" "curs_pad:" "newpad, subpad, prefresh," "" curs_pad(3X)~\*{CHAR\*}
.xx "" "form_new_page:  set_new_page," "new_page: forms pagination." "" form_new_page(3X)~\*{CHAR\*}
.xx "destroy panels." "panel_new:" "new_panel, del_panel: create and" "" panel_new(3X)~\*{CHAR\*}
.xx "" "news: print" "news items." "" news(1)~\*{URM\*}
.xx "" "" "news: print news items." "" news(1)~\*{URM\*}
.xx "" "curs_initscr:  initscr," "newterm, endwin, isendwin,/" "" curs_initscr(3X)~\*{CHAR\*}
.xx "" "" "newvt: opens virtual terminals." "" newvt(1)~\*{ISDG\*}
.xx "" "" "newvt: opens virtual terminals." "" newvt(1)~\*{URM\*}
.xx "derwin, mvderwin,/" "curs_window:" "newwin, delwin, mvwin, subwin," "" curs_window(3X)~\*{CHAR\*}
.xx "" "bgets: read stream up to" "next delimiter." "" bgets(3G)~\*{PRM\*}
.xx "" "getq: get the" "next message from a queue." "" getq(D3DK)~\*{DDRM\*}
.xx "" "getmsg: get" "next message off a stream." "" getmsg(2)~\*{PRM\*}
.xx "" "getmsg: get" "next message off a stream." "" getmsg(2)~\*{STRM\*}
.xx "" "putnext: send a message to the" "next queue." "" putnext(D3DK)~\*{DDRM\*}
.xx "" "SAMESTR: test if" "next queue is same type." "" SAMESTR(D3DK)~\*{DDRM\*}
.xx "" "/logb, modf, modff, modfl," "nextafter, scalb, scalbl:/" "" frexp(3C)~\*{PRM\*}
.xx "" "/fetch, store, delete, firstkey," "nextkey: data base subroutines." "" dbm(3X)~\*{BSD\*}
.xx "" "/fetch, store, delete, firstkey," "nextkey: database subroutines." "" dbm(3)~\*{NI\*}
.xx "" "biod:" "NFS daemon." "" biod(1M)~\*{NUAG\*}
.xx "" "biod:" "NFS daemon." "" biod(1M)~\*{SARM\*}
.xx "" "nfsd:" "NFS daemon." "" nfsd(1M)~\*{NUAG\*}
.xx "" "nfsd:" "NFS daemon." "" nfsd(1M)~\*{SARM\*}
.xx "" "automount: automatically mount" "NFS file systems." "" automount(1M)~\*{NUAG\*}
.xx "" "automount: automatically mount" "NFS file systems." "" automount(1M)~\*{SARM\*}
.xx "" "mountd:" "NFS mount request server." "" mountd(1M)~\*{NUAG\*}
.xx "" "mountd:" "NFS mount request server." "" mountd(1M)~\*{SARM\*}
.xx "mounting by/" "share: make local" "NFS resource available for" "" share(1M)~\*{NUAG\*}
.xx "mounting by/" "share: make local" "NFS resource available for" "" share(1M)~\*{SARM\*}
.xx "" "dfmounts: display mounted" "NFS resource information." "" dfmounts(1M)~\*{NUAG\*}
.xx "" "dfmounts: display mounted" "NFS resource information." "" dfmounts(1M)~\*{SARM\*}
.xx "mounting by/" "unshare: make local" "NFS resource unavailable for" "" unshare(1M)~\*{NUAG\*}
.xx "mounting by/" "unshare: make local" "NFS resource unavailable for" "" unshare(1M)~\*{SARM\*}
.xx "" "mount: mount remote" "NFS resources." "" mount(1M)~\*{NUAG\*}
.xx "" "mount: mount remote" "NFS resources." "" mount(1M)~\*{SARM\*}
.xx "" "dfshares: list available" "NFS resources from remote/" "" dfshares(1M)~\*{NUAG\*}
.xx "" "dfshares: list available" "NFS resources from remote/" "" dfshares(1M)~\*{SARM\*}
.xx "" "" "nfsd: NFS daemon." "" nfsd(1M)~\*{NUAG\*}
.xx "" "" "nfsd: NFS daemon." "" nfsd(1M)~\*{SARM\*}
.xx "statistics." "" "nfsstat: Network File System" "" nfsstat(1M)~\*{SARM\*}
.xx "" "ftw," "nftw: walk a file tree." "" ftw(3C)~\*{PRM\*}
.xx "the specified size." "" "ngeteblk: get an empty buffer of" "" ngeteblk(D3DK)~\*{DDRM\*}
.xx "time-sharing process." "" "nice: change priority of a" "" nice(2)~\*{PRM\*}
.xx "process." "" "nice: change priority of a" "" nice(3C)~\*{BSD\*}
.xx "priority." "" "nice: run a command at low" "" nice(1)~\*{URM\*}
.xx "" "/yperr_string, ypprot_err:" "NIS client interface." "" ypclnt(3N)~\*{NI\*}
.xx "" "ypcat: print values in a" "NIS data base." "" ypcat(1)~\*{NI\*}
.xx "" "/the Network Information Service" "(NIS) database and directory/" "" ypfiles(4)~\*{NI\*}
.xx "" "a Network Information Service" "(NIS) dbm file." "makedbm: make" makedbm(1M)~\*{NI\*}
.xx "" "yp_update: change" "NIS information." "" ypupdate(3N)~\*{NI\*}
.xx "" "ypupdated: server for changing" "NIS information." "" ypupdated(1M)~\*{NI\*}
.xx "" "of one or more keys from the" "NIS map." "/print the value" ypmatch(1)~\*{NI\*}
.xx "" "force propagation of a changed" "NIS map." "yppush:" yppush(1M)~\*{NI\*}
.xx "" "ypserv, ypbind:" "NIS server and binder processes." "" ypserv(1M)~\*{NI\*}
.xx "" "version of the map at the" "NIS server host." "/return current" yppoll(1M)~\*{NI\*}
.xx "" "ypwhich: return name of" "NIS server or map master." "" ypwhich(1)~\*{NI\*}
.xx "" "for Network Information Service" "(NIS) updating." "/file" updaters(4)~\*{NI\*}
.xx "" "" "nl: line numbering filter." "" nl(1)~\*{URM\*}
.xx "" "/setscrreg, wsetscrreg, scrollok," "nl, nonl: curses terminal output/" "" curs_outopts(3X)~\*{CHAR\*}
.xx "list." "" "nlist: get entries from name" "" nlist(3E)~\*{PRM\*}
.xx "table." "" "nlist: get entries from symbol" "" nlist(3)~\*{BSD\*}
.xx "information." "" "nl_langinfo: language" "" nl_langinfo(3C)~\*{PRM\*}
.xx "service administration." "" "nlsadmin: network listener" "" nlsadmin(1M)~\*{SARM\*}
.xx "passed via the listener." "" "nlsgetcall: get client's data" "" nlsgetcall(3N)~\*{NI\*}
.xx "transport provider." "" "nlsprovider: get name of" "" nlsprovider(3N)~\*{NI\*}
.xx "listener service request/" "" "nlsrequest: format and send" "" nlsrequest(3N)~\*{NI\*}
.xx "types." "" "nl_types: native language data" "" nl_types(5)~\*{PRM\*}
.xx "types." "" "nl_types: native language data" "" nl_types(5)~\*{SARM\*}
.xx "file." "" "nm: print name list of an object" "" nm(1)~\*{PRM\*}
.xx "" "curs_inopts:  cbreak," "nocbreak, echo, noecho,/" "" curs_inopts(3X)~\*{CHAR\*}
.xx "" "/intrflush, keypad, meta," "nodelay, notimeout, raw, noraw,/" "" curs_inopts(3X)~\*{CHAR\*}
.xx "of nodes." "idmknod: removes" "nodes and reads specifications" "" idmknod(1M)~\*{ISDG\*}
.xx "of nodes." "idmknod: removes" "nodes and reads specifications" "" idmknod(1M)~\*{SARM\*}
.xx "" "/information on an ethernet" "node's ethernet controller." "" enetinfo(1iref)~\*{MBRMAN\*}
.xx "" "and reads specifications of" "nodes." "idmknod: removes nodes" idmknod(1M)~\*{ISDG\*}
.xx "" "and reads specifications of" "nodes." "idmknod: removes nodes" idmknod(1M)~\*{SARM\*}
.xx "keypad,/" "/cbreak, nocbreak, echo," "noecho, halfdelay, intrflush," "" curs_inopts(3X)~\*{CHAR\*}
.xx "being scheduled." "" "noenable: prevent a queue from" "" noenable(D3DK)~\*{DDRM\*}
.xx "hangups and quits." "" "nohup: run a command immune to" "" nohup(1)~\*{URM\*}
.xx "" "/wsetscrreg, scrollok, nl," "nonl: curses terminal output/" "" curs_outopts(3X)~\*{CHAR\*}
.xx "" "setjmp, longjmp:" "non-local goto." "" setjmp(3C)~\*{PRM\*}
.xx "" "_longjmp, sigsetjmp, siglongjmp:" "non-local goto." "/_setjmp," setjmp(3)~\*{BSD\*}
.xx "state." "sigsetjmp, siglongjmp: a" "non-local goto with signal" "" sigsetjmp(3C)~\*{PRM\*}
.xx "" "chpoll: poll entry point for a" "non-STREAMS character driver." "" chpoll(D2DK)~\*{DDRM\*}
.xx "" "/nodelay, notimeout, raw, noraw," "noqiflush, qiflush, timeout,/" "" curs_inopts(3X)~\*{CHAR\*}
.xx "" "/meta, nodelay, notimeout, raw," "noraw, noqiflush, qiflush,/" "" curs_inopts(3X)~\*{CHAR\*}
.xx "" "rfuadmin: Remote File Sharing" "notification shell script." "" rfuadmin(1M)~\*{NUAG\*}
.xx "" "rfuadmin: Remote File Sharing" "notification shell script." "" rfuadmin(1M)~\*{SARM\*}
.xx "arrival of new mail." "" "notify: notify user of the" "" notify(1)~\*{URM\*}
.xx "new mail." "notify:" "notify user of the arrival of" "" notify(1)~\*{URM\*}
.xx "" "/keypad, meta, nodelay," "notimeout, raw, noraw,/" "" curs_inopts(3X)~\*{CHAR\*}
.xx "" "drand48, erand48, lrand48," "nrand48, mrand48, jrand48,/" "" drand48(3C)~\*{PRM\*}
.xx "report possible/" "checknr: check" "nroff and troff input files;" "" checknr(1)~\*{BSD\*}
.xx "display or line-printer." "" "nroff: format documents for" "" nroff(1)~\*{BSD\*}
.xx "" "tbl: format tables for" "nroff or troff." "" tbl(1)~\*{BSD\*}
.xx "" "and eliminate .so requests from" "nroff or troff input." "/resolve" soelim(1)~\*{BSD\*}
.xx "constructs." "deroff: remove" "nroff, troff, tbl and eqn" "" deroff(1)~\*{BSD\*}
.xx "constructs." "deroff: remove" "nroff/troff, tbl, and eqn" "" deroff(1)~\*{URM\*}
.xx "interactively." "" "nslookup: query name servers" "" nslookup(1M)~\*{NUAG\*}
.xx "interactively." "" "nslookup: query name servers" "" nslookup(1M)~\*{SARM\*}
.xx "name server query." "" "nsquery: Remote File Sharing" "" nsquery(1M)~\*{NUAG\*}
.xx "name server query." "" "nsquery: Remote File Sharing" "" nsquery(1M)~\*{SARM\*}
.xx "" "byteorder, htonl, htons," "ntohl, ntohs: convert values/" "" byteorder(3N)~\*{NI\*}
.xx "" "byteorder, htonl, htons, ntohl," "ntohs: convert values between/" "" byteorder(3N)~\*{NI\*}
.xx "" "null: the" "null file." "" null(7)~\*{SARM\*}
.xx "" "" "null: the null file." "" null(7)~\*{SARM\*}
.xx "" "/dodisk, lastlogin, monacct," "nulladm, prctmp, prdaily,/" "" acctsh(1M)~\*{SARM\*}
.xx "" "random: generate a random" "number." "" random(1)~\*{ACG\*}
.xx "" "to SCSI pass-through device" "number." "/convert device number" sdi_getdev(D3I)~\*{SCSI\*}
.xx "" "to internal major device" "number." "/convert external" etoimajor(D3DK)~\*{DDRM\*}
.xx "" "to external major device" "number." "/convert internal" itoemajor(D3DK)~\*{DDRM\*}
.xx "" "rpc: rpc program" "number data base." "" rpc(4)~\*{NI\*}
.xx "" "obtain the prime factors of a" "number." "factor:" factor(1)~\*{URM\*}
.xx "" "geterror: retrieve error" "number from a buffer header." "" geterror(D3DK)~\*{DDRM\*}
.xx "" "makedevice: make device" "number from major and minor/" "" makedevice(D3DK)~\*{DDRM\*}
.xx "" "rand, srand: simple random" "number generator." "" rand(3C)~\*{BSD\*}
.xx "" "/setstate: better random" "number generator; routines for/" "" random(3)~\*{BSD\*}
.xx "" "get external major device" "number." "getemajor:" getemajor(D3DK)~\*{DDRM\*}
.xx "" "get external minor device" "number." "geteminor:" geteminor(D3DK)~\*{DDRM\*}
.xx "" "returns the current frameID" "number." "getfrm:" getfrm(1F)~\*{CHAR\*}
.xx "" "get internal major device" "number." "getmajor:" getmajor(D3DK)~\*{DDRM\*}
.xx "" "get internal minor device" "number." "getminor:" getminor(D3DK)~\*{DDRM\*}
.xx "" "/symbol table, debugging and line" "number information from an/" "" strip(1)~\*{PRM\*}
.xx "" "major, minor: manage a device" "number." "makedev," makedev(3C)~\*{PRM\*}
.xx "" "addresses to RPC program" "number mapper." "/universal" rpcbind(1M)~\*{NI\*}
.xx "" "addresses to RPC program" "number mapper." "/universal" rpcbind(1M)~\*{NUAG\*}
.xx "" "bzero: clear memory for a given" "number of bytes." "" bzero(D3DK)~\*{DDRM\*}
.xx "message." "msgdsize: return" "number of bytes of data in a" "" msgdsize(D3DK)~\*{DDRM\*}
.xx "" "execution for a specified" "number of clock ticks." "/process" delay(D3DK)~\*{DDRM\*}
.xx "directory or/" "du: display the" "number of disk blocks used per" "" du(1M)~\*{BSD\*}
.xx "" "df (generic), dfspace: report" "number of free disk blocks and/" "" df(""1M"")~\*{SARM\*}
.xx "" "df (generic), dfspace: report" "number of free disk blocks and/" "" df(""1M"")~\*{URM\*}
.xx "" "/reads or writes a specified" "number of interconnect space/" "" ics_rdwr(D3D)~\*{DDRM\*}
.xx "" "qsize: find the" "number of messages on a queue." "" qsize(D3DK)~\*{DDRM\*}
.xx "" "string to double-precision" "number." "/strtold, atof: convert" strtod(3C)~\*{PRM\*}
.xx "" "ver_no: SCSI version" "number structure." "" ver_no(D4I)~\*{SCSI\*}
.xx "" "sdi_getdev: convert device" "number to SCSI pass-through/" "" sdi_getdev(D3I)~\*{SCSI\*}
.xx "" "gcvtl: convert floating-point" "number to string." "/fcvtl, gcvt," ecvt(3C)~\*{PRM\*}
.xx "" "determine type of floating-point" "number." "/unordered, unorderedl:" isnan(3C)~\*{PRM\*}
.xx "" "nl: line" "numbering filter." "" nl(1)~\*{URM\*}
.xx "" "errnos: error" "numbers." "" errnos(D5DK)~\*{DDRM\*}
.xx "" "signals: signal" "numbers." "" signals(D5DK)~\*{DDRM\*}
.xx "" "install random inode generation" "numbers." "fsirand:" fsirand(1)~\*{BSD\*}
.xx "" "distributed pseudo-random" "numbers." "/generate uniformly" drand48(3C)~\*{PRM\*}
.xx "" "to system calls and error" "numbers." "intro: introduction" intro(2)~\*{PRM\*}
.xx "" "number from major and minor" "numbers." "/make device" makedevice(D3DK)~\*{DDRM\*}
.xx "" "/menu_format: set and get maximum" "numbers of rows and columns in/" "" menu_format(3X)~\*{CHAR\*}
.xx "" "help: ask for help with message" "numbers or SCCS commands." "" help(1)~\*{PRM\*}
.xx "" "parts of floating-point" "numbers." "/scalbl: manipulate" frexp(3C)~\*{PRM\*}
.xx "" "localeconv: get" "numeric formatting information." "" localeconv(3C)~\*{PRM\*}
.xx "current host." "hostid: print the" "numeric identifier of the" "" hostid(1)~\*{BSD\*}
.xx "" "dlclose: close a shared" "object." "" dlclose(3X)~\*{PRM\*}
.xx "" "dlopen: open a shared" "object." "" dlopen(3X)~\*{PRM\*}
.xx "" ".ott: FACE" "object architecture information." "" ott(4)~\*{SARM\*}
.xx "" "dis:" "object code disassembler." "" \*pdis(1)~\*{PRM\*}
.xx "" "address of a symbol in shared" "object." "dlsym: get the" dlsym(3X)~\*{PRM\*}
.xx "DMD terminal." "wtinit:" "object downloader for the 5620" "" wtinit(1M)~\*{SARM\*}
.xx "" "dump: dump selected parts of an" "object file." "" dump(1)~\*{PRM\*}
.xx "" "elf_end: finish using an" "object file." "" elf_end(3E)~\*{PRM\*}
.xx "" "nm: print name list of an" "object file." "" nm(1)~\*{PRM\*}
.xx "" "elf:" "object file access library." "" elf(3E)~\*{PRM\*}
.xx "" "line number information from an" "object file." "/debugging and" strip(1)~\*{PRM\*}
.xx "" "get the base offset for an" "object file." "elf_getbase:" elf_getbase(3E)~\*{PRM\*}
.xx "" "/retrieve class-dependent" "object file header." "" elf_getehdr(3E)~\*{PRM\*}
.xx "" "the comment section of an" "object file." "mcs: manipulate" mcs(1)~\*{PRM\*}
.xx "" "find printable strings in an" "object file or binary." "strings:" strings(1)~\*{URM\*}
.xx "" "cof2elf: COFF to ELF" "object file translation." "" cof2elf(1)~\*{PRM\*}
.xx "" "return the size of an" "object file type." "/elf32_fsize:" elf_fsize(3E)~\*{PRM\*}
.xx "" "filehdr: file header for common" "object files." "" filehdr(4)~\*{SARM\*}
.xx "" "ld: link editor for" "object files." "" ld(1)~\*{PRM\*}
.xx "" "print section sizes in bytes of" "object files." "size:" size(1)~\*{PRM\*}
.xx "space." "/file descriptor to an" "object in the file system name" "" fattach(3C)~\*{STRM\*}
.xx "" "find ordering relation for an" "object library." "lorder:" lorder(1)~\*{PRM\*}
.xx "" "/loads 8086 absolute library and" "object module formats." "" download(1iref)~\*{MBRMAN\*}
.xx "number." "factor:" "obtain the prime factors of a" "" factor(1)~\*{URM\*}
.xx "for physical/" "physmap:" "obtain virtual address mapping" "" physmap(D3D)~\*{DDRM\*}
.xx "" "processes that an event has" "occurred." "/inform polling" pollwakeup(D3DK)~\*{DDRM\*}
.xx "" "process execution pending" "occurrence of an event." "/suspend" sleep(D3K)~\*{DDRM\*}
.xx "" "od:" "octal dump." "" od(1)~\*{URM\*}
.xx "" "" "od: octal dump." "" od(1)~\*{URM\*}
.xx "in,/" "srchtxt: display contents" "of, or search for a text string" "" srchtxt(1)~\*{URM\*}
.xx "" "turn file system quotas on and" "off." "quotaon, quotaoff:" quotaon(1M)~\*{SARM\*}
.xx "" "/tell if forms field has" "off-screen data ahead or behind." "" form_data(3X)~\*{CHAR\*}
.xx "" "elf_getbase: get the base" "offset for an object file." "" elf_getbase(3E)~\*{PRM\*}
.xx "" "get time zone name given" "offset from GMT." "timezone:" timezone(3C)~\*{BSD\*}
.xx "" "offsetof:" "offset of structure member." "" offsetof(3C)~\*{PRM\*}
.xx "member." "" "offsetof: offset of structure" "" offsetof(3C)~\*{PRM\*}
.xx "" "cvtomflib: convert" "OMF (XENIX) libraries to ELF." "" cvtomflib(1)~\*{ACG\*}
.xx "" "login: sign" "on." "" login(1)~\*{URM\*}
.xx "" "remote system with debugging" "on." "Uutry: try to contact" Uutry(1M)~\*{SARM\*}
.xx "" "new file or rewrite an existing" "one." "creat: create a" creat(2)~\*{PRM\*}
.xx "" "/send a control message with a" "one-byte parameter to a queue." "" putctl1(D3DK)~\*{DDRM\*}
.xx "keyword." "whatis: display a" "one-line summary about a" "" whatis(1)~\*{BSD\*}
.xx "" "mps_AMPcancel: cancels an" "ongoing rsvp transaction." "" mps_AMPcancel(D3D)~\*{DDRM\*}
.xx "" "ungetc: push character back" "onto input stream." "" ungetc(3S)~\*{PRM\*}
.xx "" "opensem:" "open a semaphore." "" opensem(2)~\*{ACG\*}
.xx "" "dlopen:" "open a shared object." "" dlopen(3X)~\*{PRM\*}
.xx "" "fopen, freopen, fdopen:" "open a stream." "" fopen(3S)~\*{BSD\*}
.xx "" "fopen, freopen, fdopen:" "open a stream." "" fopen(3S)~\*{PRM\*}
.xx "on a STREAMS driver." "clone:" "open any major/minor device pair" "" clone(7)~\*{STRM\*}
.xx "command." "p2open, p2close:" "open, close pipes to and from a" "" p2open(3G)~\*{PRM\*}
.xx "" "dup2: duplicate an" "open file descriptor." "" dup2(3C)~\*{PRM\*}
.xx "" "dup: duplicate an" "open file descriptor." "" dup(2)~\*{PRM\*}
.xx "" "open:" "open for reading or writing." "" open(2)~\*{PRM\*}
.xx "" "" "open: gain access to a device." "" open(D2DK)~\*{DDRM\*}
.xx "writing." "" "open: open for reading or" "" open(2)~\*{PRM\*}
.xx "" "catopen, catclose:" "open/close a message catalogue." "" catopen(3C)~\*{PRM\*}
.xx "seekdir, rewinddir,/" "directory:" "opendir, readdir, telldir," "" directory(3C)~\*{BSD\*}
.xx "seekdir, rewinddir,/" "directory:" "opendir, readdir, telldir," "" directory(3C)~\*{PRM\*}
.xx "" "closes a previously" "opened channel." "mps_close_chan:" mps_close_chan(D3D)~\*{DDRM\*}
.xx "control system log." "syslog," "openlog, closelog, setlogmask:" "" syslog(3)~\*{BSD\*}
.xx "" "mps_open_chan:" "opens a channel." "" mps_open_chan(D3D)~\*{DDRM\*}
.xx "transport/" "mb2s_openport:" "Opens a synchronous Multibus II" "" mb2s_openport(3tai)~\*{MBTAI\*}
.xx "II transport/" "mb2a_openport:" "Opens an asynchronous Multibus" "" mb2a_openport(3tai)~\*{MBTAI\*}
.xx "" "newvt:" "opens virtual terminals." "" newvt(1)~\*{ISDG\*}
.xx "" "newvt:" "opens virtual terminals." "" newvt(1)~\*{URM\*}
.xx "" "vtlmgr: monitors and" "opens virtual terminals." "" vtlmgr(1)~\*{ISDG\*}
.xx "" "vtlmgr: monitors and" "opens virtual terminals." "" vtlmgr(1)~\*{URM\*}
.xx "" "" "opensem: open a semaphore." "" opensem(2)~\*{ACG\*}
.xx "" "sockio: ioctls that" "operate directly on sockets." "" sockio(7)~\*{NI\*}
.xx "" "reboot: restart the" "operating system." "" reboot(1M)~\*{BSD\*}
.xx "" "prf:" "operating system profiler." "" prf(7)~\*{SARM\*}
.xx "" "commands performed to stop the" "operating system." "rc0: run" rc0(1M)~\*{SARM\*}
.xx "" "performed to stop and reboot the" "operating system." "/run commands" rc6(1M)~\*{SARM\*}
.xx "" "dma_prog: program a DMA" "operation for a subsequent/" "" dma_prog(D3X)~\*{DDRM\*}
.xx "" "dma_swsetup: program a DMA" "operation for a subsequent/" "" dma_swsetup(D3X)~\*{DDRM\*}
.xx "" "sdi_icmd: perform requested SCSI" "operation immediately." "" sdi_icmd(D3I)~\*{SCSI\*}
.xx "" "/stop software-initiated DMA" "operation on a channel and/" "" dma_stop(D3X)~\*{DDRM\*}
.xx "" "dma_swstart: initiate a DMA" "operation via software request." "" dma_swstart(D3X)~\*{DDRM\*}
.xx "" "ethers: Ethernet address mapping" "operations." "" ethers(3N)~\*{NI\*}
.xx "" "ethers: Ethernet address mapping" "operations." "" ethers(3N)~\*{NUAG\*}
.xx "" "index, rindex: string" "operations." "" index(3)~\*{BSD\*}
.xx "" "msgctl: message control" "operations." "" msgctl(2)~\*{PRM\*}
.xx "" "msgop: msgsnd, msgrcv: message" "operations." "" msgop(2)~\*{PRM\*}
.xx "" "semctl: semaphore control" "operations." "" semctl(2)~\*{PRM\*}
.xx "" "semop: semaphore" "operations." "" semop(2)~\*{PRM\*}
.xx "" "shmctl: shared memory control" "operations." "" shmctl(2)~\*{PRM\*}
.xx "" "bzero, ffs: bit and byte string" "operations." "/bcopy, bcmp," bstring(3)~\*{BSD\*}
.xx "" "report on completed backup" "operations." "bkhistory:" bkhistory(1M)~\*{SARM\*}
.xx "" "display the status of backup" "operations." "bkstatus:" bkstatus(1M)~\*{SARM\*}
.xx "" "memcpy, memmove, memset: memory" "operations." "/memchr, memcmp," memory(3C)~\*{PRM\*}
.xx "" "shmat, shmdt: shared memory" "operations." "shmop:" shmop(2)~\*{PRM\*}
.xx "" "strcasecmp, strncasecmp: string" "operations." "string: " string(3)~\*{BSD\*}
.xx "" "strcspn, strtok, strstr: string" "operations." "/strpbrk, strspn," string(3C)~\*{PRM\*}
.xx "" "rewinddir, closedir: directory" "operations." "/telldir, seekdir," directory(3C)~\*{BSD\*}
.xx "" "rewinddir, closedir: directory" "operations." "/telldir, seekdir," directory(3C)~\*{PRM\*}
.xx "" "bkoper: interact with backup" "operations to service media/" "" bkoper(1M)~\*{SARM\*}
.xx "" "join: relational database" "operator." "" join(1)~\*{URM\*}
.xx "" "qreply: send a message in the" "opposite direction in a stream." "" qreply(D3DK)~\*{DDRM\*}
.xx "" "(generic): copy file systems for" "optimal access time." "dcopy" dcopy(1M)~\*{SARM\*}
.xx "" "curses: CRT screen handling and" "optimization package." "" curses(3X)~\*{CHAR\*}
.xx "" "/typeahead: curses terminal input" "option control routines." "" curs_inopts(3X)~\*{CHAR\*}
.xx "" "/nl, nonl: curses terminal output" "option control routines." "" curs_outopts(3X)~\*{CHAR\*}
.xx "vector." "getopt: get" "option letter from argument" "" getopt(3C)~\*{PRM\*}
.xx "" "/field_opts: forms field" "option routines." "" form_field_opts(3X)~\*{CHAR\*}
.xx "" "form_opts_off, form_opts: forms" "option routines." "/form_opts_on," form_opts(3X)~\*{CHAR\*}
.xx "" "item_opts: menus item" "option routines." "/item_opts_off," menu_item_opts(3X)~\*{CHAR\*}
.xx "" "menu_opts_off, menu_opts: menus" "option routines." "/menu_opts_on," menu_opts(3X)~\*{CHAR\*}
.xx "" "stroptions: stream head" "option structure." "" stroptions(D4DK)~\*{DDRM\*}
.xx "manufacturer's/" "mdl: read and" "optionally write the" "" mdl(1iref)~\*{MBRMAN\*}
.xx "" "fcntl: file control" "options." "" fcntl(5)~\*{PRM\*}
.xx "" "fcntl: file control" "options." "" fcntl(5)~\*{SARM\*}
.xx "" "getopt: parse command" "options." "" getopt(1)~\*{URM\*}
.xx "" "stty: set the" "options for a terminal." "" stty(1)~\*{BSD\*}
.xx "" "stty: set the" "options for a terminal." "" stty(1)~\*{URM\*}
.xx "endpoint." "t_optmgmt: manage" "options for a transport" "" t_optmgmt(3N)~\*{NI\*}
.xx "" "getoptcvt: parse command" "options." "getopts," getopts(1)~\*{URM\*}
.xx "" "setsockopt: get and set" "options on sockets." "getsockopt," getsockopt(3N)~\*{NI\*}
.xx "" "/mvgetch, mvwgetch, ungetch: get" "(or push back) characters from/" "" curs_getch(3X)~\*{CHAR\*}
.xx "" "mlock, munlock: lock" "(or unlock) pages in memory." "" mlock(3C)~\*{PRM\*}
.xx "" "postreverse: reverse the page" "order in a PostScript file." "" postreverse(1)~\*{URM\*}
.xx "" "commands executed, in reverse" "order." "lastcomm: show the last" lastcomm(1)~\*{BSD\*}
.xx "" "between host and network byte" "order." "/ntohs: convert values" byteorder(3N)~\*{NI\*}
.xx "" "spray: scatter data in" "order to check the network." "" spray(3N)~\*{NI\*}
.xx "library." "lorder: find" "ordering relation for an object" "" lorder(1)~\*{PRM\*}
.xx "" "t_sndrel: initiate an" "orderly release." "" t_sndrel(3N)~\*{NI\*}
.xx "" "/acknowledge receipt of an" "orderly release indication." "" t_rcvrel(3N)~\*{NI\*}
.xx "" "a directory, or a special or" "ordinary file." "mknod: make" mknod(2)~\*{ACG\*}
.xx "" "a directory, or a special or" "ordinary file." "mknod: make" mknod(2)~\*{PRM\*}
.xx "" "filesystem: file system" "organization." "" filesystem(7)~\*{SARM\*}
.xx "" "restore: restore file to" "original directory." "" restore(1)~\*{ACG\*}
.xx "" "ots: System V/386 Release 4.0" "OSI Transport Service (ots)/" "" ots(7iref)~\*{MBRMAN\*}
.xx "partner queue." "" "OTHERQ: get pointer to queue's" "" OTHERQ(D3DK)~\*{DDRM\*}
.xx "" "4.0 OSI Transport Service" "(ots) device driver." "/Release" ots(7iref)~\*{MBRMAN\*}
.xx "OSI Transport Service (ots)/" "" "ots: System V/386 Release 4.0" "" ots(7iref)~\*{MBRMAN\*}
.xx "information." "" ".ott: FACE object architecture" "" ott(4)~\*{SARM\*}
.xx "" "cpio: copy file archives in and" "out." "" cpio(1)~\*{URM\*}
.xx "I/O port." "" "outb: write a byte to an 8 bit" "" outb(D3D)~\*{DDRM\*}
.xx "connection." "dial: establish an" "outgoing terminal line" "" dial(3C)~\*{NI\*}
.xx "to a 32 bit I/O port." "" "outl: write a 32 bit long word" "" outl(D3D)~\*{DDRM\*}
.xx "" "echo: put string on virtual" "output." "" echo(1F)~\*{CHAR\*}
.xx "" "printf: print formatted" "output." "" printf(1)~\*{URM\*}
.xx "" "seconvert, sfconvert, sgconvert:" "output conversion." "/gconvert," econvert(3)~\*{BSD\*}
.xx "" "vfprintf, vsprintf: formatted" "output conversion." "/vprintf," printf(3S)~\*{BSD\*}
.xx "" "/vwprintw: print formatted" "output in curses windows." "" curs_printw(3X)~\*{CHAR\*}
.xx "list." "/vsprintf: print formatted" "output of a variable argument" "" vprintf(3S)~\*{PRM\*}
.xx "" "/nl, nonl: curses terminal" "output option control routines." "" curs_outopts(3X)~\*{CHAR\*}
.xx "information." "ttyadm: format and" "output port monitor-specific" "" ttyadm(1M)~\*{SARM\*}
.xx "" "sprintf: print formatted" "output." "printf, fprintf," printf(3S)~\*{PRM\*}
.xx "" "/data that corresponds to an" "outstanding buffer request." "" mps_AMPreceive(D3D)~\*{DDRM\*}
.xx "to a 16 bit I/O port." "" "outw: write a 16 bit short word" "" outw(D3D)~\*{DDRM\*}
.xx "" "/overlay, overwrite, copywin:" "overlap and manipulate/" "" curs_overlay(3X)~\*{CHAR\*}
.xx "" "/copywin: overlap and manipulate" "overlapped curses windows." "" curs_overlay(3X)~\*{CHAR\*}
.xx "overlap and/" "curs_overlay:" "overlay, overwrite, copywin:" "" curs_overlay(3X)~\*{CHAR\*}
.xx "" "/acctwtmp closewtmp, utmp2wtmp:" "overview of accounting and/" "" acct(1M)~\*{SARM\*}
.xx "" "curs_overlay:  overlay," "overwrite, copywin: overlap and/" "" curs_overlay(3X)~\*{CHAR\*}
.xx "" "chown: change file" "owner." "" chown(1)~\*{BSD\*}
.xx "" "chown: change file" "owner." "" chown(1)~\*{URM\*}
.xx "" "chown, lchown, fchown: change" "owner and group of a file." "" chown(2)~\*{PRM\*}
.xx "" "quot: summarize file system" "ownership." "" quot(1M)~\*{SARM\*}
.xx "" "initialize file permissions and" "ownership." "fixperm: correct or" fixperm(1)~\*{ACG\*}
.xx "" "chgrp: change the group" "ownership of a file." "" chgrp(1)~\*{URM\*}
.xx "" "XENIX file permissions and" "ownership." "/or initialize" fixperm(1M)~\*{SARM\*}
.xx "and from a command." "p2open," "p2close: open, close pipes to" "" p2open(3G)~\*{PRM\*}
.xx "pipes to and from a command." "" "p2open, p2close: open, close" "" p2open(3G)~\*{PRM\*}
.xx "expand files." "" "pack, pcat, unpack: compress and" "" pack(1)~\*{URM\*}
.xx "" "forms: character based forms" "package." "" forms(3X)~\*{CHAR\*}
.xx "" "menus: character based menus" "package." "" menus(3X)~\*{CHAR\*}
.xx "" "panels: character based panels" "package." "" panels(3X)~\*{CHAR\*}
.xx "" "pkgmk: produce an installable" "package." "" pkgmk(1)~\*{ISDG\*}
.xx "" "pkginfo:" "package characteristics file." "" pkginfo(4)~\*{ISDG\*}
.xx "file." "pkgmap:" "package contents description" "" pkgmap(4)~\*{ISDG\*}
.xx "" "screen handling and optimization" "package." "curses: CRT" curses(3X)~\*{CHAR\*}
.xx "" "specific portions of a UNIX" "package." "custom: install" custom(1M)~\*{SARM\*}
.xx "" "pkgtrans: translate" "package format." "" pkgtrans(1)~\*{ISDG\*}
.xx "" "pkgtrans: translate" "package format." "" pkgtrans(1)~\*{SARM\*}
.xx "" "pkgrm: removes a" "package from the system." "" pkgrm(1M)~\*{ISDG\*}
.xx "" "pkgrm: removes a" "package from the system." "" pkgrm(1M)~\*{SARM\*}
.xx "" "pkginfo: display software" "package information." "" pkginfo(1)~\*{ISDG\*}
.xx "" "pkginfo: display software" "package information." "" pkginfo(1)~\*{SARM\*}
.xx "" "prototype:" "package information file." "" prototype(4)~\*{ISDG\*}
.xx "" "pkgparam: displays" "package parameter values." "" pkgparam(1)~\*{ISDG\*}
.xx "" "pkgparam: displays" "package parameter values." "" pkgparam(1)~\*{SARM\*}
.xx "" "sa1, sa2: system activity report" "package." "sadc," sadc(1M)~\*{SARM\*}
.xx "" "standard buffered input/output" "package." "stdio:" stdio(3S)~\*{PRM\*}
.xx "" "interprocess communication" "package." "stdipc: ftok: standard" stdipc(3C)~\*{PRM\*}
.xx "" "pkgadd: transfer software" "package to the system." "" pkgadd(1M)~\*{ISDG\*}
.xx "" "pkgadd: transfer software" "package to the system." "" pkgadd(1M)~\*{SARM\*}
.xx "" "distributed file system" "packages." "/file that registers" fstypes(4)~\*{NUAG\*}
.xx "" "distributed file system" "packages." "/file that registers" fstypes(4)~\*{SARM\*}
.xx "" "of certain UNIX or XENIX" "packages." "/specific portions" custom(1)~\*{ACG\*}
.xx "" "pckt: STREAMS" "Packet Mode module." "" pckt(7)~\*{STRM\*}
.xx "" "routing: system supporting for" "packet network routing." "" routing(4)~\*{NUAG\*}
.xx "" "routing: system supporting for" "packet network routing." "" routing(4)~\*{SARM\*}
.xx "" "xtt: extract and print xt driver" "packet traces." "" xtt(1M)~\*{SARM\*}
.xx "" "spray: spray" "packets." "" spray(1M)~\*{NI\*}
.xx "" "spray: spray" "packets." "" spray(1M)~\*{NUAG\*}
.xx "" "ping: send ICMP ECHO_REQUEST" "packets to network hosts." "" ping(1M)~\*{NUAG\*}
.xx "" "ping: send ICMP ECHO_REQUEST" "packets to network hosts." "" ping(1M)~\*{SARM\*}
.xx "" "create and display curses" "pads." "/pnoutrefresh, pechochar:" curs_pad(3X)~\*{CHAR\*}
.xx "" "field_index: set forms current" "page and field." "/current_field," form_page(3X)~\*{CHAR\*}
.xx "text file." "more," "page: browse or page through a" "" more(1)~\*{URM\*}
.xx "" "hat_getkpfnum: get physical" "page ID for kernel virtual/" "" hat_getkpfnum(D3DK)~\*{DDRM\*}
.xx "" "hat_getppfnum: get physical" "page ID for physical address." "" hat_getppfnum(D3D)~\*{DDRM\*}
.xx "" "virtual address space for buffer" "page list." "bp_mapin: allocate" bp_mapin(D3DK)~\*{DDRM\*}
.xx "" "virtual address space for buffer" "page list." "/deallocate" bp_mapout(D3DK)~\*{DDRM\*}
.xx "" "pagesize: display the size of a" "page of memory." "" pagesize(1)~\*{BSD\*}
.xx "" "postreverse: reverse the" "page order in a PostScript file." "" postreverse(1)~\*{URM\*}
.xx "" "getpagesize: get system" "page size." "" getpagesize(3)~\*{BSD\*}
.xx "" "more, page: browse or" "page through a text file." "" more(1)~\*{URM\*}
.xx "" "manual pages; find reference" "pages by keyword." "/reference" man(1)~\*{BSD\*}
.xx "" "man: display reference manual" "pages; find reference pages by/" "" man(1)~\*{BSD\*}
.xx "" "mlock, munlock: lock (or unlock)" "pages in memory." "" mlock(3C)~\*{PRM\*}
.xx "" "to format Reference Manual" "pages." "man: macros" man(7)~\*{BSD\*}
.xx "" "determine residency of memory" "pages." "mincore:" mincore(2)~\*{PRM\*}
.xx "" "mmap: map" "pages of memory." "" mmap(2)~\*{PRM\*}
.xx "" "munmap: unmap" "pages of memory." "" munmap(2)~\*{PRM\*}
.xx "" "convert size in bytes to size in" "pages (round down)." "btop:" btop(D3DK)~\*{DDRM\*}
.xx "" "convert size in bytes to size in" "pages (round up)." "btopr:" btopr(D3DK)~\*{DDRM\*}
.xx "" "ptob: convert size in" "pages to size in bytes." "" ptob(D3DK)~\*{DDRM\*}
.xx "page of memory." "" "pagesize: display the size of a" "" pagesize(1)~\*{BSD\*}
.xx "" "set_new_page, new_page: forms" "pagination." "form_new_page: " form_new_page(3X)~\*{CHAR\*}
.xx "" "socketpair: create a" "pair of connected sockets." "" socketpair(3N)~\*{NI\*}
.xx "" "/open any major/minor device" "pair on a STREAMS driver." "" clone(7)~\*{STRM\*}
.xx "" "a pseudo-terminal master/slave" "pair." "unlockpt: unlock" unlockpt(3C)~\*{STRM\*}
.xx "" "/can_change_color, color_content," "pair_content: curses color/" "" curs_color(3X)~\*{CHAR\*}
.xx "" "the current window of a panels" "panel." "/get or set" panel_window(3X)~\*{CHAR\*}
.xx "" "dbon: sets target for front" "panel message delivery." "" dbon(8iref)~\*{MBRMAN\*}
.xx "" "application data with a panels" "panel." "/panel_userptr: associate" panel_userptr(3X)~\*{CHAR\*}
.xx "panel_below: panels deck/" "" "panel_above:  panel_above," "" panel_above(3X)~\*{CHAR\*}
.xx "deck traversal/" "panel_above:" "panel_above, panel_below: panels" "" panel_above(3X)~\*{CHAR\*}
.xx "" "panel_above:  panel_above," "panel_below: panels deck/" "" panel_above(3X)~\*{CHAR\*}
.xx "" "/show_panel, hide_panel," "panel_hidden: panels deck/" "" panel_show(3X)~\*{CHAR\*}
.xx "panels window on the virtual/" "" "panel_move:  move_panel: move a" "" panel_move(3X)~\*{CHAR\*}
.xx "del_panel: create and destroy/" "" "panel_new:  new_panel," "" panel_new(3X)~\*{CHAR\*}
.xx "package." "" "panels: character based panels" "" panels(3X)~\*{CHAR\*}
.xx "" "/hide_panel, panel_hidden:" "panels deck manipulation/" "" panel_show(3X)~\*{CHAR\*}
.xx "" "/top_panel, bottom_panel:" "panels deck manipulation/" "" panel_top(3X)~\*{CHAR\*}
.xx "" "/panel_above, panel_below:" "panels deck traversal/" "" panel_above(3X)~\*{CHAR\*}
.xx "" "panels: character based" "panels package." "" panels(3X)~\*{CHAR\*}
.xx "" "application data with a" "panels panel." "/associate" panel_userptr(3X)~\*{CHAR\*}
.xx "" "or set the current window of a" "panels panel." "/get" panel_window(3X)~\*{CHAR\*}
.xx "" "del_panel: create and destroy" "panels." "panel_new:  new_panel," panel_new(3X)~\*{CHAR\*}
.xx "" "panel_update:  update_panels:" "panels virtual screen refresh/" "" panel_update(3X)~\*{CHAR\*}
.xx "" "panel_move:  move_panel: move a" "panels window on the virtual/" "" panel_move(3X)~\*{CHAR\*}
.xx "hide_panel, panel_hidden:/" "" "panel_show:  show_panel," "" panel_show(3X)~\*{CHAR\*}
.xx "bottom_panel: panels deck/" "" "panel_top:  top_panel," "" panel_top(3X)~\*{CHAR\*}
.xx "panels virtual screen refresh/" "" "panel_update:  update_panels:" "" panel_update(3X)~\*{CHAR\*}
.xx " set_panel_userptr,/" "" "panel_userptr:" "" panel_userptr(3X)~\*{CHAR\*}
.xx "application/" "/set_panel_userptr," "panel_userptr: associate" "" panel_userptr(3X)~\*{CHAR\*}
.xx "replace_panel: get or set the/" "" "panel_window:  panel_window," "" panel_window(3X)~\*{CHAR\*}
.xx "or set the/" "panel_window:" "panel_window, replace_panel: get" "" panel_window(3X)~\*{CHAR\*}
.xx "" "display an error message or" "panic the system." "cmn_err:" cmn_err(D3DK)~\*{DDRM\*}
.xx "" "me: macros for formatting" "papers." "" me(7)~\*{BSD\*}
.xx "" "lp:" "parallel port interface." "" lp(7)~\*{SARM\*}
.xx "" "i350: iSBX 350" "parallel printer driver." "" i350(7iref)~\*{MBRMAN\*}
.xx "iSBC 486/133SE board." "hlp" "\-Parallel printer driver for" "" hlp(7iref)~\*{MBRMAN\*}
.xx "" "to set value of a tunable" "parameter." "idtune: attempts" idtune(1M)~\*{ISDG\*}
.xx "" "to set value of a tunable" "parameter." "idtune: attempts" idtune(1M)~\*{SARM\*}
.xx "" "bootparamd: boot" "parameter server." "" bootparamd(1M)~\*{NI\*}
.xx "" "bootparamd: boot" "parameter server." "" bootparamd(1M)~\*{NUAG\*}
.xx "" "bps: Bootstrap" "Parameter String driver." "" bps(7iref)~\*{MBRMAN\*}
.xx "" "initializes the bootstrap" "parameter string on the/" "initbp:" initbp(8iref)~\*{MBRMAN\*}
.xx "" "rt_dptbl: real-time dispatcher" "parameter table." "" rt_dptbl(4)~\*{SARM\*}
.xx "" "time-sharing dispatcher" "parameter table." "ts_dptbl:" ts_dptbl(4)~\*{SARM\*}
.xx "" "control message with a one-byte" "parameter to a queue." "/send a" putctl1(D3DK)~\*{DDRM\*}
.xx "" "pkgparam: displays package" "parameter values." "" pkgparam(1)~\*{ISDG\*}
.xx "" "pkgparam: displays package" "parameter values." "" pkgparam(1)~\*{SARM\*}
.xx "" "configure network interface" "parameters." "ifconfig:" ifconfig(1M)~\*{NUAG\*}
.xx "" "configure network interface" "parameters." "ifconfig:" ifconfig(1M)~\*{SARM\*}
.xx "path name." "dirname: report the" "parent directory name of a file" "" dirname(3G)~\*{PRM\*}
.xx "" "get process, process group, and" "parent process IDs." "/getpgid:" getpid(2)~\*{PRM\*}
.xx "" "getopt:" "parse command options." "" getopt(1)~\*{URM\*}
.xx "" "getopts, getoptcvt:" "parse command options." "" getopts(1)~\*{URM\*}
.xx "" "getsubopt:" "parse suboptions from a string." "" getsubopt(3C)~\*{PRM\*}
.xx "" "/wclrtoeol: clear all or" "part of a curses window." "" curs_clear(3X)~\*{CHAR\*}
.xx "" "tail: deliver the last" "part of a file." "" tail(1)~\*{URM\*}
.xx "connection." "shutdown: shut down" "part of a full-duplex" "" shutdown(3N)~\*{NI\*}
.xx "" "/to a received request that is" "part of a request-response/" "" mps_AMPsend_reply(D3D)~\*{DDRM\*}
.xx "" "/messages that are not" "part of any request-response/" "" mps_AMPsend(D3D)~\*{DDRM\*}
.xx "" "/sends solicited data that is not" "part of any request-response/" "" mps_AMPsend_data(D3D)~\*{DDRM\*}
.xx "" "ypset: point ypbind at a" "particular server." "" ypset(1M)~\*{NI\*}
.xx "" "size of the active UNIX System" "partition." "/returns the" partsize(1M)~\*{SARM\*}
.xx "" "create or modify hard disk" "partition table." "fdisk:" fdisk(1M)~\*{SARM\*}
.xx "" "restores of filesystems, data" "partitions, or disks." "/initiate" restore(1M)~\*{SARM\*}
.xx "" "OTHERQ: get pointer to queue's" "partner queue." "" OTHERQ(D3DK)~\*{DDRM\*}
.xx "" "dump: dump selected" "parts of an object file." "" dump(1)~\*{PRM\*}
.xx "" "/scalb, scalbl: manipulate" "parts of floating-point numbers." "" frexp(3C)~\*{PRM\*}
.xx "the active UNIX System/" "" "partsize: returns the size of" "" partsize(1M)~\*{SARM\*}
.xx "" "nlsgetcall: get client's data" "passed via the listener." "" nlsgetcall(3N)~\*{NI\*}
.xx "" "mps: Message" "Passing Space device driver." "" mps(7iref)~\*{MBRMAN\*}
.xx "management." "" "passmgmt: password files" "" passmgmt(1M)~\*{SARM\*}
.xx "" "/convert device number to SCSI" "pass-through device number." "" sdi_getdev(D3I)~\*{SCSI\*}
.xx "and password attributes." "" "passwd: change login password" "" passwd(1)~\*{URM\*}
.xx "" "" "passwd: password file." "" passwd(4)~\*{SARM\*}
.xx "" "getpass: read a" "password." "" getpass(3C)~\*{PRM\*}
.xx "functions." "crypt:" "password and file encryption" "" crypt(3X)~\*{PRM\*}
.xx "" "passwd: change login" "password and password/" "" passwd(1)~\*{URM\*}
.xx "" "change login password and" "password attributes." "passwd:" passwd(1)~\*{URM\*}
.xx "" "pwck: check" "password database entries." "" pwck(1M)~\*{BSD\*}
.xx "" "passwd:" "password file." "" passwd(4)~\*{SARM\*}
.xx "" "shadow: shadow" "password file." "" shadow(4)~\*{SARM\*}
.xx "" "putpwent: write" "password file entry." "" putpwent(3C)~\*{PRM\*}
.xx "" "putspent: write shadow" "password file entry." "" putspent(3C)~\*{PRM\*}
.xx "" "ulckpwdf: manipulate shadow" "password file entry." "/lckpwdf," getspent(3C)~\*{PRM\*}
.xx "" "endpwent, fgetpwent: manipulate" "password file entry." "/setpwent," getpwent(3C)~\*{PRM\*}
.xx "" "passmgmt:" "password files management." "" passmgmt(1M)~\*{SARM\*}
.xx "" "change Remote File Sharing host" "password." "rfpasswd:" rfpasswd(1M)~\*{NUAG\*}
.xx "" "change Remote File Sharing host" "password." "rfpasswd:" rfpasswd(1M)~\*{SARM\*}
.xx "" "pwck, grpck:" "password/group file checkers." "" pwck(1M)~\*{SARM\*}
.xx "several files or subsequent/" "" "paste: merge same lines of" "" paste(1)~\*{URM\*}
.xx "" "create, remove directories in a" "path." "mkdirp, rmdirp:" mkdirp(3G)~\*{PRM\*}
.xx "" "return the last element of a" "path name." "basename:" basename(3G)~\*{PRM\*}
.xx "" "parent directory name of a file" "path name." "dirname: report the" dirname(3G)~\*{PRM\*}
.xx "" "dirname: deliver portions of" "path names." "basename," basename(1)~\*{URM\*}
.xx "s5 file/" "ncheck (s5): generate" "path names versus i-numbers for" "" ncheck(1M)~\*{SARM\*}
.xx "" "(generic): generate a  list of" "path names vs i-numbers." "ncheck" ncheck(1M)~\*{SARM\*}
.xx "" "" "pathalias: alias file for FACE." "" pathalias(4)~\*{SARM\*}
.xx "pathname variables." "fpathconf," "pathconf: get configurable" "" fpathconf(2)~\*{PRM\*}
.xx "for filename." "" "pathconv: search FMLI criteria" "" pathconv(1F)~\*{CHAR\*}
.xx "in named directories." "" "pathfind: search for named file" "" pathfind(3G)~\*{PRM\*}
.xx "" "a prompt; verify and return a" "pathname." "ckpath: display" ckpath(1)~\*{ISDG\*}
.xx "" "a prompt; verify and return a" "pathname." "ckpath: display" ckpath(1)~\*{SARM\*}
.xx "" "get current working directory" "pathname." "getwd:" getwd(3)~\*{BSD\*}
.xx "directory." "getcwd: get" "pathname of current working" "" getcwd(3C)~\*{PRM\*}
.xx "" "locate a command; display its" "pathname or alias." "which:" which(1)~\*{BSD\*}
.xx "" "pathconf: get configurable" "pathname variables." "fpathconf," fpathconf(2)~\*{PRM\*}
.xx "" "basename: display portions of" "pathnames." "" basename(1)~\*{BSD\*}
.xx "ufs file/" "ncheck (ufs): generate" "pathnames versus i-numbers for" "" ncheck(1M)~\*{SARM\*}
.xx "" "fmlgrep: search a file for a" "pattern." "" fmlgrep(1F)~\*{CHAR\*}
.xx "" "grep: search a file for a" "pattern." "" grep(1)~\*{URM\*}
.xx "" "generate lineprinter ripple" "pattern." "lptest:" lptest(1)~\*{BSD\*}
.xx "" "/menu_pattern: set and get menus" "pattern match buffer." "" menu_pattern(3X)~\*{CHAR\*}
.xx "" "gmatch: shell global" "pattern matching." "" gmatch(3G)~\*{PRM\*}
.xx "language." "awk:" "pattern scanning and processing" "" awk(1)~\*{URM\*}
.xx "language." "nawk:" "pattern scanning and processing" "" nawk(1)~\*{URM\*}
.xx "" "egrep: search a file for a" "pattern using full regular/" "" egrep(1)~\*{URM\*}
.xx "" "regex: match" "patterns against a string." "" regex(1F)~\*{CHAR\*}
.xx "signal." "" "pause: suspend process until" "" pause(2)~\*{PRM\*}
.xx "expand files." "pack," "pcat, unpack: compress and" "" pack(1)~\*{URM\*}
.xx "module." "" "pckt: STREAMS Packet Mode" "" pckt(7)~\*{STRM\*}
.xx "process." "popen," "pclose: initiate pipe to/from a" "" popen(3S)~\*{PRM\*}
.xx "" "/subpad, prefresh, pnoutrefresh," "pechochar: create and display/" "" curs_pad(3X)~\*{CHAR\*}
.xx "" "get name of connected" "peer." "getpeername:" getpeername(3N)~\*{NI\*}
.xx "" "unbufcall: cancel a" "pending bufcall request." "" unbufcall(D3DK)~\*{DDRM\*}
.xx "" "biowait: suspend processes" "pending completion of block I/O." "" biowait(D3DK)~\*{DDRM\*}
.xx "" "sleep: suspend process execution" "pending occurrence of an event." "" sleep(D3K)~\*{DDRM\*}
.xx "service media/" "rsoper: service" "pending restore requests and" "" rsoper(1M)~\*{SARM\*}
.xx "" "signals that are blocked and" "pending." "sigpending: examine" sigpending(2)~\*{PRM\*}
.xx "" "the number of disk blocks used" "per directory or file." "/display" du(1M)~\*{BSD\*}
.xx "" "backup:" "perform backup functions." "" backup(1)~\*{ACG\*}
.xx "" "strategy:" "perform block I/O." "" strategy(D2DK)~\*{DDRM\*}
.xx "immediately." "sdi_icmd:" "perform requested SCSI operation" "" sdi_icmd(D3I)~\*{SCSI\*}
.xx "" "sysadm: visual interface to" "perform system administration." "" sysadm(1M)~\*{SARM\*}
.xx "environment." "rc2: run commands" "performed for multi-user" "" rc2(1M)~\*{SARM\*}
.xx "operating/" "rc6: run commands" "performed to stop and reboot the" "" rc6(1M)~\*{SARM\*}
.xx "system." "rc0: run commands" "performed to stop the operating" "" rc0(1M)~\*{SARM\*}
.xx "driver." "i258: iSBC 386/258" "peripheral controller device" "" i258(7iref)~\*{MBRMAN\*}
.xx "device/" "i258tp: iSBC 386/258" "peripheral controller tape" "" i258tp(7iref)~\*{MBRMAN\*}
.xx "" "/correct or initialize file" "permissions and ownership." "" fixperm(1)~\*{ACG\*}
.xx "" "/correct or initialize XENIX file" "permissions and ownership." "" fixperm(1M)~\*{SARM\*}
.xx "" "check the uucp directories and" "permissions file." "uucheck:" uucheck(1M)~\*{SARM\*}
.xx "" "ckperms: set and/or verify" "permissions on files." "" ckperms(1iref)~\*{MBRMAN\*}
.xx "" "mesg:" "permit or deny messages." "" mesg(1)~\*{URM\*}
.xx "format." "acct:" "per-process accounting file" "" acct(4)~\*{SARM\*}
.xx "" "acctcms: command summary from" "per-process accounting records." "" acctcms(1M)~\*{SARM\*}
.xx "messages." "" "perror: print system error" "" perror(3C)~\*{PRM\*}
.xx "" "pg: file" "perusal filter for CRTs." "" pg(1)~\*{URM\*}
.xx "CRTs." "" "pg: file perusal filter for" "" pg(1)~\*{URM\*}
.xx "" "/get physical page ID for" "physical address." "" hat_getppfnum(D3D)~\*{DDRM\*}
.xx "" "vtop: convert virtual address to" "physical address." "" vtop(D3D)~\*{DDRM\*}
.xx "" "/translate scb virtual to" "physical address for SCSI host/" "" sdi_translate(D3I)~\*{SCSI\*}
.xx "" "/free virtual address mapping for" "physical addresses." "" physmap_free(D3D)~\*{DDRM\*}
.xx "" "virtual address mapping for" "physical addresses." "/obtain" physmap(D3D)~\*{DDRM\*}
.xx "" "in-memory state with that on the" "physical medium." "/a file's" fsync(2)~\*{PRM\*}
.xx "virtual/" "hat_getkpfnum: get" "physical page ID for kernel" "" hat_getkpfnum(D3DK)~\*{DDRM\*}
.xx "address." "hat_getppfnum: get" "physical page ID for physical" "" hat_getppfnum(D3D)~\*{DDRM\*}
.xx "" "msync: synchronize memory with" "physical storage." "" msync(3C)~\*{PRM\*}
.xx "I/O request." "" "physiock: validate and issue raw" "" physiock(D3DK)~\*{DDRM\*}
.xx "mapping for physical addresses." "" "physmap: obtain virtual address" "" physmap(D3D)~\*{DDRM\*}
.xx "address mapping for physical/" "" "physmap_free: free virtual" "" physmap_free(D3D)~\*{DDRM\*}
.xx "" "split: split a file into" "pieces." "" split(1)~\*{URM\*}
.xx "packets to network hosts." "" "ping: send ICMP ECHO_REQUEST" "" ping(1M)~\*{NUAG\*}
.xx "packets to network hosts." "" "ping: send ICMP ECHO_REQUEST" "" ping(1M)~\*{SARM\*}
.xx "channel." "" "pipe: create an interprocess" "" pipe(2)~\*{PRM\*}
.xx "" "tee:" "pipe fitting." "" tee(1)~\*{URM\*}
.xx "" "popen, pclose: initiate" "pipe to/from a process." "" popen(3S)~\*{PRM\*}
.xx "" "p2open, p2close: open, close" "pipes to and from a command." "" p2open(3G)~\*{PRM\*}
.xx "package to the system." "" "pkgadd: transfer software" "" pkgadd(1M)~\*{ISDG\*}
.xx "package to the system." "" "pkgadd: transfer software" "" pkgadd(1M)~\*{SARM\*}
.xx "request script." "" "pkgask: stores answers to a" "" pkgask(1M)~\*{ISDG\*}
.xx "request script." "" "pkgask: stores answers to a" "" pkgask(1M)~\*{SARM\*}
.xx "installation." "" "pkgchk: check accuracy of" "" pkgchk(1M)~\*{ISDG\*}
.xx "installation." "" "pkgchk: check accuracy of" "" pkgchk(1M)~\*{SARM\*}
.xx "package information." "" "pkginfo: display software" "" pkginfo(1)~\*{ISDG\*}
.xx "package information." "" "pkginfo: display software" "" pkginfo(1)~\*{SARM\*}
.xx "file." "" "pkginfo: package characteristics" "" pkginfo(4)~\*{ISDG\*}
.xx "description file." "" "pkgmap: package contents" "" pkgmap(4)~\*{ISDG\*}
.xx "package." "" "pkgmk: produce an installable" "" pkgmk(1)~\*{ISDG\*}
.xx "parameter values." "" "pkgparam: displays package" "" pkgparam(1)~\*{ISDG\*}
.xx "parameter values." "" "pkgparam: displays package" "" pkgparam(1)~\*{SARM\*}
.xx "file." "" "pkgproto: generate a prototype" "" pkgproto(1)~\*{ISDG\*}
.xx "the system." "" "pkgrm: removes a package from" "" pkgrm(1M)~\*{ISDG\*}
.xx "the system." "" "pkgrm: removes a package from" "" pkgrm(1M)~\*{SARM\*}
.xx "format." "" "pkgtrans: translate package" "" pkgtrans(1)~\*{ISDG\*}
.xx "format." "" "pkgtrans: translate package" "" pkgtrans(1)~\*{SARM\*}
.xx "queue." "putbq:" "place a message at the head of a" "" putbq(D3DK)~\*{DDRM\*}
.xx "unlock process, text, or data." "" "plock: lock into memory or" "" plock(2)~\*{PRM\*}
.xx "crtplot, dumbplot, gigiplot,/" "" "plot, aedplot, atoplot, bgplot," "" plot(1G)~\*{BSD\*}
.xx "" "PostScript translator for" "plot graphics files." "postplot:" postplot(1)~\*{URM\*}
.xx "" "graphics filters for various" "plotters." "/t4013, t450, tek:" plot(1G)~\*{BSD\*}
.xx "t450,/" "/gigiplot, hpplot, implot," "plottoa, t300, t300s, t4013," "" plot(1G)~\*{BSD\*}
.xx "administration." "" "pmadm: port monitor" "" pmadm(1M)~\*{NI\*}
.xx "administration." "" "pmadm: port monitor" "" pmadm(1M)~\*{SARM\*}
.xx "images." "" "pnch: file format for card" "" pnch(4)~\*{SARM\*}
.xx "and/" "/newpad, subpad, prefresh," "pnoutrefresh, pechochar: create" "" curs_pad(3X)~\*{CHAR\*}
.xx "" "floatingpoint: IEEE floating" "point definitions." "" floatingpoint(3)~\*{BSD\*}
.xx "character/" "chpoll: poll entry" "point for a non-STREAMS" "" chpoll(D2DK)~\*{DDRM\*}
.xx "" "introduction to driver entry" "point routines." "intro:" intro(D2DK)~\*{DDRM\*}
.xx "server." "ypset:" "point ypbind at a particular" "" ypset(1M)~\*{NI\*}
.xx "" "elf_strptr: make a string" "pointer." "" elf_strptr(3E)~\*{PRM\*}
.xx "" "lseek: move read/write file" "pointer." "" lseek(2)~\*{PRM\*}
.xx "" "rewind, ftell: reposition a file" "pointer in a stream." "fseek," fseek(3S)~\*{PRM\*}
.xx "" "fgetpos: reposition a file" "pointer in a stream." "fsetpos," fsetpos(3C)~\*{PRM\*}
.xx "" "mps_get_dmabuf: returns a" "pointer to a list of data buffer/" "" mps_get_dmabuf(D3D)~\*{DDRM\*}
.xx "queue." "OTHERQ: get" "pointer to queue's partner" "" OTHERQ(D3DK)~\*{DDRM\*}
.xx "" "RD: get a" "pointer to the read queue." "" RD(D3DK)~\*{DDRM\*}
.xx "" "WR: get a" "pointer to the write queue." "" WR(D3DK)~\*{DDRM\*}
.xx "non-STREAMS character/" "chpoll:" "poll entry point for a" "" chpoll(D2DK)~\*{DDRM\*}
.xx "" "" "poll: input/output multiplexing." "" poll(2)~\*{PRM\*}
.xx "" "" "poll: input/output multiplexing." "" poll(2)~\*{STRM\*}
.xx "has/" "pollwakeup: inform" "polling processes that an event" "" pollwakeup(D3DK)~\*{DDRM\*}
.xx "processes that an event has/" "" "pollwakeup: inform polling" "" pollwakeup(D3DK)~\*{DDRM\*}
.xx "" "buffer back into the free memory" "pool." "mps_free_msgbuf: puts a" mps_free_msgbuf(D3D)~\*{DDRM\*}
.xx "to/from a process." "" "popen, pclose: initiate pipe" "" popen(3S)~\*{PRM\*}
.xx "" "asy: asynchronous serial" "port." "" asy(7)~\*{SARM\*}
.xx "" "console: console" "port device driver." "" console(7iref)~\*{MBRMAN\*}
.xx "" "read a byte from a 8 bit I/O" "port." "inb:" inb(D3D)~\*{DDRM\*}
.xx "" "a 32 bit word from a 32 bit I/O" "port." "inl: read" inl(D3D)~\*{DDRM\*}
.xx "" "lp: parallel" "port interface." "" lp(7)~\*{SARM\*}
.xx "" "bit short word from a 16 bit I/O" "port." "inw: read a 16" inw(D3D)~\*{DDRM\*}
.xx "" "pmadm:" "port monitor administration." "" pmadm(1M)~\*{NI\*}
.xx "" "pmadm:" "port monitor administration." "" pmadm(1M)~\*{SARM\*}
.xx "" "ttymon:" "port monitor for terminal ports." "" ttymon(1M)~\*{SARM\*}
.xx "" "ttyadm: format and output" "port monitor-specific/" "" ttyadm(1M)~\*{SARM\*}
.xx "" "write a byte to an 8 bit I/O" "port." "outb:" outb(D3D)~\*{DDRM\*}
.xx "" "32 bit long word to a 32 bit I/O" "port." "outl: write a" outl(D3D)~\*{DDRM\*}
.xx "" "bit short word to a 16 bit I/O" "port." "outw: write a 16" outw(D3D)~\*{DDRM\*}
.xx "" "bytes from buffer to an I/O" "port." "repoutsb: write" repoutsb(D3D)~\*{DDRM\*}
.xx "" "bit words from buffer to an I/O" "port." "repoutsd: write 32" repoutsd(D3D)~\*{DDRM\*}
.xx "" "bit words from buffer to an I/O" "port." "repoutsw: write 16" repoutsw(D3D)~\*{DDRM\*}
.xx "" "repinsb: read bytes from I/O" "port to buffer." "" repinsb(D3D)~\*{DDRM\*}
.xx "" "read 32 bit words from I/O" "port to buffer." "repinsd:" repinsd(D3D)~\*{DDRM\*}
.xx "" "read 16 bit words from I/O" "port to buffer." "repinsw:" repinsw(D3D)~\*{DDRM\*}
.xx "" "ar: maintain" "portable archive or library." "" ar(1)~\*{PRM\*}
.xx "" "ar: maintain" "portable archive or library." "" ar(1)~\*{URM\*}
.xx "" "custom: install specific" "portions of a UNIX package." "" custom(1M)~\*{SARM\*}
.xx "XENIX/" "custom: install specific" "portions of certain UNIX or" "" custom(1)~\*{ACG\*}
.xx "" "basename, dirname: deliver" "portions of path names." "" basename(1)~\*{URM\*}
.xx "" "basename: display" "portions of pathnames." "" basename(1)~\*{BSD\*}
.xx "communications interface/" "" "ports: five-line asynchronous" "" ports(7)~\*{STRM\*}
.xx "" "and hunt sequences for TTY" "ports." "/maintain line settings" sttydefs(1M)~\*{SARM\*}
.xx "" "port monitor for terminal" "ports." "ttymon:" ttymon(1M)~\*{SARM\*}
.xx "window cursor." "form_cursor:" "pos_form_cursor: position forms" "" form_cursor(3X)~\*{CHAR\*}
.xx "" "/pos_menu_cursor: correctly" "position a menus cursor." "" menu_cursor(3X)~\*{CHAR\*}
.xx "" "form_cursor:  pos_form_cursor:" "position forms window cursor." "" form_cursor(3X)~\*{CHAR\*}
.xx "position a menus/" "menu_cursor:" "pos_menu_cursor: correctly" "" menu_cursor(3X)~\*{CHAR\*}
.xx "" "and troff input files; report" "possible errors." "/check nroff" checknr(1)~\*{BSD\*}
.xx "for Diablo 630 files." "" "postdaisy: PostScript translator" "" postdaisy(1)~\*{URM\*}
.xx "for DMD bitmap files." "" "postdmd: PostScript translator" "" postdmd(1)~\*{URM\*}
.xx "" "banner: make" "posters." "" banner(1)~\*{URM\*}
.xx "erase forms from/" "form_post:" "post_form, unpost_form: write or" "" form_post(3X)~\*{CHAR\*}
.xx "PostScript printers." "" "postio: serial interface for" "" postio(1)~\*{SARM\*}
.xx "for PostScript printers." "" "postmd: matrix display program" "" postmd(1)~\*{URM\*}
.xx "erase menus from/" "menu_post:" "post_menu, unpost_menu: write or" "" menu_post(3X)~\*{CHAR\*}
.xx "for plot graphics files." "" "postplot: PostScript translator" "" postplot(1)~\*{URM\*}
.xx "for text files." "" "postprint: PostScript translator" "" postprint(1)~\*{URM\*}
.xx "printers." "dpost: troff" "postprocessor for PostScript" "" dpost(1)~\*{URM\*}
.xx "order in a PostScript file." "" "postreverse: reverse the page" "" postreverse(1)~\*{URM\*}
.xx "" "reverse the page order in a" "PostScript file." "postreverse:" postreverse(1)~\*{URM\*}
.xx "" "download: host resident" "PostScript font downloader." "" download(1)~\*{URM\*}
.xx "" "dpost: troff postprocessor for" "PostScript printers." "" dpost(1)~\*{URM\*}
.xx "" "postio: serial interface for" "PostScript printers." "" postio(1)~\*{SARM\*}
.xx "" "matrix display program for" "PostScript printers." "postmd:" postmd(1)~\*{URM\*}
.xx "tektronix 4014 files." "posttek:" "PostScript translator for" "" posttek(1)~\*{URM\*}
.xx "630 files." "postdaisy:" "PostScript translator for Diablo" "" postdaisy(1)~\*{URM\*}
.xx "bitmap files." "postdmd:" "PostScript translator for DMD" "" postdmd(1)~\*{URM\*}
.xx "graphics files." "postplot:" "PostScript translator for plot" "" postplot(1)~\*{URM\*}
.xx "files." "postprint:" "PostScript translator for text" "" postprint(1)~\*{URM\*}
.xx "for tektronix 4014 files." "" "posttek: PostScript translator" "" posttek(1)~\*{URM\*}
.xx "" "/mult, mdiv, mcmp, min, mout," "pow, gcd, rpow, msqrt, sdiv,/" "" mp(3X)~\*{BSD\*}
.xx "" "cbrt, log, logf, log10, log10f," "pow, powf, sqrt, sqrtf:/" "/expf," exp(3M)~\*{PRM\*}
.xx "" "/sqrtf: exponential, logarithm," "power, square root functions." "" exp(3M)~\*{PRM\*}
.xx "" "/log, logf, log10, log10f, pow," "powf, sqrt, sqrtf: exponential,/" "" exp(3M)~\*{PRM\*}
.xx "" "" "pr: print files." "" pr(1)~\*{URM\*}
.xx "" "/lastlogin, monacct, nulladm," "prctmp, prdaily, prtacct,/" "" acctsh(1M)~\*{SARM\*}
.xx "" "/monacct, nulladm, prctmp," "prdaily, prtacct, runacct,/" "" acctsh(1M)~\*{SARM\*}
.xx "" "put: receive messages from the" "preceding queue." "" put(D2DK)~\*{DDRM\*}
.xx "" "/xtom, mtox, mfree: multiple" "precision integer arithmetic." "" mp(3X)~\*{BSD\*}
.xx "user-preference/" ".environ," ".pref, .variables:" "" environ(4)~\*{SARM\*}
.xx "" "prefix: driver" "prefix." "" prefix(D1DK)~\*{DDRM\*}
.xx "" "" "prefix: driver prefix." "" prefix(D1DK)~\*{DDRM\*}
.xx "" "curs_pad:  newpad, subpad," "prefresh, pnoutrefresh,/" "" curs_pad(3X)~\*{CHAR\*}
.xx "" "monitor:" "prepare execution profile." "" monitor(3C)~\*{PRM\*}
.xx "scheduled." "noenable:" "prevent a queue from being" "" noenable(D3DK)~\*{DDRM\*}
.xx "" "unget: undo a" "previous get of an SCCS file." "" unget(1)~\*{PRM\*}
.xx "" "untimeout: cancel" "previous timeout(D3DK) request." "" untimeout(D3DK)~\*{DDRM\*}
.xx "" "dma_free_buf: free a" "previously allocated DMA buffer/" "" dma_free_buf(D3X)~\*{DDRM\*}
.xx "block." "dma_free_cb: free a" "previously allocated DMA command" "" dma_free_cb(D3X)~\*{DDRM\*}
.xx "memory." "kmem_free: free" "previously allocated kernel" "" kmem_free(D3DK)~\*{DDRM\*}
.xx "" "sdi_freeblk: release a" "previously allocated SCSI block." "" sdi_freeblk(D3I)~\*{SCSI\*}
.xx "id." "mps_free_tid: frees a" "previously allocated transaction" "" mps_free_tid(D3D)~\*{DDRM\*}
.xx "" "mps_close_chan: closes a" "previously opened channel." "" mps_close_chan(D3D)~\*{DDRM\*}
.xx "" "" "prf: operating system profiler." "" prf(7)~\*{SARM\*}
.xx "" "profiler: prfld, prfstat," "prfdc, prfsnap, prfpr: UNIX/" "" profiler(1M)~\*{SARM\*}
.xx "prfpr: UNIX system/" "profiler:" "prfld, prfstat, prfdc, prfsnap," "" profiler(1M)~\*{SARM\*}
.xx "" "/prfld, prfstat, prfdc, prfsnap," "prfpr: UNIX system profiler." "" profiler(1M)~\*{SARM\*}
.xx "" "profiler: prfld, prfstat, prfdc," "prfsnap, prfpr: UNIX system/" "" profiler(1M)~\*{SARM\*}
.xx "UNIX system/" "profiler: prfld," "prfstat, prfdc, prfsnap, prfpr:" "" profiler(1M)~\*{SARM\*}
.xx "" "lock: lock a process in" "primary memory." "" lock(2)~\*{ACG\*}
.xx "" "factor: obtain the" "prime factors of a number." "" factor(1)~\*{URM\*}
.xx "" "types:" "primitive system data types." "" types(5)~\*{PRM\*}
.xx "" "panels deck traversal" "primitives." "/panel_below:" panel_above(3X)~\*{CHAR\*}
.xx "" "roffbib: format and" "print a bibliographic database." "" roffbib(1)~\*{BSD\*}
.xx "" "prs:" "print an SCCS file." "" prs(1)~\*{PRM\*}
.xx "" "date:" "print and set the date." "" date(1)~\*{URM\*}
.xx "" "cal:" "print calendar." "" cal(1)~\*{URM\*}
.xx "of a file." "sum:" "print checksum and block count" "" sum(1)~\*{URM\*}
.xx "activity." "sact:" "print current SCCS file editing" "" sact(1)~\*{PRM\*}
.xx "on the system console." "" "print: display a driver message" "" print(D2DK)~\*{DDRM\*}
.xx "side-by-side." "sdiff:" "print file differences" "" sdiff(1)~\*{URM\*}
.xx "" "cat: concatenate and" "print files." "" cat(1)~\*{URM\*}
.xx "" "pr:" "print files." "" pr(1)~\*{URM\*}
.xx "" "printf:" "print formatted output." "" printf(1)~\*{URM\*}
.xx "" "printf, fprintf, sprintf:" "print formatted output." "" printf(3S)~\*{PRM\*}
.xx "" "/mvprintw, mvwprintw, vwprintw:" "print formatted output in curses/" "" curs_printw(3X)~\*{CHAR\*}
.xx "" "vprintf, vfprintf, vsprintf:" "print formatted output of a/" "" vprintf(3S)~\*{PRM\*}
.xx "" "groups:" "print group membership of user." "" groups(1)~\*{URM\*}
.xx "" "what:" "print identification strings." "" what(1)~\*{PRM\*}
.xx "status of the LP print/" "lpstat:" "print information about the" "" lpstat(1)~\*{URM\*}
.xx "file." "nm:" "print name list of an object" "" nm(1)~\*{PRM\*}
.xx "system." "hostname: set or" "print name of current host" "" hostname(1)~\*{BSD\*}
.xx "system." "uname:" "print name of current UNIX" "" uname(1)~\*{URM\*}
.xx "" "news:" "print news items." "" news(1)~\*{URM\*}
.xx "" "infocmp: compare or" "print out terminfo descriptions." "" infocmp(1M)~\*{CHAR\*}
.xx "" "infocmp: compare or" "print out terminfo descriptions." "" infocmp(1M)~\*{SARM\*}
.xx "file(s)." "acctcom: search and" "print process accounting" "" acctcom(1)~\*{URM\*}
.xx "and network names." "dname:" "print Remote File Sharing domain" "" dname(1M)~\*{NUAG\*}
.xx "and network names." "dname:" "print Remote File Sharing domain" "" dname(1M)~\*{SARM\*}
.xx "" "accept, reject: accept or reject" "print requests." "" accept(1M)~\*{SARM\*}
.xx "object files." "size:" "print section sizes in bytes of" "" size(1)~\*{PRM\*}
.xx "" "lpadmin: configure the LP" "print service." "" lpadmin(1M)~\*{SARM\*}
.xx "" "filters used with the LP" "print service." "/administer" lpfilter(1M)~\*{SARM\*}
.xx "" "forms used with the LP" "print service." "/administer" lpforms(1M)~\*{SARM\*}
.xx "" "/lpmove: start/stop the LP" "print service and move requests." "" lpsched(1M)~\*{SARM\*}
.xx "" "about the status of the LP" "print service." "/information" lpstat(1)~\*{URM\*}
.xx "" "send/cancel requests to an LP" "print service." "lp, cancel:" lp(1)~\*{URM\*}
.xx "" "register remote systems with the" "print service." "lpsystem:" lpsystem(1M)~\*{SARM\*}
.xx "" "jwin:" "print size of layer." "" jwin(1)~\*{URM\*}
.xx "sendmail." "mailstats:" "print statistics collected by" "" mailstats(1M)~\*{BSD\*}
.xx "" "strace:" "print STREAMS trace messages." "" strace(1M)~\*{SARM\*}
.xx "" "strace:" "print STREAMS trace messages." "" strace(1M)~\*{STRM\*}
.xx "" "yes:" "print string repeatedly." "" yes(1)~\*{ACG\*}
.xx "" "perror:" "print system error messages." "" perror(3C)~\*{PRM\*}
.xx "the current host." "hostid:" "print the numeric identifier of" "" hostid(1)~\*{BSD\*}
.xx "group name and ID." "id:" "print the user name and ID, and" "" id(1M)~\*{SARM\*}
.xx "group name and ID." "id:" "print the user name and ID, and" "" id(1M)~\*{URM\*}
.xx "keys from the NIS map." "ypmatch:" "print the value of one or more" "" ypmatch(1)~\*{NI\*}
.xx "" "ypcat:" "print values in a NIS data base." "" ypcat(1)~\*{NI\*}
.xx "" "xtt: extract and" "print xt driver packet traces." "" xtt(1M)~\*{SARM\*}
.xx "" "xts: extract and" "print xt driver statistics." "" xts(1M)~\*{SARM\*}
.xx "file or binary." "strings: find" "printable strings in an object" "" strings(1)~\*{URM\*}
.xx "variables currently set." "" "printenv: display environment" "" printenv(1)~\*{BSD\*}
.xx "" "lpr: send a job to the" "printer." "" lpr(1)~\*{BSD\*}
.xx "" "lpc: line" "printer control program." "" lpc(1M)~\*{BSD\*}
.xx "" "i350: iSBX 350 parallel" "printer driver." "" i350(7iref)~\*{MBRMAN\*}
.xx "486/133SE board." "hlp \-Parallel" "printer driver for iSBC" "" hlp(7iref)~\*{MBRMAN\*}
.xx "" "lpq: display the queue of" "printer jobs." "" lpq(1)~\*{BSD\*}
.xx "" "lprm: remove jobs from the" "printer queue." "" lprm(1)~\*{BSD\*}
.xx "" "postprocessor for PostScript" "printers." "dpost: troff" dpost(1)~\*{URM\*}
.xx "" "disable: enable/disable LP" "printers." "enable," enable(1)~\*{URM\*}
.xx "" "serial interface for PostScript" "printers." "postio:" postio(1)~\*{SARM\*}
.xx "" "display program for PostScript" "printers." "postmd: matrix" postmd(1)~\*{URM\*}
.xx "vprintf, vfprintf, vsprintf:/" "" "printf, fprintf, sprintf," "" printf(3S)~\*{BSD\*}
.xx "formatted output." "" "printf, fprintf, sprintf: print" "" printf(3S)~\*{PRM\*}
.xx "" "" "printf: print formatted output." "" printf(1)~\*{URM\*}
.xx "" "lpusers: set" "printing queue priorities." "" lpusers(1M)~\*{SARM\*}
.xx "mvwprintw,/" "curs_printw:" "printw, wprintw, mvprintw," "" curs_printw(3X)~\*{CHAR\*}
.xx "control." "" "priocntl: process scheduler" "" priocntl(1)~\*{URM\*}
.xx "control." "" "priocntl: process scheduler" "" priocntl(2)~\*{PRM\*}
.xx "scheduler control." "" "priocntlset: generalized process" "" priocntlset(2)~\*{PRM\*}
.xx "" "lpusers: set printing queue" "priorities." "" lpusers(1M)~\*{SARM\*}
.xx "" "nice: run a command at low" "priority." "" nice(1)~\*{URM\*}
.xx "" "for flow control in specified" "priority band." "bcanput: test" bcanput(D3DK)~\*{DDRM\*}
.xx "" "flush messages in a specified" "priority band." "flushband:" flushband(D3DK)~\*{DDRM\*}
.xx "" "nice: change" "priority of a process." "" nice(3C)~\*{BSD\*}
.xx "process." "nice: change" "priority of a time-sharing" "" nice(2)~\*{PRM\*}
.xx "" "renice: alter" "priority of running processes." "" renice(1M)~\*{BSD\*}
.xx "" "get/set program scheduling" "priority." "/setpriority:" getpriority(3)~\*{BSD\*}
.xx "" "server for storing public and" "private keys." "keyserv:" keyserv(1M)~\*{NI\*}
.xx "" "server for storing public and" "private keys." "keyserv:" keyserv(1M)~\*{NUAG\*}
.xx "" "rmalloc: allocate space from a" "private space management map." "" rmalloc(D3DK)~\*{DDRM\*}
.xx "" "rmfree: free space into a" "private space management map." "" rmfree(D3DK)~\*{DDRM\*}
.xx "" "rminit: initialize a" "private space management map." "" rminit(D3K)~\*{DDRM\*}
.xx "" "whether credentials are" "privileged." "drv_priv: determine" drv_priv(D3DK)~\*{DDRM\*}
.xx "" "" "/proc: process file system." "" proc(4)~\*{SARM\*}
.xx "" "/routines for client side remote" "procedure call authentication." "" rpc_clnt_auth(3N)~\*{NI\*}
.xx "" "routines for server side remote" "procedure call errors." "/library" rpc_svc_err(3N)~\*{NI\*}
.xx "" "rpc: library routines for remote" "procedure calls." "" rpc(3N)~\*{NI\*}
.xx "" "routines for secure remote" "procedure calls." "/library" secure_rpc(3N)~\*{NI\*}
.xx "" "XDR library routines for remote" "procedure calls." "/xdr_replymsg:" rpc_xdr(3N)~\*{NI\*}
.xx "" "bcheckrc: system initialization" "procedures." "brc," brc(1M)~\*{SARM\*}
.xx "" "/startup, turnacct: shell" "procedures for accounting." "" acctsh(1M)~\*{SARM\*}
.xx "" "exit, _exit: terminate" "process." "" exit(2)~\*{PRM\*}
.xx "" "fork: create a new" "process." "" fork(2)~\*{PRM\*}
.xx "" "nice: change priority of a" "process." "" nice(3C)~\*{BSD\*}
.xx "" "psignal: send signal to a" "process." "" psignal(D3K)~\*{DDRM\*}
.xx "" "wait: await completion of" "process." "" wait(1)~\*{URM\*}
.xx "" "intr:" "process a device interrupt." "" intr(D2D)~\*{DDRM\*}
.xx "" "acct: enable or disable" "process accounting." "" acct(2)~\*{PRM\*}
.xx "" "acctprc, acctprc1, acctprc2:" "process accounting." "" acctprc(1M)~\*{SARM\*}
.xx "" "acctcom: search and print" "process accounting file(s)." "" acctcom(1)~\*{URM\*}
.xx "" "alarm: set a" "process alarm clock." "" alarm(2)~\*{PRM\*}
.xx "" "times: get" "process and child process times." "" times(2)~\*{PRM\*}
.xx "" "kill: terminate a" "process by default." "" kill(1)~\*{URM\*}
.xx "" "codestroy: communicate with a" "process." "/cocheck, coreceive," coproc(1F)~\*{CHAR\*}
.xx "" "init, telinit:" "process control initialization." "" init(1M)~\*{SARM\*}
.xx "" "timex: time a command; report" "process data and system/" "" timex(1)~\*{URM\*}
.xx "" "wakeup: resume suspended" "process execution." "" wakeup(D3K)~\*{DDRM\*}
.xx "specified number/" "delay: delay" "process execution for a" "" delay(D3DK)~\*{DDRM\*}
.xx "occurrence of an/" "sleep: suspend" "process execution pending" "" sleep(D3K)~\*{DDRM\*}
.xx "" "/proc:" "process file system." "" proc(4)~\*{SARM\*}
.xx "" "killpg: send signal to a" "process group." "" killpg(3)~\*{BSD\*}
.xx "" "/getppid, getpgid: get process," "process group, and parent/" "" getpid(2)~\*{PRM\*}
.xx "" "setpgid: set" "process group ID." "" setpgid(2)~\*{PRM\*}
.xx "" "setpgrp: set" "process group ID." "" setpgrp(2)~\*{PRM\*}
.xx "" "set terminal foreground" "process group id." "tcsetpgrp:" tcsetpgrp(3C)~\*{PRM\*}
.xx "" "process group, and parent" "process IDs." "/get process," getpid(2)~\*{PRM\*}
.xx "efficient way." "vfork: spawn new" "process in a virtual memory" "" vfork(2)~\*{PRM\*}
.xx "" "lock: lock a" "process in primary memory." "" lock(2)~\*{ACG\*}
.xx "SMTP mail queue." "smtpsched:" "process messages queued in the" "" smtpsched(1M)~\*{SARM\*}
.xx "" "priority of a time-sharing" "process." "nice: change" nice(2)~\*{PRM\*}
.xx "" "kill: send a signal to a" "process or a group of processes." "" kill(2)~\*{PRM\*}
.xx "" "/sigsendset: send a signal to a" "process or a group of processes." "" sigsend(2)~\*{PRM\*}
.xx "" "pclose: initiate pipe to/from a" "process." "popen," popen(3S)~\*{PRM\*}
.xx "" "/getpgrp, getppid, getpgid: get" "process, process group, and/" "" getpid(2)~\*{PRM\*}
.xx "" "Remote File Sharing daemon" "process." "rfudaemon:" rfudaemon(1M)~\*{NUAG\*}
.xx "" "Remote File Sharing daemon" "process." "rfudaemon:" rfudaemon(1M)~\*{SARM\*}
.xx "administration." "dispadmin:" "process scheduler" "" dispadmin(1M)~\*{SARM\*}
.xx "" "priocntl:" "process scheduler control." "" priocntl(1)~\*{URM\*}
.xx "" "priocntl:" "process scheduler control." "" priocntl(2)~\*{PRM\*}
.xx "" "priocntlset: generalized" "process scheduler control." "" priocntlset(2)~\*{PRM\*}
.xx "" "ps: report" "process status." "" ps(1)~\*{URM\*}
.xx "" "lock into memory or unlock" "process, text, or data." "plock:" plock(2)~\*{PRM\*}
.xx "" "times: get process and child" "process times." "" times(2)~\*{PRM\*}
.xx "" "times: get" "process times." "" times(3C)~\*{BSD\*}
.xx "" "waitid: wait for child" "process to change state." "" waitid(2)~\*{PRM\*}
.xx "" "waitpid: wait for child" "process to change state." "" waitpid(2)~\*{PRM\*}
.xx "" "wait: wait for child" "process to stop or terminate." "" wait(2)~\*{PRM\*}
.xx "" "/WIFSIGNALED, WIFEXITED: wait for" "process to terminate or stop." "" wait(3)~\*{BSD\*}
.xx "" "ptrace:" "process trace." "" ptrace(2)~\*{PRM\*}
.xx "" "pause: suspend" "process until signal." "" pause(2)~\*{PRM\*}
.xx "" "a signal mask and suspend" "process until signal." "/install" sigsuspend(2)~\*{PRM\*}
.xx "" "sigsem: signal a" "process waiting on a semaphore." "" sigsem(2)~\*{ACG\*}
.xx "" "killall: kill all active" "processes." "" killall(1M)~\*{SARM\*}
.xx "" "get core images of running" "processes." "gcore:" gcore(1)~\*{URM\*}
.xx "" "to a process or a group of" "processes." "kill: send a signal" kill(2)~\*{PRM\*}
.xx "block I/O." "biowait: suspend" "processes pending completion of" "" biowait(D3DK)~\*{DDRM\*}
.xx "" "display the status of current" "processes." "ps:" ps(1)~\*{BSD\*}
.xx "" "after block I/O and wakeup" "processes." "/release buffer" biodone(D3DK)~\*{DDRM\*}
.xx "" "alter priority of running" "processes." "renice:" renice(1M)~\*{BSD\*}
.xx "" "to a process or a group of" "processes." "/send a signal" sigsend(2)~\*{PRM\*}
.xx "" "pollwakeup: inform polling" "processes that an event has/" "" pollwakeup(D3DK)~\*{DDRM\*}
.xx "structure." "fuser: identify" "processes using a file or file" "" fuser(1M)~\*{SARM\*}
.xx "" "ypbind: NIS server and binder" "processes." "ypserv," ypserv(1M)~\*{NI\*}
.xx "" "awk: pattern scanning and" "processing language." "" awk(1)~\*{URM\*}
.xx "" "nawk: pattern scanning and" "processing language." "" nawk(1)~\*{URM\*}
.xx "" "mailx: interactive message" "processing system." "" mailx(1)~\*{URM\*}
.xx "" "halt: stop the" "processor." "" halt(1M)~\*{BSD\*}
.xx "" "m4: macro" "processor." "" m4(1)~\*{PRM\*}
.xx "" "reboot: reboot system or halt" "processor." "" reboot(3)~\*{BSD\*}
.xx "subsystem." "form_driver: command" "processor for the forms" "" form_driver(3X)~\*{CHAR\*}
.xx "subsystem." "menu_driver: command" "processor for the menus" "" menu_driver(3X)~\*{CHAR\*}
.xx "" "reset: resets the" "processor in a given slot." "" reset(8iref)~\*{MBRMAN\*}
.xx "" "/parameter string on the" "processor in the given slot." "" initbp(8iref)~\*{MBRMAN\*}
.xx "host." "mach: display the" "processor type of the current" "" mach(1)~\*{BSD\*}
.xx "" "machid: get" "processor type truth value." "" machid(1)~\*{URM\*}
.xx "configuration." "idconfig:" "produce a new kernel" "" idconfig(1M)~\*{ISDG\*}
.xx "configuration." "idconfig:" "produce a new kernel" "" idconfig(1M)~\*{SARM\*}
.xx "" "pkgmk:" "produce an installable package." "" pkgmk(1)~\*{ISDG\*}
.xx "" "t_error:" "produce error message." "" t_error(3N)~\*{NI\*}
.xx "" "" "prof: display profile data." "" prof(1)~\*{PRM\*}
.xx "" "" "prof: profile within a function." "" prof(5)~\*{PRM\*}
.xx "" "" "profil: execution time profile." "" profil(2)~\*{PRM\*}
.xx "" "monitor: prepare execution" "profile." "" monitor(3C)~\*{PRM\*}
.xx "" "profil: execution time" "profile." "" profil(2)~\*{PRM\*}
.xx "" "prof: display" "profile data." "" prof(1)~\*{PRM\*}
.xx "" "line-by-line execution count" "profile data." "lprof: display" lprof(1)~\*{PRM\*}
.xx "environment at login time." "" "profile: setting up an" "" profile(4)~\*{SARM\*}
.xx "" "prof:" "profile within a function." "" prof(5)~\*{PRM\*}
.xx "" "fusage: disk access" "profiler." "" fusage(1M)~\*{NUAG\*}
.xx "" "fusage: disk access" "profiler." "" fusage(1M)~\*{SARM\*}
.xx "" "prf: operating system" "profiler." "" prf(7)~\*{SARM\*}
.xx "prfsnap, prfpr: UNIX system/" "" "profiler: prfld, prfstat, prfdc," "" profiler(1M)~\*{SARM\*}
.xx "" "prfsnap, prfpr: UNIX system" "profiler." "/prfstat, prfdc," profiler(1M)~\*{SARM\*}
.xx "" "boot: UNIX system boot" "program." "" boot(1M)~\*{SARM\*}
.xx "" "ftp: file transfer" "program." "" ftp(1)~\*{NUAG\*}
.xx "" "ftp: file transfer" "program." "" ftp(1)~\*{URM\*}
.xx "" "lpc: line printer control" "program." "" lpc(1M)~\*{BSD\*}
.xx "" "raise: send signal to" "program." "" raise(3C)~\*{PRM\*}
.xx "" "talkd, in.talkd: server for talk" "program." "" talkd(1M)~\*{NUAG\*}
.xx "" "talkd, in.talkd: server for talk" "program." "" talkd(1M)~\*{SARM\*}
.xx "" "tftp: trivial file transfer" "program." "" tftp(1)~\*{NUAG\*}
.xx "" "tftp: trivial file transfer" "program." "" tftp(1)~\*{URM\*}
.xx "" "units: conversion" "program." "" units(1)~\*{URM\*}
.xx "subsequent hardware/" "dma_prog:" "program a DMA operation for a" "" dma_prog(D3X)~\*{DDRM\*}
.xx "subsequent/" "dma_swsetup:" "program a DMA operation for a" "" dma_swsetup(D3X)~\*{DDRM\*}
.xx "" "assert: verify" "program assertion." "" assert(3X)~\*{PRM\*}
.xx "" "cb: C" "program beautifier." "" cb(1)~\*{PRM\*}
.xx "" "lint: a C" "program checker." "" lint(1)~\*{PRM\*}
.xx "" "cxref: generate C" "program cross-reference." "" cxref(1)~\*{PRM\*}
.xx "" "interactively examine a C" "program." "cscope:" cscope(1)~\*{PRM\*}
.xx "" "ctrace: C" "program debugger." "" ctrace(1)~\*{PRM\*}
.xx "" "etext, edata: last locations in" "program." "end," end(3C)~\*{PRM\*}
.xx "" "postmd: matrix display" "program for PostScript printers." "" postmd(1)~\*{URM\*}
.xx "" "uucico: file transport" "program for the uucp system." "" uucico(1M)~\*{SARM\*}
.xx "" "/retrieve class-dependent" "program header table." "" elf_getphdr(3E)~\*{PRM\*}
.xx "" "catgets: read a" "program message." "" catgets(3C)~\*{PRM\*}
.xx "" "rpc: rpc" "program number data base." "" rpc(4)~\*{NI\*}
.xx "" "universal addresses to RPC" "program number mapper." "rpcbind:" rpcbind(1M)~\*{NI\*}
.xx "" "universal addresses to RPC" "program number mapper." "rpcbind:" rpcbind(1M)~\*{NUAG\*}
.xx "" "ccifree: frees a line discipline" "program on the communications/" "" ccifree(1iref)~\*{MBRMAN\*}
.xx "" "cciload: load a line discipline" "program on to the communications/" "" cciload(1iref)~\*{MBRMAN\*}
.xx "" "/setpriority: get/set" "program scheduling priority." "" getpriority(3)~\*{BSD\*}
.xx "" "and remove ifdef'ed lines from C" "program source." "/resolve" unifdef(1)~\*{BSD\*}
.xx "" "STREAMS error logger cleanup" "program." "strclean:" strclean(1M)~\*{SARM\*}
.xx "" "STREAMS error logger cleanup" "program." "strclean:" strclean(1M)~\*{STRM\*}
.xx "" "atexit: add" "program termination routine." "" atexit(3C)~\*{PRM\*}
.xx "" "for the uucp file transport" "program." "uusched: the scheduler" uusched(1M)~\*{SARM\*}
.xx "" "intro: introduction to" "programming commands." "" intro(1)~\*{PRM\*}
.xx "" "standard/restricted command and" "programming language." "/a" ksh(1)~\*{URM\*}
.xx "tasks." "lex: generate" "programs for simple lexical" "" lex(1)~\*{PRM\*}
.xx "" "to commands and application" "programs." "intro: introduction" intro(1)~\*{URM\*}
.xx "" "setlocale: modify and query a" "program's locale." "" setlocale(3C)~\*{PRM\*}
.xx "" "update, and regenerate groups of" "programs." "make: maintain," make(1)~\*{PRM\*}
.xx "" "commands and application" "programs." "/to maintenance" intro(1M)~\*{SARM\*}
.xx "item." "ckitem: build a menu;" "prompt for and return a menu" "" ckitem(1)~\*{ISDG\*}
.xx "item." "ckitem: build a menu;" "prompt for and return a menu" "" ckitem(1)~\*{SARM\*}
.xx "keyword." "ckkeywd:" "prompt for and validate a" "" ckkeywd(1)~\*{ISDG\*}
.xx "keyword." "ckkeywd:" "prompt for and validate a" "" ckkeywd(1)~\*{SARM\*}
.xx "" "/errdate, helpdate, valdate:" "prompt for and validate a date." "" ckdate(1)~\*{ISDG\*}
.xx "" "/errdate, helpdate, valdate:" "prompt for and validate a date." "" ckdate(1)~\*{SARM\*}
.xx "" "ckgid, errgid, helpgid, valgid:" "prompt for and validate a group/" "" ckgid(1)~\*{ISDG\*}
.xx "" "ckgid, errgid, helpgid, valgid:" "prompt for and validate a group/" "" ckgid(1)~\*{SARM\*}
.xx "ID." "ckuid:" "prompt for and validate a user" "" ckuid(1)~\*{ISDG\*}
.xx "ID." "ckuid:" "prompt for and validate a user" "" ckuid(1)~\*{SARM\*}
.xx "integer." "ckrange:" "prompt for and validate an" "" ckrange(1)~\*{ISDG\*}
.xx "integer." "ckrange:" "prompt for and validate an" "" ckrange(1)~\*{SARM\*}
.xx "" "ckyorn:" "prompt for and validate yes/no." "" ckyorn(1)~\*{ISDG\*}
.xx "" "ckyorn:" "prompt for and validate yes/no." "" ckyorn(1)~\*{SARM\*}
.xx "pathname." "ckpath: display a" "prompt; verify and return a" "" ckpath(1)~\*{ISDG\*}
.xx "pathname." "ckpath: display a" "prompt; verify and return a" "" ckpath(1)~\*{SARM\*}
.xx "string answer." "ckstr: display a" "prompt; verify and return a" "" ckstr(1)~\*{ISDG\*}
.xx "string answer." "ckstr: display a" "prompt; verify and return a" "" ckstr(1)~\*{SARM\*}
.xx "of day." "cktime: display a" "prompt; verify and return a time" "" cktime(1)~\*{ISDG\*}
.xx "of day." "cktime: display a" "prompt; verify and return a time" "" cktime(1)~\*{SARM\*}
.xx "integer value." "ckint: display a" "prompt; verify and return an" "" ckint(1)~\*{ISDG\*}
.xx "integer value." "ckint: display a" "prompt; verify and return an" "" ckint(1)~\*{SARM\*}
.xx "" "and service media insertion" "prompts." "/restore requests" rsoper(1M)~\*{SARM\*}
.xx "" "to service media insertion" "prompts." "/with backup operations" bkoper(1M)~\*{SARM\*}
.xx "map." "yppush: force" "propagation of a changed NIS" "" yppush(1M)~\*{NI\*}
.xx "network interfaces." "if: general" "properties of Internet Protocol" "" if(7)~\*{NUAG\*}
.xx "" "mprotect: set" "protection of memory mapping." "" mprotect(2)~\*{PRM\*}
.xx "" "ARP: Address Resolution" "Protocol." "" ARP(7)~\*{NUAG\*}
.xx "" "ARP: Address Resolution" "Protocol." "" ARP(7)~\*{SARM\*}
.xx "" "ICMP: Internet Control Message" "Protocol." "" ICMP(7)~\*{NI\*}
.xx "" "ICMP: Internet Control Message" "Protocol." "" ICMP(7)~\*{NUAG\*}
.xx "" "ICMP: Internet Control Message" "Protocol." "" ICMP(7)~\*{SARM\*}
.xx "" "IP: Internet" "Protocol." "" IP(7)~\*{NI\*}
.xx "" "IP: Internet" "Protocol." "" IP(7)~\*{NUAG\*}
.xx "" "IP: Internet" "Protocol." "" IP(7)~\*{SARM\*}
.xx "" "UDP: Internet User Datagram" "Protocol." "" UDP(7)~\*{NI\*}
.xx "" "UDP: Internet User Datagram" "Protocol." "" UDP(7)~\*{NUAG\*}
.xx "" "UDP: Internet User Datagram" "Protocol." "" UDP(7)~\*{SARM\*}
.xx "" "rpcgen: an RPC" "protocol compiler." "" rpcgen(1)~\*{NI\*}
.xx "" "rci: debug console/rci" "protocol driver." "" rci(7iref)~\*{MBRMAN\*}
.xx "" "setprotoent, endprotoent: get" "protocol entry." "/getprotobyname," getprotoent(3N)~\*{NI\*}
.xx "" "inet: Internet" "protocol family." "" inet(7)~\*{NUAG\*}
.xx "" "inet: Internet" "protocol family." "" inet(7)~\*{SARM\*}
.xx "" "protocols:" "protocol name data base." "" protocols(4)~\*{NUAG\*}
.xx "" "protocols:" "protocol name data base." "" protocols(4)~\*{SARM\*}
.xx "" "/general properties of Internet" "Protocol network interfaces." "" if(7)~\*{NUAG\*}
.xx "" "ftpd: file transfer" "protocol server." "" ftpd(1M)~\*{NUAG\*}
.xx "" "ftpd: file transfer" "protocol server." "" ftpd(1M)~\*{SARM\*}
.xx "" "telnetd: DARPA TELNET" "protocol server." "" telnetd(1M)~\*{NUAG\*}
.xx "" "telnetd: DARPA TELNET" "protocol server." "" telnetd(1M)~\*{SARM\*}
.xx "" "DARPA Reverse Address Resolution" "Protocol server." "rarpd:" rarpd(1M)~\*{NUAG\*}
.xx "" "DARPA Reverse Address Resolution" "Protocol server." "rarpd:" rarpd(1M)~\*{SARM\*}
.xx "" "DARPA Trivial File Transfer" "Protocol server." "tftpd:" tftpd(1M)~\*{NUAG\*}
.xx "" "DARPA Trivial File Transfer" "Protocol server." "tftpd:" tftpd(1M)~\*{SARM\*}
.xx "" "host using Simple Mail Transfer" "Protocol." "/SMTP mail to a remote" smtp(1M)~\*{SARM\*}
.xx "" "Internet Transmission Control" "Protocol." "TCP:" TCP(7)~\*{NI\*}
.xx "" "Internet Transmission Control" "Protocol." "TCP:" TCP(7)~\*{NUAG\*}
.xx "" "Internet Transmission Control" "Protocol." "TCP:" TCP(7)~\*{SARM\*}
.xx "" "trpt: transliterate" "protocol trace." "" trpt(1M)~\*{NUAG\*}
.xx "" "trpt: transliterate" "protocol trace." "" trpt(1M)~\*{SARM\*}
.xx "windowing terminal/" "layers:" "protocol used between host and" "" layers(5)~\*{PRM\*}
.xx "windowing terminal/" "layers:" "protocol used between host and" "" layers(5)~\*{SARM\*}
.xx "" "xtproto: multiplexed channels" "protocol used by xt driver." "" xtproto(5)~\*{PRM\*}
.xx "" "xtproto: multiplexed channels" "protocol used by xt driver." "" xtproto(5)~\*{SARM\*}
.xx "" "a remote system using the TELNET" "protocol." "/user interface to" telnet(1)~\*{NUAG\*}
.xx "" "a remote system using the TELNET" "protocol." "/user interface to" telnet(1)~\*{URM\*}
.xx "base." "" "protocols: protocol name data" "" protocols(4)~\*{NUAG\*}
.xx "base." "" "protocols: protocol name data" "" protocols(4)~\*{SARM\*}
.xx "information." "t_getinfo: get" "protocol-specific service" "" t_getinfo(3N)~\*{NI\*}
.xx "" "pkgproto: generate a" "prototype file." "" pkgproto(1)~\*{ISDG\*}
.xx "file." "" "prototype: package information" "" prototype(4)~\*{ISDG\*}
.xx "terminal modes." "tset:" "provide information for setting" "" tset(1)~\*{ACG\*}
.xx "terminal modes." "tset:" "provide information to set" "" tset(1)~\*{URM\*}
.xx "" "labelit (generic):" "provide labels for file systems." "" labelit(1M)~\*{SARM\*}
.xx "systems." "labelit (s5):" "provide labels for s5 file" "" labelit(1M)~\*{SARM\*}
.xx "systems." "labelit (ufs):" "provide labels for ufs file" "" labelit(1M)~\*{SARM\*}
.xx "" "true, false:" "provide truth values." "" true(1)~\*{URM\*}
.xx "" "get name of transport" "provider." "nlsprovider:" nlsprovider(3N)~\*{NI\*}
.xx "" "ticotsord: loopback transport" "providers." "ticlts, ticots," ticlts(7)~\*{NI\*}
.xx "ethernet node's/" "enetinfo:" "provides information on an" "" enetinfo(1iref)~\*{MBRMAN\*}
.xx "" "" "prs: print an SCCS file." "" prs(1)~\*{PRM\*}
.xx "commentary history of an SCCS/" "" "prt: display the delta and" "" prt(1)~\*{BSD\*}
.xx "" "/nulladm, prctmp, prdaily," "prtacct, runacct, shutacct,/" "" acctsh(1M)~\*{SARM\*}
.xx "current processes." "" "ps: display the status of" "" ps(1)~\*{BSD\*}
.xx "" "" "ps: report process status." "" ps(1)~\*{URM\*}
.xx "" "/supporting bus, serial, and" "PS/2 compatible mouse devices." "" mouse(7)~\*{ISDG\*}
.xx "" "/supporting bus, serial, and" "PS/2 compatible mouse devices." "" mouse(7)~\*{SARM\*}
.xx "module." "ptem: STREAMS" "Pseudo Terminal Emulation" "" ptem(7)~\*{STRM\*}
.xx "" "sxt:" "pseudo-device driver." "" sxt(7)~\*{SARM\*}
.xx "" "sxt:" "pseudo-device driver." "" sxt(7)~\*{STRM\*}
.xx "" "generate uniformly distributed" "pseudo-random numbers." "/lcong48:" drand48(3C)~\*{PRM\*}
.xx "" "/grant access to the slave" "pseudo-terminal device." "" grantpt(3C)~\*{STRM\*}
.xx "" "ptsname: get name of the slave" "pseudo-terminal device." "" ptsname(3C)~\*{STRM\*}
.xx "pair." "unlockpt: unlock a" "pseudo-terminal master/slave" "" unlockpt(3C)~\*{STRM\*}
.xx "messages." "psignal," "psiginfo: system signal" "" psignal(3C)~\*{PRM\*}
.xx "messages." "" "psignal, psiginfo: system signal" "" psignal(3C)~\*{PRM\*}
.xx "process." "" "psignal: send signal to a" "" psignal(D3K)~\*{DDRM\*}
.xx "signal messages." "" "psignal, sys_siglist: system" "" psignal(3)~\*{BSD\*}
.xx "Emulation module." "" "ptem: STREAMS Pseudo Terminal" "" ptem(7)~\*{STRM\*}
.xx "size in bytes." "" "ptob: convert size in pages to" "" ptob(D3DK)~\*{DDRM\*}
.xx "" "" "ptrace: process trace." "" ptrace(2)~\*{PRM\*}
.xx "pseudo-terminal device." "" "ptsname: get name of the slave" "" ptsname(3C)~\*{STRM\*}
.xx "" "keyserv: server for storing" "public and private keys." "" keyserv(1M)~\*{NI\*}
.xx "" "keyserv: server for storing" "public and private keys." "" keyserv(1M)~\*{NUAG\*}
.xx "" "publickey:" "public key database." "" publickey(4)~\*{NI\*}
.xx "" "publickey:" "public key database." "" publickey(4)~\*{NUAG\*}
.xx "" "/getsecretkey: retrieve" "public or secret key." "" publickey(3N)~\*{NI\*}
.xx "copy." "uuto, uupick:" "public UNIX-to-UNIX system file" "" uuto(1C)~\*{URM\*}
.xx "" "newkey: create a new key in the" "publickey database." "" newkey(1M)~\*{NI\*}
.xx "" "newkey: create a new key in the" "publickey database." "" newkey(1M)~\*{NUAG\*}
.xx "getsecretkey: retrieve public/" "" "publickey: getpublickey," "" publickey(3N)~\*{NI\*}
.xx "" "" "publickey: public key database." "" publickey(4)~\*{NI\*}
.xx "" "" "publickey: public key database." "" publickey(4)~\*{NUAG\*}
.xx "a message." "" "pullupmsg: concatenate bytes in" "" pullupmsg(D3DK)~\*{DDRM\*}
.xx "" "/mvwgetch, ungetch: get (or" "push back) characters from/" "" curs_getch(3X)~\*{CHAR\*}
.xx "stream." "ungetc:" "push character back onto input" "" ungetc(3S)~\*{PRM\*}
.xx "" "/configure lists of automatically" "pushed STREAMS modules." "" autopush(1M)~\*{SARM\*}
.xx "" "/configure lists of automatically" "pushed STREAMS modules." "" autopush(1M)~\*{STRM\*}
.xx "" "putq:" "put a message on a queue." "" putq(D3DK)~\*{DDRM\*}
.xx "" "puts, fputs:" "put a string on a stream." "" puts(3S)~\*{PRM\*}
.xx "line." "message:" "put arguments on FMLI message" "" message(1F)~\*{CHAR\*}
.xx "" "putc, putchar, fputc, putw:" "put character or word on a/" "" putc(3S)~\*{PRM\*}
.xx "" "/read directory entries and" "put in a file system independent/" "" getdents(2)~\*{PRM\*}
.xx "preceding queue." "" "put: receive messages from the" "" put(D2DK)~\*{DDRM\*}
.xx "" "echo:" "put string on virtual output." "" echo(1F)~\*{CHAR\*}
.xx "head of a queue." "" "putbq: place a message at the" "" putbq(D3DK)~\*{DDRM\*}
.xx "character or word on a stream." "" "putc, putchar, fputc, putw: put" "" putc(3S)~\*{PRM\*}
.xx "character or word on a/" "putc," "putchar, fputc, putw: put" "" putc(3S)~\*{PRM\*}
.xx "to a queue." "" "putctl: send a control message" "" putctl(D3DK)~\*{DDRM\*}
.xx "with a one-byte parameter to a/" "" "putctl1: send a control message" "" putctl1(D3DK)~\*{DDRM\*}
.xx "" "" "putdev: edits device table." "" putdev(1)~\*{SARM\*}
.xx "table." "" "putdgrp: edits device group" "" putdgrp(1)~\*{SARM\*}
.xx "environment." "" "putenv: change or add value to" "" putenv(3C)~\*{PRM\*}
.xx "stream." "" "putmsg: send a message on a" "" putmsg(2)~\*{PRM\*}
.xx "stream." "" "putmsg: send a message on a" "" putmsg(2)~\*{STRM\*}
.xx "next queue." "" "putnext: send a message to the" "" putnext(D3DK)~\*{DDRM\*}
.xx "" "/restartterm, tparm, tputs," "putp, vidputs, vidattr, mvcur,/" "" curs_terminfo(3X)~\*{CHAR\*}
.xx "entry." "" "putpwent: write password file" "" putpwent(3C)~\*{PRM\*}
.xx "" "" "putq: put a message on a queue." "" putq(D3DK)~\*{DDRM\*}
.xx "memory pool." "mps_free_msgbuf:" "puts a buffer back into the free" "" mps_free_msgbuf(D3D)~\*{DDRM\*}
.xx "stream." "" "puts, fputs: put a string on a" "" puts(3S)~\*{PRM\*}
.xx "file entry." "" "putspent: write shadow password" "" putspent(3C)~\*{PRM\*}
.xx "" "/getutent, getutid, getutline," "pututline, setutent, endutent,/" "" getut(3C)~\*{PRM\*}
.xx "" "getutxent, getutxid, getutxline," "pututxline, setutxent,/" "getutx:" getutx(3C)~\*{PRM\*}
.xx "stream." "putc, putchar, fputc," "putw: put character or word on a" "" putc(3S)~\*{PRM\*}
.xx "" "/keyname, filter, use_env," "putwin, getwin, delay_output,/" "" curs_util(3X)~\*{CHAR\*}
.xx "entries." "" "pwck: check password database" "" pwck(1M)~\*{BSD\*}
.xx "checkers." "" "pwck, grpck: password/group file" "" pwck(1M)~\*{SARM\*}
.xx "/etc/shadow with information/" "" "pwconv: install and update" "" pwconv(1M)~\*{SARM\*}
.xx "" "" "pwd: working directory name." "" pwd(1)~\*{URM\*}
.xx "service routine to be run." "" "qenable: schedule a queue's" "" qenable(D3DK)~\*{DDRM\*}
.xx "streamer interface." "qt:" "QIC cartridge magnetic tape" "" qt(7)~\*{SARM\*}
.xx "" "/raw, noraw, noqiflush," "qiflush, timeout, wtimeout,/" "" curs_inopts(3X)~\*{CHAR\*}
.xx "initialization structure." "" "qinit: STREAMS queue" "" qinit(D4DK)~\*{DDRM\*}
.xx "opposite direction in a stream." "" "qreply: send a message in the" "" qreply(D3DK)~\*{DDRM\*}
.xx "messages on a queue." "" "qsize: find the number of" "" qsize(D3DK)~\*{DDRM\*}
.xx "" "" "qsort: quicker sort." "" qsort(3C)~\*{PRM\*}
.xx "streamer interface." "" "qt: QIC cartridge magnetic tape" "" qt(7)~\*{SARM\*}
.xx "" "setlocale: modify and" "query a program's locale." "" setlocale(3C)~\*{PRM\*}
.xx "interactively." "nslookup:" "query name servers" "" nslookup(1M)~\*{NUAG\*}
.xx "interactively." "nslookup:" "query name servers" "" nslookup(1M)~\*{SARM\*}
.xx "" "Remote File Sharing name server" "query." "nsquery:" nsquery(1M)~\*{NUAG\*}
.xx "" "Remote File Sharing name server" "query." "nsquery:" nsquery(1M)~\*{SARM\*}
.xx "" "termname: curses environment" "query routines." "/termattrs," curs_termattrs(3X)~\*{CHAR\*}
.xx "" "strchg, strconf: change or" "query stream configuration." "" strchg(1)~\*{STRM\*}
.xx "" "strchg, strconf: change or" "query stream configuration." "" strchg(1)~\*{URM\*}
.xx "" "tput: initialize a terminal or" "query terminfo database." "" tput(1)~\*{URM\*}
.xx "" "flushq: flush messages on a" "queue." "" flushq(D3DK)~\*{DDRM\*}
.xx "" "insq: insert a message into a" "queue." "" insq(D3DK)~\*{DDRM\*}
.xx "" "msgget: get message" "queue." "" msgget(2)~\*{PRM\*}
.xx "" "putq: put a message on a" "queue." "" putq(D3DK)~\*{DDRM\*}
.xx "" "RD: get a pointer to the read" "queue." "" RD(D3DK)~\*{DDRM\*}
.xx "" "rmvq: remove a message from a" "queue." "" rmvq(D3DK)~\*{DDRM\*}
.xx "" "WR: get a pointer to the write" "queue." "" WR(D3DK)~\*{DDRM\*}
.xx "" "about a queue or band of the" "queue." "/change information" strqset(D3DK)~\*{DDRM\*}
.xx "" "noenable: prevent a" "queue from being scheduled." "" noenable(D3DK)~\*{DDRM\*}
.xx "" "get the next message from a" "queue." "getq:" getq(D3DK)~\*{DDRM\*}
.xx "" "qinit: STREAMS" "queue initialization structure." "" qinit(D4DK)~\*{DDRM\*}
.xx "" "insert/remove element from a" "queue." "insque, remque:" insque(3C)~\*{PRM\*}
.xx "" "SAMESTR: test if next" "queue is same type." "" SAMESTR(D3DK)~\*{DDRM\*}
.xx "" "remove jobs from the printer" "queue." "lprm:" lprm(1)~\*{BSD\*}
.xx "" "smtpqer:" "queue mail for delivery by SMTP." "" smtpqer(1M)~\*{SARM\*}
.xx "" "lpq: display the" "queue of printer jobs." "" lpq(1)~\*{BSD\*}
.xx "" "strqget: get information about a" "queue or band of the queue." "" strqget(D3DK)~\*{DDRM\*}
.xx "" "/change information about a" "queue or band of the queue." "" strqset(D3DK)~\*{DDRM\*}
.xx "" "get pointer to queue's partner" "queue." "OTHERQ:" OTHERQ(D3DK)~\*{DDRM\*}
.xx "" "lpusers: set printing" "queue priorities." "" lpusers(1M)~\*{SARM\*}
.xx "" "messages from the preceding" "queue." "put: receive" put(D2DK)~\*{DDRM\*}
.xx "" "place a message at the head of a" "queue." "putbq:" putbq(D3DK)~\*{DDRM\*}
.xx "" "send a control message to a" "queue." "putctl:" putctl(D3DK)~\*{DDRM\*}
.xx "" "send a message to the next" "queue." "putnext:" putnext(D3DK)~\*{DDRM\*}
.xx "" "find the number of messages on a" "queue." "qsize:" qsize(D3DK)~\*{DDRM\*}
.xx "" "rmount:" "queue remote resource mounts." "" rmount(1M)~\*{NUAG\*}
.xx "" "rmount:" "queue remote resource mounts." "" rmount(1M)~\*{SARM\*}
.xx "memory/" "ipcrm: remove a message" "queue, semaphore set, or shared" "" ipcrm(1)~\*{URM\*}
.xx "" "with a one-byte parameter to a" "queue." "/send a control message" putctl1(D3DK)~\*{DDRM\*}
.xx "" "messages queued in the SMTP mail" "queue." "smtpsched: process" smtpsched(1M)~\*{SARM\*}
.xx "" "" "queue: STREAMS queue structure." "" queue(D4DK)~\*{DDRM\*}
.xx "" "about a queue or band of the" "queue." "strqget: get information" strqget(D3DK)~\*{DDRM\*}
.xx "" "queue: STREAMS" "queue structure." "" queue(D4DK)~\*{DDRM\*}
.xx "" "enableok: allow a" "queue to be serviced." "" enableok(D3DK)~\*{DDRM\*}
.xx "" "smtpsched: process messages" "queued in the SMTP mail queue." "" smtpsched(1M)~\*{SARM\*}
.xx "" "srv: service" "queued messages." "" srv(D2DK)~\*{DDRM\*}
.xx "" "rumount: cancel" "queued remote resource request." "" rumount(1M)~\*{NUAG\*}
.xx "" "rumount: cancel" "queued remote resource request." "" rumount(1M)~\*{SARM\*}
.xx "" "rmnttry: attempt to mount" "queued remote resources." "" rmnttry(1M)~\*{NUAG\*}
.xx "" "rmnttry: attempt to mount" "queued remote resources." "" rmnttry(1M)~\*{SARM\*}
.xx "times." "atq: display the jobs" "queued to run at specified" "" atq(1)~\*{URM\*}
.xx "" "OTHERQ: get pointer to" "queue's partner queue." "" OTHERQ(D3DK)~\*{DDRM\*}
.xx "transmission/" "mps_AMPsend_rsvp:" "queues request messages for" "" mps_AMPsend_rsvp(D3D)~\*{DDRM\*}
.xx "run." "qenable: schedule a" "queue's service routine to be" "" qenable(D3DK)~\*{DDRM\*}
.xx "" "qsort:" "quicker sort." "" qsort(3C)~\*{PRM\*}
.xx "" "a command immune to hangups and" "quits." "nohup: run" nohup(1)~\*{URM\*}
.xx "ownership." "" "quot: summarize file system" "" quot(1M)~\*{SARM\*}
.xx "" "quota: display a user's disk" "quota and usage." "" quota(1M)~\*{SARM\*}
.xx "" "quotacheck: file system" "quota consistency checker." "" quotacheck(1M)~\*{SARM\*}
.xx "quota and usage." "" "quota: display a user's disk" "" quota(1M)~\*{SARM\*}
.xx "consistency checker." "" "quotacheck: file system quota" "" quotacheck(1M)~\*{SARM\*}
.xx "quotas on and off." "quotaon," "quotaoff: turn file system" "" quotaon(1M)~\*{SARM\*}
.xx "system quotas on and off." "" "quotaon, quotaoff: turn file" "" quotaon(1M)~\*{SARM\*}
.xx "" "edquota: edit user" "quotas." "" edquota(1M)~\*{SARM\*}
.xx "" "repquota: summarize" "quotas for a file system." "" repquota(1M)~\*{SARM\*}
.xx "" "quotaoff: turn file system" "quotas on and off." "quotaon," quotaon(1M)~\*{SARM\*}
.xx "" "div, ldiv: compute the" "quotient and remainder." "" div(3C)~\*{PRM\*}
.xx "" "" "raise: send signal to program." "" raise(3C)~\*{PRM\*}
.xx "" "ramd: Multibus" "RAM disk driver." "" ramd(7iref)~\*{MBRMAN\*}
.xx "" "cram\- CMOS" "RAM interface." "" cram(7)~\*{SARM\*}
.xx "" "" "ramd: Multibus RAM disk driver." "" ramd(7iref)~\*{MBRMAN\*}
.xx "random-number generator." "" "rand, srand: simple" "" rand(3C)~\*{PRM\*}
.xx "number generator." "" "rand, srand: simple random" "" rand(3C)~\*{BSD\*}
.xx "medium." "disk:" "random access bulk storage" "" disk(7)~\*{SARM\*}
.xx "" "elf_rand:" "random archive member access." "" elf_rand(3E)~\*{PRM\*}
.xx "number." "" "random: generate a random" "" random(1)~\*{ACG\*}
.xx "" "fsirand: install" "random inode generation numbers." "" fsirand(1)~\*{BSD\*}
.xx "" "random: generate a" "random number." "" random(1)~\*{ACG\*}
.xx "" "rand, srand: simple" "random number generator." "" rand(3C)~\*{BSD\*}
.xx "" "/initstate, setstate: better" "random number generator;/" "" random(3)~\*{BSD\*}
.xx "setstate: better random number/" "" "random, srandom, initstate," "" random(3)~\*{BSD\*}
.xx "" "rand, srand: simple" "random-number generator." "" rand(3C)~\*{PRM\*}
.xx "Resolution Protocol server." "" "rarpd: DARPA Reverse Address" "" rarpd(1M)~\*{NUAG\*}
.xx "Resolution Protocol server." "" "rarpd: DARPA Reverse Address" "" rarpd(1M)~\*{SARM\*}
.xx "" "freerbuf: free a" "raw buffer header." "" freerbuf(D3DK)~\*{DDRM\*}
.xx "" "getrbuf: get a" "raw buffer header." "" getrbuf(D3DK)~\*{DDRM\*}
.xx "" "physiock: validate and issue" "raw I/O request." "" physiock(D3DK)~\*{DDRM\*}
.xx "" "/meta, nodelay, notimeout," "raw, noraw, noqiflush, qiflush,/" "" curs_inopts(3X)~\*{CHAR\*}
.xx "stop the operating system." "" "rc0: run commands performed to" "" rc0(1M)~\*{SARM\*}
.xx "multi-user environment." "" "rc2: run commands performed for" "" rc2(1M)~\*{SARM\*}
.xx "stop and reboot the operating/" "" "rc6: run commands performed to" "" rc6(1M)~\*{SARM\*}
.xx "driver." "" "rci: debug console/rci protocol" "" rci(7iref)~\*{MBRMAN\*}
.xx "" "" "rcp: remote file copy." "" rcp(1)~\*{NUAG\*}
.xx "" "" "rcp: remote file copy." "" rcp(1)~\*{URM\*}
.xx "queue." "" "RD: get a pointer to the read" "" RD(D3DK)~\*{DDRM\*}
.xx "remote host." "" "rdate: set system date from a" "" rdate(1M)~\*{NUAG\*}
.xx "remote host." "" "rdate: set system date from a" "" rdate(1M)~\*{SARM\*}
.xx "data to be read." "" "rdchk: check to see if there is" "" rdchk(2)~\*{ACG\*}
.xx "to buffer." "repinsw:" "read 16 bit words from I/O port" "" repinsw(D3D)~\*{DDRM\*}
.xx "to buffer." "repinsd:" "read 32 bit words from I/O port" "" repinsd(D3D)~\*{DDRM\*}
.xx "16 bit I/O port." "inw:" "read a 16 bit short word from a" "" inw(D3D)~\*{DDRM\*}
.xx "I/O port." "inl:" "read a 32 bit word from a 32 bit" "" inl(D3D)~\*{DDRM\*}
.xx "port." "inb:" "read a byte from a 8 bit I/O" "" inb(D3D)~\*{DDRM\*}
.xx "" "getpass:" "read a password." "" getpass(3C)~\*{PRM\*}
.xx "" "catgets:" "read a program message." "" catgets(3C)~\*{PRM\*}
.xx "manufacturer's defect/" "mdl:" "read and optionally write the" "" mdl(1iref)~\*{MBRMAN\*}
.xx "buffer." "repinsb:" "read bytes from I/O port to" "" repinsb(D3D)~\*{DDRM\*}
.xx "" "read:" "read data from a device." "" read(D2DK)~\*{DDRM\*}
.xx "in a file system/" "getdents:" "read directory entries and put" "" getdents(2)~\*{PRM\*}
.xx "" "read:" "read from file." "" read(2)~\*{PRM\*}
.xx "" "mail, rmail:" "read mail or send mail to users." "" mail(1)~\*{URM\*}
.xx "" "line:" "read one line." "" line(1)~\*{URM\*}
.xx "" "RD: get a pointer to the" "read queue." "" RD(D3DK)~\*{DDRM\*}
.xx "" "to see if there is data to be" "read." "rdchk: check" rdchk(2)~\*{ACG\*}
.xx "" "" "read: read data from a device." "" read(D2DK)~\*{DDRM\*}
.xx "" "" "read: read from file." "" read(2)~\*{PRM\*}
.xx "delimiter." "bgets:" "read stream up to next" "" bgets(3G)~\*{PRM\*}
.xx "link." "readlink:" "read the value of a symbolic" "" readlink(2)~\*{PRM\*}
.xx "" "/scr_restore, scr_init, scr_set:" "read (write) a curses screen/" "" curs_scr_dump(3X)~\*{CHAR\*}
.xx "rewinddir,/" "directory: opendir," "readdir, telldir, seekdir," "" directory(3C)~\*{BSD\*}
.xx "rewinddir,/" "directory: opendir," "readdir, telldir, seekdir," "" directory(3C)~\*{PRM\*}
.xx "gets longest line." "" "readfile, longline: reads file," "" readfile(1F)~\*{CHAR\*}
.xx "" "open: open for" "reading or writing." "" open(2)~\*{PRM\*}
.xx "" "lock or unlock a file region for" "reading or writing." "locking:" locking(2)~\*{ACG\*}
.xx "symbolic link." "" "readlink: read the value of a" "" readlink(2)~\*{PRM\*}
.xx "" "readfile, longline:" "reads file, gets longest line." "" readfile(1F)~\*{CHAR\*}
.xx "specifications." "idmkinit:" "reads files containing" "" idmkinit(1M)~\*{ISDG\*}
.xx "specifications." "idmkinit:" "reads files containing" "" idmkinit(1M)~\*{SARM\*}
.xx "the board and returns/" "ics_read:" "reads interconnect registers of" "" ics_read(3iref)~\*{MBRMAN\*}
.xx "number of/" "ics_rdwr:" "reads or writes a specified" "" ics_rdwr(D3D)~\*{DDRM\*}
.xx "" "idmknod: removes nodes and" "reads specifications of nodes." "" idmknod(1M)~\*{ISDG\*}
.xx "" "idmknod: removes nodes and" "reads specifications of nodes." "" idmknod(1M)~\*{SARM\*}
.xx "of the board in/" "ics_find _rec:" "reads the interconnect register" "" ics_find_rec(D3D)~\*{DDRM\*}
.xx "of the board in the/" "ics_read:" "reads the interconnect register" "" ics_read(D3D)~\*{DDRM\*}
.xx "" "lseek: move" "read/write file pointer." "" lseek(2)~\*{PRM\*}
.xx "" "tirdwr: Transport Interface" "read/write interface STREAMS/" "" tirdwr(7)~\*{STRM\*}
.xx "" "setregid: set" "real and effective group IDs." "" setregid(3)~\*{BSD\*}
.xx "" "setreuid: set" "real and effective user IDs." "" setreuid(3)~\*{BSD\*}
.xx "" "realpath: returns the" "real file name." "" realpath(3C)~\*{PRM\*}
.xx "" "/get real user, effective user," "real group, and effective group/" "" getuid(2)~\*{PRM\*}
.xx "" "rtc:" "real time clock interface." "" rtc(7)~\*{SARM\*}
.xx "" "/geteuid, getgid, getegid: get" "real user, effective user, real/" "" getuid(2)~\*{PRM\*}
.xx "mallinfo: memory/" "malloc, free," "realloc, calloc, mallopt," "" malloc(3X)~\*{PRM\*}
.xx "valloc,: memory/" "malloc, free," "realloc, calloc, memalign," "" malloc(3C)~\*{PRM\*}
.xx "name." "" "realpath: returns the real file" "" realpath(3C)~\*{PRM\*}
.xx "table." "rt_dptbl:" "real-time dispatcher parameter" "" rt_dptbl(4)~\*{SARM\*}
.xx "processor." "" "reboot: reboot system or halt" "" reboot(3)~\*{BSD\*}
.xx "system." "" "reboot: restart the operating" "" reboot(1M)~\*{BSD\*}
.xx "" "reboot:" "reboot system or halt processor." "" reboot(3)~\*{BSD\*}
.xx "" "/commands performed to stop and" "reboot the operating system." "" rc6(1M)~\*{SARM\*}
.xx "checking/" "fastboot, fasthalt:" "reboot/halt the system without" "" fastboot(1M)~\*{BSD\*}
.xx "mail aliases file." "newaliases:" "rebuild the data base for the" "" newaliases(1M)~\*{BSD\*}
.xx "" "ypmake:" "rebuild YP database." "" ypmake(1M)~\*{NI\*}
.xx "register of the board/" "ics_find" "_rec: reads the interconnect" "" ics_find_rec(D3D)~\*{DDRM\*}
.xx "" "t_rcvrel: acknowledge" "receipt of an orderly release/" "" t_rcvrel(3N)~\*{NI\*}
.xx "" "t_rcvudata:" "receive a data unit." "" t_rcvudata(3N)~\*{NI\*}
.xx "" "recv, recvfrom, recvmsg:" "receive a message from a socket." "" recv(3N)~\*{NI\*}
.xx "indication." "t_rcvuderr:" "receive a unit data error" "" t_rcvuderr(3N)~\*{NI\*}
.xx "sent over a connection." "t_rcv:" "receive data or expedited data" "" t_rcv(3N)~\*{NI\*}
.xx "" "smtpd:" "receive incoming SMTP messages." "" smtpd(1M)~\*{SARM\*}
.xx "preceding queue." "put:" "receive messages from the" "" put(D2DK)~\*{DDRM\*}
.xx "" "fromsmtp:" "receive RFC822 mail from SMTP." "" fromsmtp(1M)~\*{SARM\*}
.xx "connect request." "t_rcvconnect:" "receive the confirmation from a" "" t_rcvconnect(3N)~\*{NI\*}
.xx "" "mps_AMPsend_reply: replies to a" "received request that is part of/" "" mps_AMPsend_reply(D3D)~\*{DDRM\*}
.xx "request/" "mb2a_getreqfrag:" "Receives a data fragment of a" "" mb2a_getreqfrag(3tai)~\*{MBTAI\*}
.xx "request/" "mb2s_getreqfrag:" "Receives a data fragment of a" "" mb2s_getreqfrag(3tai)~\*{MBTAI\*}
.xx "" "/Sends a request message and" "receives a response." "" mb2s_sendrsvp(3tai)~\*{MBTAI\*}
.xx "messages in/" "mb2a_receive:" "Receives incoming Multibus II" "" mb2a_receive(3tai)~\*{MBTAI\*}
.xx "messages in/" "mb2s_receive:" "Receives incoming Multibus II" "" mb2s_receive(3tai)~\*{MBTAI\*}
.xx "fragments/" "mps_AMPreceive_frag:" "receives solicited data in" "" mps_AMPreceive_frag(D3D)~\*{DDRM\*}
.xx "corresponds to/" "mps_AMPreceive:" "receives solicited data that" "" mps_AMPreceive(D3D)~\*{DDRM\*}
.xx "" "space is not available at the" "receiving agent." "/when buffer" mps_AMPreceive_frag(D3D)~\*{DDRM\*}
.xx "" "/and sets up table entries for" "reception of reply messages." "" mps_AMPsend_rsvp(D3D)~\*{DDRM\*}
.xx "mail." "mail_pipe: invoke" "recipient command for incoming" "" mail_pipe(1M)~\*{SARM\*}
.xx "on a DMA/" "dma_disable: disable" "recognition of hardware requests" "" dma_disable(D3X)~\*{DDRM\*}
.xx "on a DMA/" "dma_enable: enable" "recognition of hardware requests" "" dma_enable(D3X)~\*{DDRM\*}
.xx "expression handler." "regex," "re_comp, re_exec: regular" "" regex(3)~\*{BSD\*}
.xx "" "floating-point value to decimal" "record." "/convert" floating_to_decimal(3)~\*{BSD\*}
.xx "" "ics_find_rec: finds a specific" "record in the interconnect space/" "" ics_find_rec(3iref)~\*{MBRMAN\*}
.xx "" "the host id field of the HOST ID" "record in this board's/" "/returns" ics_hostid(D3D)~\*{DDRM\*}
.xx "" "lockf:" "record locking on files." "" lockf(3C)~\*{PRM\*}
.xx "" "/convert decimal" "record to floating-point value." "" decimal_to_floating(3)~\*{BSD\*}
.xx "" "from per-process accounting" "records." "/command summary" acctcms(1M)~\*{SARM\*}
.xx "" "manipulate connect accounting" "records." "fwtmp, wtmpfix:" fwtmp(1M)~\*{SARM\*}
.xx "a message from a socket." "" "recv, recvfrom, recvmsg: receive" "" recv(3N)~\*{NI\*}
.xx "message from a socket." "recv," "recvfrom, recvmsg: receive a" "" recv(3N)~\*{NI\*}
.xx "a socket." "recv, recvfrom," "recvmsg: receive a message from" "" recv(3N)~\*{NI\*}
.xx "" "ed," "red: text editor." "" ed(1)~\*{URM\*}
.xx "" "setcolor:" "redefine or create a color." "" setcolor(1F)~\*{CHAR\*}
.xx "curses/" "/wnoutrefresh, doupdate," "redrawwin, wredrawln: refresh" "" curs_refresh(3X)~\*{CHAR\*}
.xx "handler." "regex, re_comp," "re_exec: regular expression" "" regex(3)~\*{BSD\*}
.xx "references from a bibliographic/" "" "refer: expand and insert" "" refer(1)~\*{BSD\*}
.xx "" "man: macros to format" "Reference Manual pages." "" man(7)~\*{BSD\*}
.xx "reference pages by/" "man: display" "reference manual pages; find" "" man(1)~\*{BSD\*}
.xx "" "/reference manual pages; find" "reference pages by keyword." "" man(1)~\*{BSD\*}
.xx "" "refer: expand and insert" "references from a bibliographic/" "" refer(1)~\*{BSD\*}
.xx "database." "lookbib: find" "references in a bibliographic" "" lookbib(1)~\*{BSD\*}
.xx "" "/is_wintouched: curses" "refresh control routines." "" curs_touch(3X)~\*{CHAR\*}
.xx "" "/doupdate, redrawwin, wredrawln:" "refresh curses windows and/" "" curs_refresh(3X)~\*{CHAR\*}
.xx "" "panels virtual screen" "refresh routine." "/update_panels:" panel_update(3X)~\*{CHAR\*}
.xx "doupdate,/" "curs_refresh:" "refresh, wrefresh, wnoutrefresh," "" curs_refresh(3X)~\*{CHAR\*}
.xx "execute regular expression." "" "regcmp, regex: compile and" "" regcmp(3G)~\*{PRM\*}
.xx "compile." "" "regcmp: regular expression" "" regcmp(1)~\*{PRM\*}
.xx "" "make: maintain, update, and" "regenerate groups of programs." "" make(1)~\*{PRM\*}
.xx "regular expression." "regcmp," "regex: compile and execute" "" regcmp(3G)~\*{PRM\*}
.xx "string." "" "regex: match patterns against a" "" regex(1F)~\*{CHAR\*}
.xx "expression handler." "" "regex, re_comp, re_exec: regular" "" regex(3)~\*{BSD\*}
.xx "regular expression compile and/" "" "regexp:  compile, step, advance:" "" regexp(5)~\*{PRM\*}
.xx "regular expression compile and/" "" "regexp:  compile, step, advance:" "" regexp(5)~\*{SARM\*}
.xx "regular expression compile and/" "" "regexpr: compile, step, advance:" "" regexpr(3G)~\*{PRM\*}
.xx "" "locking: lock or unlock a file" "region for reading or writing." "" locking(2)~\*{ACG\*}
.xx "" "display the contents of a backup" "register." "bkreg: change or" bkreg(1M)~\*{SARM\*}
.xx "" "/_rec: reads the interconnect" "register of the board in the/" "" ics_find_rec(D3D)~\*{DDRM\*}
.xx "" "ics_read: reads the interconnect" "register of the board in the/" "" ics_read(D3D)~\*{DDRM\*}
.xx "" "/a value into the specified" "register of the board in the/" "" ics_write(D3D)~\*{DDRM\*}
.xx "print service." "lpsystem:" "register remote systems with the" "" lpsystem(1M)~\*{SARM\*}
.xx "" "/library routines for" "registering servers." "" rpc_svc_calls(3N)~\*{NI\*}
.xx "system/" "fstypes: file that" "registers distributed file" "" fstypes(4)~\*{NUAG\*}
.xx "system/" "fstypes: file that" "registers distributed file" "" fstypes(4)~\*{SARM\*}
.xx "" "/number of interconnect space" "registers from a given cardslot/" "" ics_rdwr(D3D)~\*{DDRM\*}
.xx "" "/writes into interconnect" "registers of the board." "" ics_write(3iref)~\*{MBRMAN\*}
.xx "" "ics_read: reads interconnect" "registers of the board and/" "" ics_read(3iref)~\*{MBRMAN\*}
.xx "" "regcmp:" "regular expression compile." "" regcmp(1)~\*{PRM\*}
.xx "" "regexp:  compile, step, advance:" "regular expression compile and/" "" regexp(5)~\*{PRM\*}
.xx "" "regexp:  compile, step, advance:" "regular expression compile and/" "" regexp(5)~\*{SARM\*}
.xx "" "regexpr: compile, step, advance:" "regular expression compile and/" "" regexpr(3G)~\*{PRM\*}
.xx "" "regex, re_comp, re_exec:" "regular expression handler." "" regex(3)~\*{BSD\*}
.xx "" "regex: compile and execute" "regular expression." "regcmp," regcmp(3G)~\*{PRM\*}
.xx "" "a file for a pattern using full" "regular expressions." "/search" egrep(1)~\*{URM\*}
.xx "file." "" "reinit: runs an initialization" "" reinit(1F)~\*{CHAR\*}
.xx "requests." "accept," "reject: accept or reject print" "" accept(1M)~\*{SARM\*}
.xx "request." "/construct a buffer" "reject in response to a buffer" "" mps_mk_breject(D3D)~\*{DDRM\*}
.xx "sorted files." "comm: select or" "reject lines common to two" "" comm(1)~\*{URM\*}
.xx "" "accept, reject: accept or" "reject print requests." "" accept(1M)~\*{SARM\*}
.xx "" "lorder: find ordering" "relation for an object library." "" lorder(1)~\*{PRM\*}
.xx "" "join:" "relational database operator." "" join(1)~\*{URM\*}
.xx "" "t_sndrel: initiate an orderly" "release." "" t_sndrel(3N)~\*{NI\*}
.xx "" "Data Link driver for iNA961" "Release 3.0." "edlina: External" edlina(7iref)~\*{MBRMAN\*}
.xx "" "/to call SCO UNIX System V/386" "Release 3.2-compatible libnsl." "" fixshlib(1M)~\*{ACG\*}
.xx "different/" "maplocale: convert" "Release 4 locale information to" "" maplocale(1M)~\*{ACG\*}
.xx "Service (ots)/" "ots: System V/386" "Release 4.0 OSI Transport" "" ots(7iref)~\*{MBRMAN\*}
.xx "SCSI block." "sdi_freeblk:" "release a previously allocated" "" sdi_freeblk(D3I)~\*{SCSI\*}
.xx "for/" "sigpause: automically" "release blocked signals and wait" "" sigpause(3)~\*{BSD\*}
.xx "and wakeup processes." "biodone:" "release buffer after block I/O" "" biodone(D3DK)~\*{DDRM\*}
.xx "use." "devfree:" "release devices from exclusive" "" devfree(1M)~\*{SARM\*}
.xx "" "receipt of an orderly" "release indication." "/acknowledge" t_rcvrel(3N)~\*{NI\*}
.xx "" "DMA operation on a channel and" "release it." "/software-initiated" dma_stop(D3X)~\*{DDRM\*}
.xx "" "close:" "relinquish access to a device." "" close(D2DK)~\*{DDRM\*}
.xx "" "enetload: resets and" "reloads the ethernet controller." "" enetload(1iref)~\*{MBRMAN\*}
.xx "show current layer." "" "relogin: rename login entry to" "" relogin(1M)~\*{SARM\*}
.xx "show current layer." "" "relogin: rename login entry to" "" relogin(1M)~\*{URM\*}
.xx "" "/rint, remainder: floor, ceiling," "remainder, absolute value/" "" floor(3M)~\*{PRM\*}
.xx "" "ldiv: compute the quotient and" "remainder." "div," div(3C)~\*{PRM\*}
.xx "" "/fmod, fmodf, fabs, fabsf, rint," "remainder: floor, ceiling,/" "" floor(3M)~\*{PRM\*}
.xx "" "calendar:" "reminder service." "" calendar(1)~\*{URM\*}
.xx "" "rexec: return stream to a" "remote command." "" rexec(3N)~\*{NI\*}
.xx "" "rexec: return stream to a" "remote command." "" rexec(3N)~\*{NUAG\*}
.xx "" "uuxqt: execute" "remote command requests." "" uuxqt(1M)~\*{SARM\*}
.xx "" "rexecd:" "remote execution server." "" rexecd(1M)~\*{NUAG\*}
.xx "" "rexecd:" "remote execution server." "" rexecd(1M)~\*{SARM\*}
.xx "" "rcp:" "remote file copy." "" rcp(1)~\*{NUAG\*}
.xx "" "rcp:" "remote file copy." "" rcp(1)~\*{URM\*}
.xx "" "rfstart: start" "Remote File Sharing." "" rfstart(1M)~\*{NUAG\*}
.xx "" "rfstart: start" "Remote File Sharing." "" rfstart(1M)~\*{SARM\*}
.xx "process." "rfudaemon:" "Remote File Sharing daemon" "" rfudaemon(1M)~\*{NUAG\*}
.xx "process." "rfudaemon:" "Remote File Sharing daemon" "" rfudaemon(1M)~\*{SARM\*}
.xx "administration." "rfadmin:" "Remote File Sharing domain" "" rfadmin(1M)~\*{NUAG\*}
.xx "administration." "rfadmin:" "Remote File Sharing domain" "" rfadmin(1M)~\*{SARM\*}
.xx "network names." "dname: print" "Remote File Sharing domain and" "" dname(1M)~\*{NUAG\*}
.xx "network names." "dname: print" "Remote File Sharing domain and" "" dname(1M)~\*{SARM\*}
.xx "" "rfstop: stop the" "Remote File Sharing environment." "" rfstop(1M)~\*{NUAG\*}
.xx "" "rfstop: stop the" "Remote File Sharing environment." "" rfstop(1M)~\*{SARM\*}
.xx "password." "rfpasswd: change" "Remote File Sharing host" "" rfpasswd(1M)~\*{NUAG\*}
.xx "password." "rfpasswd: change" "Remote File Sharing host" "" rfpasswd(1M)~\*{SARM\*}
.xx "query." "nsquery:" "Remote File Sharing name server" "" nsquery(1M)~\*{NUAG\*}
.xx "query." "nsquery:" "Remote File Sharing name server" "" nsquery(1M)~\*{SARM\*}
.xx "master file." "rfmaster:" "Remote File Sharing name server" "" rfmaster(4)~\*{NUAG\*}
.xx "master file." "rfmaster:" "Remote File Sharing name server" "" rfmaster(4)~\*{SARM\*}
.xx "shell script." "rfuadmin:" "Remote File Sharing notification" "" rfuadmin(1M)~\*{NUAG\*}
.xx "shell script." "rfuadmin:" "Remote File Sharing notification" "" rfuadmin(1M)~\*{SARM\*}
.xx "" "/rumountall: mount, unmount" "Remote File Sharing resources." "" rmountall(1M)~\*{NUAG\*}
.xx "" "/rumountall: mount, unmount" "Remote File Sharing resources." "" rmountall(1M)~\*{SARM\*}
.xx "group mapping." "idload:" "Remote File Sharing user and" "" idload(1M)~\*{NUAG\*}
.xx "group mapping." "idload:" "Remote File Sharing user and" "" idload(1M)~\*{SARM\*}
.xx "" "rdate: set system date from a" "remote host." "" rdate(1M)~\*{NUAG\*}
.xx "" "rdate: set system date from a" "remote host." "" rdate(1M)~\*{SARM\*}
.xx "" "smtp: send SMTP mail to a" "remote host using Simple Mail/" "" smtp(1M)~\*{SARM\*}
.xx "" "rlogin:" "remote login." "" rlogin(1)~\*{NUAG\*}
.xx "" "rlogin:" "remote login." "" rlogin(1)~\*{URM\*}
.xx "" "netrc: file for ftp" "remote login data." "" netrc(4)~\*{NUAG\*}
.xx "" "netrc: file for ftp" "remote login data." "" netrc(4)~\*{SARM\*}
.xx "" "rlogind:" "remote login server." "" rlogind(1M)~\*{NUAG\*}
.xx "" "rlogind:" "remote login server." "" rlogind(1M)~\*{SARM\*}
.xx "" "rwall: write to specified" "remote machines." "" rwall(3N)~\*{NI\*}
.xx "" "information about users on" "remote machines." "rusers: return" rusers(3N)~\*{NI\*}
.xx "" "mount: mount" "remote NFS resources." "" mount(1M)~\*{NUAG\*}
.xx "" "mount: mount" "remote NFS resources." "" mount(1M)~\*{SARM\*}
.xx "" "/list available resources from" "remote or local systems." "" dfshares(1M)~\*{NUAG\*}
.xx "" "/list available resources from" "remote or local systems." "" dfshares(1M)~\*{SARM\*}
.xx "" "/library routines for client side" "remote procedure call/" "" rpc_clnt_auth(3N)~\*{NI\*}
.xx "" "/library routines for server side" "remote procedure call errors." "" rpc_svc_err(3N)~\*{NI\*}
.xx "" "rpc: library routines for" "remote procedure calls." "" rpc(3N)~\*{NI\*}
.xx "" "/XDR library routines for" "remote procedure calls." "" rpc_xdr(3N)~\*{NI\*}
.xx "" "/library routines for secure" "remote procedure calls." "" secure_rpc(3N)~\*{NI\*}
.xx "" "rmount: queue" "remote resource mounts." "" rmount(1M)~\*{NUAG\*}
.xx "" "rmount: queue" "remote resource mounts." "" rmount(1M)~\*{SARM\*}
.xx "" "rumount: cancel queued" "remote resource request." "" rumount(1M)~\*{NUAG\*}
.xx "" "rumount: cancel queued" "remote resource request." "" rumount(1M)~\*{SARM\*}
.xx "" "mount: mount" "remote resources." "" mount(1M)~\*{NUAG\*}
.xx "" "mount: mount" "remote resources." "" mount(1M)~\*{SARM\*}
.xx "" "rmnttry: attempt to mount queued" "remote resources." "" rmnttry(1M)~\*{NUAG\*}
.xx "" "rmnttry: attempt to mount queued" "remote resources." "" rmnttry(1M)~\*{SARM\*}
.xx "" "or unmount file systems and" "remote resources." "/umount: mount" mount(1M)~\*{SARM\*}
.xx "" "rsh:" "remote shell." "" rsh(1)~\*{NUAG\*}
.xx "" "rsh:" "remote shell." "" rsh(1)~\*{URM\*}
.xx "" "rshd:" "remote shell server." "" rshd(1M)~\*{NUAG\*}
.xx "" "rshd:" "remote shell server." "" rshd(1M)~\*{SARM\*}
.xx "" "ckbinarsys: determine whether" "remote system can accept binary/" "" ckbinarsys(1M)~\*{SARM\*}
.xx "the ckbinarsys/" "binarsys:" "remote system information for" "" binarsys(4)~\*{SARM\*}
.xx "" "telnet: user interface to a" "remote system using the TELNET/" "" telnet(1)~\*{NUAG\*}
.xx "" "telnet: user interface to a" "remote system using the TELNET/" "" telnet(1)~\*{URM\*}
.xx "" "Uutry: try to contact" "remote system with debugging on." "" Uutry(1M)~\*{SARM\*}
.xx "" "available NFS resources from" "remote systems." "dfshares: list" dfshares(1M)~\*{NUAG\*}
.xx "" "available NFS resources from" "remote systems." "dfshares: list" dfshares(1M)~\*{SARM\*}
.xx "" "available for mounting by" "remote systems." "/local resource" share(1M)~\*{NUAG\*}
.xx "" "available for mounting by" "remote systems." "/local resource" share(1M)~\*{SARM\*}
.xx "" "unavailable for mounting by" "remote systems." "/local resource" unshare(1M)~\*{NUAG\*}
.xx "" "unavailable for mounting by" "remote systems." "/local resource" unshare(1M)~\*{SARM\*}
.xx "" "available for mounting by" "remote systems." "/NFS resource" share(1M)~\*{NUAG\*}
.xx "" "available for mounting by" "remote systems." "/NFS resource" share(1M)~\*{SARM\*}
.xx "" "unavailable for mounting by" "remote systems." "/NFS resource" unshare(1M)~\*{NUAG\*}
.xx "" "unavailable for mounting by" "remote systems." "/NFS resource" unshare(1M)~\*{SARM\*}
.xx "" "available for mounting by" "remote systems." "/RFS resource" share(1M)~\*{NUAG\*}
.xx "" "available for mounting by" "remote systems." "/RFS resource" share(1M)~\*{SARM\*}
.xx "" "unavailable for mounting by" "remote systems." "/RFS resource" unshare(1M)~\*{NUAG\*}
.xx "" "unavailable for mounting by" "remote systems." "/RFS resource" unshare(1M)~\*{SARM\*}
.xx "service." "lpsystem: register" "remote systems with the print" "" lpsystem(1M)~\*{SARM\*}
.xx "" "ct: spawn login to a" "remote terminal." "" ct(1C)~\*{URM\*}
.xx "" "fingerd, in.fingerd:" "remote user information server." "" fingerd(1M)~\*{NUAG\*}
.xx "" "fingerd, in.fingerd:" "remote user information server." "" fingerd(1M)~\*{SARM\*}
.xx "" "information about local and" "remote users." "finger: display" finger(1)~\*{NUAG\*}
.xx "" "information about local and" "remote users." "finger: display" finger(1)~\*{URM\*}
.xx "" "sysadm interface menu or task" "removal tool." "delsysadm:" delsysadm(1M)~\*{ISDG\*}
.xx "" "sysadm interface menu or task" "removal tool." "delsysadm:" delsysadm(1M)~\*{SARM\*}
.xx "file." "rmdel:" "remove a delta from an SCCS" "" rmdel(1)~\*{PRM\*}
.xx "" "rmdir:" "remove a directory." "" rmdir(2)~\*{PRM\*}
.xx "database." "removef:" "remove a file from software" "" removef(1M)~\*{ISDG\*}
.xx "message." "rmvb:" "remove a message block from a" "" rmvb(D3DK)~\*{DDRM\*}
.xx "head of a message." "unlinkb:" "remove a message block from the" "" unlinkb(D3DK)~\*{DDRM\*}
.xx "" "rmvq:" "remove a message from a queue." "" rmvq(D3DK)~\*{DDRM\*}
.xx "semaphore set, or shared/" "ipcrm:" "remove a message queue," "" ipcrm(1)~\*{URM\*}
.xx "" "mkdirp, rmdirp: create," "remove directories in a path." "" mkdirp(3G)~\*{PRM\*}
.xx "" "unlink:" "remove directory entry." "" unlink(2)~\*{PRM\*}
.xx "" "remove:" "remove file." "" remove(3C)~\*{PRM\*}
.xx "" "rm, rmdir:" "remove files or directories." "" rm(1)~\*{URM\*}
.xx "program/" "unifdef: resolve and" "remove ifdef'ed lines from C" "" unifdef(1)~\*{BSD\*}
.xx "queue." "lprm:" "remove jobs from the printer" "" lprm(1)~\*{BSD\*}
.xx "batch." "atrm:" "remove jobs spooled by at or" "" atrm(1)~\*{URM\*}
.xx "constructs." "deroff:" "remove nroff, troff, tbl and eqn" "" deroff(1)~\*{BSD\*}
.xx "constructs." "deroff:" "remove nroff/troff, tbl, and eqn" "" deroff(1)~\*{URM\*}
.xx "" "" "remove: remove file." "" remove(3C)~\*{PRM\*}
.xx "software database." "" "removef: remove a file from" "" removef(1M)~\*{ISDG\*}
.xx "system." "pkgrm:" "removes a package from the" "" pkgrm(1M)~\*{ISDG\*}
.xx "system." "pkgrm:" "removes a package from the" "" pkgrm(1M)~\*{SARM\*}
.xx "specifications of/" "idmknod:" "removes nodes and reads" "" idmknod(1M)~\*{ISDG\*}
.xx "specifications of/" "idmknod:" "removes nodes and reads" "" idmknod(1M)~\*{SARM\*}
.xx "from a queue." "insque," "remque: insert/remove element" "" insque(3C)~\*{PRM\*}
.xx "file." "" "rename: change the name of a" "" rename(1)~\*{URM\*}
.xx "file." "" "rename: change the name of a" "" rename(2)~\*{PRM\*}
.xx "current layer." "relogin:" "rename login entry to show" "" relogin(1M)~\*{SARM\*}
.xx "current layer." "relogin:" "rename login entry to show" "" relogin(1M)~\*{URM\*}
.xx "running processes." "" "renice: alter priority of" "" renice(1M)~\*{BSD\*}
.xx "" "fsck (bfs): check and" "repair bfs file systems." "" fsck(1M)~\*{SARM\*}
.xx "" "check and interactive" "repair." "/file system consistency" fsck(1M)~\*{SARM\*}
.xx "" "fsck: check and" "repair file systems." "" fsck(1M)~\*{SARM\*}
.xx "" "fsck (s5): check and" "repair s5 file systems." "" fsck(1M)~\*{SARM\*}
.xx "" "xfsck: check and" "repair XENIX filesystems." "" xfsck(1M)~\*{SARM\*}
.xx "" "uniq: report" "repeated lines in a file." "" uniq(1)~\*{URM\*}
.xx "" "yes: print string" "repeatedly." "" yes(1)~\*{ACG\*}
.xx "port to buffer." "" "repinsb: read bytes from I/O" "" repinsb(D3D)~\*{DDRM\*}
.xx "I/O port to buffer." "" "repinsd: read 32 bit words from" "" repinsd(D3D)~\*{DDRM\*}
.xx "I/O port to buffer." "" "repinsw: read 16 bit words from" "" repinsw(D3D)~\*{DDRM\*}
.xx "" "panel_window:  panel_window," "replace_panel: get or set the/" "" panel_window(3X)~\*{CHAR\*}
.xx "that is part/" "mps_AMPsend_reply:" "replies to a received request" "" mps_AMPsend_reply(D3D)~\*{DDRM\*}
.xx "" "to initiate a solicited data" "reply." "/a message to be sent" mps_mk_solrply(D3D)~\*{DDRM\*}
.xx "" "mb2a_sendreply: Sends a" "reply message asynchronously." "" mb2a_sendreply(3tai)~\*{MBTAI\*}
.xx "mode." "mb2s_sendreply: Sends a" "reply message in synchronous" "" mb2s_sendreply(3tai)~\*{MBTAI\*}
.xx "" "/constructs a unsolicited" "reply message to be sent." "" mps_mk_unsolrply(D3D)~\*{DDRM\*}
.xx "" "table entries for reception of" "reply messages." "/and sets up" mps_AMPsend_rsvp(D3D)~\*{DDRM\*}
.xx "" "get data length for a solicited" "reply." "mps_get_reply_len:" mps_get_reply_len(D3D)~\*{DDRM\*}
.xx "" "vacation:" "reply to mail automatically." "" vacation(1)~\*{BSD\*}
.xx "" "clock:" "report CPU time used." "" clock(3C)~\*{PRM\*}
.xx "systems." "df:" "report free disk space on file" "" df(1)~\*{BSD\*}
.xx "file systems." "df (ufs):" "report free disk space on ufs" "" df(1M)~\*{SARM\*}
.xx "communication facilities/" "ipcs:" "report inter-process" "" ipcs(1)~\*{URM\*}
.xx "blocks/" "df (generic), dfspace:" "report number of free disk" "" df(""1M"")~\*{SARM\*}
.xx "blocks/" "df (generic), dfspace:" "report number of free disk" "" df(""1M"")~\*{URM\*}
.xx "operations." "bkhistory:" "report on completed backup" "" bkhistory(1M)~\*{SARM\*}
.xx "" "sadc, sa1, sa2: system activity" "report package." "" sadc(1M)~\*{SARM\*}
.xx "" "nroff and troff input files;" "report possible errors." "/check" checknr(1)~\*{BSD\*}
.xx "" "timex: time a command;" "report process data and system/" "" timex(1)~\*{URM\*}
.xx "" "ps:" "report process status." "" ps(1)~\*{URM\*}
.xx "" "uniq:" "report repeated lines in a file." "" uniq(1)~\*{URM\*}
.xx "" "rpcinfo:" "report RPC information." "" rpcinfo(1M)~\*{NI\*}
.xx "" "rpcinfo:" "report RPC information." "" rpcinfo(1M)~\*{NUAG\*}
.xx "of a file path name." "dirname:" "report the parent directory name" "" dirname(3G)~\*{PRM\*}
.xx "" "sar: system activity" "reporter." "" sar(1M)~\*{SARM\*}
.xx "stream." "fseek, rewind, ftell:" "reposition a file pointer in a" "" fseek(3S)~\*{PRM\*}
.xx "stream." "fsetpos, fgetpos:" "reposition a file pointer in a" "" fsetpos(3C)~\*{PRM\*}
.xx "buffer to an I/O port." "" "repoutsb: write bytes from" "" repoutsb(D3D)~\*{DDRM\*}
.xx "from buffer to an I/O port." "" "repoutsd: write 32 bit words" "" repoutsd(D3D)~\*{DDRM\*}
.xx "from buffer to an I/O port." "" "repoutsw: write 16 bit words" "" repoutsw(D3D)~\*{DDRM\*}
.xx "file system." "" "repquota: summarize quotas for a" "" repquota(1M)~\*{SARM\*}
.xx "" "binary file, or decode its ASCII" "representation." "/encode a" uuencode(1C)~\*{URM\*}
.xx "" "routines for external data" "representation." "/library" xdr_admin(3N)~\*{NI\*}
.xx "" "routines for external data" "representation." "/library" xdr_complex(3N)~\*{NI\*}
.xx "" "routines for external data" "representation." "/library" xdr_simple(3N)~\*{NI\*}
.xx "" "/routines for external data" "representation stream creation." "" xdr_create(3N)~\*{NI\*}
.xx "" "routines for external data" "representation." "xdr: library" xdr(3N)~\*{NI\*}
.xx "" "t_accept: accept a connect" "request." "" t_accept(3N)~\*{NI\*}
.xx "" "t_listen: listen for a connect" "request." "" t_listen(3N)~\*{NI\*}
.xx "" "for a subsequent hardware" "request." "/a DMA operation" dma_prog(D3X)~\*{DDRM\*}
.xx "" "for a subsequent software" "request." "/a DMA operation" dma_swsetup(D3X)~\*{DDRM\*}
.xx "" "grant in response to a buffer" "request." "/construct a buffer" mps_mk_bgrant(D3D)~\*{DDRM\*}
.xx "" "reject in response to a buffer" "request." "/construct a buffer" mps_mk_breject(D3D)~\*{DDRM\*}
.xx "" "to an outstanding buffer" "request." "/data that corresponds" mps_AMPreceive(D3D)~\*{DDRM\*}
.xx "" "a DMA operation via software" "request." "dma_swstart: initiate" dma_swstart(D3X)~\*{DDRM\*}
.xx "" "dma_pageio: break up an I/O" "request into manageable units." "" dma_pageio(D3D)~\*{DDRM\*}
.xx "" "mb2a_sendrsvp: Sends a rsvp" "request message." "" mb2a_sendrsvp(3tai)~\*{MBTAI\*}
.xx "" "/Receives a data fragment of a" "request message." "" mb2s_getreqfrag(3tai)~\*{MBTAI\*}
.xx "" "mb2s_sendrsvp: Sends a" "request message and receives a/" "" mb2s_sendrsvp(3tai)~\*{MBTAI\*}
.xx "" "/Receives a data fragment of a" "request message in asynchronous/" "" mb2a_getreqfrag(3tai)~\*{MBTAI\*}
.xx "" "format and send listener service" "request message." "nlsrequest:" nlsrequest(3N)~\*{NI\*}
.xx "" "mps_AMPsend_rsvp: queues" "request messages for/" "" mps_AMPsend_rsvp(D3D)~\*{DDRM\*}
.xx "" "validate and issue raw I/O" "request." "physiock:" physiock(D3DK)~\*{DDRM\*}
.xx "directories." "urestore:" "request restore of files and" "" urestore(1M)~\*{SARM\*}
.xx "" "cancel queued remote resource" "request." "rumount:" rumount(1M)~\*{NUAG\*}
.xx "" "cancel queued remote resource" "request." "rumount:" rumount(1M)~\*{SARM\*}
.xx "" "pkgask: stores answers to a" "request script." "" pkgask(1M)~\*{ISDG\*}
.xx "" "pkgask: stores answers to a" "request script." "" pkgask(1M)~\*{SARM\*}
.xx "" "mountd: NFS mount" "request server." "" mountd(1M)~\*{NUAG\*}
.xx "" "mountd: NFS mount" "request server." "" mountd(1M)~\*{SARM\*}
.xx "" "uio: scatter/gather I/O" "request structure." "" uio(D4DK)~\*{DDRM\*}
.xx "" "STREAMS transparent ioctl copy" "request structure." "copyreq:" copyreq(D4DK)~\*{DDRM\*}
.xx "" "/replies to a received" "request that is part of a/" "" mps_AMPsend_reply(D3D)~\*{DDRM\*}
.xx "" "the confirmation from a connect" "request." "t_rcvconnect: receive" t_rcvconnect(3N)~\*{NI\*}
.xx "" "send user-initiated disconnect" "request." "t_snddis:" t_snddis(3N)~\*{NI\*}
.xx "" "cancel a pending bufcall" "request." "unbufcall:" unbufcall(D3DK)~\*{DDRM\*}
.xx "" "cancel previous timeout(D3DK)" "request." "untimeout:" untimeout(D3DK)~\*{DDRM\*}
.xx "immediately." "sdi_icmd: perform" "requested SCSI operation" "" sdi_icmd(D3I)~\*{SCSI\*}
.xx "" "/that are not part of any" "request-response transaction." "" mps_AMPsend(D3D)~\*{DDRM\*}
.xx "" "/data that is not part of any" "request-response transaction." "" mps_AMPsend_data(D3D)~\*{DDRM\*}
.xx "" "/request that is part of a" "request-response transaction." "" mps_AMPsend_reply(D3D)~\*{DDRM\*}
.xx "" "uuxqt: execute remote command" "requests." "" uuxqt(1M)~\*{SARM\*}
.xx "" "reject: accept or reject print" "requests." "accept," accept(1M)~\*{SARM\*}
.xx "" "rsoper: service pending restore" "requests and service media/" "" rsoper(1M)~\*{SARM\*}
.xx "" "/resolve and eliminate .so" "requests from nroff or troff/" "" soelim(1)~\*{BSD\*}
.xx "" "the LP print service and move" "requests." "/lpmove: start/stop" lpsched(1M)~\*{SARM\*}
.xx "" "/disable recognition of hardware" "requests on a DMA channel." "" dma_disable(D3X)~\*{DDRM\*}
.xx "" "/enable recognition of hardware" "requests on a DMA channel." "" dma_enable(D3X)~\*{DDRM\*}
.xx "" "lp, cancel: send/cancel" "requests to an LP print service." "" lp(1)~\*{URM\*}
.xx "" "space: disk space" "requirement file." "" space(4)~\*{ISDG\*}
.xx "use." "devreserv:" "reserves devices for exclusive" "" devreserv(1M)~\*{SARM\*}
.xx "terminal characteristics." "tset," "reset: establish or restore" "" tset(1)~\*{BSD\*}
.xx "terminal." "jterm:" "reset layer of windowing" "" jterm(1)~\*{URM\*}
.xx "field to its default values." "" "reset: reset the current form" "" reset(1F)~\*{CHAR\*}
.xx "given slot." "" "reset: resets the processor in a" "" reset(8iref)~\*{MBRMAN\*}
.xx "its default values." "reset:" "reset the current form field to" "" reset(1F)~\*{CHAR\*}
.xx "" "def_prog_mode, def_shell_mode," "reset_prog_mode,/" "curs_kernel: " curs_kernel(3X)~\*{CHAR\*}
.xx "controller." "enetload:" "resets and reloads the ethernet" "" enetload(1iref)~\*{MBRMAN\*}
.xx "slot." "reset:" "resets the processor in a given" "" reset(8iref)~\*{MBRMAN\*}
.xx "" "/def_shell_mode, reset_prog_mode," "reset_shell_mode, resetty,/" "" curs_kernel(3X)~\*{CHAR\*}
.xx "setsyx,/" "/reset_shell_mode," "resetty, savetty, getsyx," "" curs_kernel(3X)~\*{CHAR\*}
.xx "" "mincore: determine" "residency of memory pages." "" mincore(2)~\*{PRM\*}
.xx "downloader." "download: host" "resident PostScript font" "" download(1)~\*{URM\*}
.xx "" "resolver, res_mkquery, res_send," "res_init, dn_comp, dn_expand:/" "" resolver(3N)~\*{NI\*}
.xx "" "resolver, res_mkquery, res_send," "res_init, dn_comp, dn_expand:/" "" resolver(3N)~\*{NUAG\*}
.xx "dn_comp, dn_expand:/" "resolver," "res_mkquery, res_send, res_init," "" resolver(3N)~\*{NI\*}
.xx "dn_comp, dn_expand:/" "resolver," "res_mkquery, res_send, res_init," "" resolver(3N)~\*{NUAG\*}
.xx "" "arp: address" "resolution display and control." "" arp(1M)~\*{NUAG\*}
.xx "" "arp: address" "resolution display and control." "" arp(1M)~\*{SARM\*}
.xx "" "ARP: Address" "Resolution Protocol." "" ARP(7)~\*{NUAG\*}
.xx "" "ARP: Address" "Resolution Protocol." "" ARP(7)~\*{SARM\*}
.xx "" "rarpd: DARPA Reverse Address" "Resolution Protocol server." "" rarpd(1M)~\*{NUAG\*}
.xx "" "rarpd: DARPA Reverse Address" "Resolution Protocol server." "" rarpd(1M)~\*{SARM\*}
.xx "for name server routines." "" "resolv.conf: configuration file" "" resolv.conf(4)~\*{NUAG\*}
.xx "for name server routines." "" "resolv.conf: configuration file" "" resolv.conf(4)~\*{SARM\*}
.xx "requests from nroff or/" "soelim:" "resolve and eliminate .so" "" soelim(1)~\*{BSD\*}
.xx "lines from C program/" "unifdef:" "resolve and remove ifdef'ed" "" unifdef(1)~\*{BSD\*}
.xx "res_init, dn_comp, dn_expand:/" "" "resolver, res_mkquery, res_send," "" resolver(3N)~\*{NI\*}
.xx "res_init, dn_comp, dn_expand:/" "" "resolver, res_mkquery, res_send," "" resolver(3N)~\*{NUAG\*}
.xx "" "res_init, dn_comp, dn_expand:" "resolver routines." "/res_send," resolver(3N)~\*{NI\*}
.xx "" "res_init, dn_comp, dn_expand:" "resolver routines." "/res_send," resolver(3N)~\*{NUAG\*}
.xx "by remote/" "share: make local" "resource available for mounting" "" share(1M)~\*{NUAG\*}
.xx "by remote/" "share: make local" "resource available for mounting" "" share(1M)~\*{SARM\*}
.xx "" "/control maximum system" "resource consumption." "" getrlimit(2)~\*{PRM\*}
.xx "" "/await and check access to a" "resource governed by a/" "" waitsem(2)~\*{ACG\*}
.xx "" "dfmounts: display mounted NFS" "resource information." "" dfmounts(1M)~\*{NUAG\*}
.xx "" "dfmounts: display mounted" "resource information." "" dfmounts(1M)~\*{SARM\*}
.xx "" "rmntstat: display mounted" "resource information." "" rmntstat(1M)~\*{NUAG\*}
.xx "" "rmntstat: display mounted" "resource information." "" rmntstat(1M)~\*{SARM\*}
.xx "" "rmount: queue remote" "resource mounts." "" rmount(1M)~\*{NUAG\*}
.xx "" "rmount: queue remote" "resource mounts." "" rmount(1M)~\*{SARM\*}
.xx "" "rumount: cancel queued remote" "resource request." "" rumount(1M)~\*{NUAG\*}
.xx "" "rumount: cancel queued remote" "resource request." "" rumount(1M)~\*{SARM\*}
.xx "mounting by/" "unshare: make local" "resource unavailable for" "" unshare(1M)~\*{NUAG\*}
.xx "mounting by/" "unshare: make local" "resource unavailable for" "" unshare(1M)~\*{SARM\*}
.xx "" "getrusage: get information about" "resource utilization." "" getrusage(3)~\*{BSD\*}
.xx "" "mount: mount remote" "resources." "" mount(1M)~\*{NUAG\*}
.xx "" "mount: mount remote NFS" "resources." "" mount(1M)~\*{SARM\*}
.xx "" "containing commands for sharing" "resources." "dfstab: file" dfstab(4)~\*{NUAG\*}
.xx "" "containing commands for sharing" "resources." "dfstab: file" dfstab(4)~\*{SARM\*}
.xx "" "dfshares: list available" "resources from remote or local/" "" dfshares(1M)~\*{NUAG\*}
.xx "" "dfshares: list available" "resources from remote or local/" "" dfshares(1M)~\*{SARM\*}
.xx "" "dfshares: list available RFS" "resources from remote systems." "" dfshares(1M)~\*{NUAG\*}
.xx "" "dfshares: list available RFS" "resources from remote systems." "" dfshares(1M)~\*{SARM\*}
.xx "" "forced unmount of advertised" "resources." "fumount:" fumount(1M)~\*{NUAG\*}
.xx "" "forced unmount of advertised" "resources." "fumount:" fumount(1M)~\*{SARM\*}
.xx "" "attempt to mount queued remote" "resources." "rmnttry:" rmnttry(1M)~\*{NUAG\*}
.xx "" "attempt to mount queued remote" "resources." "rmnttry:" rmnttry(1M)~\*{SARM\*}
.xx "" "unmount Remote File Sharing" "resources." "/rumountall: mount," rmountall(1M)~\*{NUAG\*}
.xx "" "unmount Remote File Sharing" "resources." "/rumountall: mount," rmountall(1M)~\*{SARM\*}
.xx "" "unmount file systems and remote" "resources." "/umount: mount or" mount(1M)~\*{SARM\*}
.xx "" "share, unshare multiple" "resources." "/unshareall:" shareall(1M)~\*{NUAG\*}
.xx "" "share, unshare multiple" "resources." "/unshareall:" shareall(1M)~\*{SARM\*}
.xx "" "vacation: automatically" "respond to incoming mail/" "" vacation(1)~\*{URM\*}
.xx "" "a request message and receives a" "response." "mb2s_sendrsvp: Sends" mb2s_sendrsvp(3tai)~\*{MBTAI\*}
.xx "" "STREAMS transparent ioctl copy" "response structure." "copyresp:" copyresp(D4DK)~\*{DDRM\*}
.xx "" "/construct a buffer grant in" "response to a buffer request." "" mps_mk_bgrant(D3D)~\*{DDRM\*}
.xx "" "/construct a buffer reject in" "response to a buffer request." "" mps_mk_breject(D3D)~\*{DDRM\*}
.xx "" "resolver, res_mkquery," "res_send, res_init, dn_comp,/" "" resolver(3N)~\*{NI\*}
.xx "" "resolver, res_mkquery," "res_send, res_init, dn_comp,/" "" resolver(3N)~\*{NUAG\*}
.xx "" "reboot:" "restart the operating system." "" reboot(1M)~\*{BSD\*}
.xx "" "/set_curterm, del_curterm," "restartterm, tparm, tputs, putp,/" "" curs_terminfo(3X)~\*{CHAR\*}
.xx "filesystem." "fimage: create," "restore an image archive of a" "" fimage(1M)~\*{SARM\*}
.xx "filesystem/" "incfile: create," "restore an incremental" "" incfile(1M)~\*{SARM\*}
.xx "directory." "restore:" "restore file to original" "" restore(1)~\*{ACG\*}
.xx "archive." "fdp: create, or" "restore from, a full file system" "" fdp(1M)~\*{SARM\*}
.xx "archive." "ffile: create, or" "restore from, a full file system" "" ffile(1M)~\*{SARM\*}
.xx "filesystems, data partitions,/" "" "restore: initiate restores of" "" restore(1M)~\*{SARM\*}
.xx "directories." "urestore: request" "restore of files and" "" urestore(1M)~\*{SARM\*}
.xx "media/" "rsoper: service pending" "restore requests and service" "" rsoper(1M)~\*{SARM\*}
.xx "original directory." "" "restore: restore file to" "" restore(1)~\*{ACG\*}
.xx "" "tset, reset: establish or" "restore terminal/" "" tset(1)~\*{BSD\*}
.xx "" "incremental file system" "restore." "ufsrestore:" ufsrestore(1M)~\*{SARM\*}
.xx "" "XENIX incremental filesystem" "restorer." "/xrestor: invoke" xrestore(1M)~\*{SARM\*}
.xx "partitions,/" "restore: initiate" "restores of filesystems, data" "" restore(1M)~\*{SARM\*}
.xx "" "shell, job control shell," "restricted shell." "/standard" sh(1)~\*{URM\*}
.xx "execution." "wakeup:" "resume suspended process" "" wakeup(D3K)~\*{DDRM\*}
.xx "" "gettxt:" "retrieve a text string." "" gettxt(3C)~\*{PRM\*}
.xx "message data base." "gettxt:" "retrieve a text string from a" "" gettxt(1)~\*{URM\*}
.xx "" "elf_getarhdr:" "retrieve archive member header." "" elf_getarhdr(3E)~\*{PRM\*}
.xx "" "elf_getarsym:" "retrieve archive symbol table." "" elf_getarsym(3E)~\*{PRM\*}
.xx "" "/elf32_getehdr, elf32_newehdr:" "retrieve class-dependent object/" "" elf_getehdr(3E)~\*{PRM\*}
.xx "" "/elf32_getphdr, elf32_newphdr:" "retrieve class-dependent program/" "" elf_getphdr(3E)~\*{PRM\*}
.xx "" "elf_getshdr: elf32_getshdr:" "retrieve class-dependent section/" "" elf_getshdr(3E)~\*{PRM\*}
.xx "buffer header." "geterror:" "retrieve error number from a" "" geterror(D3DK)~\*{DDRM\*}
.xx "data." "elf_getident:" "retrieve file identification" "" elf_getident(3E)~\*{PRM\*}
.xx "disconnect." "t_rcvdis:" "retrieve information from" "" t_rcvdis(3N)~\*{NI\*}
.xx "information." "drv_getparm:" "retrieve kernel state" "" drv_getparm(D3DK)~\*{DDRM\*}
.xx "" "/getpublickey, getsecretkey:" "retrieve public or secret key." "" publickey(3N)~\*{NI\*}
.xx "contents." "elf_rawfile:" "retrieve uninterpreted file" "" elf_rawfile(3E)~\*{PRM\*}
.xx "free list." "brelse:" "return a buffer to the system's" "" brelse(D3DK)~\*{DDRM\*}
.xx "described by uio(D4DK)/" "uwritec:" "return a character from space" "" uwritec(D3DK)~\*{DDRM\*}
.xx "marked menu items." "getitems:" "return a list of currently" "" getitems(1F)~\*{CHAR\*}
.xx "" "build a menu; prompt for and" "return a menu item." "ckitem:" ckitem(1)~\*{ISDG\*}
.xx "" "build a menu; prompt for and" "return a menu item." "ckitem:" ckitem(1)~\*{SARM\*}
.xx "" "display a prompt; verify and" "return a pathname." "ckpath:" ckpath(1)~\*{ISDG\*}
.xx "" "display a prompt; verify and" "return a pathname." "ckpath:" ckpath(1)~\*{SARM\*}
.xx "" "display a prompt; verify and" "return a string answer." "ckstr:" ckstr(1)~\*{ISDG\*}
.xx "" "display a prompt; verify and" "return a string answer." "ckstr:" ckstr(1)~\*{SARM\*}
.xx "" "display a prompt; verify and" "return a time of day." "cktime:" cktime(1)~\*{ISDG\*}
.xx "" "display a prompt; verify and" "return a time of day." "cktime:" cktime(1)~\*{SARM\*}
.xx "" "display a prompt; verify and" "return an integer value." "ckint:" ckint(1)~\*{ISDG\*}
.xx "" "display a prompt; verify and" "return an integer value." "ckint:" ckint(1)~\*{SARM\*}
.xx "map at the NIS server/" "yppoll:" "return current version of the" "" yppoll(1M)~\*{NI\*}
.xx "on remote machines." "rusers:" "return information about users" "" rusers(3N)~\*{NI\*}
.xx "" "abs, labs:" "return integer absolute value." "" abs(3C)~\*{PRM\*}
.xx "master." "ypwhich:" "return name of NIS server or map" "" ypwhich(1)~\*{NI\*}
.xx "in a message." "msgdsize:" "return number of bytes of data" "" msgdsize(D3DK)~\*{DDRM\*}
.xx "device." "size:" "return size of logical block" "" size(D2DK)~\*{DDRM\*}
.xx "command." "rexec:" "return stream to a remote" "" rexec(3N)~\*{NI\*}
.xx "command." "rexec:" "return stream to a remote" "" rexec(3N)~\*{NUAG\*}
.xx "integers." "max:" "return the larger of two" "" max(D3DK)~\*{DDRM\*}
.xx "path name." "basename:" "return the last element of a" "" basename(3G)~\*{PRM\*}
.xx "integers." "min:" "return the lesser of two" "" min(D3DK)~\*{DDRM\*}
.xx "file/" "elf_fsize: elf32_fsize:" "return the size of an object" "" elf_fsize(3E)~\*{PRM\*}
.xx "name." "getenv:" "return value for environment" "" getenv(3C)~\*{PRM\*}
.xx "" "ismpx:" "return windowing terminal state." "" ismpx(1)~\*{URM\*}
.xx "" "stat: data" "returned by stat system call." "" stat(4)~\*{ACG\*}
.xx "" "stat: data" "returned by stat system call." "" stat(5)~\*{PRM\*}
.xx "" "stat: data" "returned by stat system call." "" stat(5)~\*{SARM\*}
.xx "data buffer/" "mps_get_dmabuf:" "returns a pointer to a list of" "" mps_get_dmabuf(D3D)~\*{DDRM\*}
.xx "" "idcheck:" "returns selected information." "" idcheck(1M)~\*{ISDG\*}
.xx "" "idcheck:" "returns selected information." "" idcheck(1M)~\*{SARM\*}
.xx "number." "getfrm:" "returns the current frameID" "" getfrm(1F)~\*{CHAR\*}
.xx "HOST ID record in/" "ics_hostid:" "returns the host id field of the" "" ics_hostid(D3D)~\*{DDRM\*}
.xx "" "realpath:" "returns the real file name." "" realpath(3C)~\*{PRM\*}
.xx "UNIX System/" "partsize:" "returns the size of the active" "" partsize(1M)~\*{SARM\*}
.xx "" "/registers of the board and" "returns the values in the/" "" ics_read(3iref)~\*{MBRMAN\*}
.xx "Protocol server." "rarpd: DARPA" "Reverse Address Resolution" "" rarpd(1M)~\*{NUAG\*}
.xx "Protocol server." "rarpd: DARPA" "Reverse Address Resolution" "" rarpd(1M)~\*{SARM\*}
.xx "" "col: filter" "reverse line-feeds." "" col(1)~\*{URM\*}
.xx "" "the last commands executed, in" "reverse order." "lastcomm: show" lastcomm(1)~\*{BSD\*}
.xx "PostScript file." "postreverse:" "reverse the page order in a" "" postreverse(1)~\*{URM\*}
.xx "pointer in a stream." "fseek," "rewind, ftell: reposition a file" "" fseek(3S)~\*{PRM\*}
.xx "" "/readdir, telldir, seekdir," "rewinddir, closedir: directory/" "" directory(3C)~\*{BSD\*}
.xx "" "/readdir, telldir, seekdir," "rewinddir, closedir: directory/" "" directory(3C)~\*{PRM\*}
.xx "" "creat: create a new file or" "rewrite an existing one." "" creat(2)~\*{PRM\*}
.xx "command." "" "rexec: return stream to a remote" "" rexec(3N)~\*{NI\*}
.xx "command." "" "rexec: return stream to a remote" "" rexec(3N)~\*{NUAG\*}
.xx "" "" "rexecd: remote execution server." "" rexecd(1M)~\*{NUAG\*}
.xx "" "" "rexecd: remote execution server." "" rexecd(1M)~\*{SARM\*}
.xx "domain administration." "" "rfadmin: Remote File Sharing" "" rfadmin(1M)~\*{NUAG\*}
.xx "domain administration." "" "rfadmin: Remote File Sharing" "" rfadmin(1M)~\*{SARM\*}
.xx "" "fromsmtp: receive" "RFC822 mail from SMTP." "" fromsmtp(1M)~\*{SARM\*}
.xx "name server master file." "" "rfmaster: Remote File Sharing" "" rfmaster(4)~\*{NUAG\*}
.xx "name server master file." "" "rfmaster: Remote File Sharing" "" rfmaster(4)~\*{SARM\*}
.xx "Sharing host password." "" "rfpasswd: change Remote File" "" rfpasswd(1M)~\*{NUAG\*}
.xx "Sharing host password." "" "rfpasswd: change Remote File" "" rfpasswd(1M)~\*{SARM\*}
.xx "mounting by/" "share: make local" "RFS resource available for" "" share(1M)~\*{NUAG\*}
.xx "mounting by/" "share: make local" "RFS resource available for" "" share(1M)~\*{SARM\*}
.xx "" "dfmounts: display mounted" "RFS resource information." "" dfmounts(1M)~\*{NUAG\*}
.xx "" "dfmounts: display mounted" "RFS resource information." "" dfmounts(1M)~\*{SARM\*}
.xx "mounting by/" "unshare: make local" "RFS resource unavailable for" "" unshare(1M)~\*{NUAG\*}
.xx "mounting by/" "unshare: make local" "RFS resource unavailable for" "" unshare(1M)~\*{SARM\*}
.xx "" "dfshares: list available" "RFS resources from remote/" "" dfshares(1M)~\*{NUAG\*}
.xx "" "dfshares: list available" "RFS resources from remote/" "" dfshares(1M)~\*{SARM\*}
.xx "Sharing." "" "rfstart: start Remote File" "" rfstart(1M)~\*{NUAG\*}
.xx "Sharing." "" "rfstart: start Remote File" "" rfstart(1M)~\*{SARM\*}
.xx "Sharing environment." "" "rfstop: stop the Remote File" "" rfstop(1M)~\*{NUAG\*}
.xx "Sharing environment." "" "rfstop: stop the Remote File" "" rfstop(1M)~\*{SARM\*}
.xx "notification shell script." "" "rfuadmin: Remote File Sharing" "" rfuadmin(1M)~\*{NUAG\*}
.xx "notification shell script." "" "rfuadmin: Remote File Sharing" "" rfuadmin(1M)~\*{SARM\*}
.xx "daemon process." "" "rfudaemon: Remote File Sharing" "" rfudaemon(1M)~\*{NUAG\*}
.xx "daemon process." "" "rfudaemon: Remote File Sharing" "" rfudaemon(1M)~\*{SARM\*}
.xx "and by user." "hosts.equiv," ".rhosts: trusted hosts by system" "" hosts.equiv(4)~\*{NUAG\*}
.xx "and by user." "hosts.equiv," ".rhosts: trusted hosts by system" "" hosts.equiv(4)~\*{SARM\*}
.xx "" "index," "rindex: string operations." "" index(3)~\*{BSD\*}
.xx "" "/fmod, fmodf, fabs, fabsf," "rint, remainder: floor, ceiling,/" "" floor(3M)~\*{PRM\*}
.xx "" "/savetty, getsyx, setsyx," "ripoffline, curs_set, napms:/" "" curs_kernel(3X)~\*{CHAR\*}
.xx "" "lptest: generate lineprinter" "ripple pattern." "" lptest(1)~\*{BSD\*}
.xx "" "Multibus  flexible disk device d" "rivers." "fd: Information for" fd(7iref)~\*{MBRMAN\*}
.xx "standard/restricted/" "ksh," "rksh: KornShell, a" "" ksh(1)~\*{URM\*}
.xx "" "" "rlogin: remote login." "" rlogin(1)~\*{NUAG\*}
.xx "" "" "rlogin: remote login." "" rlogin(1)~\*{URM\*}
.xx "" "" "rlogind: remote login server." "" rlogind(1M)~\*{NUAG\*}
.xx "" "" "rlogind: remote login server." "" rlogind(1M)~\*{SARM\*}
.xx "directories." "" "rm, rmdir: remove files or" "" rm(1)~\*{URM\*}
.xx "" "information for mail and" "rmail." "mailcnfg: initialization" mailcnfg(4)~\*{SARM\*}
.xx "users." "mail," "rmail: read mail or send mail to" "" mail(1)~\*{URM\*}
.xx "private space management map." "" "rmalloc: allocate space from a" "" rmalloc(D3DK)~\*{DDRM\*}
.xx "SCCS file." "" "rmdel: remove a delta from an" "" rmdel(1)~\*{PRM\*}
.xx "" "" "rmdir: remove a directory." "" rmdir(2)~\*{PRM\*}
.xx "directories." "rm," "rmdir: remove files or" "" rm(1)~\*{URM\*}
.xx "directories in a path." "mkdirp," "rmdirp: create, remove" "" mkdirp(3G)~\*{PRM\*}
.xx "private space management map." "" "rmfree: free space into a" "" rmfree(D3DK)~\*{DDRM\*}
.xx "space management map." "" "rminit: initialize a private" "" rminit(D3K)~\*{DDRM\*}
.xx "resource information." "" "rmntstat: display mounted" "" rmntstat(1M)~\*{NUAG\*}
.xx "resource information." "" "rmntstat: display mounted" "" rmntstat(1M)~\*{SARM\*}
.xx "remote resources." "" "rmnttry: attempt to mount queued" "" rmnttry(1M)~\*{NUAG\*}
.xx "remote resources." "" "rmnttry: attempt to mount queued" "" rmnttry(1M)~\*{SARM\*}
.xx "mounts." "" "rmount: queue remote resource" "" rmount(1M)~\*{NUAG\*}
.xx "mounts." "" "rmount: queue remote resource" "" rmount(1M)~\*{SARM\*}
.xx "unmount Remote File Sharing/" "" "rmountall, rumountall: mount," "" rmountall(1M)~\*{NUAG\*}
.xx "unmount Remote File Sharing/" "" "rmountall, rumountall: mount," "" rmountall(1M)~\*{SARM\*}
.xx "flag for a wakeup." "" "rmsetwant: set the map's wait" "" rmsetwant(D3K)~\*{DDRM\*}
.xx "from a message." "" "rmvb: remove a message block" "" rmvb(D3DK)~\*{DDRM\*}
.xx "queue." "" "rmvq: remove a message from a" "" rmvq(D3DK)~\*{DDRM\*}
.xx "bibliographic database." "" "roffbib: format and print a" "" roffbib(1)~\*{BSD\*}
.xx "" "chroot: change" "root directory." "" chroot(2)~\*{PRM\*}
.xx "" "chroot: change" "root directory for a command." "" chroot(1M)~\*{SARM\*}
.xx "" "logarithm, power, square" "root functions." "/exponential," exp(3M)~\*{PRM\*}
.xx "" "size in bytes to size in pages" "(round down)." "btop: convert" btop(D3DK)~\*{DDRM\*}
.xx "" "size in bytes to size in pages" "(round up)." "btopr: convert" btopr(D3DK)~\*{DDRM\*}
.xx "routing tables." "" "route: manually manipulate the" "" route(1M)~\*{NUAG\*}
.xx "routing tables." "" "route: manually manipulate the" "" route(1M)~\*{SARM\*}
.xx "" "" "routed: network routing daemon." "" routed(1M)~\*{NUAG\*}
.xx "" "" "routed: network routing daemon." "" routed(1M)~\*{SARM\*}
.xx "" "atexit: add program termination" "routine." "" atexit(3C)~\*{PRM\*}
.xx "" "STREAMS driver's message free" "routine structure." "free_rtn:" free_rtn(D4DK)~\*{DDRM\*}
.xx "" "schedule a queue's service" "routine to be run." "qenable:" qenable(D3DK)~\*{DDRM\*}
.xx "" "panels virtual screen refresh" "routine." "/update_panels:" panel_update(3X)~\*{CHAR\*}
.xx "" "expression compile and match" "routines." "/advance: regular" regexp(5)~\*{PRM\*}
.xx "" "expression compile and match" "routines." "/advance: regular" regexp(5)~\*{SARM\*}
.xx "" "expression compile and match" "routines." "/advance: regular" regexpr(3G)~\*{PRM\*}
.xx "" "curses bell and screen flash" "routines." "/beep, flash:" curs_beep(3X)~\*{CHAR\*}
.xx "" "window background manipulation" "routines." "/bkgd, wbkgd: curses" curs_bkgd(3X)~\*{CHAR\*}
.xx "" "panels deck manipulation" "routines." "/bottom_panel:" panel_top(3X)~\*{CHAR\*}
.xx "" "file for name server" "routines." "/configuration" resolv.conf(4)~\*{NUAG\*}
.xx "" "file for name server" "routines." "/configuration" resolv.conf(4)~\*{SARM\*}
.xx "" "and window attribute control" "routines." "/curses character" curs_attr(3X)~\*{CHAR\*}
.xx "" "initialization and manipulation" "routines." "/curses screen" curs_initscr(3X)~\*{CHAR\*}
.xx "" "field_opts: forms field option" "routines." "/field_opts_off," form_field_opts(3X)~\*{CHAR\*}
.xx "" "miscellaneous curses utility" "routines." "/flushinp:" curs_util(3X)~\*{CHAR\*}
.xx "" "/assign application-specific" "routines for automatic/" "" menu_hook(3X)~\*{CHAR\*}
.xx "" "better random number generator;" "routines for changing/" "/setstate:" random(3)~\*{BSD\*}
.xx "" "/rpc_broadcast, rpc_call: library" "routines for client side calls." "" rpc_clnt_calls(3N)~\*{NI\*}
.xx "" "/authsys_create_default: library" "routines for client side remote/" "" rpc_clnt_auth(3N)~\*{NI\*}
.xx "" "/clnt_vc_create: library" "routines for dealing with/" "" rpc_clnt_create(3N)~\*{NI\*}
.xx "creation/" "/svc_vc_create: library" "routines for dealing with the" "" rpc_svc_create(3N)~\*{NI\*}
.xx "representation." "xdr: library" "routines for external data" "" xdr(3N)~\*{NI\*}
.xx "" "/xdrrec_eof, xdr_setpos: library" "routines for external data/" "" xdr_admin(3N)~\*{NI\*}
.xx "" "/xdr_wrapstring: library" "routines for external data/" "" xdr_complex(3N)~\*{NI\*}
.xx "" "/xdrstdio_create: library" "routines for external data/" "" xdr_create(3N)~\*{NI\*}
.xx "" "/xdr_u_short, xdr_void: library" "routines for external data/" "" xdr_simple(3N)~\*{NI\*}
.xx "" "/assign application-specific" "routines for invocation by/" "" form_hook(3X)~\*{CHAR\*}
.xx "" "/xprt_unregister: library" "routines for registering/" "" rpc_svc_calls(3N)~\*{NI\*}
.xx "calls." "rpc: library" "routines for remote procedure" "" rpc(3N)~\*{NI\*}
.xx "" "/xdr_replymsg: XDR library" "routines for remote procedure/" "" rpc_xdr(3N)~\*{NI\*}
.xx "" "/rpcb_set, rpcb_unset: library" "routines for RPC bind service." "" rpcbind(3N)~\*{NI\*}
.xx "" "/svc_run, svc_sendreply: library" "routines for RPC servers." "" rpc_svc_reg(3N)~\*{NI\*}
.xx "procedure/" "/user2netname: library" "routines for secure remote" "" secure_rpc(3N)~\*{NI\*}
.xx "" "/svcerr_weakauth: library" "routines for server side remote/" "" rpc_svc_err(3N)~\*{NI\*}
.xx "" "form_opts: forms option" "routines." "/form_opts_off," form_opts(3X)~\*{CHAR\*}
.xx "" "introduction to kernel utility" "routines." "intro:" intro(D3DK)~\*{DDRM\*}
.xx "" "introduction to DMA utility" "routines." "intro:" intro(D3X)~\*{DDRM\*}
.xx "" "to driver entry point" "routines." "intro: introduction" intro(D2DK)~\*{DDRM\*}
.xx "" "curses refresh control" "routines." "/is_wintouched:" curs_touch(3X)~\*{CHAR\*}
.xx "" "item_opts: menus item option" "routines." "/item_opts_off," menu_item_opts(3X)~\*{CHAR\*}
.xx "" "menu_opts: menus option" "routines." "/menu_opts_off," menu_opts(3X)~\*{CHAR\*}
.xx "" "terminal output option control" "routines." "/nl, nonl: curses" curs_outopts(3X)~\*{CHAR\*}
.xx "" "curses color manipulation" "routines." "/pair_content:" curs_color(3X)~\*{CHAR\*}
.xx "" "panels deck manipulation" "routines." "/panel_hidden:" panel_show(3X)~\*{CHAR\*}
.xx "" "dn_comp, dn_expand: resolver" "routines." "/res_send, res_init," resolver(3N)~\*{NI\*}
.xx "" "dn_comp, dn_expand: resolver" "routines." "/res_send, res_init," resolver(3N)~\*{NUAG\*}
.xx "" "napms: low-level curses" "routines." "/ripoffline, curs_set," curs_kernel(3X)~\*{CHAR\*}
.xx "" "window and subwindow association" "routines." "/scale_form: forms" form_win(3X)~\*{CHAR\*}
.xx "" "window and subwindow association" "routines." "/scale_menu: menus" menu_win(3X)~\*{CHAR\*}
.xx "" "link_fieldtype: forms fieldtype" "routines." "/set_fieldtype_choice," form_fieldtype(3X)~\*{CHAR\*}
.xx "" "menu_mark: menus mark string" "routines." "/set_menu_mark," menu_mark(3X)~\*{CHAR\*}
.xx "" "slk_attroff: curses soft label" "routines." "/slk_attrset," curs_slk(3X)~\*{CHAR\*}
.xx "" "curses environment query" "routines." "/termattrs, termname:" curs_termattrs(3X)~\*{CHAR\*}
.xx "" "terminal input option control" "routines." "/typeahead: curses" curs_inopts(3X)~\*{CHAR\*}
.xx "" "mailsurr: surrogate commands for" "routing and transport of mail." "" mailsurr(4)~\*{SARM\*}
.xx "" "routed: network" "routing daemon." "" routed(1M)~\*{NUAG\*}
.xx "" "routed: network" "routing daemon." "" routed(1M)~\*{SARM\*}
.xx "" "supporting for packet network" "routing." "routing: system" routing(4)~\*{NUAG\*}
.xx "" "supporting for packet network" "routing." "routing: system" routing(4)~\*{SARM\*}
.xx "packet network routing." "" "routing: system supporting for" "" routing(4)~\*{NUAG\*}
.xx "packet network routing." "" "routing: system supporting for" "" routing(4)~\*{SARM\*}
.xx "" "route: manually manipulate the" "routing tables." "" route(1M)~\*{NUAG\*}
.xx "" "route: manually manipulate the" "routing tables." "" route(1M)~\*{SARM\*}
.xx "" "/set and get maximum numbers of" "rows and columns in menus." "" menu_format(3X)~\*{CHAR\*}
.xx "" "rpcb_unset: library routines for" "RPC bind service." "/rpcb_set," rpcbind(3N)~\*{NI\*}
.xx "" "get/set name of current secure" "RPC domain." "domainname:" domainname(1M)~\*{NI\*}
.xx "" "rpcinfo: report" "RPC information." "" rpcinfo(1M)~\*{NI\*}
.xx "" "rpcinfo: report" "RPC information." "" rpcinfo(1M)~\*{NUAG\*}
.xx "procedure calls." "" "rpc: library routines for remote" "" rpc(3N)~\*{NI\*}
.xx "" "rpc:" "rpc program number data base." "" rpc(4)~\*{NI\*}
.xx "" "rpcbind: universal addresses to" "RPC program number mapper." "" rpcbind(1M)~\*{NI\*}
.xx "" "rpcbind: universal addresses to" "RPC program number mapper." "" rpcbind(1M)~\*{NUAG\*}
.xx "" "rpcgen: an" "RPC protocol compiler." "" rpcgen(1)~\*{NI\*}
.xx "base." "" "rpc: rpc program number data" "" rpc(4)~\*{NI\*}
.xx "" "library routines for" "RPC servers." "/svc_sendreply:" rpc_svc_reg(3N)~\*{NI\*}
.xx "" "rpcbind:   rpcb_getmaps," "rpcb_getaddr, rpcb_gettime,/" "" rpcbind(3N)~\*{NI\*}
.xx "rpcb_gettime,/" "rpcbind:" "rpcb_getmaps, rpcb_getaddr," "" rpcbind(3N)~\*{NI\*}
.xx "" "/rpcb_getmaps, rpcb_getaddr," "rpcb_gettime, rpcb_rmtcall,/" "" rpcbind(3N)~\*{NI\*}
.xx "rpcb_getaddr, rpcb_gettime,/" "" "rpcbind:   rpcb_getmaps," "" rpcbind(3N)~\*{NI\*}
.xx "RPC program number mapper." "" "rpcbind: universal addresses to" "" rpcbind(1M)~\*{NI\*}
.xx "RPC program number mapper." "" "rpcbind: universal addresses to" "" rpcbind(1M)~\*{NUAG\*}
.xx "" "/rpcb_getaddr, rpcb_gettime," "rpcb_rmtcall, rpcb_set,/" "" rpcbind(3N)~\*{NI\*}
.xx "" "/clnt_sperrno, clnt_sperror," "rpc_broadcast, rpc_call: library/" "" rpc_clnt_calls(3N)~\*{NI\*}
.xx "" "/rpcb_gettime, rpcb_rmtcall," "rpcb_set, rpcb_unset: library/" "" rpcbind(3N)~\*{NI\*}
.xx "RPC/" "/rpcb_rmtcall, rpcb_set," "rpcb_unset: library routines for" "" rpcbind(3N)~\*{NI\*}
.xx "" "/clnt_sperror, rpc_broadcast," "rpc_call: library routines for/" "" rpc_clnt_calls(3N)~\*{NI\*}
.xx "authnone_create,/" "" "rpc_clnt_auth:  auth_destroy," "" rpc_clnt_auth(3N)~\*{NI\*}
.xx "clnt_freeres, clnt_geterr,/" "" "rpc_clnt_calls:  clnt_call," "" rpc_clnt_calls(3N)~\*{NI\*}
.xx "clnt_create, clnt_destroy,/" "" "rpc_clnt_create:  clnt_control," "" rpc_clnt_create(3N)~\*{NI\*}
.xx "compiler." "" "rpcgen: an RPC protocol" "" rpcgen(1)~\*{NI\*}
.xx "" "" "rpcinfo: report RPC information." "" rpcinfo(1M)~\*{NI\*}
.xx "" "" "rpcinfo: report RPC information." "" rpcinfo(1M)~\*{NUAG\*}
.xx "xprt_register,/" "rpc_svc_calls:" "rpc_reg, svc_reg, svc_unreg," "" rpc_svc_calls(3N)~\*{NI\*}
.xx "server." "" "rpc.rusersd: network username" "" rusersd(1M)~\*{NI\*}
.xx "server." "" "rpc.rusersd: network username" "" rusersd(1M)~\*{NUAG\*}
.xx "server." "" "rpc.rwalld: network rwall" "" rwalld(1M)~\*{NI\*}
.xx "server." "" "rpc.rwalld: network rwall" "" rwalld(1M)~\*{NUAG\*}
.xx "" "" "rpc.sprayd: spray server." "" sprayd(1M)~\*{NI\*}
.xx "" "" "rpc.sprayd: spray server." "" sprayd(1M)~\*{NUAG\*}
.xx "svc_reg, svc_unreg,/" "" "rpc_svc_calls:   rpc_reg," "" rpc_svc_calls(3N)~\*{NI\*}
.xx "svc_destroy, svc_dg_create,/" "" "rpc_svc_create:  svc_create," "" rpc_svc_create(3N)~\*{NI\*}
.xx "svcerr_decode, svcerr_noproc,/" "" "rpc_svc_err:   svcerr_auth," "" rpc_svc_err(3N)~\*{NI\*}
.xx "svc_getargs, svc_getreqset,/" "" "rpc_svc_reg:   svc_freeargs," "" rpc_svc_reg(3N)~\*{NI\*}
.xx "xdr_authsys_parms, xdr_callhdr,/" "" "rpc_xdr:   xdr_accepted_reply," "" rpc_xdr(3N)~\*{NI\*}
.xx "" "/mdiv, mcmp, min, mout, pow, gcd," "rpow, msqrt, sdiv, itom, xtom,/" "" mp(3X)~\*{BSD\*}
.xx "standard shell, job/" "sh, jsh," "rsh: command interpreters:" "" sh(1)~\*{URM\*}
.xx "" "" "rsh: remote shell." "" rsh(1)~\*{NUAG\*}
.xx "" "" "rsh: remote shell." "" rsh(1)~\*{URM\*}
.xx "" "" "rshd: remote shell server." "" rshd(1M)~\*{NUAG\*}
.xx "" "" "rshd: remote shell server." "" rshd(1M)~\*{SARM\*}
.xx "requests and service media/" "" "rsoper: service pending restore" "" rsoper(1M)~\*{SARM\*}
.xx "" "mb2a_sendrsvp: Sends a" "rsvp request message." "" mb2a_sendrsvp(3tai)~\*{MBTAI\*}
.xx "" "/cancels an ongoing" "rsvp transaction." "" mps_AMPcancel(D3D)~\*{DDRM\*}
.xx "" "" "rtc: real time clock interface." "" rtc(7)~\*{SARM\*}
.xx "parameter table." "" "rt_dptbl: real-time dispatcher" "" rt_dptbl(4)~\*{SARM\*}
.xx "resource request." "" "rumount: cancel queued remote" "" rumount(1M)~\*{NUAG\*}
.xx "resource request." "" "rumount: cancel queued remote" "" rumount(1M)~\*{SARM\*}
.xx "Remote File Sharing/" "rmountall," "rumountall: mount, unmount" "" rmountall(1M)~\*{NUAG\*}
.xx "Remote File Sharing/" "rmountall," "rumountall: mount, unmount" "" rmountall(1M)~\*{SARM\*}
.xx "" "nice:" "run a command at low priority." "" nice(1)~\*{URM\*}
.xx "and quits." "nohup:" "run a command immune to hangups" "" nohup(1)~\*{URM\*}
.xx "" "shell:" "run a command using shell." "" shell(1F)~\*{CHAR\*}
.xx "" "run:" "run an executable." "" run(1F)~\*{CHAR\*}
.xx "" "atq: display the jobs queued to" "run at specified times." "" atq(1)~\*{URM\*}
.xx "multi-user environment." "rc2:" "run commands performed for" "" rc2(1M)~\*{SARM\*}
.xx "the operating system." "rc0:" "run commands performed to stop" "" rc0(1M)~\*{SARM\*}
.xx "and reboot the operating/" "rc6:" "run commands performed to stop" "" rc6(1M)~\*{SARM\*}
.xx "" "runacct:" "run daily accounting." "" runacct(1M)~\*{SARM\*}
.xx "" "a queue's service routine to be" "run." "qenable: schedule" qenable(D3DK)~\*{DDRM\*}
.xx "" "" "run: run an executable." "" run(1F)~\*{CHAR\*}
.xx "" "" "runacct: run daily accounting." "" runacct(1M)~\*{SARM\*}
.xx "" "/prctmp, prdaily, prtacct," "runacct, shutacct, startup,/" "" acctsh(1M)~\*{SARM\*}
.xx "" "gcore: get core images of" "running processes." "" gcore(1)~\*{URM\*}
.xx "" "renice: alter priority of" "running processes." "" renice(1M)~\*{BSD\*}
.xx "" "reinit:" "runs an initialization file." "" reinit(1F)~\*{CHAR\*}
.xx "local machines." "" "ruptime: show host status of" "" ruptime(1)~\*{NUAG\*}
.xx "local machines." "" "ruptime: show host status of" "" ruptime(1)~\*{URM\*}
.xx "users on remote machines." "" "rusers: return information about" "" rusers(3N)~\*{NI\*}
.xx "machines." "" "rusers: who's logged in on local" "" rusers(1)~\*{NI\*}
.xx "machines." "" "rusers: who's logged in on local" "" rusers(1)~\*{NUAG\*}
.xx "" "rpc.rwalld: network" "rwall server." "" rwalld(1M)~\*{NI\*}
.xx "" "rpc.rwalld: network" "rwall server." "" rwalld(1M)~\*{NUAG\*}
.xx "network." "" "rwall: write to all users over a" "" rwall(1M)~\*{NI\*}
.xx "network." "" "rwall: write to all users over a" "" rwall(1M)~\*{NUAG\*}
.xx "machines." "" "rwall: write to specified remote" "" rwall(3N)~\*{NI\*}
.xx "machines." "" "rwho: who's logged in on local" "" rwho(1)~\*{NUAG\*}
.xx "machines." "" "rwho: who's logged in on local" "" rwho(1)~\*{URM\*}
.xx "server." "" "rwhod, in.rwhod: system status" "" rwhod(1M)~\*{NUAG\*}
.xx "server." "" "rwhod, in.rwhod: system status" "" rwhod(1M)~\*{SARM\*}
.xx "systems." "fsck" "(s5): check and repair s5 file" "" fsck(1M)~\*{SARM\*}
.xx "system." "mkfs" "(s5): construct an s5 file" "" mkfs(1M)~\*{SARM\*}
.xx "optimal access time." "dcopy" "(s5): copy s5 file systems for" "" dcopy(1M)~\*{SARM\*}
.xx "" "dir (s5): format of" "s5 directories." "" dir(4)~\*{SARM\*}
.xx "information." "ff" "(s5): display i-list" "" ff(1M)~\*{SARM\*}
.xx "" "mkfs (s5): construct an" "s5 file system." "" mkfs(1M)~\*{SARM\*}
.xx "" "mount (s5): mount an" "s5 file system." "" mount(1M)~\*{SARM\*}
.xx "" "fsdb (s5):" "s5 file system debugger." "" fsdb(1M)~\*{SARM\*}
.xx "" "(s5): make a literal copy of an" "s5 file system." "volcopy" volcopy(1M)~\*{SARM\*}
.xx "" "fs (s5): format of" "s5 file system volume." "" fs(4)~\*{SARM\*}
.xx "" "fsck (s5): check and repair" "s5 file systems." "" fsck(1M)~\*{SARM\*}
.xx "" "labelit (s5): provide labels for" "s5 file systems." "" labelit(1M)~\*{SARM\*}
.xx "access time." "dcopy (s5): copy" "s5 file systems for optimal" "" dcopy(1M)~\*{SARM\*}
.xx "" "free disk blocks and i-nodes for" "s5 file systems." "/number of" df(1M)~\*{SARM\*}
.xx "" "path names versus i-numbers for" "s5 file systems." "/(s5): generate" ncheck(1M)~\*{SARM\*}
.xx "" "inode" "(s5): format of an s5 i-node." "" inode(4)~\*{SARM\*}
.xx "" "dir" "(s5): format of s5 directories." "" dir(4)~\*{SARM\*}
.xx "volume." "fs" "(s5): format of s5 file system" "" fs(4)~\*{SARM\*}
.xx "i-numbers for s5 file/" "ncheck" "(s5): generate path names versus" "" ncheck(1M)~\*{SARM\*}
.xx "" "inode (s5): format of an" "s5 i-node." "" inode(4)~\*{SARM\*}
.xx "s5 file system." "volcopy" "(s5): make a literal copy of an" "" volcopy(1M)~\*{SARM\*}
.xx "" "mount" "(s5): mount an s5 file system." "" mount(1M)~\*{SARM\*}
.xx "systems." "labelit" "(s5): provide labels for s5 file" "" labelit(1M)~\*{SARM\*}
.xx "blocks and i-nodes for s5/" "df" "(s5): report number of free disk" "" df(1M)~\*{SARM\*}
.xx "" "fsdb" "(s5): s5 file system debugger." "" fsdb(1M)~\*{SARM\*}
.xx "System Administration." "" "SA: devices administered by" "" sa(7)~\*{SARM\*}
.xx "package." "sadc," "sa1, sa2: system activity report" "" sadc(1M)~\*{SARM\*}
.xx "package." "sadc, sa1," "sa2: system activity report" "" sadc(1M)~\*{SARM\*}
.xx "" "" "sac: service access controller." "" sac(1M)~\*{NI\*}
.xx "" "" "sac: service access controller." "" sac(1M)~\*{SARM\*}
.xx "controller administration." "" "sacadm: service access" "" sacadm(1M)~\*{NI\*}
.xx "controller administration." "" "sacadm: service access" "" sacadm(1M)~\*{SARM\*}
.xx "editing activity." "" "sact: print current SCCS file" "" sact(1)~\*{PRM\*}
.xx "Driver." "" "sad: STREAMS Administrative" "" sad(7)~\*{STRM\*}
.xx "report package." "" "sadc, sa1, sa2: system activity" "" sadc(1M)~\*{SARM\*}
.xx "" "" "sag: system activity graph." "" sag(1M)~\*{SARM\*}
.xx "same type." "" "SAMESTR: test if next queue is" "" SAMESTR(D3DK)~\*{DDRM\*}
.xx "" "" "sar: system activity reporter." "" sar(1M)~\*{SARM\*}
.xx "" "/reset_shell_mode, resetty," "savetty, getsyx, setsyx,/" "" curs_kernel(3X)~\*{CHAR\*}
.xx "" "" "sb: SCSI block structure." "" sb(D4I)~\*{SCSI\*}
.xx "allocation." "brk," "sbrk: change data segment space" "" brk(2)~\*{PRM\*}
.xx "" "/modf, modff, modfl, nextafter," "scalb, scalbl: manipulate parts/" "" frexp(3C)~\*{PRM\*}
.xx "" "/modff, modfl, nextafter, scalb," "scalbl: manipulate parts of/" "" frexp(3C)~\*{PRM\*}
.xx "for/" "/fp_class, isnan, copysign," "scalbn: miscellaneous functions" "" ieee_functions(3M)~\*{BSD\*}
.xx "" "/set_form_sub, form_sub," "scale_form: forms window and/" "" form_win(3X)~\*{CHAR\*}
.xx "" "/set_menu_sub, menu_sub," "scale_menu: menus window and/" "" menu_win(3X)~\*{CHAR\*}
.xx "" "scandir, alphasort:" "scan a directory." "" scandir(3)~\*{BSD\*}
.xx "directory." "" "scandir, alphasort: scan a" "" scandir(3)~\*{BSD\*}
.xx "formatted input." "" "scanf, fscanf, sscanf: convert" "" scanf(3S)~\*{PRM\*}
.xx "" "bfs: big file" "scanner." "" bfs(1)~\*{URM\*}
.xx "language." "awk: pattern" "scanning and processing" "" awk(1)~\*{URM\*}
.xx "language." "nawk: pattern" "scanning and processing" "" nawk(1)~\*{URM\*}
.xx "mvwscanw, vwscanw:/" "curs_scanw:" "scanw, wscanw, mvscanw," "" curs_scanw(3X)~\*{CHAR\*}
.xx "the network." "spray:" "scatter data in order to check" "" spray(3N)~\*{NI\*}
.xx "structure." "uio:" "scatter/gather I/O request" "" uio(D4DK)~\*{DDRM\*}
.xx "structure." "" "scb: SCSI control block" "" scb(D4I)~\*{SCSI\*}
.xx "for/" "sdi_translate: translate" "scb virtual to physical address" "" sdi_translate(D3I)~\*{SCSI\*}
.xx "" "for help with message numbers or" "SCCS commands." "help: ask" help(1)~\*{PRM\*}
.xx "" "change the delta comment of an" "SCCS delta." "cdc:" cdc(1)~\*{PRM\*}
.xx "" "comb: combine" "SCCS deltas." "" comb(1)~\*{PRM\*}
.xx "" "get: get a version of an" "SCCS file." "" get(1)~\*{PRM\*}
.xx "" "prs: print an" "SCCS file." "" prs(1)~\*{PRM\*}
.xx "" "rmdel: remove a delta from an" "SCCS file." "" rmdel(1)~\*{PRM\*}
.xx "" "sccsfile: format of" "SCCS file." "" sccsfile(4)~\*{PRM\*}
.xx "" "sccsfile: format of" "SCCS file." "" sccsfile(4)~\*{SARM\*}
.xx "" "unget: undo a previous get of an" "SCCS file." "" unget(1)~\*{PRM\*}
.xx "" "val: validate an" "SCCS file." "" val(1)~\*{PRM\*}
.xx "" "make a delta (change) to an" "SCCS file." "delta:" delta(1)~\*{PRM\*}
.xx "" "and commentary history of an" "SCCS file." "/display the delta" prt(1)~\*{BSD\*}
.xx "" "sact: print current" "SCCS file editing activity." "" sact(1)~\*{PRM\*}
.xx "" "compare two versions of an" "SCCS file." "sccsdiff:" sccsdiff(1)~\*{PRM\*}
.xx "" "admin: create and administer" "SCCS files." "" admin(1)~\*{PRM\*}
.xx "Code Control System (SCCS)." "" "sccs: front end for the Source" "" sccs(1)~\*{BSD\*}
.xx "" "the Source Code Control System" "(SCCS)." "sccs: front end for" sccs(1)~\*{BSD\*}
.xx "of an SCCS file." "" "sccsdiff: compare two versions" "" sccsdiff(1)~\*{PRM\*}
.xx "" "" "sccsfile: format of SCCS file." "" sccsfile(4)~\*{PRM\*}
.xx "" "" "sccsfile: format of SCCS file." "" sccsfile(4)~\*{SARM\*}
.xx "routine to be run." "qenable:" "schedule a queue's service" "" qenable(D3DK)~\*{DDRM\*}
.xx "" "check file system backup" "schedule." "ckbupscd:" ckbupscd(1M)~\*{SARM\*}
.xx "in microseconds." "ualarm:" "schedule signal after interval" "" ualarm(3)~\*{BSD\*}
.xx "" "prevent a queue from being" "scheduled." "noenable:" noenable(D3DK)~\*{DDRM\*}
.xx "" "dispadmin: process" "scheduler administration." "" dispadmin(1M)~\*{SARM\*}
.xx "" "priocntl: process" "scheduler control." "" priocntl(1)~\*{URM\*}
.xx "" "priocntl: process" "scheduler control." "" priocntl(2)~\*{PRM\*}
.xx "" "priocntlset: generalized process" "scheduler control." "" priocntlset(2)~\*{PRM\*}
.xx "transport program." "uusched: the" "scheduler for the uucp file" "" uusched(1M)~\*{SARM\*}
.xx "" "/setpriority: get/set program" "scheduling priority." "" getpriority(3)~\*{BSD\*}
.xx "structures." "" "scm, scs: SCSI command" "" scm(D4I)~\*{SCSI\*}
.xx "" "/alters executables to call" "SCO UNIX System V/386 Release/" "" fixshlib(1M)~\*{ACG\*}
.xx "environment for console/" "" "scompat: set up compatibility" "" scompat(1)~\*{ACG\*}
.xx "scr_set: read/" "curs_scr_dump:" "scr_dump, scr_restore, scr_init," "" curs_scr_dump(3X)~\*{CHAR\*}
.xx "" "clear: clear the terminal" "screen." "" clear(1)~\*{URM\*}
.xx "" "setcolor, setcolour: set" "screen color." "" setcolor(1)~\*{URM\*}
.xx "" "/beep, flash: curses bell and" "screen flash routines." "" curs_beep(3X)~\*{CHAR\*}
.xx "" "/scr_set: read (write) a curses" "screen from (to) a file." "" curs_scr_dump(3X)~\*{CHAR\*}
.xx "package." "curses: CRT" "screen handling and optimization" "" curses(3X)~\*{CHAR\*}
.xx "" "/set_term, delscreen: curses" "screen initialization and/" "" curs_initscr(3X)~\*{CHAR\*}
.xx "" "mapstr: configure monitor" "screen mapping." "/mapscrn," mapkey(1M)~\*{SARM\*}
.xx "" "a panels window on the virtual" "screen." "/move_panel: move" panel_move(3X)~\*{CHAR\*}
.xx "" "/update_panels: panels virtual" "screen refresh routine." "" panel_update(3X)~\*{CHAR\*}
.xx "editor based on ex." "vi:" "screen-oriented (visual) display" "" vi(1)~\*{URM\*}
.xx "a curses/" "/scr_dump, scr_restore," "scr_init, scr_set: read (write)" "" curs_scr_dump(3X)~\*{CHAR\*}
.xx "" "/terminal controller" "script device driver." "" atcs(7iref)~\*{MBRMAN\*}
.xx "" "execute a configuration" "script." "doconfig:" doconfig(3N)~\*{NI\*}
.xx "" "inittab:" "script for init." "" inittab(4)~\*{SARM\*}
.xx "terminal session." "" "script: make typescript of a" "" script(1)~\*{URM\*}
.xx "" "stores answers to a request" "script." "pkgask:" pkgask(1M)~\*{ISDG\*}
.xx "" "stores answers to a request" "script." "pkgask:" pkgask(1M)~\*{SARM\*}
.xx "" "File Sharing notification shell" "script." "rfuadmin: Remote" rfuadmin(1M)~\*{NUAG\*}
.xx "" "File Sharing notification shell" "script." "rfuadmin: Remote" rfuadmin(1M)~\*{SARM\*}
.xx "" "XENIX installation shell" "script." "xinstall:" xinstall(1M)~\*{SARM\*}
.xx "" "/scroll, srcl, wscrl:" "scroll a curses window." "" curs_scroll(3X)~\*{CHAR\*}
.xx "curses window." "curs_scroll:" "scroll, srcl, wscrl: scroll a" "" curs_scroll(3X)~\*{CHAR\*}
.xx "" "/leaveok, setscrreg, wsetscrreg," "scrollok, nl, nonl: curses/" "" curs_outopts(3X)~\*{CHAR\*}
.xx "read/" "curs_scr_dump:  scr_dump," "scr_restore, scr_init, scr_set:" "" curs_scr_dump(3X)~\*{CHAR\*}
.xx "" "/scr_dump, scr_restore, scr_init," "scr_set: read (write) a curses/" "" curs_scr_dump(3X)~\*{CHAR\*}
.xx "" "scm," "scs: SCSI command structures." "" scm(D4I)~\*{SCSI\*}
.xx "driver." "sdi_getblk: allocate a" "SCSI block for the target" "" sdi_getblk(D3I)~\*{SCSI\*}
.xx "" "release a previously allocated" "SCSI block." "sdi_freeblk:" sdi_freeblk(D3I)~\*{SCSI\*}
.xx "" "sb:" "SCSI block structure." "" sb(D4I)~\*{SCSI\*}
.xx "" "scm, scs:" "SCSI command structures." "" scm(D4I)~\*{SCSI\*}
.xx "" "sdi_send: send" "SCSI command to the controller." "" sdi_send(D3I)~\*{SCSI\*}
.xx "" "scb:" "SCSI control block structure." "" scb(D4I)~\*{SCSI\*}
.xx "" "sdi_name: get name of addressed" "SCSI controller." "" sdi_name(D3I)~\*{SCSI\*}
.xx "" "intro: introduction to" "SCSI data structures." "" intro(D4I)~\*{SCSI\*}
.xx "" "scsi_ad:" "SCSI device address structure." "" scsi_ad(D4I)~\*{SCSI\*}
.xx "" "scsi_disk: sd01" "SCSI disk driver." "" scsi_disk(7)~\*{SARM\*}
.xx "" "sfb:" "SCSI function block structure." "" sfb(D4I)~\*{SCSI\*}
.xx "" "sdi_init: initialize the" "SCSI host adapter." "" sdi_init(D3I)~\*{SCSI\*}
.xx "" "virtual to physical address for" "SCSI host adapter." "/scb" sdi_translate(D3I)~\*{SCSI\*}
.xx "" "\*(dr: Adaptec 1542A" "SCSI host adapter subsystem." "" scsi_adaptec(7)~\*{SARM\*}
.xx "" "\*(dr: \*(ha" "SCSI host adapter subsystem." "" scsi_dpt(7)~\*{SARM\*}
.xx "SCSI Subsystem." "" "scsi: Multibus II iSBC 486/133SE" "" scsi(7iref)~\*{MBRMAN\*}
.xx "" "sdi_icmd: perform requested" "SCSI operation immediately." "" sdi_icmd(D3I)~\*{SCSI\*}
.xx "" "/convert device number to" "SCSI pass-through device number." "" sdi_getdev(D3I)~\*{SCSI\*}
.xx "" "scsi: Multibus II iSBC 486/133SE" "SCSI Subsystem." "" scsi(7iref)~\*{MBRMAN\*}
.xx "" "scsi_tape: st01" "SCSI tape driver." "" scsi_tape(7)~\*{SARM\*}
.xx "" "intro: introduction to" "SCSI target driver functions." "" intro(D3I)~\*{SCSI\*}
.xx "" "ver_no:" "SCSI version number structure." "" ver_no(D4I)~\*{SCSI\*}
.xx "" "scsi_worm: sw01" "SCSI WORM Target Driver." "" scsi_worm(7)~\*{SARM\*}
.xx "structure." "" "scsi_ad: SCSI device address" "" scsi_ad(D4I)~\*{SCSI\*}
.xx "driver." "" "scsi_disk: sd01 SCSI disk" "" scsi_disk(7)~\*{SARM\*}
.xx "driver." "" "scsi_tape: st01 SCSI tape" "" scsi_tape(7)~\*{SARM\*}
.xx "adapter subsystem." "" "scsi_wd7000: WD7000 FASST2 host" "" scsi_wd7000(7)~\*{SARM\*}
.xx "Driver." "" "scsi_worm: sw01 SCSI WORM Target" "" scsi_worm(7)~\*{SARM\*}
.xx "" "scsi_disk:" "sd01 SCSI disk driver." "" scsi_disk(7)~\*{SARM\*}
.xx "" "" "sdb: symbolic debugger." "" sdb(1)~\*{PRM\*}
.xx "access to a shared data/" "" "sdenter, sdleave: synchronize" "" sdenter(2)~\*{ACG\*}
.xx "" "" "sdevice: file format." "" sdevice(4)~\*{ISDG\*}
.xx "" "" "sdevice: file format." "" sdevice(4)~\*{SARM\*}
.xx "shared data segment." "sdget," "sdfree: attach and detach a" "" sdget(2)~\*{ACG\*}
.xx "a shared data segment." "" "sdget, sdfree: attach and detach" "" sdget(2)~\*{ACG\*}
.xx "access." "" "sdgetv: synchronize shared data" "" sdgetv(2)~\*{ACG\*}
.xx "side-by-side." "" "sdiff: print file differences" "" sdiff(1)~\*{URM\*}
.xx "previously allocated SCSI/" "" "sdi_freeblk: release a" "" sdi_freeblk(D3I)~\*{SCSI\*}
.xx "block for the target driver." "" "sdi_getblk: allocate a SCSI" "" sdi_getblk(D3I)~\*{SCSI\*}
.xx "number to SCSI pass-through/" "" "sdi_getdev: convert device" "" sdi_getdev(D3I)~\*{SCSI\*}
.xx "operation immediately." "" "sdi_icmd: perform requested SCSI" "" sdi_icmd(D3I)~\*{SCSI\*}
.xx "host adapter." "" "sdi_init: initialize the SCSI" "" sdi_init(D3I)~\*{SCSI\*}
.xx "SCSI controller." "" "sdi_name: get name of addressed" "" sdi_name(D3I)~\*{SCSI\*}
.xx "the controller." "" "sdi_send: send SCSI command to" "" sdi_send(D3I)~\*{SCSI\*}
.xx "virtual to physical address for/" "" "sdi_translate: translate scb" "" sdi_translate(D3I)~\*{SCSI\*}
.xx "" "/mout, pow, gcd, rpow, msqrt," "sdiv, itom, xtom, mtox, mfree:/" "" mp(3X)~\*{BSD\*}
.xx "shared data segment." "sdenter," "sdleave: synchronize access to a" "" sdenter(2)~\*{ACG\*}
.xx "string." "fgrep:" "search a file for a character" "" fgrep(1)~\*{URM\*}
.xx "using full regular/" "egrep:" "search a file for a pattern" "" egrep(1)~\*{URM\*}
.xx "" "fmlgrep:" "search a file for a pattern." "" fmlgrep(1F)~\*{CHAR\*}
.xx "" "grep:" "search a file for a pattern." "" grep(1)~\*{URM\*}
.xx "" "bsearch: binary" "search a sorted table." "" bsearch(3C)~\*{PRM\*}
.xx "accounting file(s)." "acctcom:" "search and print process" "" acctcom(1)~\*{URM\*}
.xx "" "lsearch, lfind: linear" "search and update." "" lsearch(3C)~\*{PRM\*}
.xx "filename." "pathconv:" "search FMLI criteria for" "" pathconv(1F)~\*{CHAR\*}
.xx "" "srchtxt: display contents of, or" "search for a text string in,/" "" srchtxt(1)~\*{URM\*}
.xx "directories." "pathfind:" "search for named file in named" "" pathfind(3G)~\*{PRM\*}
.xx "" "ttysrch: directory" "search list for ttyname." "" ttysrch(4)~\*{SARM\*}
.xx "" "hcreate, hdestroy: manage hash" "search tables." "hsearch," hsearch(3C)~\*{PRM\*}
.xx "" "tdelete, twalk: manage binary" "search trees." "tsearch, tfind," tsearch(3C)~\*{PRM\*}
.xx "" "econvert, fconvert, gconvert," "seconvert, sfconvert, sgconvert:/" "" econvert(3)~\*{BSD\*}
.xx "" "keylogin: decrypt and store" "secret key." "" keylogin(1)~\*{NI\*}
.xx "" "keylogin: decrypt and store" "secret key." "" keylogin(1)~\*{NUAG\*}
.xx "" "getsecretkey: retrieve public or" "secret key." "/getpublickey," publickey(3N)~\*{NI\*}
.xx "" "elf_newdata, elf_rawdata: get" "section data." "elf_getdata," elf_getdata(3E)~\*{PRM\*}
.xx "" "retrieve class-dependent" "section header." "/elf32_getshdr:" elf_getshdr(3E)~\*{PRM\*}
.xx "" "/elf_newscn, elf_nextscn: get" "section information." "" elf_getscn(3E)~\*{PRM\*}
.xx "" "mcs: manipulate the comment" "section of an object file." "" mcs(1)~\*{PRM\*}
.xx "files." "size: print" "section sizes in bytes of object" "" size(1)~\*{PRM\*}
.xx "" "/library routines for" "secure remote procedure calls." "" secure_rpc(3N)~\*{NI\*}
.xx "" "get/set name of current" "secure RPC domain." "domainname:" domainname(1M)~\*{NI\*}
.xx "authdes_getucred, getnetname,/" "" "secure_rpc:  authdes_seccreate," "" secure_rpc(3N)~\*{NI\*}
.xx "" "" "sed: stream editor." "" sed(1)~\*{URM\*}
.xx "" "/mrand48, jrand48, srand48," "seed48, lcong48: generate/" "" drand48(3C)~\*{PRM\*}
.xx "" "/opendir, readdir, telldir," "seekdir, rewinddir, closedir:/" "" directory(3C)~\*{BSD\*}
.xx "" "/opendir, readdir, telldir," "seekdir, rewinddir, closedir:/" "" directory(3C)~\*{PRM\*}
.xx "" "shmget: get shared memory" "segment identifier." "" shmget(2)~\*{PRM\*}
.xx "" "attach and detach a shared data" "segment." "sdget, sdfree:" sdget(2)~\*{ACG\*}
.xx "" "access to a shared data" "segment." "/sdleave: synchronize" sdenter(2)~\*{ACG\*}
.xx "" "brk, sbrk: change data" "segment space allocation." "" brk(2)~\*{PRM\*}
.xx "two sorted files." "comm:" "select or reject lines common to" "" comm(1)~\*{URM\*}
.xx "multiplexing." "" "select: synchronous I/O" "" select(3C)~\*{NI\*}
.xx "a file." "cut: cut out" "selected fields of each line of" "" cut(1)~\*{URM\*}
.xx "a file." "fmlcut: cut out" "selected fields of each line of" "" fmlcut(1F)~\*{CHAR\*}
.xx "" "idcheck: returns" "selected information." "" idcheck(1M)~\*{ISDG\*}
.xx "" "idcheck: returns" "selected information." "" idcheck(1M)~\*{SARM\*}
.xx "file." "dump: dump" "selected parts of an object" "" dump(1)~\*{PRM\*}
.xx "" "opensem: open a" "semaphore." "" opensem(2)~\*{ACG\*}
.xx "" "to a resource governed by a" "semaphore." "/and check access" waitsem(2)~\*{ACG\*}
.xx "" "semctl:" "semaphore control operations." "" semctl(2)~\*{PRM\*}
.xx "" "create an instance of a binary" "semaphore." "creatsem:" creatsem(2)~\*{ACG\*}
.xx "" "semop:" "semaphore operations." "" semop(2)~\*{PRM\*}
.xx "" "ipcrm: remove a message queue," "semaphore set, or shared memory/" "" ipcrm(1)~\*{URM\*}
.xx "" "signal a process waiting on a" "semaphore." "sigsem:" sigsem(2)~\*{ACG\*}
.xx "" "semget: get set of" "semaphores." "" semget(2)~\*{PRM\*}
.xx "operations." "" "semctl: semaphore control" "" semctl(2)~\*{PRM\*}
.xx "" "" "semget: get set of semaphores." "" semget(2)~\*{PRM\*}
.xx "" "" "semop: semaphore operations." "" semop(2)~\*{PRM\*}
.xx "queue." "putctl:" "send a control message to a" "" putctl(D3DK)~\*{DDRM\*}
.xx "one-byte parameter to/" "putctl1:" "send a control message with a" "" putctl1(D3DK)~\*{DDRM\*}
.xx "" "t_sndudata:" "send a data unit." "" t_sndudata(3N)~\*{NI\*}
.xx "" "lpr:" "send a job to the printer." "" lpr(1)~\*{BSD\*}
.xx "" "send, sendto, sendmsg:" "send a message from a socket." "" send(3N)~\*{NI\*}
.xx "direction in a stream." "qreply:" "send a message in the opposite" "" qreply(D3DK)~\*{DDRM\*}
.xx "" "putmsg:" "send a message on a stream." "" putmsg(2)~\*{PRM\*}
.xx "" "putmsg:" "send a message on a stream." "" putmsg(2)~\*{STRM\*}
.xx "queue." "putnext:" "send a message to the next" "" putnext(D3DK)~\*{DDRM\*}
.xx "group of processes." "kill:" "send a signal to a process or a" "" kill(2)~\*{PRM\*}
.xx "group of/" "sigsend, sigsendset:" "send a signal to a process or a" "" sigsend(2)~\*{PRM\*}
.xx "a connection." "t_snd:" "send data or expedited data over" "" t_snd(3N)~\*{NI\*}
.xx "to network hosts." "ping:" "send ICMP ECHO_REQUEST packets" "" ping(1M)~\*{NUAG\*}
.xx "to network hosts." "ping:" "send ICMP ECHO_REQUEST packets" "" ping(1M)~\*{SARM\*}
.xx "message." "nlsrequest: format and" "send listener service request" "" nlsrequest(3N)~\*{NI\*}
.xx "" "sendmail:" "send mail over the internet." "" sendmail(1M)~\*{BSD\*}
.xx "" "tosmtp:" "send mail to SMTP." "" tosmtp(1M)~\*{SARM\*}
.xx "" "mail, rmail: read mail or" "send mail to users." "" mail(1)~\*{URM\*}
.xx "controller." "sdi_send:" "send SCSI command to the" "" sdi_send(D3I)~\*{SCSI\*}
.xx "message from a socket." "" "send, sendto, sendmsg: send a" "" send(3N)~\*{NI\*}
.xx "" "psignal:" "send signal to a process." "" psignal(D3K)~\*{DDRM\*}
.xx "" "killpg:" "send signal to a process group." "" killpg(3)~\*{BSD\*}
.xx "" "raise:" "send signal to program." "" raise(3C)~\*{PRM\*}
.xx "using Simple Mail/" "smtp:" "send SMTP mail to a remote host" "" smtp(1M)~\*{SARM\*}
.xx "request." "t_snddis:" "send user-initiated disconnect" "" t_snddis(3N)~\*{NI\*}
.xx "print service." "lp, cancel:" "send/cancel requests to an LP" "" lp(1)~\*{URM\*}
.xx "" "addresses and aliases for" "sendmail." "/addresses, forward:" aliases(4)~\*{BSD\*}
.xx "" "print statistics collected by" "sendmail." "mailstats:" mailstats(1M)~\*{BSD\*}
.xx "internet." "" "sendmail: send mail over the" "" sendmail(1M)~\*{BSD\*}
.xx "socket." "send, sendto," "sendmsg: send a message from a" "" send(3N)~\*{NI\*}
.xx "asynchronous mode." "mb2a_brdcst:" "Sends a broadcast message in" "" mb2a_brdcst(3tai)~\*{MBTAI\*}
.xx "synchronous mode." "mb2s_brdcst:" "Sends a broadcast message in" "" mb2s_brdcst(3tai)~\*{MBTAI\*}
.xx "" "mb2a_sendcancel:" "Sends a cancel message/" "" mb2a_sendcancel(3tai)~\*{MBTAI\*}
.xx "synchronous/" "mb2s_sendcancel:" "Sends a cancel message in" "" mb2s_sendcancel(3tai)~\*{MBTAI\*}
.xx "asynchronously." "mb2a_sendreply:" "Sends a reply message" "" mb2a_sendreply(3tai)~\*{MBTAI\*}
.xx "synchronous/" "mb2s_sendreply:" "Sends a reply message in" "" mb2s_sendreply(3tai)~\*{MBTAI\*}
.xx "receives a/" "mb2s_sendrsvp:" "Sends a request message and" "" mb2s_sendrsvp(3tai)~\*{MBTAI\*}
.xx "" "mb2a_sendrsvp:" "Sends a rsvp request message." "" mb2a_sendrsvp(3tai)~\*{MBTAI\*}
.xx "in asynchronous/" "mb2a_send:" "Sends a transactionless message" "" mb2a_send(3tai)~\*{MBTAI\*}
.xx "in synchronous mode." "mb2s_send:" "Sends a transactionless message" "" mb2s_send(3tai)~\*{MBTAI\*}
.xx "part of any/" "mps_AMPsend_data:" "sends solicited data that is not" "" mps_AMPsend_data(D3D)~\*{DDRM\*}
.xx "are not part of/" "mps_AMPsend:" "sends unsolicited messages that" "" mps_AMPsend(D3D)~\*{DDRM\*}
.xx "from a socket." "send," "sendto, sendmsg: send a message" "" send(3N)~\*{NI\*}
.xx "" "unsolicited reply message to be" "sent." "/constructs a" mps_mk_unsolrply(D3D)~\*{DDRM\*}
.xx "" "a broadcast message to be" "sent." "mps_mk_brdcst: constructs" mps_mk_brdcst(D3D)~\*{DDRM\*}
.xx "" "an unsolicited message to be" "sent." "mps_mk_unsol: constructs" mps_mk_unsol(D3D)~\*{DDRM\*}
.xx "" "receive data or expedited data" "sent over a connection." "t_rcv:" t_rcv(3N)~\*{NI\*}
.xx "data/" "/constructs a message to be" "sent to initiate a solicited" "" mps_mk_sol(D3D)~\*{DDRM\*}
.xx "data/" "/constructs a message to be" "sent to initiate a solicited" "" mps_mk_solrply(D3D)~\*{DDRM\*}
.xx "" "/maintain line settings and hunt" "sequences for TTY ports." "" sttydefs(1M)~\*{SARM\*}
.xx "access." "elf_next:" "sequential archive member" "" elf_next(3E)~\*{PRM\*}
.xx "" "/device driver supporting bus," "serial, and PS/2 compatible/" "" mouse(7)~\*{ISDG\*}
.xx "" "/device driver supporting bus," "serial, and PS/2 compatible/" "" mouse(7)~\*{SARM\*}
.xx "" "186/450: iSBC 186/450" "serial communications/" "" 186/450(7iref)~\*{MBRMAN\*}
.xx "device/" "i410: iSBC 186/410" "serial communications controller" "" i410(7iref)~\*{MBRMAN\*}
.xx "printers." "postio:" "serial interface for PostScript" "" postio(1)~\*{SARM\*}
.xx "" "asy: asynchronous" "serial port." "" asy(7)~\*{SARM\*}
.xx "" "i354: iSBX 354 dual channel" "serial-port device driver." "" i354(7iref)~\*{MBRMAN\*}
.xx "" "bootparamd: boot parameter" "server." "" bootparamd(1M)~\*{NI\*}
.xx "" "bootparamd: boot parameter" "server." "" bootparamd(1M)~\*{NUAG\*}
.xx "" "comsat, in.comsat: biff" "server." "" comsat(1M)~\*{NUAG\*}
.xx "" "comsat, in.comsat: biff" "server." "" comsat(1M)~\*{SARM\*}
.xx "" "ftpd: file transfer protocol" "server." "" ftpd(1M)~\*{NUAG\*}
.xx "" "ftpd: file transfer protocol" "server." "" ftpd(1M)~\*{SARM\*}
.xx "" "mountd: NFS mount request" "server." "" mountd(1M)~\*{NUAG\*}
.xx "" "mountd: NFS mount request" "server." "" mountd(1M)~\*{SARM\*}
.xx "" "rexecd: remote execution" "server." "" rexecd(1M)~\*{NUAG\*}
.xx "" "rexecd: remote execution" "server." "" rexecd(1M)~\*{SARM\*}
.xx "" "rlogind: remote login" "server." "" rlogind(1M)~\*{NUAG\*}
.xx "" "rlogind: remote login" "server." "" rlogind(1M)~\*{SARM\*}
.xx "" "rshd: remote shell" "server." "" rshd(1M)~\*{NUAG\*}
.xx "" "rshd: remote shell" "server." "" rshd(1M)~\*{SARM\*}
.xx "" "rpc.rusersd: network username" "server." "" rusersd(1M)~\*{NI\*}
.xx "" "rpc.rusersd: network username" "server." "" rusersd(1M)~\*{NUAG\*}
.xx "" "rpc.rwalld: network rwall" "server." "" rwalld(1M)~\*{NI\*}
.xx "" "rpc.rwalld: network rwall" "server." "" rwalld(1M)~\*{NUAG\*}
.xx "" "rwhod, in.rwhod: system status" "server." "" rwhod(1M)~\*{NUAG\*}
.xx "" "rwhod, in.rwhod: system status" "server." "" rwhod(1M)~\*{SARM\*}
.xx "" "rpc.sprayd: spray" "server." "" sprayd(1M)~\*{NI\*}
.xx "" "rpc.sprayd: spray" "server." "" sprayd(1M)~\*{NUAG\*}
.xx "" "telnetd: DARPA TELNET protocol" "server." "" telnetd(1M)~\*{NUAG\*}
.xx "" "telnetd: DARPA TELNET protocol" "server." "" telnetd(1M)~\*{SARM\*}
.xx "" "ypserv, ypbind: NIS" "server and binder processes." "" ypserv(1M)~\*{NI\*}
.xx "" "remote user information" "server." "fingerd, in.fingerd:" fingerd(1M)~\*{NUAG\*}
.xx "" "remote user information" "server." "fingerd, in.fingerd:" fingerd(1M)~\*{SARM\*}
.xx "information." "ypupdated:" "server for changing NIS" "" ypupdated(1M)~\*{NI\*}
.xx "private keys." "keyserv:" "server for storing public and" "" keyserv(1M)~\*{NI\*}
.xx "private keys." "keyserv:" "server for storing public and" "" keyserv(1M)~\*{NUAG\*}
.xx "" "talkd, in.talkd:" "server for talk program." "" talkd(1M)~\*{NUAG\*}
.xx "" "talkd, in.talkd:" "server for talk program." "" talkd(1M)~\*{SARM\*}
.xx "" "for dealing with the creation of" "server handles." "/routines" rpc_svc_create(3N)~\*{NI\*}
.xx "" "version of the map at the NIS" "server host." "/return current" yppoll(1M)~\*{NI\*}
.xx "communications/" "ccisrvinfo: CCI" "server information on the" "" ccisrvinfo(1iref)~\*{MBRMAN\*}
.xx "" "Remote File Sharing name" "server master file." "rfmaster:" rfmaster(4)~\*{NUAG\*}
.xx "" "Remote File Sharing name" "server master file." "rfmaster:" rfmaster(4)~\*{SARM\*}
.xx "" "in.named: Internet domain name" "server." "named," named(1M)~\*{NUAG\*}
.xx "" "in.named: Internet domain name" "server." "named," named(1M)~\*{SARM\*}
.xx "" "ypwhich: return name of NIS" "server or map master." "" ypwhich(1)~\*{NI\*}
.xx "" "Remote File Sharing name" "server query." "nsquery:" nsquery(1M)~\*{NUAG\*}
.xx "" "Remote File Sharing name" "server query." "nsquery:" nsquery(1M)~\*{SARM\*}
.xx "" "Address Resolution Protocol" "server." "rarpd: DARPA Reverse" rarpd(1M)~\*{NUAG\*}
.xx "" "Address Resolution Protocol" "server." "rarpd: DARPA Reverse" rarpd(1M)~\*{SARM\*}
.xx "" "configuration file for name" "server routines." "resolv.conf:" resolv.conf(4)~\*{NUAG\*}
.xx "" "configuration file for name" "server routines." "resolv.conf:" resolv.conf(4)~\*{SARM\*}
.xx "call/" "/library routines for" "server side remote procedure" "" rpc_svc_err(3N)~\*{NI\*}
.xx "" "mconnect: connect to SMTP mail" "server socket." "" mconnect(1M)~\*{BSD\*}
.xx "" "Trivial File Transfer Protocol" "server." "tftpd: DARPA" tftpd(1M)~\*{NUAG\*}
.xx "" "Trivial File Transfer Protocol" "server." "tftpd: DARPA" tftpd(1M)~\*{SARM\*}
.xx "" "in.tnamed: DARPA trivial name" "server." "tnamed," tnamed(1M)~\*{NUAG\*}
.xx "" "in.tnamed: DARPA trivial name" "server." "tnamed," tnamed(1M)~\*{SARM\*}
.xx "" "ypxfr: transfer YP map from a YP" "server to host." "" ypxfr(1M)~\*{NI\*}
.xx "" "point ypbind at a particular" "server." "ypset:" ypset(1M)~\*{NI\*}
.xx "" "inetd.conf: Internet" "servers database." "" inetd.conf(4)~\*{NUAG\*}
.xx "" "inetd.conf: Internet" "servers database." "" inetd.conf(4)~\*{SARM\*}
.xx "" "nslookup: query name" "servers interactively." "" nslookup(1M)~\*{NUAG\*}
.xx "" "nslookup: query name" "servers interactively." "" nslookup(1M)~\*{SARM\*}
.xx "" "library routines for RPC" "servers." "/svc_sendreply:" rpc_svc_reg(3N)~\*{NI\*}
.xx "" "library routines for registering" "servers." "/xprt_unregister:" rpc_svc_calls(3N)~\*{NI\*}
.xx "" "calendar: reminder" "service." "" calendar(1)~\*{URM\*}
.xx "" "lpadmin: configure the LP print" "service." "" lpadmin(1M)~\*{SARM\*}
.xx "" "sac:" "service access controller." "" sac(1M)~\*{NI\*}
.xx "" "sac:" "service access controller." "" sac(1M)~\*{SARM\*}
.xx "administration." "sacadm:" "service access controller" "" sacadm(1M)~\*{NI\*}
.xx "administration." "sacadm:" "service access controller" "" sacadm(1M)~\*{SARM\*}
.xx "" "nlsadmin: network listener" "service administration." "" nlsadmin(1M)~\*{SARM\*}
.xx "" "/lpmove: start/stop the LP print" "service and move requests." "" lpsched(1M)~\*{SARM\*}
.xx "" "requests to an LP print" "service." "/cancel: send/cancel" lp(1)~\*{URM\*}
.xx "" "starts a Multibus II boot" "service daemon." "bootserver:" bootserver(1iref)~\*{MBRMAN\*}
.xx "" "setservent, endservent: get" "service entry." "/getservbyname," getservent(3N)~\*{NI\*}
.xx "UNIX system." "uuglist: list" "service grades available on this" "" uuglist(1C)~\*{URM\*}
.xx "" "t_getinfo: get protocol-specific" "service information." "" t_getinfo(3N)~\*{NI\*}
.xx "" "filters used with the LP print" "service." "lpfilter: administer" lpfilter(1M)~\*{SARM\*}
.xx "" "forms used with the LP print" "service." "lpforms: administer" lpforms(1M)~\*{SARM\*}
.xx "" "remote systems with the print" "service." "lpsystem: register" lpsystem(1M)~\*{SARM\*}
.xx "" "/with backup operations to" "service media insertion prompts." "" bkoper(1M)~\*{SARM\*}
.xx "" "/pending restore requests and" "service media insertion prompts." "" rsoper(1M)~\*{SARM\*}
.xx "" "ypfiles: the Network Information" "Service (NIS) database and/" "" ypfiles(4)~\*{NI\*}
.xx "" "/make a Network Information" "Service (NIS) dbm file." "" makedbm(1M)~\*{NI\*}
.xx "" "/file for Network Information" "Service (NIS) updating." "" updaters(4)~\*{NI\*}
.xx "" "/V/386 Release 4.0 OSI Transport" "Service (ots) device driver." "" ots(7iref)~\*{MBRMAN\*}
.xx "and service media/" "rsoper:" "service pending restore requests" "" rsoper(1M)~\*{SARM\*}
.xx "" "about the status of the LP print" "service." "/print information" lpstat(1)~\*{URM\*}
.xx "" "srv:" "service queued messages." "" srv(D2DK)~\*{DDRM\*}
.xx "" "/format and send listener" "service request message." "" nlsrequest(3N)~\*{NI\*}
.xx "" "qenable: schedule a queue's" "service routine to be run." "" qenable(D3DK)~\*{DDRM\*}
.xx "" "library routines for RPC bind" "service." "/rpcb_set, rpcb_unset:" rpcbind(3N)~\*{NI\*}
.xx "" "Internet user name directory" "service." "whois:" whois(1)~\*{NUAG\*}
.xx "" "Internet user name directory" "service." "whois:" whois(1)~\*{URM\*}
.xx "" "enableok: allow a queue to be" "serviced." "" enableok(D3DK)~\*{DDRM\*}
.xx "" "services: Internet" "services and aliases." "" services(4)~\*{NUAG\*}
.xx "" "services: Internet" "services and aliases." "" services(4)~\*{SARM\*}
.xx "" "inetd: Internet" "services daemon." "" inetd(1M)~\*{NI\*}
.xx "" "inetd: Internet" "services daemon." "" inetd(1M)~\*{NUAG\*}
.xx "" "inetd: Internet" "services daemon." "" inetd(1M)~\*{SARM\*}
.xx "aliases." "" "services: Internet services and" "" services(4)~\*{NUAG\*}
.xx "aliases." "" "services: Internet services and" "" services(4)~\*{SARM\*}
.xx "" "or control a system backup" "session." "backup: initiate" backup(1M)~\*{SARM\*}
.xx "" "getsid: get" "session ID." "" getsid(2)~\*{PRM\*}
.xx "" "setsid: set" "session ID." "" setsid(2)~\*{PRM\*}
.xx "" "make typescript of a terminal" "session." "script:" script(1)~\*{URM\*}
.xx "" "ascii: map of ASCII character" "set." "" ascii(5)~\*{PRM\*}
.xx "" "ascii: map of ASCII character" "set." "" ascii(5)~\*{SARM\*}
.xx "length." "truncate, ftruncate:" "set a file to a specified" "" truncate(3C)~\*{PRM\*}
.xx "" "alarm:" "set a process alarm clock." "" alarm(2)~\*{PRM\*}
.xx "" "/top_row, item_index:" "set and get current menus items." "" menu_item_current(3X)~\*{CHAR\*}
.xx "" "umask:" "set and get file creation mask." "" umask(2)~\*{PRM\*}
.xx "" "/field_status, set_max_field:" "set and get forms field/" "" form_field_buffer(3X)~\*{CHAR\*}
.xx "" "/set_menu_format, menu_format:" "set and get maximum numbers of/" "" menu_format(3X)~\*{CHAR\*}
.xx "" "/set_item_value, item_value:" "set and get menus item values." "" menu_item_value(3X)~\*{CHAR\*}
.xx "" "/set_menu_pattern, menu_pattern:" "set and get menus pattern match/" "" menu_pattern(3X)~\*{CHAR\*}
.xx "environment/" "set, unset:" "set and unset local or global" "" set(1F)~\*{CHAR\*}
.xx "context." "sigstack:" "set and/or get signal stack" "" sigstack(3)~\*{BSD\*}
.xx "files." "ckperms:" "set and/or verify permissions on" "" ckperms(1iref)~\*{MBRMAN\*}
.xx "" "ffs: find first" "set bit." "" ffs(3C)~\*{PRM\*}
.xx "" "iconv: code" "set conversion tables." "" iconv(5)~\*{SARM\*}
.xx "" "iconv: code" "set conversion utility." "" iconv(1)~\*{URM\*}
.xx "" "sigsetmask:" "set current signal mask." "" sigsetmask(3)~\*{BSD\*}
.xx "" "getcontext, setcontext: get and" "set current user context." "" getcontext(2)~\*{PRM\*}
.xx "" "timezone:" "set default system time zone." "" timezone(4)~\*{PRM\*}
.xx "" "timezone:" "set default system time zone." "" timezone(4)~\*{SARM\*}
.xx "execution." "env:" "set environment for command" "" env(1)~\*{URM\*}
.xx "times." "utime:" "set file access and modification" "" utime(2)~\*{PRM\*}
.xx "" "utimes:" "set file times." "" utimes(3)~\*{BSD\*}
.xx "" "umask:" "set file-creation mode mask." "" umask(1)~\*{URM\*}
.xx "" "elf_fill:" "set fill byte." "" elf_fill(3E)~\*{PRM\*}
.xx "" "/current_field, field_index:" "set forms current page and/" "" form_page(3X)~\*{CHAR\*}
.xx "" "drv_setparm:" "set kernel state information." "" drv_setparm(D3DK)~\*{DDRM\*}
.xx "" "semget: get" "set of semaphores." "" semget(2)~\*{PRM\*}
.xx "" "/move an archive from one" "set of volumes to another." "" migration(1M)~\*{SARM\*}
.xx "" "getsockopt, setsockopt: get and" "set options on sockets." "" getsockopt(3N)~\*{NI\*}
.xx "stack context." "sigaltstack:" "set or get signal alternate" "" sigaltstack(2)~\*{PRM\*}
.xx "host system." "hostname:" "set or print name of current" "" hostname(1)~\*{BSD\*}
.xx "" "/a message queue, semaphore" "set, or shared memory ID." "" ipcrm(1)~\*{URM\*}
.xx "" "environment variables currently" "set." "printenv: display" printenv(1)~\*{BSD\*}
.xx "" "lpusers:" "set printing queue priorities." "" lpusers(1M)~\*{SARM\*}
.xx "" "setpgid:" "set process group ID." "" setpgid(2)~\*{PRM\*}
.xx "" "setpgrp:" "set process group ID." "" setpgrp(2)~\*{PRM\*}
.xx "mapping." "mprotect:" "set protection of memory" "" mprotect(2)~\*{PRM\*}
.xx "IDs." "setregid:" "set real and effective group" "" setregid(3)~\*{BSD\*}
.xx "" "setreuid:" "set real and effective user IDs." "" setreuid(3)~\*{BSD\*}
.xx "" "setcolor, setcolour:" "set screen color." "" setcolor(1)~\*{URM\*}
.xx "" "setsid:" "set session ID." "" setsid(2)~\*{PRM\*}
.xx "" "getgroups, setgroups: get or" "set supplementary group access/" "" getgroups(2)~\*{PRM\*}
.xx "host." "rdate:" "set system date from a remote" "" rdate(1M)~\*{NUAG\*}
.xx "host." "rdate:" "set system date from a remote" "" rdate(1M)~\*{SARM\*}
.xx "" "sysinfo: get and" "set system information strings." "" sysinfo(2)~\*{PRM\*}
.xx "clock." "setclk:" "set system time from hardware" "" setclk(1M)~\*{SARM\*}
.xx "" "tabs:" "set tabs on a terminal." "" tabs(1)~\*{URM\*}
.xx "group id." "tcsetpgrp:" "set terminal foreground process" "" tcsetpgrp(3C)~\*{PRM\*}
.xx "" "tset: provide information to" "set terminal modes." "" tset(1)~\*{URM\*}
.xx "and line discipline." "getty:" "set terminal type, modes, speed," "" getty(1M)~\*{SARM\*}
.xx "and line discipline." "uugetty:" "set terminal type, modes, speed," "" uugetty(1M)~\*{SARM\*}
.xx "panels/" "/replace_panel: get or" "set the current window of a" "" panel_window(3X)~\*{CHAR\*}
.xx "" "date: print and" "set the date." "" date(1)~\*{URM\*}
.xx "" "/settimeofday: get or" "set the date and time." "" gettimeofday(3)~\*{BSD\*}
.xx "" "/settimeofday: get or" "set the date and time." "" gettimeofday(3C)~\*{PRM\*}
.xx "wakeup." "rmsetwant:" "set the map's wait flag for a" "" rmsetwant(D3K)~\*{DDRM\*}
.xx "" "stty:" "set the options for a terminal." "" stty(1)~\*{BSD\*}
.xx "" "stty:" "set the options for a terminal." "" stty(1)~\*{URM\*}
.xx "" "stime:" "set time." "" stime(2)~\*{PRM\*}
.xx "or global environment/" "" "set, unset: set and unset local" "" set(1F)~\*{CHAR\*}
.xx "for console/" "scompat:" "set up compatibility environment" "" scompat(1)~\*{ACG\*}
.xx "" "diskadd: disk" "set up utility." "" diskadd(1M)~\*{SARM\*}
.xx "" "disksetup: disk" "set up utility." "" disksetup(1M)~\*{SARM\*}
.xx "" "setuid, setgid:" "set user and group IDs." "" setuid(2)~\*{PRM\*}
.xx "" "ulimit: get and" "set user limits." "" ulimit(2)~\*{PRM\*}
.xx "parameter." "idtune: attempts to" "set value of a tunable" "" idtune(1M)~\*{ISDG\*}
.xx "parameter." "idtune: attempts to" "set value of a tunable" "" idtune(1M)~\*{SARM\*}
.xx "setvbuf: assign buffering to a/" "" "setbuf, setbuffer, setlinebuf," "" setbuf(3S)~\*{BSD\*}
.xx "buffering to a stream." "" "setbuf, setvbuf: assign" "" setbuf(3S)~\*{PRM\*}
.xx "buffering to a stream." "" "setbuffer, setlinebuf: assign" "" setbuffer(3S)~\*{BSD\*}
.xx "assign buffering to a/" "setbuf," "setbuffer, setlinebuf, setvbuf:" "" setbuf(3S)~\*{BSD\*}
.xx "hardware clock." "" "setclk: set system time from" "" setclk(1M)~\*{SARM\*}
.xx "color." "" "setcolor: redefine or create a" "" setcolor(1F)~\*{CHAR\*}
.xx "color." "" "setcolor, setcolour: set screen" "" setcolor(1)~\*{URM\*}
.xx "" "setcolor," "setcolour: set screen color." "" setcolor(1)~\*{URM\*}
.xx "user context." "getcontext," "setcontext: get and set current" "" getcontext(2)~\*{PRM\*}
.xx "" "set_form_page, form_page," "set_current_field,/" "form_page: " form_page(3X)~\*{CHAR\*}
.xx "set_top_row,/" "menu_item_current:" "set_current_item, current_item," "" menu_item_current(3X)~\*{CHAR\*}
.xx "" "/setupterm, setterm," "set_curterm, del_curterm,/" "" curs_terminfo(3X)~\*{CHAR\*}
.xx "" "/set_field_fore, field_fore," "set_field_back, field_back,/" "" form_field_attributes(3X)~\*{CHAR\*}
.xx "" "form_field_buffer:" "set_field_buffer, field_buffer,/" "" form_field_buffer(3X)~\*{CHAR\*}
.xx "" "form_field_attributes:" "set_field_fore, field_fore,/" "" form_field_attributes(3X)~\*{CHAR\*}
.xx "" "/set_form_term, form_term," "set_field_init, field_init,/" "" form_hook(3X)~\*{CHAR\*}
.xx "format the/" "form_field_just:" "set_field_just, field_just:" "" form_field_just(3X)~\*{CHAR\*}
.xx "" "form_field_opts:" "set_field_opts, field_opts_on,/" "" form_field_opts(3X)~\*{CHAR\*}
.xx "the/" "/set_field_back, field_back," "set_field_pad, field_pad: format" "" form_field_attributes(3X)~\*{CHAR\*}
.xx "" "/set_field_buffer, field_buffer," "set_field_status, field_status,/" "" form_field_buffer(3X)~\*{CHAR\*}
.xx "" "/set_field_init, field_init," "set_field_term, field_term:/" "" form_hook(3X)~\*{CHAR\*}
.xx "" "form_field_validation:" "set_field_type, field_type,/" "" form_field_validation(3X)~\*{CHAR\*}
.xx "" "/new_fieldtype, free_fieldtype," "set_fieldtype_arg,/" "" form_fieldtype(3X)~\*{CHAR\*}
.xx "" "/set_fieldtype_arg," "set_fieldtype_choice,/" "" form_fieldtype(3X)~\*{CHAR\*}
.xx "" "form_field_userptr:" "set_field_userptr,/" "" form_field_userptr(3X)~\*{CHAR\*}
.xx "field_count,/" "form_field:" "set_form_fields, form_fields," "" form_field(3X)~\*{CHAR\*}
.xx "set_form_term,/" "form_hook:" "set_form_init, form_init," "" form_hook(3X)~\*{CHAR\*}
.xx "form_opts_off,/" "form_opts:" "set_form_opts, form_opts_on," "" form_opts(3X)~\*{CHAR\*}
.xx "set_current_field,/" "form_page:" "set_form_page, form_page," "" form_page(3X)~\*{CHAR\*}
.xx "" "/set_form_win, form_win," "set_form_sub, form_sub,/" "" form_win(3X)~\*{CHAR\*}
.xx "" "/set_form_init, form_init," "set_form_term, form_term,/" "" form_hook(3X)~\*{CHAR\*}
.xx "associate/" "form_userptr:" "set_form_userptr, form_userptr:" "" form_userptr(3X)~\*{CHAR\*}
.xx "set_form_sub,/" "form_win:" "set_form_win, form_win," "" form_win(3X)~\*{CHAR\*}
.xx "" "setuid," "setgid: set user and group IDs." "" setuid(2)~\*{PRM\*}
.xx "" "getgrent, getgrgid, getgrnam\^," "setgrent, endgrent, fgetgrent:/" "" getgrent(3C)~\*{PRM\*}
.xx "supplementary group/" "getgroups," "setgroups: get or set" "" getgroups(2)~\*{PRM\*}
.xx "" "/gethostbyaddr, gethostbyname," "sethostent, endhostent: get/" "" gethostent(3N)~\*{NI\*}
.xx "current host." "gethostname," "sethostname: get/set name of" "" gethostname(3)~\*{BSD\*}
.xx "set_item_term,/" "menu_hook:" "set_item_init, item_init," "" menu_hook(3X)~\*{CHAR\*}
.xx "item_opts_off,/" "menu_item_opts:" "set_item_opts, item_opts_on," "" menu_item_opts(3X)~\*{CHAR\*}
.xx "" "/set_item_init, item_init," "set_item_term, item_term,/" "" menu_hook(3X)~\*{CHAR\*}
.xx "associate/" "menu_item_userptr:" "set_item_userptr, item_userptr:" "" menu_item_userptr(3X)~\*{CHAR\*}
.xx "and get menus/" "menu_item_value:" "set_item_value, item_value: set" "" menu_item_value(3X)~\*{CHAR\*}
.xx "interval timer." "getitimer," "setitimer: get/set value of" "" getitimer(3C)~\*{PRM\*}
.xx "" "" "setjmp, longjmp: non-local goto." "" setjmp(3C)~\*{PRM\*}
.xx "_longjmp, sigsetjmp,/" "" "setjmp, longjmp, _setjmp," "" setjmp(3)~\*{BSD\*}
.xx "siglongjmp:/" "setjmp, longjmp," "_setjmp, _longjmp, sigsetjmp," "" setjmp(3)~\*{BSD\*}
.xx "keys." "" "setkey: assigns the function" "" setkey(1)~\*{URM\*}
.xx "encryption." "crypt," "setkey, encrypt: generate" "" crypt(3C)~\*{PRM\*}
.xx "a stream." "setbuffer," "setlinebuf: assign buffering to" "" setbuffer(3S)~\*{BSD\*}
.xx "buffering to/" "setbuf, setbuffer," "setlinebuf, setvbuf: assign" "" setbuf(3S)~\*{BSD\*}
.xx "program's locale." "" "setlocale: modify and query a" "" setlocale(3C)~\*{PRM\*}
.xx "" "syslog, openlog, closelog," "setlogmask: control system log." "" syslog(3)~\*{BSD\*}
.xx "" "/set_field_status, field_status," "set_max_field: set and get forms/" "" form_field_buffer(3X)~\*{CHAR\*}
.xx "" "/set_menu_fore, menu_fore," "set_menu_back, menu_back,/" "" menu_attributes(3X)~\*{CHAR\*}
.xx "set_menu_back,/" "menu_attributes:" "set_menu_fore, menu_fore," "" menu_attributes(3X)~\*{CHAR\*}
.xx "set and get/" "menu_format:" "set_menu_format, menu_format:" "" menu_format(3X)~\*{CHAR\*}
.xx "" "/set_menu_back, menu_back," "set_menu_grey, menu_grey,/" "" menu_attributes(3X)~\*{CHAR\*}
.xx "" "/set_item_term, item_term," "set_menu_init, menu_init,/" "" menu_hook(3X)~\*{CHAR\*}
.xx "item_count: connect/" "menu_items:" "set_menu_items, menu_items," "" menu_items(3X)~\*{CHAR\*}
.xx "mark string/" "menu_mark:" "set_menu_mark, menu_mark: menus" "" menu_mark(3X)~\*{CHAR\*}
.xx "menu_opts_off,/" "menu_opts:" "set_menu_opts, menu_opts_on," "" menu_opts(3X)~\*{CHAR\*}
.xx "menus/" "/set_menu_grey, menu_grey," "set_menu_pad, menu_pad: control" "" menu_attributes(3X)~\*{CHAR\*}
.xx "set and get menus/" "menu_pattern:" "set_menu_pattern, menu_pattern:" "" menu_pattern(3X)~\*{CHAR\*}
.xx "" "/set_menu_win, menu_win," "set_menu_sub, menu_sub,/" "" menu_win(3X)~\*{CHAR\*}
.xx "" "/set_menu_init, menu_init," "set_menu_term, menu_term: assign/" "" menu_hook(3X)~\*{CHAR\*}
.xx "associate/" "menu_userptr:" "set_menu_userptr, menu_userptr:" "" menu_userptr(3X)~\*{CHAR\*}
.xx "set_menu_sub,/" "menu_win:" "set_menu_win, menu_win," "" menu_win(3X)~\*{CHAR\*}
.xx "" "" "setmnt: establish mount table." "" setmnt(1M)~\*{SARM\*}
.xx "" "/getnetbyaddr, getnetbyname," "setnetent, endnetent: get/" "" getnetent(3N)~\*{NI\*}
.xx "pagination." "form_new_page:" "set_new_page, new_page: forms" "" form_new_page(3X)~\*{CHAR\*}
.xx "panel_userptr:/" "panel_userptr:" "set_panel_userptr," "" panel_userptr(3X)~\*{CHAR\*}
.xx "" "" "setpgid: set process group ID." "" setpgid(2)~\*{PRM\*}
.xx "" "" "setpgrp: set process group ID." "" setpgrp(2)~\*{PRM\*}
.xx "scheduling/" "getpriority," "setpriority: get/set program" "" getpriority(3)~\*{BSD\*}
.xx "protocol entry." "/getprotobyname," "setprotoent, endprotoent: get" "" getprotoent(3N)~\*{NI\*}
.xx "" "getpwent, getpwuid, getpwnam," "setpwent, endpwent, fgetpwent:/" "" getpwent(3C)~\*{PRM\*}
.xx "group IDs." "" "setregid: set real and effective" "" setregid(3)~\*{BSD\*}
.xx "user IDs." "" "setreuid: set real and effective" "" setreuid(3)~\*{BSD\*}
.xx "system resource/" "getrlimit," "setrlimit: control maximum" "" getrlimit(2)~\*{PRM\*}
.xx "" "trchan: translate character" "sets." "" trchan(1)~\*{URM\*}
.xx "" "sigismember: manipulate" "sets of signals." "/sigdelset," sigsetops(3C)~\*{PRM\*}
.xx "message delivery." "dbon:" "sets target for front panel" "" dbon(8iref)~\*{MBRMAN\*}
.xx "speed, and line/" "vtgetty:" "sets terminal type, modes," "" vtgetty(1M)~\*{SARM\*}
.xx "a video device." "vidi:" "sets the font and video mode for" "" vidi(1)~\*{SARM\*}
.xx "" "/messages for transmission and" "sets up table entries for/" "" mps_AMPsend_rsvp(D3D)~\*{DDRM\*}
.xx "" "/idlok, idcok immedok, leaveok," "setscrreg, wsetscrreg, scrollok,/" "" curs_outopts(3X)~\*{CHAR\*}
.xx "" "/getservbyport, getservbyname," "setservent, endservent: get/" "" getservent(3N)~\*{NI\*}
.xx "" "" "setsid: set session ID." "" setsid(2)~\*{PRM\*}
.xx "on sockets." "getsockopt," "setsockopt: get and set options" "" getsockopt(3N)~\*{NI\*}
.xx "lckpwdf,/" "getspent, getspnam\^," "setspent, endspent, fgetspent," "" getspent(3C)~\*{PRM\*}
.xx "" "random, srandom, initstate," "setstate: better random number/" "" random(3)~\*{BSD\*}
.xx "" "/resetty, savetty, getsyx," "setsyx, ripoffline, curs_set,/" "" curs_kernel(3X)~\*{CHAR\*}
.xx "" "/newterm, endwin, isendwin," "set_term, delscreen: curses/" "" curs_initscr(3X)~\*{CHAR\*}
.xx "" "curs_terminfo:  setupterm," "setterm, set_curterm,/" "" curs_terminfo(3X)~\*{CHAR\*}
.xx "modification dates of files." "" "settime: change the access and" "" settime(1)~\*{ACG\*}
.xx "date and time." "gettimeofday," "settimeofday: get or set the" "" gettimeofday(3)~\*{BSD\*}
.xx "date and time." "gettimeofday," "settimeofday: get or set the" "" gettimeofday(3C)~\*{PRM\*}
.xx "" "tset: provide information for" "setting terminal modes." "" tset(1)~\*{ACG\*}
.xx "login time." "profile:" "setting up an environment at" "" profile(4)~\*{SARM\*}
.xx "TTY/" "sttydefs: maintain line" "settings and hunt sequences for" "" sttydefs(1M)~\*{SARM\*}
.xx "" "/file contains terminal line" "settings information for ttymon." "" ttydefs(4)~\*{NI\*}
.xx "" "/set_current_item, current_item," "set_top_row, top_row,/" "" menu_item_current(3X)~\*{CHAR\*}
.xx "group IDs." "" "setuid, setgid: set user and" "" setuid(2)~\*{PRM\*}
.xx "information." "" "setuname: changes machine" "" setuname(1M)~\*{SARM\*}
.xx "first user." "" "setup: initialize system for" "" setup(1M)~\*{SARM\*}
.xx "del_curterm,/" "curs_terminfo:" "setupterm, setterm, set_curterm," "" curs_terminfo(3X)~\*{CHAR\*}
.xx "legal user/" "getusershell," "setusershell, endusershell: get" "" getusershell(3)~\*{BSD\*}
.xx "" "/getutid, getutline, pututline," "setutent, endutent, utmpname:/" "" getut(3C)~\*{PRM\*}
.xx "" "/getutxline, pututxline," "setutxent, endutxent, utmpxname,/" "" getutx(3C)~\*{PRM\*}
.xx "" "setbuf, setbuffer, setlinebuf," "setvbuf: assign buffering to a/" "" setbuf(3S)~\*{BSD\*}
.xx "stream." "setbuf," "setvbuf: assign buffering to a" "" setbuf(3S)~\*{PRM\*}
.xx "" "paste: merge same lines of" "several files or subsequent/" "" paste(1)~\*{URM\*}
.xx "" "addseverity: build a list of" "severity levels for an/" "" addseverity(3C)~\*{PRM\*}
.xx "structure." "" "sfb: SCSI function block" "" sfb(D4I)~\*{SCSI\*}
.xx "" "/fconvert, gconvert, seconvert," "sfconvert, sgconvert: output/" "" econvert(3)~\*{BSD\*}
.xx "" "" "sfsys: file format." "" sfsys(4)~\*{ISDG\*}
.xx "" "" "sfsys: file format." "" sfsys(4)~\*{SARM\*}
.xx "" "/gconvert, seconvert, sfconvert," "sgconvert: output conversion." "" econvert(3)~\*{BSD\*}
.xx "in a machine-independent/" "sputl," "sgetl: access long integer data" "" sputl(3X)~\*{PRM\*}
.xx "loaders." "" "sgib: install Multibus bootstrap" "" sgib(1iref)~\*{MBRMAN\*}
.xx "interpreters: standard shell,/" "" "sh, jsh, rsh: command" "" sh(1)~\*{URM\*}
.xx "" "shadow:" "shadow password file." "" shadow(4)~\*{SARM\*}
.xx "" "/lckpwdf, ulckpwdf: manipulate" "shadow password file entry." "" getspent(3C)~\*{PRM\*}
.xx "" "putspent: write" "shadow password file entry." "" putspent(3C)~\*{PRM\*}
.xx "" "" "shadow: shadow password file." "" shadow(4)~\*{SARM\*}
.xx "available for mounting by/" "" "share: make local NFS resource" "" share(1M)~\*{NUAG\*}
.xx "available for mounting by/" "" "share: make local NFS resource" "" share(1M)~\*{SARM\*}
.xx "available for mounting by/" "" "share: make local resource" "" share(1M)~\*{NUAG\*}
.xx "available for mounting by/" "" "share: make local resource" "" share(1M)~\*{SARM\*}
.xx "available for mounting by/" "" "share: make local RFS resource" "" share(1M)~\*{NUAG\*}
.xx "available for mounting by/" "" "share: make local RFS resource" "" share(1M)~\*{SARM\*}
.xx "" "shareall, unshareall:" "share, unshare multiple/" "" shareall(1M)~\*{NUAG\*}
.xx "" "shareall, unshareall:" "share, unshare multiple/" "" shareall(1M)~\*{SARM\*}
.xx "unshare multiple resources." "" "shareall, unshareall: share," "" shareall(1M)~\*{NUAG\*}
.xx "unshare multiple resources." "" "shareall, unshareall: share," "" shareall(1M)~\*{SARM\*}
.xx "" "sdgetv: synchronize" "shared data access." "" sdgetv(2)~\*{ACG\*}
.xx "" "sdleave: synchronize access to a" "shared data segment." "sdenter," sdenter(2)~\*{ACG\*}
.xx "" "sdfree: attach and detach a" "shared data segment." "sdget," sdget(2)~\*{ACG\*}
.xx "" "sharetab:" "shared file system table." "" sharetab(4)~\*{NUAG\*}
.xx "" "sharetab:" "shared file system table." "" sharetab(4)~\*{SARM\*}
.xx "operations." "shmctl:" "shared memory control" "" shmctl(2)~\*{PRM\*}
.xx "" "message queue, semaphore set, or" "shared memory ID." "/remove a" ipcrm(1)~\*{URM\*}
.xx "" "shmop: shmat, shmdt:" "shared memory operations." "" shmop(2)~\*{PRM\*}
.xx "identifier." "shmget: get" "shared memory segment" "" shmget(2)~\*{PRM\*}
.xx "" "dlclose: close a" "shared object." "" dlclose(3X)~\*{PRM\*}
.xx "" "dlopen: open a" "shared object." "" dlopen(3X)~\*{PRM\*}
.xx "" "get the address of a symbol in" "shared object." "dlsym:" dlsym(3X)~\*{PRM\*}
.xx "table." "" "sharetab: shared file system" "" sharetab(4)~\*{NUAG\*}
.xx "table." "" "sharetab: shared file system" "" sharetab(4)~\*{SARM\*}
.xx "" "rfstart: start Remote File" "Sharing." "" rfstart(1M)~\*{NUAG\*}
.xx "" "rfstart: start Remote File" "Sharing." "" rfstart(1M)~\*{SARM\*}
.xx "" "rfudaemon: Remote File" "Sharing daemon process." "" rfudaemon(1M)~\*{NUAG\*}
.xx "" "rfudaemon: Remote File" "Sharing daemon process." "" rfudaemon(1M)~\*{SARM\*}
.xx "" "rfadmin: Remote File" "Sharing domain administration." "" rfadmin(1M)~\*{NUAG\*}
.xx "" "rfadmin: Remote File" "Sharing domain administration." "" rfadmin(1M)~\*{SARM\*}
.xx "names." "dname: print Remote File" "Sharing domain and network" "" dname(1M)~\*{NUAG\*}
.xx "names." "dname: print Remote File" "Sharing domain and network" "" dname(1M)~\*{SARM\*}
.xx "" "rfstop: stop the Remote File" "Sharing environment." "" rfstop(1M)~\*{NUAG\*}
.xx "" "rfstop: stop the Remote File" "Sharing environment." "" rfstop(1M)~\*{SARM\*}
.xx "" "rfpasswd: change Remote File" "Sharing host password." "" rfpasswd(1M)~\*{NUAG\*}
.xx "" "rfpasswd: change Remote File" "Sharing host password." "" rfpasswd(1M)~\*{SARM\*}
.xx "" "rfmaster: Remote File" "Sharing name server master file." "" rfmaster(4)~\*{NUAG\*}
.xx "" "rfmaster: Remote File" "Sharing name server master file." "" rfmaster(4)~\*{SARM\*}
.xx "" "nsquery: Remote File" "Sharing name server query." "" nsquery(1M)~\*{NUAG\*}
.xx "" "nsquery: Remote File" "Sharing name server query." "" nsquery(1M)~\*{SARM\*}
.xx "script." "rfuadmin: Remote File" "Sharing notification shell" "" rfuadmin(1M)~\*{NUAG\*}
.xx "script." "rfuadmin: Remote File" "Sharing notification shell" "" rfuadmin(1M)~\*{SARM\*}
.xx "" "file containing commands for" "sharing resources." "dfstab:" dfstab(4)~\*{NUAG\*}
.xx "" "file containing commands for" "sharing resources." "dfstab:" dfstab(4)~\*{SARM\*}
.xx "" "mount, unmount Remote File" "Sharing resources." "/rumountall:" rmountall(1M)~\*{NUAG\*}
.xx "" "mount, unmount Remote File" "Sharing resources." "/rumountall:" rmountall(1M)~\*{SARM\*}
.xx "" "idload: Remote File" "Sharing user and group mapping." "" idload(1M)~\*{NUAG\*}
.xx "" "idload: Remote File" "Sharing user and group mapping." "" idload(1M)~\*{SARM\*}
.xx "" "rsh: remote" "shell." "" rsh(1)~\*{NUAG\*}
.xx "" "rsh: remote" "shell." "" rsh(1)~\*{URM\*}
.xx "" "shell: run a command using" "shell." "" shell(1F)~\*{CHAR\*}
.xx "" "system: issue a" "shell command." "" system(3S)~\*{PRM\*}
.xx "C-like syntax." "csh:" "shell command interpreter with a" "" csh(1)~\*{URM\*}
.xx "" "gmatch:" "shell global pattern matching." "" gmatch(3G)~\*{PRM\*}
.xx "" "command interpreters: standard" "shell, job control shell,/" "/rsh:" sh(1)~\*{URM\*}
.xx "" "shl:" "shell layer manager." "" shl(1)~\*{URM\*}
.xx "" "/shutacct, startup, turnacct:" "shell procedures for accounting." "" acctsh(1M)~\*{SARM\*}
.xx "" "/standard shell, job control" "shell, restricted shell." "" sh(1)~\*{URM\*}
.xx "shell." "" "shell: run a command using" "" shell(1F)~\*{CHAR\*}
.xx "" "xinstall: XENIX installation" "shell script." "" xinstall(1M)~\*{SARM\*}
.xx "" "Remote File Sharing notification" "shell script." "rfuadmin:" rfuadmin(1M)~\*{NUAG\*}
.xx "" "Remote File Sharing notification" "shell script." "rfuadmin:" rfuadmin(1M)~\*{SARM\*}
.xx "" "rshd: remote" "shell server." "" rshd(1M)~\*{NUAG\*}
.xx "" "rshd: remote" "shell server." "" rshd(1M)~\*{SARM\*}
.xx "" "job control shell, restricted" "shell." "/standard shell," sh(1)~\*{URM\*}
.xx "" "endusershell: get legal user" "shells." "/setusershell," getusershell(3)~\*{BSD\*}
.xx "" "" "shl: shell layer manager." "" shl(1)~\*{URM\*}
.xx "operations." "shmop:" "shmat, shmdt: shared memory" "" shmop(2)~\*{PRM\*}
.xx "operations." "" "shmctl: shared memory control" "" shmctl(2)~\*{PRM\*}
.xx "" "shmop: shmat," "shmdt: shared memory operations." "" shmop(2)~\*{PRM\*}
.xx "segment identifier." "" "shmget: get shared memory" "" shmget(2)~\*{PRM\*}
.xx "memory operations." "" "shmop: shmat, shmdt: shared" "" shmop(2)~\*{PRM\*}
.xx "" "nap: suspend execution for a" "short interval." "" nap(2)~\*{ACG\*}
.xx "port." "inw: read a 16 bit" "short word from a 16 bit I/O" "" inw(D3D)~\*{DDRM\*}
.xx "" "outw: write a 16 bit" "short word to a 16 bit I/O port." "" outw(D3D)~\*{DDRM\*}
.xx "" "relogin: rename login entry to" "show current layer." "" relogin(1M)~\*{SARM\*}
.xx "" "relogin: rename login entry to" "show current layer." "" relogin(1M)~\*{URM\*}
.xx "machines." "ruptime:" "show host status of local" "" ruptime(1)~\*{NUAG\*}
.xx "machines." "ruptime:" "show host status of local" "" ruptime(1)~\*{URM\*}
.xx "been up." "uptime:" "show how long the system has" "" uptime(1)~\*{BSD\*}
.xx "" "netstat:" "show network status." "" netstat(1M)~\*{NUAG\*}
.xx "" "netstat:" "show network status." "" netstat(1M)~\*{SARM\*}
.xx "in reverse order." "lastcomm:" "show the last commands executed," "" lastcomm(1)~\*{BSD\*}
.xx "panel_hidden:/" "panel_show:" "show_panel, hide_panel," "" panel_show(3X)~\*{CHAR\*}
.xx "connection." "shutdown:" "shut down part of a full-duplex" "" shutdown(3N)~\*{NI\*}
.xx "state." "shutdown:" "shut down system, change system" "" shutdown(1M)~\*{SARM\*}
.xx "system shuts down." "halt:" "shut down the driver when the" "" halt(D2D)~\*{DDRM\*}
.xx "" "/prdaily, prtacct, runacct," "shutacct, startup, turnacct:/" "" acctsh(1M)~\*{SARM\*}
.xx "at a given time." "" "shutdown: close down the system" "" shutdown(1M)~\*{BSD\*}
.xx "full-duplex connection." "" "shutdown: shut down part of a" "" shutdown(3N)~\*{NI\*}
.xx "change system state." "" "shutdown: shut down system," "" shutdown(1M)~\*{SARM\*}
.xx "" "down the driver when the system" "shuts down." "halt: shut" halt(D2D)~\*{DDRM\*}
.xx "" "library routines for client" "side calls." "/rpc_call:" rpc_clnt_calls(3N)~\*{NI\*}
.xx "" "/library routines for client" "side remote procedure call/" "" rpc_clnt_auth(3N)~\*{NI\*}
.xx "" "/library routines for server" "side remote procedure call/" "" rpc_svc_err(3N)~\*{NI\*}
.xx "" "sdiff: print file differences" "side-by-side." "" sdiff(1)~\*{URM\*}
.xx "management." "" "sigaction: detailed signal" "" sigaction(2)~\*{PRM\*}
.xx "" "sigemptyset, sigfillset," "sigaddset, sigdelset,/" "" sigsetops(3C)~\*{PRM\*}
.xx "alternate stack context." "" "sigaltstack: set or get signal" "" sigaltstack(2)~\*{PRM\*}
.xx "signals." "" "sigblock, sigmask: block" "" sigblock(3)~\*{BSD\*}
.xx "" "/sigfillset, sigaddset," "sigdelset, sigismember:/" "" sigsetops(3C)~\*{PRM\*}
.xx "sigaddset, sigdelset,/" "" "sigemptyset, sigfillset," "" sigsetops(3C)~\*{PRM\*}
.xx "sigdelset,/" "sigemptyset," "sigfillset, sigaddset," "" sigsetops(3C)~\*{PRM\*}
.xx "" "signal handling for specific" "SIGFPE codes." "sigfpe:" sigfpe(3)~\*{BSD\*}
.xx "specific SIGFPE codes." "" "sigfpe: signal handling for" "" sigfpe(3)~\*{BSD\*}
.xx "sigpause:/" "signal, sigset," "sighold, sigrelse, sigignore," "" signal(2)~\*{PRM\*}
.xx "" "/sigset, sighold, sigrelse," "sigignore, sigpause: simplified/" "" signal(2)~\*{PRM\*}
.xx "information." "" "siginfo: signal generation" "" siginfo(5)~\*{PRM\*}
.xx "information." "" "siginfo: signal generation" "" siginfo(5)~\*{SARM\*}
.xx "interrupt system calls." "" "siginterrupt: allow signals to" "" siginterrupt(3)~\*{BSD\*}
.xx "signals." "/sigaddset, sigdelset," "sigismember: manipulate sets of" "" sigsetops(3C)~\*{PRM\*}
.xx "with signal state." "sigsetjmp," "siglongjmp: a non-local goto" "" sigsetjmp(3C)~\*{PRM\*}
.xx "" "/_setjmp, _longjmp, sigsetjmp," "siglongjmp: non-local goto." "" setjmp(3)~\*{BSD\*}
.xx "" "sigblock," "sigmask: block signals." "" sigblock(3)~\*{BSD\*}
.xx "" "login:" "sign on." "" login(1)~\*{URM\*}
.xx "" "pause: suspend process until" "signal." "" pause(2)~\*{PRM\*}
.xx "semaphore." "sigsem:" "signal a process waiting on a" "" sigsem(2)~\*{ACG\*}
.xx "" "generate an abnormal termination" "signal." "abort:" abort(3C)~\*{PRM\*}
.xx "microseconds." "ualarm: schedule" "signal after interval in" "" ualarm(3)~\*{BSD\*}
.xx "" "sigaltstack: set or get" "signal alternate stack context." "" sigaltstack(2)~\*{PRM\*}
.xx "" "" "signal: base signals." "" signal(5)~\*{PRM\*}
.xx "" "" "signal: base signals." "" signal(5)~\*{SARM\*}
.xx "" "signal: simplified software" "signal facilities." "" signal(3)~\*{BSD\*}
.xx "" "sigvec: software" "signal facilities." "" sigvec(3)~\*{BSD\*}
.xx "" "siginfo:" "signal generation information." "" siginfo(5)~\*{PRM\*}
.xx "" "siginfo:" "signal generation information." "" siginfo(5)~\*{SARM\*}
.xx "SIGFPE codes." "sigfpe:" "signal handling for specific" "" sigfpe(3)~\*{BSD\*}
.xx "" "mask and suspend process until" "signal." "/install a signal" sigsuspend(2)~\*{PRM\*}
.xx "" "sigaction: detailed" "signal management." "" sigaction(2)~\*{PRM\*}
.xx "" "sigignore, sigpause: simplified" "signal management." "/sigrelse," signal(2)~\*{PRM\*}
.xx "" "sigprocmask: change or examine" "signal mask." "" sigprocmask(2)~\*{PRM\*}
.xx "" "sigsetmask: set current" "signal mask." "" sigsetmask(3)~\*{BSD\*}
.xx "until/" "sigsuspend: install a" "signal mask and suspend process" "" sigsuspend(2)~\*{PRM\*}
.xx "" "psignal, sys_siglist: system" "signal messages." "" psignal(3)~\*{BSD\*}
.xx "" "psignal, psiginfo: system" "signal messages." "" psignal(3C)~\*{PRM\*}
.xx "" "signals:" "signal numbers." "" signals(D5DK)~\*{DDRM\*}
.xx "sigrelse, sigignore, sigpause:/" "" "signal, sigset, sighold," "" signal(2)~\*{PRM\*}
.xx "signal facilities." "" "signal: simplified software" "" signal(3)~\*{BSD\*}
.xx "" "sigstack: set and/or get" "signal stack context." "" sigstack(3)~\*{BSD\*}
.xx "" "a non-local goto with" "signal state." "/siglongjmp:" sigsetjmp(3C)~\*{PRM\*}
.xx "" "psignal: send" "signal to a process." "" psignal(D3K)~\*{DDRM\*}
.xx "" "killpg: send" "signal to a process group." "" killpg(3)~\*{BSD\*}
.xx "of processes." "kill: send a" "signal to a process or a group" "" kill(2)~\*{PRM\*}
.xx "of/" "sigsend, sigsendset: send a" "signal to a process or a group" "" sigsend(2)~\*{PRM\*}
.xx "" "raise: send" "signal to program." "" raise(3C)~\*{PRM\*}
.xx "" "sigblock, sigmask: block" "signals." "" sigblock(3)~\*{BSD\*}
.xx "" "signal: base" "signals." "" signal(5)~\*{PRM\*}
.xx "" "signal: base" "signals." "" signal(5)~\*{SARM\*}
.xx "" "ssignal, gsignal: software" "signals." "" ssignal(3C)~\*{PRM\*}
.xx "" "truss: trace system calls and" "signals." "" truss(1)~\*{URM\*}
.xx "" "/automically release blocked" "signals and wait for interrupt." "" sigpause(3)~\*{BSD\*}
.xx "" "sigismember: manipulate sets of" "signals." "/sigaddset, sigdelset," sigsetops(3C)~\*{PRM\*}
.xx "" "" "signals: signal numbers." "" signals(D5DK)~\*{DDRM\*}
.xx "pending." "sigpending: examine" "signals that are blocked and" "" sigpending(2)~\*{PRM\*}
.xx "calls." "siginterrupt: allow" "signals to interrupt system" "" siginterrupt(3)~\*{BSD\*}
.xx "blocked signals and wait for/" "" "sigpause: automically release" "" sigpause(3)~\*{BSD\*}
.xx "" "/sighold, sigrelse, sigignore," "sigpause: simplified signal/" "" signal(2)~\*{PRM\*}
.xx "are blocked and pending." "" "sigpending: examine signals that" "" sigpending(2)~\*{PRM\*}
.xx "signal mask." "" "sigprocmask: change or examine" "" sigprocmask(2)~\*{PRM\*}
.xx "" "signal, sigset, sighold," "sigrelse, sigignore, sigpause:/" "" signal(2)~\*{PRM\*}
.xx "on a semaphore." "" "sigsem: signal a process waiting" "" sigsem(2)~\*{ACG\*}
.xx "signal to a process or a group/" "" "sigsend, sigsendset: send a" "" sigsend(2)~\*{PRM\*}
.xx "process or a group of/" "sigsend," "sigsendset: send a signal to a" "" sigsend(2)~\*{PRM\*}
.xx "sigignore, sigpause:/" "signal," "sigset, sighold, sigrelse," "" signal(2)~\*{PRM\*}
.xx "non-local goto with signal/" "" "sigsetjmp, siglongjmp: a" "" sigsetjmp(3C)~\*{PRM\*}
.xx "" "/longjmp, _setjmp, _longjmp," "sigsetjmp, siglongjmp: non-local/" "" setjmp(3)~\*{BSD\*}
.xx "mask." "" "sigsetmask: set current signal" "" sigsetmask(3)~\*{BSD\*}
.xx "stack context." "" "sigstack: set and/or get signal" "" sigstack(3)~\*{BSD\*}
.xx "mask and suspend process until/" "" "sigsuspend: install a signal" "" sigsuspend(2)~\*{PRM\*}
.xx "facilities." "" "sigvec: software signal" "" sigvec(3)~\*{BSD\*}
.xx "" "lex: generate programs for" "simple lexical tasks." "" lex(1)~\*{PRM\*}
.xx "" "/SMTP mail to a remote host using" "Simple Mail Transfer Protocol." "" smtp(1M)~\*{SARM\*}
.xx "" "rand, srand:" "simple random number generator." "" rand(3C)~\*{BSD\*}
.xx "" "rand, srand:" "simple random-number generator." "" rand(3C)~\*{PRM\*}
.xx "" "fmt:" "simple text formatters." "" fmt(1)~\*{URM\*}
.xx "" "/sigrelse, sigignore, sigpause:" "simplified signal management." "" signal(2)~\*{PRM\*}
.xx "facilities." "signal:" "simplified software signal" "" signal(3)~\*{BSD\*}
.xx "asin, asinf, acos, acosf,/" "trig:" "sin, sinf, cos, cosf, tan, tanf," "" trig(3M)~\*{PRM\*}
.xx "asin, asinf, acos,/" "trig: sin," "sinf, cos, cosf, tan, tanf," "" trig(3M)~\*{PRM\*}
.xx "" "floating_to_decimal:" "single_to_decimal,/" "" floating_to_decimal(3)~\*{BSD\*}
.xx "" "sulogin: access" "single-user mode." "" sulogin(1M)~\*{SARM\*}
.xx "tanhf, asinh, acosh, atanh:/" "" "sinh, sinhf, cosh, coshf, tanh," "" sinh(3M)~\*{PRM\*}
.xx "asinh, acosh, atanh:/" "sinh," "sinhf, cosh, coshf, tanh, tanhf," "" sinh(3M)~\*{PRM\*}
.xx "" "getpagesize: get system page" "size." "" getpagesize(3)~\*{BSD\*}
.xx "" "get descriptor table" "size." "getdtablesize:" getdtablesize(3)~\*{BSD\*}
.xx "" "ptob: convert size in pages to" "size in bytes." "" ptob(D3DK)~\*{DDRM\*}
.xx "(round down)." "btop: convert" "size in bytes to size in pages" "" btop(D3DK)~\*{DDRM\*}
.xx "(round up)." "btopr: convert" "size in bytes to size in pages" "" btopr(D3DK)~\*{DDRM\*}
.xx "" "btop: convert size in bytes to" "size in pages (round down)." "" btop(D3DK)~\*{DDRM\*}
.xx "" "btopr: convert size in bytes to" "size in pages (round up)." "" btopr(D3DK)~\*{DDRM\*}
.xx "" "ptob: convert" "size in pages to size in bytes." "" ptob(D3DK)~\*{DDRM\*}
.xx "" "an empty buffer of the specified" "size." "ngeteblk: get" ngeteblk(D3DK)~\*{DDRM\*}
.xx "" "chsize: change the" "size of a file." "" chsize(2)~\*{ACG\*}
.xx "" "pagesize: display the" "size of a page of memory." "" pagesize(1)~\*{BSD\*}
.xx "" "/elf32_fsize: return the" "size of an object file type." "" elf_fsize(3E)~\*{PRM\*}
.xx "" "jwin: print" "size of layer." "" jwin(1)~\*{URM\*}
.xx "" "size: return" "size of logical block device." "" size(D2DK)~\*{DDRM\*}
.xx "" "partsize: returns the" "size of the active UNIX System/" "" partsize(1M)~\*{SARM\*}
.xx "bytes of object files." "" "size: print section sizes in" "" size(1)~\*{PRM\*}
.xx "block device." "" "size: return size of logical" "" size(D2DK)~\*{DDRM\*}
.xx "" "size: print section" "sizes in bytes of object files." "" size(1)~\*{PRM\*}
.xx "" "grantpt: grant access to the" "slave pseudo-terminal device." "" grantpt(3C)~\*{STRM\*}
.xx "" "ptsname: get name of the" "slave pseudo-terminal device." "" ptsname(3C)~\*{STRM\*}
.xx "interval." "" "sleep: suspend execution for" "" sleep(3)~\*{BSD\*}
.xx "interval." "" "sleep: suspend execution for" "" sleep(3C)~\*{PRM\*}
.xx "interval." "" "sleep: suspend execution for an" "" sleep(1)~\*{URM\*}
.xx "pending occurrence of an event." "" "sleep: suspend process execution" "" sleep(D3K)~\*{DDRM\*}
.xx "" "" "slink: streams linker." "" slink(1M)~\*{NUAG\*}
.xx "" "" "slink: streams linker." "" slink(1M)~\*{SARM\*}
.xx "" "/slk_attron, slk_attrset," "slk_attroff: curses soft label/" "" curs_slk(3X)~\*{CHAR\*}
.xx "" "/slk_restore, slk_touch," "slk_attron, slk_attrset,/" "" curs_slk(3X)~\*{CHAR\*}
.xx "soft/" "/slk_touch, slk_attron," "slk_attrset, slk_attroff: curses" "" curs_slk(3X)~\*{CHAR\*}
.xx "" "/slk_noutrefresh, slk_label," "slk_clear, slk_restore,/" "" curs_slk(3X)~\*{CHAR\*}
.xx "slk_noutrefresh,/" "curs_slk:" "slk_init, slk_set, slk_refresh," "" curs_slk(3X)~\*{CHAR\*}
.xx "" "slk_refresh, slk_noutrefresh," "slk_label, slk_clear,/" "/slk_set," curs_slk(3X)~\*{CHAR\*}
.xx "" "/slk_init, slk_set, slk_refresh," "slk_noutrefresh, slk_label,/" "" curs_slk(3X)~\*{CHAR\*}
.xx "" "curs_slk:  slk_init, slk_set," "slk_refresh, slk_noutrefresh,/" "" curs_slk(3X)~\*{CHAR\*}
.xx "" "/slk_label, slk_clear," "slk_restore, slk_touch,/" "" curs_slk(3X)~\*{CHAR\*}
.xx "" "curs_slk:  slk_init," "slk_set, slk_refresh,/" "" curs_slk(3X)~\*{CHAR\*}
.xx "" "/slk_clear, slk_restore," "slk_touch, slk_attron,/" "" curs_slk(3X)~\*{CHAR\*}
.xx "" "board types in the designated" "slot." "/checks for certain" ics_agent_cmp(D3D)~\*{DDRM\*}
.xx "current user." "ttyslot: find the" "slot in the utmp file of the" "" ttyslot(3C)~\*{PRM\*}
.xx "" "on the processor in the given" "slot." "/parameter string" initbp(8iref)~\*{MBRMAN\*}
.xx "" "resets the processor in a given" "slot." "reset:" reset(8iref)~\*{MBRMAN\*}
.xx "" "of the board in the specified" "slot." "/the interconnect register" ics_find_rec(D3D)~\*{DDRM\*}
.xx "" "of the board in the specified" "slot." "/the interconnect register" ics_read(D3D)~\*{DDRM\*}
.xx "" "of the board in the specified" "slot." "/the specified register" ics_write(D3D)~\*{DDRM\*}
.xx "" "tosmtp: send mail to" "SMTP." "" tosmtp(1M)~\*{SARM\*}
.xx "" "receive RFC822 mail from" "SMTP." "fromsmtp:" fromsmtp(1M)~\*{SARM\*}
.xx "" "process messages queued in the" "SMTP mail queue." "smtpsched:" smtpsched(1M)~\*{SARM\*}
.xx "" "mconnect: connect to" "SMTP mail server socket." "" mconnect(1M)~\*{BSD\*}
.xx "Simple Mail Transfer/" "smtp: send" "SMTP mail to a remote host using" "" smtp(1M)~\*{SARM\*}
.xx "" "smtpd: receive incoming" "SMTP messages." "" smtpd(1M)~\*{SARM\*}
.xx "host using Simple Mail Transfer/" "" "smtp: send SMTP mail to a remote" "" smtp(1M)~\*{SARM\*}
.xx "" "queue mail for delivery by" "SMTP." "smtpqer:" smtpqer(1M)~\*{SARM\*}
.xx "messages." "" "smtpd: receive incoming SMTP" "" smtpd(1M)~\*{SARM\*}
.xx "by SMTP." "" "smtpqer: queue mail for delivery" "" smtpqer(1M)~\*{SARM\*}
.xx "queued in the SMTP mail queue." "" "smtpsched: process messages" "" smtpsched(1M)~\*{SARM\*}
.xx "" "soelim: resolve and eliminate" ".so requests from nroff or troff/" "" soelim(1)~\*{BSD\*}
.xx "" "accept: accept a connection on a" "socket." "" accept(3N)~\*{NI\*}
.xx "" "bind: bind a name to a" "socket." "" bind(3N)~\*{NI\*}
.xx "" "initiate a connection on a" "socket." "connect:" connect(3N)~\*{NI\*}
.xx "communication." "" "socket: create an endpoint for" "" socket(3N)~\*{NI\*}
.xx "" "listen for connections on a" "socket." "listen:" listen(3N)~\*{NI\*}
.xx "" "connect to SMTP mail server" "socket." "mconnect:" mconnect(1M)~\*{BSD\*}
.xx "" "getsockname: get" "socket name." "" getsockname(3N)~\*{NI\*}
.xx "" "receive a message from a" "socket." "/recvfrom, recvmsg:" recv(3N)~\*{NI\*}
.xx "" "sendmsg: send a message from a" "socket." "send, sendto," send(3N)~\*{NI\*}
.xx "connected sockets." "" "socketpair: create a pair of" "" socketpair(3N)~\*{NI\*}
.xx "" "get and set options on" "sockets." "/setsockopt:" getsockopt(3N)~\*{NI\*}
.xx "" "create a pair of connected" "sockets." "socketpair:" socketpair(3N)~\*{NI\*}
.xx "" "ioctls that operate directly on" "sockets." "sockio:" sockio(7)~\*{NI\*}
.xx "directly on sockets." "" "sockio: ioctls that operate" "" sockio(7)~\*{NI\*}
.xx ".so requests from nroff or/" "" "soelim: resolve and eliminate" "" soelim(1)~\*{BSD\*}
.xx "" "/slk_attrset, slk_attroff: curses" "soft label  routines." "" curs_slk(3X)~\*{CHAR\*}
.xx "" "removef: remove a file from" "software database." "" removef(1M)~\*{ISDG\*}
.xx "" "depend:" "software dependencies files." "" depend(4)~\*{ISDG\*}
.xx "" "installf: add a file to the" "software installation database." "" installf(1M)~\*{ISDG\*}
.xx "interface." "lo:" "software loopback network" "" lo(7)~\*{NUAG\*}
.xx "interface." "lo:" "software loopback network" "" lo(7)~\*{SARM\*}
.xx "" "pkginfo: display" "software package information." "" pkginfo(1)~\*{ISDG\*}
.xx "" "pkginfo: display" "software package information." "" pkginfo(1)~\*{SARM\*}
.xx "" "pkgadd: transfer" "software package to the system." "" pkgadd(1M)~\*{ISDG\*}
.xx "" "pkgadd: transfer" "software package to the system." "" pkgadd(1M)~\*{SARM\*}
.xx "" "initiate a DMA operation via" "software request." "dma_swstart:" dma_swstart(D3X)~\*{DDRM\*}
.xx "" "a DMA operation for a subsequent" "software request." "/program" dma_swsetup(D3X)~\*{DDRM\*}
.xx "" "signal: simplified" "software signal facilities." "" signal(3)~\*{BSD\*}
.xx "" "sigvec:" "software signal facilities." "" sigvec(3)~\*{BSD\*}
.xx "" "ssignal, gsignal:" "software signals." "" ssignal(3C)~\*{PRM\*}
.xx "on a channel and/" "dma_stop: stop" "software-initiated DMA operation" "" dma_stop(D3X)~\*{DDRM\*}
.xx "" "mps_AMPreceive_frag: receives" "solicited data in fragments when/" "" mps_AMPreceive_frag(D3D)~\*{DDRM\*}
.xx "" "message to be sent to initiate a" "solicited data reply." "/a" mps_mk_solrply(D3D)~\*{DDRM\*}
.xx "to an/" "mps_AMPreceive: receives" "solicited data that corresponds" "" mps_AMPreceive(D3D)~\*{DDRM\*}
.xx "of any/" "mps_AMPsend_data: sends" "solicited data that is not part" "" mps_AMPsend_data(D3D)~\*{DDRM\*}
.xx "" "message to be sent to initiate a" "solicited data transfer." "/a" mps_mk_sol(D3D)~\*{DDRM\*}
.xx "" "/get data length for a" "solicited reply." "" mps_get_reply_len(D3D)~\*{DDRM\*}
.xx "" "qsort: quicker" "sort." "" qsort(3C)~\*{PRM\*}
.xx "" "tsort: topological" "sort." "" tsort(1)~\*{PRM\*}
.xx "" "sortbib:" "sort a bibliographic database." "" sortbib(1)~\*{BSD\*}
.xx "" "sort:" "sort and/or merge files." "" sort(1)~\*{URM\*}
.xx "" "" "sort: sort and/or merge files." "" sort(1)~\*{URM\*}
.xx "database." "" "sortbib: sort a bibliographic" "" sortbib(1)~\*{BSD\*}
.xx "" "or reject lines common to two" "sorted files." "comm: select" comm(1)~\*{URM\*}
.xx "" "system dictionary or lines in a" "sorted list." "/find words in the" look(1)~\*{BSD\*}
.xx "" "bsearch: binary search a" "sorted table." "" bsearch(3C)~\*{PRM\*}
.xx "" "ifdef'ed lines from C program" "source." "/resolve and remove" unifdef(1)~\*{BSD\*}
.xx "" "idspace: investigates free" "space." "" idspace(1M)~\*{ISDG\*}
.xx "" "idspace: investigates free" "space." "" idspace(1M)~\*{SARM\*}
.xx "" "swapctl: manage swap" "space." "" swapctl(2)~\*{PRM\*}
.xx "" "brk, sbrk: change data segment" "space allocation." "" brk(2)~\*{PRM\*}
.xx "" "ureadc: copy a character to" "space described by uio(D4DK)/" "" ureadc(D3DK)~\*{DDRM\*}
.xx "" "uwritec: return a character from" "space described by uio(D4DK)/" "" uwritec(D3DK)~\*{DDRM\*}
.xx "" "ics: Interconnect" "Space device driver." "" ics(7iref)~\*{MBRMAN\*}
.xx "" "mps: Message Passing" "Space device driver." "" mps(7iref)~\*{MBRMAN\*}
.xx "file." "" "space: disk space requirement" "" space(4)~\*{ISDG\*}
.xx "" "object in the file system name" "space." "/file descriptor to an" fattach(3C)~\*{STRM\*}
.xx "" "/allocate virtual address" "space for buffer page list." "" bp_mapin(D3DK)~\*{DDRM\*}
.xx "" "/deallocate virtual address" "space for buffer page list." "" bp_mapout(D3DK)~\*{DDRM\*}
.xx "management/" "rmalloc: allocate" "space from a private space" "" rmalloc(D3DK)~\*{DDRM\*}
.xx "" "kmem_alloc: allocate" "space from kernel free memory." "" kmem_alloc(D3DK)~\*{DDRM\*}
.xx "" "kmem_zalloc: allocate and clear" "space from kernel free memory." "" kmem_zalloc(D3DK)~\*{DDRM\*}
.xx "" "access Multibus II interconnect" "space." "/icsgetrec: utilities to" icsrd(8iref)~\*{MBRMAN\*}
.xx "management map." "rmfree: free" "space into a private space" "" rmfree(D3DK)~\*{DDRM\*}
.xx "" "/data in fragments when buffer" "space is not available at the/" "" mps_AMPreceive_frag(D3D)~\*{DDRM\*}
.xx "" "rminit: initialize a private" "space management map." "" rminit(D3K)~\*{DDRM\*}
.xx "" "allocate space from a private" "space management map." "rmalloc:" rmalloc(D3DK)~\*{DDRM\*}
.xx "" "free space into a private" "space management map." "rmfree:" rmfree(D3DK)~\*{DDRM\*}
.xx "" "lock or unlock address" "space." "mlockall, munlockall:" mlockall(3C)~\*{PRM\*}
.xx "" "record in the interconnect" "space of a board." "/a specific" ics_find_rec(3iref)~\*{MBRMAN\*}
.xx "" "in this board's interconnect" "space." "/of the HOST ID record" ics_hostid(D3D)~\*{DDRM\*}
.xx "" "df: report free disk" "space on file systems." "" df(1)~\*{BSD\*}
.xx "" "df (ufs): report free disk" "space on ufs file systems." "" df(1M)~\*{SARM\*}
.xx "" "specified number of interconnect" "space registers from a given/" "/a" ics_rdwr(D3D)~\*{DDRM\*}
.xx "" "disk blocks and files/free disk" "space." "/report number of free" df(""1M"")~\*{SARM\*}
.xx "" "disk blocks and files/free disk" "space." "/report number of free" df(""1M"")~\*{URM\*}
.xx "" "space: disk" "space requirement file." "" space(4)~\*{ISDG\*}
.xx "terminal." "ct:" "spawn login to a remote" "" ct(1C)~\*{URM\*}
.xx "memory efficient way." "vfork:" "spawn new process in a virtual" "" vfork(2)~\*{PRM\*}
.xx "for eqn." "eqnchar:" "special character definitions" "" eqnchar(7)~\*{BSD\*}
.xx "" "mkfifo: make FIFO" "special file." "" mkfifo(1M)~\*{SARM\*}
.xx "" "mknod: make a" "special file." "" mknod(1M)~\*{ACG\*}
.xx "" "mknod: make a" "special file." "" mknod(1M)~\*{SARM\*}
.xx "" "intro: introduction to" "special files." "" intro(7)~\*{SARM\*}
.xx "" "mknod: make a directory, or a" "special or ordinary file." "" mknod(2)~\*{ACG\*}
.xx "" "mknod: make a directory, or a" "special or ordinary file." "" mknod(2)~\*{PRM\*}
.xx "" "indicator: display application" "specific alarms and/or the/" "" indicator(1F)~\*{CHAR\*}
.xx "information." "mb2a_getinfo: Gets" "specific asynchronous endpoint" "" mb2a_getinfo(3tai)~\*{MBTAI\*}
.xx "" "sysi86: machine" "specific functions." "" sysi86(2)~\*{PRM\*}
.xx "package." "custom: install" "specific portions of a UNIX" "" custom(1M)~\*{SARM\*}
.xx "UNIX or XENIX/" "custom: install" "specific portions of certain" "" custom(1)~\*{ACG\*}
.xx "" "ics_find_rec: finds a" "specific record in the/" "" ics_find_rec(3iref)~\*{MBRMAN\*}
.xx "" "sigfpe: signal handling for" "specific SIGFPE codes." "" sigfpe(3)~\*{BSD\*}
.xx "" "strftime: language" "specific strings." "" strftime(4)~\*{PRM\*}
.xx "" "strftime: language" "specific strings." "" strftime(4)~\*{SARM\*}
.xx "information." "mb2s_getinfo: Gets" "specific synchronous endpoint" "" mb2s_getinfo(3tai)~\*{MBTAI\*}
.xx "" "fspec: format" "specification in text files." "" fspec(4)~\*{SARM\*}
.xx "" "idmkinit: reads files containing" "specifications." "" idmkinit(1M)~\*{ISDG\*}
.xx "" "idmkinit: reads files containing" "specifications." "" idmkinit(1M)~\*{SARM\*}
.xx "" "idmknod: removes nodes and reads" "specifications of nodes." "" idmknod(1M)~\*{ISDG\*}
.xx "" "idmknod: removes nodes and reads" "specifications of nodes." "" idmknod(1M)~\*{SARM\*}
.xx "" "drv_usecwait: busy-wait for" "specified interval." "" drv_usecwait(D3DK)~\*{DDRM\*}
.xx "" "/execute a function after a" "specified length of time." "" timeout(D3DK)~\*{DDRM\*}
.xx "" "ftruncate: set a file to a" "specified length." "truncate," truncate(3C)~\*{PRM\*}
.xx "" "/delay process execution for a" "specified number of clock ticks." "" delay(D3DK)~\*{DDRM\*}
.xx "" "ics_rdwr: reads or writes a" "specified number of interconnect/" "" ics_rdwr(D3D)~\*{DDRM\*}
.xx "" "/test for flow control in" "specified priority band." "" bcanput(D3DK)~\*{DDRM\*}
.xx "" "flushband: flush messages in a" "specified priority band." "" flushband(D3DK)~\*{DDRM\*}
.xx "in the/" "/writes a value into the" "specified register of the board" "" ics_write(D3D)~\*{DDRM\*}
.xx "" "rwall: write to" "specified remote machines." "" rwall(3N)~\*{NI\*}
.xx "" "get an empty buffer of the" "specified size." "ngeteblk:" ngeteblk(D3DK)~\*{DDRM\*}
.xx "" "register of the board in the" "specified slot." "/interconnect" ics_find_rec(D3D)~\*{DDRM\*}
.xx "" "register of the board in the" "specified slot." "/interconnect" ics_read(D3D)~\*{DDRM\*}
.xx "" "register of the board in the" "specified slot." "/the specified" ics_write(D3D)~\*{DDRM\*}
.xx "" "the jobs queued to run at" "specified times." "atq: display" atq(1)~\*{URM\*}
.xx "" "getty: set terminal type, modes," "speed, and line discipline." "" getty(1M)~\*{SARM\*}
.xx "" "/set terminal type, modes," "speed, and line discipline." "" uugetty(1M)~\*{SARM\*}
.xx "" "/sets terminal type, modes," "speed, and line discipline." "" vtgetty(1M)~\*{SARM\*}
.xx "hashcheck, compress: find/" "" "spell, hashmake, spellin," "" spell(1)~\*{URM\*}
.xx "find spelling/" "spell, hashmake," "spellin, hashcheck, compress:" "" spell(1)~\*{URM\*}
.xx "" "hashcheck, compress: find" "spelling errors." "/spellin," spell(1)~\*{URM\*}
.xx "" "" "spl: block/allow interrupts." "" spl(D3D)~\*{DDRM\*}
.xx "" "csplit: context" "split." "" csplit(1)~\*{URM\*}
.xx "" "split:" "split a file into pieces." "" split(1)~\*{URM\*}
.xx "" "bufsplit:" "split buffer into fields." "" bufsplit(3G)~\*{PRM\*}
.xx "" "" "split: split a file into pieces." "" split(1)~\*{URM\*}
.xx "" "uucleanup: uucp" "spool directory clean-up." "" uucleanup(1M)~\*{SARM\*}
.xx "" "atrm: remove jobs" "spooled by at or batch." "" atrm(1)~\*{URM\*}
.xx "" "spray:" "spray packets." "" spray(1M)~\*{NI\*}
.xx "" "spray:" "spray packets." "" spray(1M)~\*{NUAG\*}
.xx "check the network." "" "spray: scatter data in order to" "" spray(3N)~\*{NI\*}
.xx "" "rpc.sprayd:" "spray server." "" sprayd(1M)~\*{NI\*}
.xx "" "rpc.sprayd:" "spray server." "" sprayd(1M)~\*{NUAG\*}
.xx "" "" "spray: spray packets." "" spray(1M)~\*{NI\*}
.xx "" "" "spray: spray packets." "" spray(1M)~\*{NUAG\*}
.xx "" "printf, fprintf," "sprintf: print formatted output." "" printf(3S)~\*{PRM\*}
.xx "vsprintf:/" "printf, fprintf," "sprintf, vprintf, vfprintf," "" printf(3S)~\*{BSD\*}
.xx "integer data in a/" "" "sputl, sgetl: access long" "" sputl(3X)~\*{PRM\*}
.xx "" "logf, log10, log10f, pow, powf," "sqrt, sqrtf: exponential,/" "/log," exp(3M)~\*{PRM\*}
.xx "" "/log10, log10f, pow, powf, sqrt," "sqrtf: exponential, logarithm,/" "" exp(3M)~\*{PRM\*}
.xx "" "exponential, logarithm, power," "square root functions." "/sqrtf:" exp(3M)~\*{PRM\*}
.xx "generator." "rand," "srand: simple random number" "" rand(3C)~\*{BSD\*}
.xx "generator." "rand," "srand: simple random-number" "" rand(3C)~\*{PRM\*}
.xx "" "/nrand48, mrand48, jrand48," "srand48, seed48, lcong48:/" "" drand48(3C)~\*{PRM\*}
.xx "better random number/" "random," "srandom, initstate, setstate:" "" random(3)~\*{BSD\*}
.xx "search for a text string in,/" "" "srchtxt: display contents of, or" "" srchtxt(1)~\*{URM\*}
.xx "window." "curs_scroll:  scroll," "srcl, wscrl: scroll a curses" "" curs_scroll(3X)~\*{CHAR\*}
.xx "" "" "srv: service queued messages." "" srv(D2DK)~\*{DDRM\*}
.xx "" "scanf, fscanf," "sscanf: convert formatted input." "" scanf(3S)~\*{PRM\*}
.xx "signals." "" "ssignal, gsignal: software" "" ssignal(3C)~\*{PRM\*}
.xx "" "scsi_tape:" "st01 SCSI tape driver." "" scsi_tape(7)~\*{SARM\*}
.xx "" "sigstack: set and/or get signal" "stack context." "" sigstack(3)~\*{BSD\*}
.xx "" "set or get signal alternate" "stack context." "sigaltstack:" sigaltstack(2)~\*{PRM\*}
.xx "package." "stdio:" "standard buffered input/output" "" stdio(3S)~\*{PRM\*}
.xx "communication/" "stdipc: ftok:" "standard interprocess" "" stdipc(3C)~\*{PRM\*}
.xx "" "jsh, rsh: command interpreters:" "standard shell, job control/" "sh," sh(1)~\*{URM\*}
.xx "discipline module." "ldterm:" "standard STREAMS terminal line" "" ldterm(7)~\*{STRM\*}
.xx "" "ksh, rksh: KornShell, a" "standard/restricted command and/" "" ksh(1)~\*{URM\*}
.xx "" "/wattron, attrset, wattrset," "\%standend, wstandend, standout,/" "" curs_attr(3X)~\*{CHAR\*}
.xx "" "/wattrset, \%standend, wstandend," "standout, wstandout: curses/" "" curs_attr(3X)~\*{CHAR\*}
.xx "system start-up." "" "start: initialize a device at" "" start(D2DK)~\*{DDRM\*}
.xx "" "rfstart:" "start Remote File Sharing." "" rfstart(1M)~\*{NUAG\*}
.xx "" "rfstart:" "start Remote File Sharing." "" rfstart(1M)~\*{SARM\*}
.xx "init_color,/" "curs_color:" "start_color, init_pair," "" curs_color(3X)~\*{CHAR\*}
.xx "service daemon." "bootserver:" "starts a Multibus II boot" "" bootserver(1iref)~\*{MBRMAN\*}
.xx "and/" "lpsched, lpshut, lpmove:" "start/stop the LP print service" "" lpsched(1M)~\*{SARM\*}
.xx "" "initialize a device at system" "start-up." "start:" start(D2DK)~\*{DDRM\*}
.xx "" "/prtacct, runacct, shutacct," "startup, turnacct: shell/" "" acctsh(1M)~\*{SARM\*}
.xx "system call." "" "stat: data returned by stat" "" stat(4)~\*{ACG\*}
.xx "system call." "" "stat: data returned by stat" "" stat(5)~\*{PRM\*}
.xx "system call." "" "stat: data returned by stat" "" stat(5)~\*{SARM\*}
.xx "status." "" "stat, lstat, fstat: get file" "" stat(2)~\*{ACG\*}
.xx "status." "" "stat, lstat, fstat: get file" "" stat(2)~\*{PRM\*}
.xx "" "stat: data returned by" "stat system call." "" stat(4)~\*{ACG\*}
.xx "" "stat: data returned by" "stat system call." "" stat(5)~\*{PRM\*}
.xx "" "stat: data returned by" "stat system call." "" stat(5)~\*{SARM\*}
.xx "" "" "statd: network status monitor." "" statd(1M)~\*{NUAG\*}
.xx "" "ismpx: return windowing terminal" "state." "" ismpx(1)~\*{URM\*}
.xx "" "t_getstate: get the current" "state." "" t_getstate(3N)~\*{NI\*}
.xx "" "shut down system, change system" "state." "shutdown:" shutdown(1M)~\*{SARM\*}
.xx "" "a non-local goto with signal" "state." "sigsetjmp, siglongjmp:" sigsetjmp(3C)~\*{PRM\*}
.xx "" "wait for child process to change" "state." "waitid:" waitid(2)~\*{PRM\*}
.xx "" "wait for child process to change" "state." "waitpid:" waitpid(2)~\*{PRM\*}
.xx "" "nfsstat: Network File System" "statistics." "" nfsstat(1M)~\*{SARM\*}
.xx "" "ustat: get file system" "statistics." "" ustat(2)~\*{PRM\*}
.xx "" "xts: extract and print xt driver" "statistics." "" xts(1M)~\*{SARM\*}
.xx "sendmail." "mailstats: print" "statistics collected by" "" mailstats(1M)~\*{BSD\*}
.xx "" "/(generic): list file names and" "statistics for a file system." "" ff(1M)~\*{SARM\*}
.xx "" "ff (ufs): list file names and" "statistics for a ufs file/" "" ff(1M)~\*{SARM\*}
.xx "" "netstat: show network" "status." "" netstat(1M)~\*{NUAG\*}
.xx "" "netstat: show network" "status." "" netstat(1M)~\*{SARM\*}
.xx "" "ps: report process" "status." "" ps(1)~\*{URM\*}
.xx "" "stat, lstat, fstat: get file" "status." "" stat(2)~\*{ACG\*}
.xx "" "stat, lstat, fstat: get file" "status." "" stat(2)~\*{PRM\*}
.xx "" "wstat: wait" "status." "" wstat(5)~\*{PRM\*}
.xx "" "feof, clearerr, fileno: stream" "status inquiries." "ferror," ferror(3S)~\*{PRM\*}
.xx "" "uustat: uucp" "status inquiry and job control." "" uustat(1C)~\*{URM\*}
.xx "" "statd: network" "status monitor." "" statd(1M)~\*{NUAG\*}
.xx "" "bkstatus: display the" "status of backup operations." "" bkstatus(1M)~\*{SARM\*}
.xx "" "ps: display the" "status of current processes." "" ps(1)~\*{BSD\*}
.xx "" "ruptime: show host" "status of local machines." "" ruptime(1)~\*{NUAG\*}
.xx "" "ruptime: show host" "status of local machines." "" ruptime(1)~\*{URM\*}
.xx "" "/print information about the" "status of the LP print service." "" lpstat(1)~\*{URM\*}
.xx "" "communication facilities" "status." "/report inter-process" ipcs(1)~\*{URM\*}
.xx "" "rwhod, in.rwhod: system" "status server." "" rwhod(1M)~\*{NUAG\*}
.xx "" "rwhod, in.rwhod: system" "status server." "" rwhod(1M)~\*{SARM\*}
.xx "system information." "" "statvfs, fstatvfs: get file" "" statvfs(2)~\*{PRM\*}
.xx "list." "" "stdarg: handle variable argument" "" stdarg(5)~\*{PRM\*}
.xx "" "fmtmsg: display a message on" "stderr or system console." "" fmtmsg(1)~\*{URM\*}
.xx "" "fmtmsg: display a message on" "stderr or system console." "" fmtmsg(3C)~\*{PRM\*}
.xx "input/output package." "" "stdio: standard buffered" "" stdio(3S)~\*{PRM\*}
.xx "interprocess communication/" "" "stdipc: ftok: standard" "" stdipc(3C)~\*{PRM\*}
.xx "expression/" "regexp:  compile," "step, advance: regular" "" regexp(5)~\*{PRM\*}
.xx "expression/" "regexp:  compile," "step, advance: regular" "" regexp(5)~\*{SARM\*}
.xx "expression/" "regexpr: compile," "step, advance: regular" "" regexpr(3G)~\*{PRM\*}
.xx "" "" "stime: set time." "" stime(2)~\*{PRM\*}
.xx "" "rc6: run commands performed to" "stop and reboot the operating/" "" rc6(1M)~\*{SARM\*}
.xx "" "wait: wait for child process to" "stop or terminate." "" wait(2)~\*{PRM\*}
.xx "operation on a/" "dma_stop:" "stop software-initiated DMA" "" dma_stop(D3X)~\*{DDRM\*}
.xx "" "rc0: run commands performed to" "stop the operating system." "" rc0(1M)~\*{SARM\*}
.xx "" "halt:" "stop the processor." "" halt(1M)~\*{BSD\*}
.xx "environment." "rfstop:" "stop the Remote File Sharing" "" rfstop(1M)~\*{NUAG\*}
.xx "environment." "rfstop:" "stop the Remote File Sharing" "" rfstop(1M)~\*{SARM\*}
.xx "" "wait for process to terminate or" "stop." "/WIFSIGNALED, WIFEXITED:" wait(3)~\*{BSD\*}
.xx "" "disk: random access bulk" "storage medium." "" disk(7)~\*{SARM\*}
.xx "" "synchronize memory with physical" "storage." "msync:" msync(3C)~\*{PRM\*}
.xx "uio(D4DK)." "iovec: data" "storage structure for I/O using" "" iovec(D4DK)~\*{DDRM\*}
.xx "" "/zcat: compress data for" "storage, uncompress and display/" "" compress(1)~\*{URM\*}
.xx "" "dbm, dbminit, dbmclose, fetch," "store, delete, firstkey,/" "" dbm(3)~\*{NI\*}
.xx "" "dbm:  dbminit, dbmclose, fetch," "store, delete, firstkey,/" "" dbm(3X)~\*{BSD\*}
.xx "" "keylogin: decrypt and" "store secret key." "" keylogin(1)~\*{NI\*}
.xx "" "keylogin: decrypt and" "store secret key." "" keylogin(1)~\*{NUAG\*}
.xx "script." "pkgask:" "stores answers to a request" "" pkgask(1M)~\*{ISDG\*}
.xx "script." "pkgask:" "stores answers to a request" "" pkgask(1M)~\*{SARM\*}
.xx "" "keyserv: server for" "storing public and private keys." "" keyserv(1M)~\*{NI\*}
.xx "" "keyserv: server for" "storing public and private keys." "" keyserv(1M)~\*{NUAG\*}
.xx "string manipulations." "" "str: strfind, strrspn, strtrns:" "" str(3G)~\*{PRM\*}
.xx "messages." "" "strace: print STREAMS trace" "" strace(1M)~\*{SARM\*}
.xx "messages." "" "strace: print STREAMS trace" "" strace(1M)~\*{STRM\*}
.xx "" "" "strategy: perform block I/O." "" strategy(D2DK)~\*{DDRM\*}
.xx "compressing/" "strccpy: streadd," "strcadd, strecpy: copy strings," "" strccpy(3G)~\*{PRM\*}
.xx "operations." "string:" "strcasecmp, strncasecmp: string" "" string(3)~\*{BSD\*}
.xx "strncmp, strcpy,/" "string:" "strcat, strdup, strncat, strcmp," "" string(3C)~\*{PRM\*}
.xx "strecpy: copy strings,/" "" "strccpy: streadd, strcadd," "" strccpy(3G)~\*{PRM\*}
.xx "File for STREAMS TCP/IP." "" "strcf: STREAMS Configuration" "" strcf(4)~\*{NUAG\*}
.xx "File for STREAMS TCP/IP." "" "strcf: STREAMS Configuration" "" strcf(4)~\*{SARM\*}
.xx "stream configuration." "" "strchg, strconf: change or query" "" strchg(1)~\*{STRM\*}
.xx "stream configuration." "" "strchg, strconf: change or query" "" strchg(1)~\*{URM\*}
.xx "" "/strcpy, strncpy, strlen," "strchr, strrchr, strpbrk,/" "" string(3C)~\*{PRM\*}
.xx "cleanup program." "" "strclean: STREAMS error logger" "" strclean(1M)~\*{SARM\*}
.xx "cleanup program." "" "strclean: STREAMS error logger" "" strclean(1M)~\*{STRM\*}
.xx "" "string: strcat, strdup, strncat," "strcmp, strncmp, strcpy,/" "" string(3C)~\*{PRM\*}
.xx "" "" "strcoll: string collation." "" strcoll(3C)~\*{PRM\*}
.xx "configuration." "strchg," "strconf: change or query stream" "" strchg(1)~\*{STRM\*}
.xx "configuration." "strchg," "strconf: change or query stream" "" strchg(1)~\*{URM\*}
.xx "" "/strncat, strcmp, strncmp," "strcpy, strncpy, strlen, strchr,/" "" string(3C)~\*{PRM\*}
.xx "" "/strrchr, strpbrk, strspn," "strcspn, strtok, strstr: string/" "" string(3C)~\*{PRM\*}
.xx "strncmp,/" "string: strcat," "strdup, strncat, strcmp," "" string(3C)~\*{PRM\*}
.xx "strings, compressing/" "strccpy:" "streadd, strcadd, strecpy: copy" "" strccpy(3G)~\*{PRM\*}
.xx "" "fclose, fflush: close or flush a" "stream." "" fclose(3S)~\*{PRM\*}
.xx "" "fopen, freopen, fdopen: open a" "stream." "" fopen(3S)~\*{BSD\*}
.xx "" "fopen, freopen, fdopen: open a" "stream." "" fopen(3S)~\*{PRM\*}
.xx "" "getmsg: get next message off a" "stream." "" getmsg(2)~\*{PRM\*}
.xx "" "getmsg: get next message off a" "stream." "" getmsg(2)~\*{STRM\*}
.xx "" "gets, fgets: get a string from a" "stream." "" gets(3S)~\*{PRM\*}
.xx "" "putmsg: send a message on a" "stream." "" putmsg(2)~\*{PRM\*}
.xx "" "putmsg: send a message on a" "stream." "" putmsg(2)~\*{STRM\*}
.xx "" "puts, fputs: put a string on a" "stream." "" puts(3S)~\*{PRM\*}
.xx "" "test for flow control in a" "stream." "canput:" canput(D3DK)~\*{DDRM\*}
.xx "" "strchg, strconf: change or query" "stream configuration." "" strchg(1)~\*{STRM\*}
.xx "" "strchg, strconf: change or query" "stream configuration." "" strchg(1)~\*{URM\*}
.xx "" "line discipline for unique" "stream connections." "connld:" connld(7)~\*{STRM\*}
.xx "" "for external data representation" "stream creation." "/routines" xdr_create(3N)~\*{NI\*}
.xx "" "sed:" "stream editor." "" sed(1)~\*{URM\*}
.xx "" "reposition a file pointer in a" "stream." "fseek, rewind, ftell:" fseek(3S)~\*{PRM\*}
.xx "" "reposition a file pointer in a" "stream." "fsetpos, fgetpos:" fsetpos(3C)~\*{PRM\*}
.xx "" "get character or word from a" "stream." "/getchar, fgetc, getw:" getc(3S)~\*{PRM\*}
.xx "" "stroptions:" "stream head option structure." "" stroptions(D4DK)~\*{DDRM\*}
.xx "" "putw: put character or word on a" "stream." "putc, putchar, fputc," putc(3S)~\*{PRM\*}
.xx "" "in the opposite direction in a" "stream." "qreply: send a message" qreply(D3DK)~\*{DDRM\*}
.xx "" "setvbuf: assign buffering to a" "stream." "setbuf," setbuf(3S)~\*{PRM\*}
.xx "" "setvbuf: assign buffering to a" "stream." "/setbuffer, setlinebuf," setbuf(3S)~\*{BSD\*}
.xx "" "assign buffering to a" "stream." "setbuffer, setlinebuf:" setbuffer(3S)~\*{BSD\*}
.xx "" "ferror, feof, clearerr, fileno:" "stream status inquiries." "" ferror(3S)~\*{PRM\*}
.xx "" "rexec: return" "stream to a remote command." "" rexec(3N)~\*{NI\*}
.xx "" "rexec: return" "stream to a remote command." "" rexec(3N)~\*{NUAG\*}
.xx "" "push character back onto input" "stream." "ungetc:" ungetc(3S)~\*{PRM\*}
.xx "" "bgets: read" "stream up to next delimiter." "" bgets(3G)~\*{PRM\*}
.xx "" "qt: QIC cartridge magnetic tape" "streamer interface." "" qt(7)~\*{SARM\*}
.xx "commands." "" "streamio: STREAMS ioctl" "" streamio(7)~\*{STRM\*}
.xx "" "sad:" "STREAMS Administrative Driver." "" sad(7)~\*{STRM\*}
.xx "" "ttcompat: V7, 4BSD and XENIX" "STREAMS compatibility module." "" ttcompat(7)~\*{SARM\*}
.xx "STREAMS TCP/IP." "strcf:" "STREAMS Configuration File for" "" strcf(4)~\*{NUAG\*}
.xx "STREAMS TCP/IP." "strcf:" "STREAMS Configuration File for" "" strcf(4)~\*{SARM\*}
.xx "" "datab:" "STREAMS data block structure." "" datab(D4DK)~\*{DDRM\*}
.xx "information." "info:" "STREAMS driver and module" "" info(D1D)~\*{DDRM\*}
.xx "information/" "module_info:" "STREAMS driver and module" "" module_info(D4DK)~\*{DDRM\*}
.xx "declaration/" "streamtab:" "STREAMS driver and module" "" streamtab(D4DK)~\*{DDRM\*}
.xx "" "communications interface" "STREAMS driver." "/asynchronous" ports(7)~\*{STRM\*}
.xx "" "any major/minor device pair on a" "STREAMS driver." "clone: open" clone(7)~\*{STRM\*}
.xx "routine structure." "free_rtn:" "STREAMS driver's message free" "" free_rtn(D4DK)~\*{DDRM\*}
.xx "program." "strclean:" "STREAMS error logger cleanup" "" strclean(1M)~\*{SARM\*}
.xx "program." "strclean:" "STREAMS error logger cleanup" "" strclean(1M)~\*{STRM\*}
.xx "" "strerr:" "STREAMS error logger daemon." "" strerr(1M)~\*{SARM\*}
.xx "" "strerr:" "STREAMS error logger daemon." "" strerr(1M)~\*{STRM\*}
.xx "tracing." "log: interface to" "STREAMS error logging and event" "" log(7)~\*{STRM\*}
.xx "" "streamio:" "STREAMS ioctl commands." "" streamio(7)~\*{STRM\*}
.xx "" "iocblk:" "STREAMS ioctl structure." "" iocblk(D4DK)~\*{DDRM\*}
.xx "" "slink:" "streams linker." "" slink(1M)~\*{NUAG\*}
.xx "" "slink:" "streams linker." "" slink(1M)~\*{SARM\*}
.xx "" "msgb:" "STREAMS message block structure." "" msgb(D4DK)~\*{DDRM\*}
.xx "" "messages:" "STREAMS messages." "" messages(D5DK)~\*{DDRM\*}
.xx "" "Transport Interface cooperating" "STREAMS module." "timod:" timod(7)~\*{STRM\*}
.xx "" "Interface read/write interface" "STREAMS module." "/Transport" tirdwr(7)~\*{STRM\*}
.xx "" "lists of automatically pushed" "STREAMS modules." "/configure" autopush(1M)~\*{SARM\*}
.xx "" "lists of automatically pushed" "STREAMS modules." "/configure" autopush(1M)~\*{STRM\*}
.xx "structure." "linkblk:" "STREAMS multiplexor link" "" linkblk(D4DK)~\*{DDRM\*}
.xx "" "pckt:" "STREAMS Packet Mode module." "" pckt(7)~\*{STRM\*}
.xx "Emulation module." "ptem:" "STREAMS Pseudo Terminal" "" ptem(7)~\*{STRM\*}
.xx "structure." "qinit:" "STREAMS queue initialization" "" qinit(D4DK)~\*{DDRM\*}
.xx "" "queue:" "STREAMS queue structure." "" queue(D4DK)~\*{DDRM\*}
.xx "" "STREAMS Configuration File for" "STREAMS TCP/IP." "strcf:" strcf(4)~\*{NUAG\*}
.xx "" "STREAMS Configuration File for" "STREAMS TCP/IP." "strcf:" strcf(4)~\*{SARM\*}
.xx "module." "ldterm: standard" "STREAMS terminal line discipline" "" ldterm(7)~\*{STRM\*}
.xx "" "strace: print" "STREAMS trace messages." "" strace(1M)~\*{SARM\*}
.xx "" "strace: print" "STREAMS trace messages." "" strace(1M)~\*{STRM\*}
.xx "request structure." "copyreq:" "STREAMS transparent ioctl copy" "" copyreq(D4DK)~\*{DDRM\*}
.xx "response structure." "copyresp:" "STREAMS transparent ioctl copy" "" copyresp(D4DK)~\*{DDRM\*}
.xx "" "console:" "STREAMS-based console interface." "" console(7)~\*{STRM\*}
.xx "" "fdetach: detach a name from a" "STREAMS-based file descriptor." "" fdetach(1M)~\*{STRM\*}
.xx "" "fdetach: detach a name from a" "STREAMS-based file descriptor." "" fdetach(3C)~\*{STRM\*}
.xx "an object in/" "fattach: attach a" "STREAMS-based file descriptor to" "" fattach(3C)~\*{STRM\*}
.xx "driver for AT&T windowing/" "xt:" "STREAMS-based multiplexed tty" "" xt(7)~\*{SARM\*}
.xx "driver for AT&T windowing/" "xt:" "STREAMS-based multiplexed tty" "" xt(7)~\*{STRM\*}
.xx "module declaration structure." "" "streamtab: STREAMS driver and" "" streamtab(D4DK)~\*{DDRM\*}
.xx "" "strccpy: streadd, strcadd," "strecpy: copy strings,/" "" strccpy(3G)~\*{PRM\*}
.xx "daemon." "" "strerr: STREAMS error logger" "" strerr(1M)~\*{SARM\*}
.xx "daemon." "" "strerr: STREAMS error logger" "" strerr(1M)~\*{STRM\*}
.xx "string." "" "strerror: get error message" "" strerror(3C)~\*{PRM\*}
.xx "string manipulations." "str:" "strfind, strrspn, strtrns:" "" str(3G)~\*{PRM\*}
.xx "convert date and time to/" "" "strftime, cftime, ascftime:" "" strftime(3C)~\*{PRM\*}
.xx "strings." "" "strftime: language specific" "" strftime(4)~\*{PRM\*}
.xx "strings." "" "strftime: language specific" "" strftime(4)~\*{SARM\*}
.xx "" "gettxt: retrieve a text" "string." "" gettxt(3C)~\*{PRM\*}
.xx "" "regex: match patterns against a" "string." "" regex(1F)~\*{CHAR\*}
.xx "strncasecmp: string operations." "" "string:  strcasecmp," "" string(3)~\*{BSD\*}
.xx "" "strerror: get error message" "string." "" strerror(3C)~\*{PRM\*}
.xx "" "a prompt; verify and return a" "string answer." "ckstr: display" ckstr(1)~\*{ISDG\*}
.xx "" "a prompt; verify and return a" "string answer." "ckstr: display" ckstr(1)~\*{SARM\*}
.xx "" "/mvwinsstr, mvwinsnstr: insert" "string before character under/" "" curs_insstr(3X)~\*{CHAR\*}
.xx "" "convert date and time to" "string." "/cftime, ascftime:" strftime(3C)~\*{PRM\*}
.xx "" "strcoll:" "string collation." "" strcoll(3C)~\*{PRM\*}
.xx "" "bps: Bootstrap Parameter" "String driver." "" bps(7iref)~\*{MBRMAN\*}
.xx "" "convert floating-point number to" "string." "/fcvtl, gcvt, gcvtl:" ecvt(3C)~\*{PRM\*}
.xx "" "search a file for a character" "string." "fgrep:" fgrep(1)~\*{URM\*}
.xx "" "gettxt: retrieve a text" "string from a message data base." "" gettxt(1)~\*{URM\*}
.xx "" "gets, fgets: get a" "string from a stream." "" gets(3S)~\*{PRM\*}
.xx "" "mbstowcs, wcstombs: multibyte" "string functions." "mbstring:" mbstring(3C)~\*{PRM\*}
.xx "" "parse suboptions from a" "string." "getsubopt:" getsubopt(3C)~\*{PRM\*}
.xx "" "tzset: convert date and time to" "string." "/gmtime, asctime," ctime(3C)~\*{PRM\*}
.xx "" "/of, or search for a text" "string in, message data bases." "" srchtxt(1)~\*{URM\*}
.xx "" "long integer and base-64 ASCII" "string." "/l64a: convert between" a64l(3C)~\*{PRM\*}
.xx "" "str: strfind, strrspn, strtrns:" "string manipulations." "" str(3G)~\*{PRM\*}
.xx "" "/mvwaddchstr, mvwaddchnstr: add" "string of characters (and/" "" curs_addchstr(3X)~\*{CHAR\*}
.xx "" "/mvwinchstr, mvwinchnstr: get a" "string of characters (and/" "" curs_inchstr(3X)~\*{CHAR\*}
.xx "" "/mvwinstr, mvwinnstr: get a" "string of characters from a/" "" curs_instr(3X)~\*{CHAR\*}
.xx "" "/mvwaddstr, mvwaddnstr: add a" "string of characters to a curses/" "" curs_addstr(3X)~\*{CHAR\*}
.xx "" "puts, fputs: put a" "string on a stream." "" puts(3S)~\*{PRM\*}
.xx "given/" "/the bootstrap parameter" "string on the processor in the" "" initbp(8iref)~\*{MBRMAN\*}
.xx "" "echo: put" "string on virtual output." "" echo(1F)~\*{CHAR\*}
.xx "" "index, rindex:" "string operations." "" index(3)~\*{BSD\*}
.xx "" "bcmp, bzero, ffs: bit and byte" "string operations." "/bcopy," bstring(3)~\*{BSD\*}
.xx "" "strcasecmp, strncasecmp:" "string operations." "string: " string(3)~\*{BSD\*}
.xx "" "strspn, strcspn, strtok, strstr:" "string operations." "/strpbrk," string(3C)~\*{PRM\*}
.xx "" "elf_strptr: make a" "string pointer." "" elf_strptr(3E)~\*{PRM\*}
.xx "" "yes: print" "string repeatedly." "" yes(1)~\*{ACG\*}
.xx "" "menu_mark: menus mark" "string routines." "/set_menu_mark," menu_mark(3X)~\*{CHAR\*}
.xx "strcmp, strncmp, strcpy,/" "" "string: strcat, strdup, strncat," "" string(3C)~\*{PRM\*}
.xx "" "strtod, strtold, atof: convert" "string to double-precision/" "" strtod(3C)~\*{PRM\*}
.xx "" "strtoul, atol, atoi: convert" "string to integer." "strtol," strtol(3C)~\*{PRM\*}
.xx "" "strxfrm:" "string transformation." "" strxfrm(3C)~\*{PRM\*}
.xx "" "strftime: language specific" "strings." "" strftime(4)~\*{PRM\*}
.xx "" "strftime: language specific" "strings." "" strftime(4)~\*{SARM\*}
.xx "" "what: print identification" "strings." "" what(1)~\*{PRM\*}
.xx "" "/streadd, strcadd, strecpy: copy" "strings, compressing or/" "" strccpy(3G)~\*{PRM\*}
.xx "in an object file or binary." "" "strings: find printable strings" "" strings(1)~\*{URM\*}
.xx "" "/wgetnstr: get character" "strings from curses terminal/" "" curs_getstr(3X)~\*{CHAR\*}
.xx "" "exstr: extract" "strings from source files." "" exstr(1)~\*{URM\*}
.xx "binary." "strings: find printable" "strings in an object file or" "" strings(1)~\*{URM\*}
.xx "" "get and set system information" "strings." "sysinfo:" sysinfo(2)~\*{PRM\*}
.xx "debugging and line number/" "" "strip: strip symbol table," "" strip(1)~\*{PRM\*}
.xx "and line number/" "strip:" "strip symbol table, debugging" "" strip(1)~\*{PRM\*}
.xx "" "/strncmp, strcpy, strncpy," "strlen, strchr, strrchr,/" "" string(3C)~\*{PRM\*}
.xx "log driver." "" "strlog: submit messages to the" "" strlog(D3DK)~\*{DDRM\*}
.xx "" "string:  strcasecmp," "strncasecmp: string operations." "" string(3)~\*{BSD\*}
.xx "strcpy,/" "string: strcat, strdup," "strncat, strcmp, strncmp," "" string(3C)~\*{PRM\*}
.xx "" "/strcat, strdup, strncat, strcmp," "strncmp, strcpy, strncpy,/" "" string(3C)~\*{PRM\*}
.xx "" "/strcmp, strncmp, strcpy," "strncpy, strlen, strchr,/" "" string(3C)~\*{PRM\*}
.xx "structure." "" "stroptions: stream head option" "" stroptions(D4DK)~\*{DDRM\*}
.xx "" "/strlen, strchr, strrchr," "strpbrk, strspn, strcspn,/" "" string(3C)~\*{PRM\*}
.xx "queue or band of the queue." "" "strqget: get information about a" "" strqget(D3DK)~\*{DDRM\*}
.xx "about a queue or band of the/" "" "strqset: change information" "" strqset(D3DK)~\*{DDRM\*}
.xx "" "/strcpy, strncpy, strlen, strchr," "strrchr, strpbrk, strspn,/" "" string(3C)~\*{PRM\*}
.xx "manipulations." "str: strfind," "strrspn, strtrns: string" "" str(3G)~\*{PRM\*}
.xx "" "/strchr, strrchr, strpbrk," "strspn, strcspn, strtok, strstr:/" "" string(3C)~\*{PRM\*}
.xx "" "/strspn, strcspn, strtok," "strstr: string operations." "" string(3C)~\*{PRM\*}
.xx "string to double-precision/" "" "strtod, strtold, atof: convert" "" strtod(3C)~\*{PRM\*}
.xx "" "strpbrk, strspn, strcspn," "strtok, strstr: string/" "/strrchr," string(3C)~\*{PRM\*}
.xx "convert string to integer." "" "strtol, strtoul, atol, atoi:" "" strtol(3C)~\*{PRM\*}
.xx "double-precision/" "strtod," "strtold, atof: convert string to" "" strtod(3C)~\*{PRM\*}
.xx "string to integer." "strtol," "strtoul, atol, atoi: convert" "" strtol(3C)~\*{PRM\*}
.xx "" "str: strfind, strrspn," "strtrns: string manipulations." "" str(3G)~\*{PRM\*}
.xx "" "buf: block I/O data transfer" "structure." "" buf(D4DK)~\*{DDRM\*}
.xx "" "datab: STREAMS data block" "structure." "" datab(D4DK)~\*{DDRM\*}
.xx "" "dma_buf: DMA buffer descriptor" "structure." "" dma_buf(D4X)~\*{DDRM\*}
.xx "" "dma_cb: DMA command block" "structure." "" dma_cb(D4X)~\*{DDRM\*}
.xx "" "iocblk: STREAMS ioctl" "structure." "" iocblk(D4DK)~\*{DDRM\*}
.xx "" "msgb: STREAMS message block" "structure." "" msgb(D4DK)~\*{DDRM\*}
.xx "" "queue: STREAMS queue" "structure." "" queue(D4DK)~\*{DDRM\*}
.xx "" "sb: SCSI block" "structure." "" sb(D4I)~\*{SCSI\*}
.xx "" "scb: SCSI control block" "structure." "" scb(D4I)~\*{SCSI\*}
.xx "" "scsi_ad: SCSI device address" "structure." "" scsi_ad(D4I)~\*{SCSI\*}
.xx "" "sfb: SCSI function block" "structure." "" sfb(D4I)~\*{SCSI\*}
.xx "" "stroptions: stream head option" "structure." "" stroptions(D4DK)~\*{DDRM\*}
.xx "" "t_alloc: allocate a library" "structure." "" t_alloc(3N)~\*{NI\*}
.xx "" "t_free: free a library" "structure." "" t_free(3N)~\*{NI\*}
.xx "" "uio: scatter/gather I/O request" "structure." "" uio(D4DK)~\*{DDRM\*}
.xx "" "ver_no: SCSI version number" "structure." "" ver_no(D4I)~\*{SCSI\*}
.xx "" "space described by uio(D4DK)" "structure." "/a character from" uwritec(D3DK)~\*{DDRM\*}
.xx "" "to space described by uio(D4DK)" "structure." "/copy a character" ureadc(D3DK)~\*{DDRM\*}
.xx "" "transparent ioctl copy request" "structure." "copyreq: STREAMS" copyreq(D4DK)~\*{DDRM\*}
.xx "" "transparent ioctl copy response" "structure." "copyresp: STREAMS" copyresp(D4DK)~\*{DDRM\*}
.xx "uio(D4DK)." "iovec: data storage" "structure for I/O using" "" iovec(D4DK)~\*{DDRM\*}
.xx "" "driver's message free routine" "structure." "free_rtn: STREAMS" free_rtn(D4DK)~\*{DDRM\*}
.xx "" "processes using a file or file" "structure." "fuser: identify" fuser(1M)~\*{SARM\*}
.xx "" "(NIS) database and directory" "structure." "/Information Service" ypfiles(4)~\*{NI\*}
.xx "" "STREAMS multiplexor link" "structure." "linkblk:" linkblk(D4DK)~\*{DDRM\*}
.xx "" "offsetof: offset of" "structure member." "" offsetof(3C)~\*{PRM\*}
.xx "" "driver and module information" "structure." "module_info: STREAMS" module_info(D4DK)~\*{DDRM\*}
.xx "" "STREAMS queue initialization" "structure." "qinit:" qinit(D4DK)~\*{DDRM\*}
.xx "" "driver and module declaration" "structure." "streamtab: STREAMS" streamtab(D4DK)~\*{DDRM\*}
.xx "" "mktime: converts a tm" "structure to a calendar time." "" mktime(3C)~\*{PRM\*}
.xx "" "copy data using uio(D4DK)" "structure." "uiomove:" uiomove(D3DK)~\*{DDRM\*}
.xx "" "intro: introduction to SCSI data" "structures." "" intro(D4I)~\*{SCSI\*}
.xx "" "intro: introduction to DMA data" "structures." "" intro(D4X)~\*{DDRM\*}
.xx "" "scm, scs: SCSI command" "structures." "" scm(D4I)~\*{SCSI\*}
.xx "" "introduction to kernel data" "structures." "intro:" intro(D4DK)~\*{DDRM\*}
.xx "" "" "strxfrm: string transformation." "" strxfrm(3C)~\*{PRM\*}
.xx "terminal." "" "stty: set the options for a" "" stty(1)~\*{BSD\*}
.xx "terminal." "" "stty: set the options for a" "" stty(1)~\*{URM\*}
.xx "and hunt sequences for TTY/" "" "sttydefs: maintain line settings" "" sttydefs(1M)~\*{SARM\*}
.xx "" "" "stune: file format." "" stune(4)~\*{ISDG\*}
.xx "" "" "stune: file format." "" stune(4)~\*{SARM\*}
.xx "" "" "su." "" su(4)~\*{SARM\*}
.xx "user." "" "su: become super-user or another" "" su(1M)~\*{SARM\*}
.xx "user." "" "su: become super-user or another" "" su(1M)~\*{URM\*}
.xx "communications/" "ccisubinfo:" "subchannel information on the" "" ccisubinfo(1iref)~\*{MBRMAN\*}
.xx "" "/disassociates this host with a" "subchannel on a line on the/" "" ccidetach(1iref)~\*{MBRMAN\*}
.xx "host on the/" "cciswitch: switch a" "subchannel on a line to a new" "" cciswitch(1iref)~\*{MBRMAN\*}
.xx "" "/Creates a connection to a" "subchannel on the communications/" "" cciattach(1iref)~\*{MBRMAN\*}
.xx "driver." "strlog:" "submit messages to the log" "" strlog(D3DK)~\*{DDRM\*}
.xx "" "getsubopt: parse" "suboptions from a string." "" getsubopt(3C)~\*{PRM\*}
.xx "pechochar:/" "curs_pad:  newpad," "subpad, prefresh, pnoutrefresh," "" curs_pad(3X)~\*{CHAR\*}
.xx "" "dbm_open, dbm_store: data base" "subroutines." "/dbm_nextkey," ndbm(3)~\*{BSD\*}
.xx "" "firstkey, nextkey: database" "subroutines." "/store, delete," dbm(3)~\*{NI\*}
.xx "" "firstkey, nextkey: data base" "subroutines." "/store, delete," dbm(3X)~\*{BSD\*}
.xx "" "/program a DMA operation for a" "subsequent hardware request." "" dma_prog(D3X)~\*{DDRM\*}
.xx "" "/same lines of several files or" "subsequent lines of one file." "" paste(1)~\*{URM\*}
.xx "" "/program a DMA operation for a" "subsequent software request." "" dma_swsetup(D3X)~\*{DDRM\*}
.xx "" "\*(dr: \*(ha SCSI host adapter" "subsystem." "" scsi_dpt(7)~\*{SARM\*}
.xx "" "Adaptec 1542A SCSI host adapter" "subsystem." "\*(dr:" scsi_adaptec(7)~\*{SARM\*}
.xx "" "command processor for the forms" "subsystem." "form_driver:" form_driver(3X)~\*{CHAR\*}
.xx "" "command processor for the menus" "subsystem." "menu_driver:" menu_driver(3X)~\*{CHAR\*}
.xx "" "Multibus II iSBC 486/133SE SCSI" "Subsystem." "scsi:" scsi(7iref)~\*{MBRMAN\*}
.xx "" "WD7000 FASST2 host adapter" "subsystem." "scsi_wd7000:" scsi_wd7000(7)~\*{SARM\*}
.xx "dupwin,/" "/newwin, delwin, mvwin," "subwin, derwin, mvderwin," "" curs_window(3X)~\*{CHAR\*}
.xx "" "/scale_form: forms window and" "subwindow association routines." "" form_win(3X)~\*{CHAR\*}
.xx "" "/scale_menu: menus window and" "subwindow association routines." "" menu_win(3X)~\*{CHAR\*}
.xx "" "or erase forms from associated" "subwindows." "/unpost_form: write" form_post(3X)~\*{CHAR\*}
.xx "" "or erase menus from associated" "subwindows." "/unpost_menu: write" menu_post(3X)~\*{CHAR\*}
.xx "mode." "" "sulogin: access single-user" "" sulogin(1M)~\*{SARM\*}
.xx "file." "" "sum: calculate a checksum for a" "" sum(1)~\*{BSD\*}
.xx "count of a file." "" "sum: print checksum and block" "" sum(1)~\*{URM\*}
.xx "" "du:" "summarize disk usage." "" du(1M)~\*{SARM\*}
.xx "" "du:" "summarize disk usage." "" du(1M)~\*{URM\*}
.xx "" "quot:" "summarize file system ownership." "" quot(1M)~\*{SARM\*}
.xx "system." "repquota:" "summarize quotas for a file" "" repquota(1M)~\*{SARM\*}
.xx "" "whatis: display a one-line" "summary about a keyword." "" whatis(1)~\*{BSD\*}
.xx "accounting/" "acctcms: command" "summary from per-process" "" acctcms(1M)~\*{SARM\*}
.xx "" "sync: update the" "super block." "" sync(1M)~\*{SARM\*}
.xx "" "sync: update the" "super block." "" sync(1M)~\*{URM\*}
.xx "" "sync: update" "super block." "" sync(2)~\*{PRM\*}
.xx "" "su: become" "super-user or another user." "" su(1M)~\*{SARM\*}
.xx "" "su: become" "super-user or another user." "" su(1M)~\*{URM\*}
.xx "" "getgroups, setgroups: get or set" "supplementary group access list/" "" getgroups(2)~\*{PRM\*}
.xx "" "initgroups: initialize the" "supplementary group access list." "" initgroups(3C)~\*{PRM\*}
.xx "" "mouse: mouse device driver" "supporting bus, serial, and PS/2/" "" mouse(7)~\*{ISDG\*}
.xx "" "mouse: mouse device driver" "supporting bus, serial, and PS/2/" "" mouse(7)~\*{SARM\*}
.xx "routing." "routing: system" "supporting for packet network" "" routing(4)~\*{NUAG\*}
.xx "routing." "routing: system" "supporting for packet network" "" routing(4)~\*{SARM\*}
.xx "and transport of/" "mailsurr:" "surrogate commands for routing" "" mailsurr(4)~\*{SARM\*}
.xx "interval." "nap:" "suspend execution for a short" "" nap(2)~\*{ACG\*}
.xx "interval." "sleep:" "suspend execution for an" "" sleep(1)~\*{URM\*}
.xx "" "sleep:" "suspend execution for interval." "" sleep(3)~\*{BSD\*}
.xx "" "sleep:" "suspend execution for interval." "" sleep(3C)~\*{PRM\*}
.xx "in microseconds." "usleep:" "suspend execution for interval" "" usleep(3)~\*{BSD\*}
.xx "pending occurrence of an/" "sleep:" "suspend process execution" "" sleep(D3K)~\*{DDRM\*}
.xx "" "pause:" "suspend process until signal." "" pause(2)~\*{PRM\*}
.xx "" "/install a signal mask and" "suspend process until signal." "" sigsuspend(2)~\*{PRM\*}
.xx "completion of block/" "biowait:" "suspend processes pending" "" biowait(D3DK)~\*{DDRM\*}
.xx "" "wakeup: resume" "suspended process execution." "" wakeup(D3K)~\*{DDRM\*}
.xx "svc_dg_create,/" "rpc_svc_create:" "svc_create, svc_destroy," "" rpc_svc_create(3N)~\*{NI\*}
.xx "" "rpc_svc_create:  svc_create," "svc_destroy, svc_dg_create,/" "" rpc_svc_create(3N)~\*{NI\*}
.xx "" "/svc_create, svc_destroy," "svc_dg_create, svc_fd_create,/" "" rpc_svc_create(3N)~\*{NI\*}
.xx "svcerr_noproc,/" "rpc_svc_err:" "svcerr_auth, svcerr_decode," "" rpc_svc_err(3N)~\*{NI\*}
.xx "" "rpc_svc_err:   svcerr_auth," "svcerr_decode, svcerr_noproc,/" "" rpc_svc_err(3N)~\*{NI\*}
.xx "" "/svcerr_auth, svcerr_decode," "svcerr_noproc, svcerr_noprog,/" "" rpc_svc_err(3N)~\*{NI\*}
.xx "" "/svcerr_decode, svcerr_noproc," "svcerr_noprog, svcerr_progvers,/" "" rpc_svc_err(3N)~\*{NI\*}
.xx "" "svcerr_noproc, svcerr_noprog," "svcerr_progvers,/" "/svcerr_decode," rpc_svc_err(3N)~\*{NI\*}
.xx "" "/svcerr_noprog, svcerr_progvers," "svcerr_systemerr,/" "" rpc_svc_err(3N)~\*{NI\*}
.xx "routines for/" "/svcerr_systemerr," "svcerr_weakauth: library" "" rpc_svc_err(3N)~\*{NI\*}
.xx "" "/svc_destroy, svc_dg_create," "svc_fd_create, svc_raw_create,/" "" rpc_svc_create(3N)~\*{NI\*}
.xx "svc_getreqset,/" "rpc_svc_reg:" "svc_freeargs, svc_getargs," "" rpc_svc_reg(3N)~\*{NI\*}
.xx "" "rpc_svc_reg:   svc_freeargs," "svc_getargs, svc_getreqset,/" "" rpc_svc_reg(3N)~\*{NI\*}
.xx "" "/svc_freeargs, svc_getargs," "svc_getreqset, svc_getrpccaller,/" "" rpc_svc_reg(3N)~\*{NI\*}
.xx "" "/svc_getargs, svc_getreqset," "svc_getrpccaller, svc_run,/" "" rpc_svc_reg(3N)~\*{NI\*}
.xx "" "/svc_dg_create, svc_fd_create," "svc_raw_create, svc_tli_create,/" "" rpc_svc_create(3N)~\*{NI\*}
.xx "" "rpc_svc_calls:   rpc_reg," "svc_reg, svc_unreg,/" "" rpc_svc_calls(3N)~\*{NI\*}
.xx "" "/svc_getreqset, svc_getrpccaller," "svc_run, svc_sendreply: library/" "" rpc_svc_reg(3N)~\*{NI\*}
.xx "for/" "/svc_getrpccaller, svc_run," "svc_sendreply: library routines" "" rpc_svc_reg(3N)~\*{NI\*}
.xx "" "/svc_fd_create, svc_raw_create," "svc_tli_create, svc_tp_create,/" "" rpc_svc_create(3N)~\*{NI\*}
.xx "" "/svc_raw_create, svc_tli_create," "svc_tp_create, svc_vc_create:/" "" rpc_svc_create(3N)~\*{NI\*}
.xx "" "/rpc_reg, svc_reg," "svc_unreg, xprt_register,/" "" rpc_svc_calls(3N)~\*{NI\*}
.xx "" "/svc_tli_create, svc_tp_create," "svc_vc_create: library routines/" "" rpc_svc_create(3N)~\*{NI\*}
.xx "" "scsi_worm:" "sw01 SCSI WORM Target Driver." "" scsi_worm(7)~\*{SARM\*}
.xx "" "" "swab: swap bytes." "" swab(3C)~\*{PRM\*}
.xx "" "swap:" "swap administrative interface." "" swap(1M)~\*{SARM\*}
.xx "" "swab:" "swap bytes." "" swab(3C)~\*{PRM\*}
.xx "" "swapctl: manage" "swap space." "" swapctl(2)~\*{PRM\*}
.xx "interface." "" "swap: swap administrative" "" swap(1M)~\*{SARM\*}
.xx "contexts." "makecontext," "swapcontext: manipulate user" "" makecontext(3C)~\*{PRM\*}
.xx "" "" "swapctl: manage swap space." "" swapctl(2)~\*{PRM\*}
.xx "a new host on the/" "cciswitch:" "switch a subchannel on a line to" "" cciswitch(1iref)~\*{MBRMAN\*}
.xx "the communications/" "ttyswitch:" "switches a line to a new host on" "" ttyswitch(1iref)~\*{MBRMAN\*}
.xx "" "" "sxt: pseudo-device driver." "" sxt(7)~\*{SARM\*}
.xx "" "" "sxt: pseudo-device driver." "" sxt(7)~\*{STRM\*}
.xx "" "dlsym: get the address of a" "symbol in shared object." "" dlsym(3X)~\*{PRM\*}
.xx "" "elf_getarsym: retrieve archive" "symbol table." "" elf_getarsym(3E)~\*{PRM\*}
.xx "" "nlist: get entries from" "symbol table." "" nlist(3)~\*{BSD\*}
.xx "number information/" "strip: strip" "symbol table, debugging and line" "" strip(1)~\*{PRM\*}
.xx "" "unistd: header file for" "symbolic constants." "" unistd(4)~\*{SARM\*}
.xx "" "sdb:" "symbolic debugger." "" sdb(1)~\*{PRM\*}
.xx "" "readlink: read the value of a" "symbolic link." "" readlink(2)~\*{PRM\*}
.xx "" "symlink: make a" "symbolic link to a file." "" symlink(2)~\*{PRM\*}
.xx "" "ln: make hard or" "symbolic links to files." "" ln(1)~\*{BSD\*}
.xx "a file." "" "symlink: make a symbolic link to" "" symlink(2)~\*{PRM\*}
.xx "" "" "sync: update super block." "" sync(2)~\*{PRM\*}
.xx "" "" "sync: update the super block." "" sync(1M)~\*{SARM\*}
.xx "" "" "sync: update the super block." "" sync(1M)~\*{URM\*}
.xx "" "/correct the time to allow" "synchronization of the system/" "" adjtime(2)~\*{PRM\*}
.xx "the controlling FMLI/" "vsig:" "synchronize a co-process with" "" vsig(1F)~\*{CHAR\*}
.xx "state with that on the/" "fsync:" "synchronize a file's in-memory" "" fsync(2)~\*{PRM\*}
.xx "data segment." "sdenter, sdleave:" "synchronize access to a shared" "" sdenter(2)~\*{ACG\*}
.xx "storage." "msync:" "synchronize memory with physical" "" msync(3C)~\*{PRM\*}
.xx "" "sdgetv:" "synchronize shared data access." "" sdgetv(2)~\*{ACG\*}
.xx "" "t_sync:" "synchronize transport library." "" t_sync(3N)~\*{NI\*}
.xx "" "mb2s_getinfo: Gets specific" "synchronous endpoint/" "" mb2s_getinfo(3tai)~\*{MBTAI\*}
.xx "" "select:" "synchronous I/O multiplexing." "" select(3C)~\*{NI\*}
.xx "" "/Sends a cancel message in" "synchronous mode." "" mb2s_sendcancel(3tai)~\*{MBTAI\*}
.xx "" "/Sends a reply message in" "synchronous mode." "" mb2s_sendreply(3tai)~\*{MBTAI\*}
.xx "" "Sends a broadcast message in" "synchronous mode." "mb2s_brdcst:" mb2s_brdcst(3tai)~\*{MBTAI\*}
.xx "" "incoming Multibus II messages in" "synchronous mode." "/Receives" mb2s_receive(3tai)~\*{MBTAI\*}
.xx "" "a transactionless message in" "synchronous mode." "/Sends" mb2s_send(3tai)~\*{MBTAI\*}
.xx "" "mb2s_closeport: Closes a" "synchronous Multibus II/" "" mb2s_closeport(3tai)~\*{MBTAI\*}
.xx "" "mb2s_openport: Opens a" "synchronous Multibus II/" "" mb2s_openport(3tai)~\*{MBTAI\*}
.xx "" "/mvderwin, dupwin, wsyncup," "syncok, wcursyncup, wsyncdown:/" "" curs_window(3X)~\*{CHAR\*}
.xx "" "interpreter with a C-like" "syntax." "csh: shell command" csh(1)~\*{URM\*}
.xx "" "edsysadm:" "sysadm interface editing tool." "" edsysadm(1M)~\*{ISDG\*}
.xx "" "edsysadm:" "sysadm interface editing tool." "" edsysadm(1M)~\*{SARM\*}
.xx "removal tool." "delsysadm:" "sysadm interface menu or task" "" delsysadm(1M)~\*{ISDG\*}
.xx "removal tool." "delsysadm:" "sysadm interface menu or task" "" delsysadm(1M)~\*{SARM\*}
.xx "perform system administration." "" "sysadm: visual interface to" "" sysadm(1M)~\*{SARM\*}
.xx "" "" "syscall: indirect system call." "" syscall(3)~\*{BSD\*}
.xx "variables." "" "sysconf: get configurable system" "" sysconf(3C)~\*{PRM\*}
.xx "information." "" "sysfs: get file system type" "" sysfs(2)~\*{PRM\*}
.xx "functions." "" "sysi86: machine specific" "" sysi86(2)~\*{PRM\*}
.xx "information strings." "" "sysinfo: get and set system" "" sysinfo(2)~\*{PRM\*}
.xx "setlogmask: control system log." "" "syslog, openlog, closelog," "" syslog(3)~\*{BSD\*}
.xx "for syslogd system log daemon." "" "syslog.conf: configuration file" "" syslog.conf(4)~\*{BSD\*}
.xx "" "" "syslogd: log system messages." "" syslogd(1M)~\*{BSD\*}
.xx "" "/configuration file for" "syslogd system log daemon." "" syslog.conf(4)~\*{BSD\*}
.xx "messages." "psignal," "sys_siglist: system signal" "" psignal(3)~\*{BSD\*}
.xx "" "checkfsys: check a file" "system." "" checkfsys(1M)~\*{SARM\*}
.xx "" "cu: call another UNIX" "system." "" cu(1C)~\*{URM\*}
.xx "" "makefsys: create a file" "system." "" makefsys(1M)~\*{SARM\*}
.xx "" "mkfs (ufs): construct a ufs file" "system." "" mkfs(1M)~\*{SARM\*}
.xx "" "mount (s5): mount an s5 file" "system." "" mount(1M)~\*{SARM\*}
.xx "" "mount: mount a file" "system." "" mount(2)~\*{PRM\*}
.xx "" "/proc: process file" "system." "" proc(4)~\*{SARM\*}
.xx "" "reboot: restart the operating" "system." "" reboot(1M)~\*{BSD\*}
.xx "" "tunefs: tune up an existing file" "system." "" tunefs(1M)~\*{SARM\*}
.xx "" "umount: unmount a file" "system." "" umount(2)~\*{PRM\*}
.xx "" "uname: get name of current UNIX" "system." "" uname(2)~\*{PRM\*}
.xx "" "who: who is on the" "system." "" who(1)~\*{URM\*}
.xx "" "sag:" "system activity graph." "" sag(1M)~\*{SARM\*}
.xx "" "sadc, sa1, sa2:" "system activity report package." "" sadc(1M)~\*{SARM\*}
.xx "" "sar:" "system activity reporter." "" sar(1M)~\*{SARM\*}
.xx "" "command; report process data and" "system activity." "timex: time a" timex(1)~\*{URM\*}
.xx "" "SA: devices administered by" "System Administration." "" sa(7)~\*{SARM\*}
.xx "" "visual interface to perform" "system administration." "sysadm:" sysadm(1M)~\*{SARM\*}
.xx "" "/.rhosts: trusted hosts by" "system and by user." "" hosts.equiv(4)~\*{NUAG\*}
.xx "" "/.rhosts: trusted hosts by" "system and by user." "" hosts.equiv(4)~\*{SARM\*}
.xx "" "or restore from, a full file" "system archive." "fdp: create," fdp(1M)~\*{SARM\*}
.xx "" "or restore from, a full file" "system archive." "ffile: create," ffile(1M)~\*{SARM\*}
.xx "" "shutdown: close down the" "system at a given time." "" shutdown(1M)~\*{BSD\*}
.xx "" "ckbupscd: check file" "system backup schedule." "" ckbupscd(1M)~\*{SARM\*}
.xx "" "backup: initiate or control a" "system backup session." "" backup(1M)~\*{SARM\*}
.xx "" "fsba: file" "system block analyzer." "" fsba(1M)~\*{SARM\*}
.xx "" "boot: UNIX" "system boot program." "" boot(1M)~\*{SARM\*}
.xx "" "stat: data returned by stat" "system call." "" stat(4)~\*{ACG\*}
.xx "" "stat: data returned by stat" "system call." "" stat(5)~\*{PRM\*}
.xx "" "stat: data returned by stat" "system call." "" stat(5)~\*{SARM\*}
.xx "" "syscall: indirect" "system call." "" syscall(3)~\*{BSD\*}
.xx "" "intro: introduction to" "system calls and error numbers." "" intro(2)~\*{PRM\*}
.xx "" "truss: trace" "system calls and signals." "" truss(1)~\*{URM\*}
.xx "" "allow signals to interrupt" "system calls." "siginterrupt:" siginterrupt(3)~\*{BSD\*}
.xx "" "/determine whether remote" "system can accept binary/" "" ckbinarsys(1M)~\*{SARM\*}
.xx "" "shutdown: shut down" "system, change system state." "" shutdown(1M)~\*{SARM\*}
.xx "" "to allow synchronization of the" "system clock." "/correct the time" adjtime(2)~\*{PRM\*}
.xx "" "an error message or panic the" "system." "cmn_err: display" cmn_err(D3DK)~\*{DDRM\*}
.xx "" "uux: UNIX-to-UNIX" "system command execution." "" uux(1C)~\*{URM\*}
.xx "interactive/" "fsck (ufs): file" "system consistency check and" "" fsck(1M)~\*{SARM\*}
.xx "" "display:" "system console display." "" display(7)~\*{ISDG\*}
.xx "" "display:" "system console display." "" display(7)~\*{SARM\*}
.xx "" "display a message on stderr or" "system console." "fmtmsg:" fmtmsg(1)~\*{URM\*}
.xx "" "display a message on stderr or" "system console." "fmtmsg:" fmtmsg(3C)~\*{PRM\*}
.xx "" "keyboard:" "system console keyboard." "" keyboard(7)~\*{ISDG\*}
.xx "" "keyboard:" "system console keyboard." "" keyboard(7)~\*{SARM\*}
.xx "" "display a driver message on the" "system console." "print:" print(D2DK)~\*{DDRM\*}
.xx "" "uulog, uuname: UNIX-to-UNIX" "system copy." "uucp," uucp(1C)~\*{URM\*}
.xx "" "types: primitive" "system data types." "" types(5)~\*{PRM\*}
.xx "" "rdate: set" "system date from a remote host." "" rdate(1M)~\*{NUAG\*}
.xx "" "rdate: set" "system date from a remote host." "" rdate(1M)~\*{SARM\*}
.xx "" "fsdb (generic): file" "system debugger." "" fsdb(1M)~\*{SARM\*}
.xx "" "vfstab: table of file" "system defaults." "" vfstab(4)~\*{SARM\*}
.xx "sorted/" "look: find words in the" "system dictionary or lines in a" "" look(1)~\*{BSD\*}
.xx "" "ufsdump: incremental file" "system dump." "" ufsdump(1M)~\*{SARM\*}
.xx "diskettes." "ldsysdump: load" "system dump from floppy" "" ldsysdump(1M)~\*{SARM\*}
.xx "" "perror: print" "system error messages." "" perror(3C)~\*{PRM\*}
.xx "" "names and statistics for a file" "system." "ff (generic): list file" ff(1M)~\*{SARM\*}
.xx "" "uupick: public UNIX-to-UNIX" "system file copy." "uuto," uuto(1C)~\*{URM\*}
.xx "" "setup: initialize" "system for first user." "" setup(1M)~\*{SARM\*}
.xx "" "a new group definition on the" "system." "groupadd: add (create)" groupadd(1M)~\*{SARM\*}
.xx "" "a group definition from the" "system." "groupdel: delete" groupdel(1M)~\*{SARM\*}
.xx "" "modify a group definition on the" "system." "groupmod:" groupmod(1M)~\*{SARM\*}
.xx "" "uptime: show how long the" "system has been up." "" uptime(1)~\*{BSD\*}
.xx "" "or print name of current host" "system." "hostname: set" hostname(1)~\*{BSD\*}
.xx "" "crash: examine" "system images." "" crash(1M)~\*{SARM\*}
.xx "entry." "dirent: file" "system independent directory" "" dirent(4)~\*{SARM\*}
.xx "" "/entries and put in a file" "system independent format." "" getdents(2)~\*{PRM\*}
.xx "" "statvfs, fstatvfs: get file" "system information." "" statvfs(2)~\*{PRM\*}
.xx "ckbinarsys/" "binarsys: remote" "system information for the" "" binarsys(4)~\*{SARM\*}
.xx "" "sysinfo: get and set" "system information strings." "" sysinfo(2)~\*{PRM\*}
.xx "procedures." "brc, bcheckrc:" "system initialization" "" brc(1M)~\*{SARM\*}
.xx "" "" "system: issue a shell command." "" system(3S)~\*{PRM\*}
.xx "" "idbuild: build new UNIX" "System kernel." "" idbuild(1M)~\*{ISDG\*}
.xx "" "idbuild: build new UNIX" "System kernel." "" idbuild(1M)~\*{SARM\*}
.xx "" "idmkunix: build new UNIX" "System kernel." "" idmkunix(1M)~\*{ISDG\*}
.xx "" "idmkunix: build new UNIX" "System kernel." "" idmkunix(1M)~\*{SARM\*}
.xx "" "logger: add entries to the" "system log." "" logger(1)~\*{BSD\*}
.xx "" "configuration file for syslogd" "system log daemon." "syslog.conf:" syslog.conf(4)~\*{BSD\*}
.xx "" "closelog, setlogmask: control" "system log." "syslog, openlog," syslog(3)~\*{BSD\*}
.xx "" "logins: list user and" "system login information." "" logins(1M)~\*{SARM\*}
.xx "" "interactive message processing" "system." "mailx:" mailx(1)~\*{URM\*}
.xx "" "syslogd: log" "system messages." "" syslogd(1M)~\*{BSD\*}
.xx "" "(bfs): construct a boot file" "system." "mkfs" mkfs(1M)~\*{SARM\*}
.xx "" "mount, unmount a file" "system." "mountfsys, umountfsys:" mountfsys(1M)~\*{SARM\*}
.xx "" "to an object in the file" "system name space." "/descriptor" fattach(3C)~\*{STRM\*}
.xx "" "reboot: reboot" "system or halt processor." "" reboot(3)~\*{BSD\*}
.xx "" "filesystem: file" "system organization." "" filesystem(7)~\*{SARM\*}
.xx "" "quot: summarize file" "system ownership." "" quot(1M)~\*{SARM\*}
.xx "" "that registers distributed file" "system packages." "fstypes: file" fstypes(4)~\*{NUAG\*}
.xx "" "that registers distributed file" "system packages." "fstypes: file" fstypes(4)~\*{SARM\*}
.xx "" "getpagesize: get" "system page size." "" getpagesize(3)~\*{BSD\*}
.xx "" "the size of the active UNIX" "System partition." "/returns" partsize(1M)~\*{SARM\*}
.xx "" "transfer software package to the" "system." "pkgadd:" pkgadd(1M)~\*{ISDG\*}
.xx "" "transfer software package to the" "system." "pkgadd:" pkgadd(1M)~\*{SARM\*}
.xx "" "removes a package from the" "system." "pkgrm:" pkgrm(1M)~\*{ISDG\*}
.xx "" "removes a package from the" "system." "pkgrm:" pkgrm(1M)~\*{SARM\*}
.xx "" "prf: operating" "system profiler." "" prf(7)~\*{SARM\*}
.xx "" "prfdc, prfsnap, prfpr: UNIX" "system profiler." "/prfstat," profiler(1M)~\*{SARM\*}
.xx "checker." "quotacheck: file" "system quota consistency" "" quotacheck(1M)~\*{SARM\*}
.xx "" "quotaon, quotaoff: turn file" "system quotas on and off." "" quotaon(1M)~\*{SARM\*}
.xx "" "performed to stop the operating" "system." "rc0: run commands" rc0(1M)~\*{SARM\*}
.xx "" "summarize quotas for a file" "system." "repquota:" repquota(1M)~\*{SARM\*}
.xx "" "/setrlimit: control maximum" "system resource consumption." "" getrlimit(2)~\*{PRM\*}
.xx "" "ufsrestore: incremental file" "system restore." "" ufsrestore(1M)~\*{SARM\*}
.xx "" "to stop and reboot the operating" "system." "/run commands performed" rc6(1M)~\*{SARM\*}
.xx "" "end for the Source Code Control" "System (SCCS)." "sccs: front" sccs(1)~\*{BSD\*}
.xx "" "shut down the driver when the" "system shuts down." "halt:" halt(D2D)~\*{DDRM\*}
.xx "" "psignal, sys_siglist:" "system signal messages." "" psignal(3)~\*{BSD\*}
.xx "" "psignal, psiginfo:" "system signal messages." "" psignal(3C)~\*{PRM\*}
.xx "" "start: initialize a device at" "system start-up." "" start(D2DK)~\*{DDRM\*}
.xx "" "shut down system, change" "system state." "shutdown:" shutdown(1M)~\*{SARM\*}
.xx "" "nfsstat: Network File" "System statistics." "" nfsstat(1M)~\*{SARM\*}
.xx "" "ustat: get file" "system statistics." "" ustat(2)~\*{PRM\*}
.xx "" "rwhod, in.rwhod:" "system status server." "" rwhod(1M)~\*{NUAG\*}
.xx "" "rwhod, in.rwhod:" "system status server." "" rwhod(1M)~\*{SARM\*}
.xx "network routing." "routing:" "system supporting for packet" "" routing(4)~\*{NUAG\*}
.xx "network routing." "routing:" "system supporting for packet" "" routing(4)~\*{SARM\*}
.xx "" "mnttab: mounted file" "system table." "" mnttab(4)~\*{SARM\*}
.xx "" "sharetab: shared file" "system table." "" sharetab(4)~\*{NUAG\*}
.xx "" "sharetab: shared file" "system table." "" sharetab(4)~\*{SARM\*}
.xx "" "setclk: set" "system time from hardware clock." "" setclk(1M)~\*{SARM\*}
.xx "" "timezone: set default" "system time zone." "" timezone(4)~\*{PRM\*}
.xx "" "timezone: set default" "system time zone." "" timezone(4)~\*{SARM\*}
.xx "" "fstyp (generic): determine file" "system type." "" fstyp(1M)~\*{SARM\*}
.xx "" "sysfs: get file" "system type information." "" sysfs(2)~\*{PRM\*}
.xx "" "and statistics for a ufs file" "system." "/(ufs): list file names" ff(1M)~\*{SARM\*}
.xx "" "print name of current UNIX" "system." "uname:" uname(1)~\*{URM\*}
.xx "" "a new user login on the" "system." "useradd: administer" useradd(1M)~\*{SARM\*}
.xx "" "delete a user's login from the" "system." "userdel:" userdel(1M)~\*{SARM\*}
.xx "" "user's login information on the" "system." "usermod: modify a" usermod(1M)~\*{SARM\*}
.xx "" "user interface to a remote" "system using the TELNET/" "telnet:" telnet(1)~\*{NUAG\*}
.xx "" "user interface to a remote" "system using the TELNET/" "telnet:" telnet(1)~\*{URM\*}
.xx "" "transport program for the uucp" "system." "uucico: file" uucico(1M)~\*{SARM\*}
.xx "" "grades available on this UNIX" "system." "uuglist: list service" uuglist(1C)~\*{URM\*}
.xx "Transport Service (ots)/" "ots:" "System V/386 Release 4.0 OSI" "" ots(7iref)~\*{MBRMAN\*}
.xx "" "executables to call SCO UNIX" "System V/386 Release/" "/alters" fixshlib(1M)~\*{ACG\*}
.xx "" "sysconf: get configurable" "system variables." "" sysconf(3C)~\*{PRM\*}
.xx "" "make literal copy of file" "system." "volcopy (generic):" volcopy(1M)~\*{SARM\*}
.xx "" "a literal copy of an s5 file" "system." "volcopy (s5): make" volcopy(1M)~\*{SARM\*}
.xx "" "a literal copy of a ufs file" "system." "volcopy (ufs): make" volcopy(1M)~\*{SARM\*}
.xx "" "fs (bfs): format of the bfs file" "system volume." "" fs(4)~\*{SARM\*}
.xx "" "Uutry: try to contact remote" "system with debugging on." "" Uutry(1M)~\*{SARM\*}
.xx "" "/fasthalt: reboot/halt the" "system without checking the/" "" fastboot(1M)~\*{BSD\*}
.xx "" "fsck: check and repair file" "systems." "" fsck(1M)~\*{SARM\*}
.xx "" "mount (ufs): mount ufs file" "systems." "" mount(1M)~\*{SARM\*}
.xx "" "/umount: mount or unmount file" "systems and remote resources." "" mount(1M)~\*{SARM\*}
.xx "" "automatically mount NFS file" "systems." "automount:" automount(1M)~\*{NUAG\*}
.xx "" "automatically mount NFS file" "systems." "automount:" automount(1M)~\*{SARM\*}
.xx "" "report free disk space on file" "systems." "df:" df(1)~\*{BSD\*}
.xx "" "free disk space on ufs file" "systems." "df (ufs): report" df(1M)~\*{SARM\*}
.xx "" "dcopy (generic): copy file" "systems for optimal access time." "" dcopy(1M)~\*{SARM\*}
.xx "" "brelse: return a buffer to the" "system's free list." "" brelse(D3DK)~\*{DDRM\*}
.xx "" "(s5): check and repair s5 file" "systems." "fsck" fsck(1M)~\*{SARM\*}
.xx "" "versus i-numbers for s5 file" "systems." "/generate path names" ncheck(1M)~\*{SARM\*}
.xx "" "versus i-numbers for ufs file" "systems." "/generate pathnames" ncheck(1M)~\*{SARM\*}
.xx "" "provide labels for file" "systems." "labelit (generic):" labelit(1M)~\*{SARM\*}
.xx "" "(s5): provide labels for s5 file" "systems." "labelit" labelit(1M)~\*{SARM\*}
.xx "" "provide labels for ufs file" "systems." "labelit (ufs):" labelit(1M)~\*{SARM\*}
.xx "" "NFS resources from remote" "systems." "/list available" dfshares(1M)~\*{NUAG\*}
.xx "" "RFS resources from remote" "systems." "/list available" dfshares(1M)~\*{SARM\*}
.xx "" "available for mounting by remote" "systems." "/local NFS resource" share(1M)~\*{NUAG\*}
.xx "" "available for mounting by remote" "systems." "/local NFS resource" share(1M)~\*{SARM\*}
.xx "" "available for mounting by remote" "systems." "/local RFS resource" share(1M)~\*{NUAG\*}
.xx "" "available for mounting by remote" "systems." "/local RFS resource" share(1M)~\*{SARM\*}
.xx "" "available for mounting by remote" "systems." "/make local resource" share(1M)~\*{NUAG\*}
.xx "" "available for mounting by remote" "systems." "/make local resource" share(1M)~\*{SARM\*}
.xx "" "mount, unmount multiple file" "systems." "mountall, umountall:" mountall(1M)~\*{SARM\*}
.xx "" "blocks and i-nodes for s5 file" "systems." "/number of free disk" df(1M)~\*{SARM\*}
.xx "" "for mounting by remote" "systems." "/resource unavailable" unshare(1M)~\*{NUAG\*}
.xx "" "for mounting by remote" "systems." "/resource unavailable" unshare(1M)~\*{SARM\*}
.xx "" "lpsystem: register remote" "systems with the print service." "" lpsystem(1M)~\*{SARM\*}
.xx "" "/hpplot, implot, plottoa," "t300, t300s, t4013, t450, tek:/" "" plot(1G)~\*{BSD\*}
.xx "" "/hpplot, implot, plottoa, t300," "t300s, t4013, t450, tek:/" "" plot(1G)~\*{BSD\*}
.xx "" "/implot, plottoa, t300, t300s," "t4013, t450, tek: graphics/" "" plot(1G)~\*{BSD\*}
.xx "" "/plottoa, t300, t300s, t4013," "t450, tek: graphics filters for/" "" plot(1G)~\*{BSD\*}
.xx "" "bsearch: binary search a sorted" "table." "" bsearch(3C)~\*{PRM\*}
.xx "" "mnttab: mounted file system" "table." "" mnttab(4)~\*{SARM\*}
.xx "" "nlist: get entries from symbol" "table." "" nlist(3)~\*{BSD\*}
.xx "" "putdev: edits device" "table." "" putdev(1)~\*{SARM\*}
.xx "" "putdgrp: edits device group" "table." "" putdgrp(1)~\*{SARM\*}
.xx "" "setmnt: establish mount" "table." "" setmnt(1M)~\*{SARM\*}
.xx "" "sharetab: shared file system" "table." "" sharetab(4)~\*{NUAG\*}
.xx "" "sharetab: shared file system" "table." "" sharetab(4)~\*{SARM\*}
.xx "information/" "strip: strip symbol" "table, debugging and line number" "" strip(1)~\*{PRM\*}
.xx "" "class-dependent program header" "table." "/elf32_newphdr: retrieve" elf_getphdr(3E)~\*{PRM\*}
.xx "" "retrieve archive symbol" "table." "elf_getarsym:" elf_getarsym(3E)~\*{PRM\*}
.xx "" "/for transmission and sets up" "table entries for reception of/" "" mps_AMPsend_rsvp(D3D)~\*{DDRM\*}
.xx "" "or modify hard disk partition" "table." "fdisk: create" fdisk(1M)~\*{SARM\*}
.xx "" "get DoD Internet format host" "table from a host." "gettable:" gettable(1M)~\*{NUAG\*}
.xx "" "get DoD Internet format host" "table from a host." "gettable:" gettable(1M)~\*{SARM\*}
.xx "" "convert DoD Internet format host" "table." "htable:" htable(1M)~\*{NUAG\*}
.xx "" "convert DoD Internet format host" "table." "htable:" htable(1M)~\*{SARM\*}
.xx "" "vfstab:" "table of file system defaults." "" vfstab(4)~\*{SARM\*}
.xx "" "real-time dispatcher parameter" "table." "rt_dptbl:" rt_dptbl(4)~\*{SARM\*}
.xx "" "getdtablesize: get descriptor" "table size." "" getdtablesize(3)~\*{BSD\*}
.xx "" "dispatcher parameter" "table." "ts_dptbl: time-sharing" ts_dptbl(4)~\*{SARM\*}
.xx "" "iconv: code set conversion" "tables." "" iconv(5)~\*{SARM\*}
.xx "" "tbl: format" "tables for nroff or troff." "" tbl(1)~\*{BSD\*}
.xx "" "classification and conversion" "tables." "/generate character" chrtbl(1M)~\*{SARM\*}
.xx "" "hdestroy: manage hash search" "tables." "hsearch, hcreate," hsearch(3C)~\*{PRM\*}
.xx "" "manually manipulate the routing" "tables." "route:" route(1M)~\*{NUAG\*}
.xx "" "manually manipulate the routing" "tables." "route:" route(1M)~\*{SARM\*}
.xx "" "tabs: set" "tabs on a terminal." "" tabs(1)~\*{URM\*}
.xx "" "" "tabs: set tabs on a terminal." "" tabs(1)~\*{URM\*}
.xx "request." "" "t_accept: accept a connect" "" t_accept(3N)~\*{NI\*}
.xx "" "/netdir_free, netdir_mergeaddr," "taddr2uaddr, uaddr2taddr,/" "" netdir(3N)~\*{NI\*}
.xx "" "ctags: create a" "tags file for use with vi." "" ctags(1)~\*{URM\*}
.xx "file." "" "tail: deliver the last part of a" "" tail(1)~\*{URM\*}
.xx "" "talkd, in.talkd: server for" "talk program." "" talkd(1M)~\*{NUAG\*}
.xx "" "talkd, in.talkd: server for" "talk program." "" talkd(1M)~\*{SARM\*}
.xx "" "" "talk: talk to another user." "" talk(1)~\*{NUAG\*}
.xx "" "" "talk: talk to another user." "" talk(1)~\*{URM\*}
.xx "" "talk:" "talk to another user." "" talk(1)~\*{NUAG\*}
.xx "" "talk:" "talk to another user." "" talk(1)~\*{URM\*}
.xx "program." "" "talkd, in.talkd: server for talk" "" talkd(1M)~\*{NUAG\*}
.xx "program." "" "talkd, in.talkd: server for talk" "" talkd(1M)~\*{SARM\*}
.xx "structure." "" "t_alloc: allocate a library" "" t_alloc(3N)~\*{NI\*}
.xx "" "" "tam: TAM transition libraries." "" tam(3X)~\*{CHAR\*}
.xx "" "tam:" "TAM transition libraries." "" tam(3X)~\*{CHAR\*}
.xx "" "trig: sin, sinf, cos, cosf," "tan, tanf, asin, asinf, acos,/" "" trig(3M)~\*{PRM\*}
.xx "" "trig: sin, sinf, cos, cosf, tan," "tanf, asin, asinf, acos, acosf,/" "" trig(3M)~\*{PRM\*}
.xx "" "sinh, sinhf, cosh, coshf," "tanh, tanhf, asinh, acosh,/" "" sinh(3M)~\*{PRM\*}
.xx "" "sinh, sinhf, cosh, coshf, tanh," "tanhf, asinh, acosh, atanh:/" "" sinh(3M)~\*{PRM\*}
.xx "" "tcopy: copy a magnetic" "tape." "" tcopy(1)~\*{BSD\*}
.xx "" "mt: magnetic" "tape control." "" mt(1)~\*{BSD\*}
.xx "" "tapecntl:" "tape control for tape device." "" tapecntl(1)~\*{URM\*}
.xx "" "tapecntl: tape control for" "tape device." "" tapecntl(1)~\*{URM\*}
.xx "" "386/258 peripheral controller" "tape device driver." "/iSBC" i258tp(7iref)~\*{MBRMAN\*}
.xx "" "td: Multibus" "tape device drivers." "" td(7iref)~\*{MBRMAN\*}
.xx "" "scsi_tape: st01 SCSI" "tape driver." "" scsi_tape(7)~\*{SARM\*}
.xx "" "tar:" "tape file archiver." "" tar(1)~\*{URM\*}
.xx "" "" "tape: magnetic tape maintenance." "" tape(1)~\*{URM\*}
.xx "" "tape: magnetic" "tape maintenance." "" tape(1)~\*{URM\*}
.xx "" "qt: QIC cartridge magnetic" "tape streamer interface." "" qt(7)~\*{SARM\*}
.xx "device." "" "tapecntl: tape control for tape" "" tapecntl(1)~\*{URM\*}
.xx "" "" "tar: tape file archiver." "" tar(1)~\*{URM\*}
.xx "" "\*(dr: CD-ROM" "Target Driver." "" scsi_cdrom(7)~\*{SARM\*}
.xx "" "scsi_worm: sw01 SCSI WORM" "Target Driver." "" scsi_worm(7)~\*{SARM\*}
.xx "" "intro: introduction to SCSI" "target driver functions." "" intro(D3I)~\*{SCSI\*}
.xx "" "allocate a SCSI block for the" "target driver." "sdi_getblk:" sdi_getblk(D3I)~\*{SCSI\*}
.xx "delivery." "dbon: sets" "target for front panel message" "" dbon(8iref)~\*{MBRMAN\*}
.xx "" "sysadm interface menu or" "task removal tool." "delsysadm:" delsysadm(1M)~\*{ISDG\*}
.xx "" "sysadm interface menu or" "task removal tool." "delsysadm:" delsysadm(1M)~\*{SARM\*}
.xx "" "programs for simple lexical" "tasks." "lex: generate" lex(1)~\*{PRM\*}
.xx "transport endpoint." "" "t_bind: bind an address to a" "" t_bind(3N)~\*{NI\*}
.xx "" "deroff: remove nroff, troff," "tbl and eqn constructs." "" deroff(1)~\*{BSD\*}
.xx "" "deroff: remove nroff/troff," "tbl, and eqn constructs." "" deroff(1)~\*{URM\*}
.xx "troff." "" "tbl: format tables for nroff or" "" tbl(1)~\*{BSD\*}
.xx "" "/tcsetattr, tcsendbreak," "tcdrain, tcflush, tcflow,/" "" termios(2)~\*{PRM\*}
.xx "" "tcsendbreak, tcdrain, tcflush," "tcflow, cfgetospeed,/" "/tcsetattr," termios(2)~\*{PRM\*}
.xx "" "/tcsetattr, tcsendbreak, tcdrain," "tcflush, tcflow, cfgetospeed,/" "" termios(2)~\*{PRM\*}
.xx "tcsendbreak, tcdrain,/" "termios:" "tcgetattr, tcsetattr," "" termios(2)~\*{PRM\*}
.xx "" "/cfsetispeed, cfsetospeed," "tcgetpgrp, tcsetpgrp, tcgetsid:/" "" termios(2)~\*{PRM\*}
.xx "" "/tcgetpgrp, tcsetpgrp," "tcgetsid: general terminal/" "" termios(2)~\*{PRM\*}
.xx "endpoint." "" "t_close: close a transport" "" t_close(3N)~\*{NI\*}
.xx "connection with another/" "" "t_connect: establish a" "" t_connect(3N)~\*{NI\*}
.xx "" "" "tcopy: copy a magnetic tape." "" tcopy(1)~\*{BSD\*}
.xx "Control Protocol." "" "TCP: Internet Transmission" "" TCP(7)~\*{NI\*}
.xx "Control Protocol." "" "TCP: Internet Transmission" "" TCP(7)~\*{NUAG\*}
.xx "Control Protocol." "" "TCP: Internet Transmission" "" TCP(7)~\*{SARM\*}
.xx "" "Configuration File for STREAMS" "TCP/IP." "strcf: STREAMS" strcf(4)~\*{NUAG\*}
.xx "" "Configuration File for STREAMS" "TCP/IP." "strcf: STREAMS" strcf(4)~\*{SARM\*}
.xx "" "termios: tcgetattr, tcsetattr," "tcsendbreak, tcdrain, tcflush,/" "" termios(2)~\*{PRM\*}
.xx "tcflush,/" "termios: tcgetattr," "tcsetattr, tcsendbreak, tcdrain," "" termios(2)~\*{PRM\*}
.xx "foreground process group id." "" "tcsetpgrp: set terminal" "" tcsetpgrp(3C)~\*{PRM\*}
.xx "" "/cfsetospeed, tcgetpgrp," "tcsetpgrp, tcgetsid: general/" "" termios(2)~\*{PRM\*}
.xx "drivers." "" "td: Multibus tape device" "" td(7iref)~\*{MBRMAN\*}
.xx "search trees." "tsearch, tfind," "tdelete, twalk: manage binary" "" tsearch(3C)~\*{PRM\*}
.xx "" "" "tee: pipe fitting." "" tee(1)~\*{URM\*}
.xx "" "/t300, t300s, t4013, t450," "tek: graphics filters for/" "" plot(1G)~\*{BSD\*}
.xx "" "PostScript translator for" "tektronix 4014 files." "posttek:" posttek(1)~\*{URM\*}
.xx "initialization." "init," "telinit: process control" "" init(1M)~\*{SARM\*}
.xx "" "/data_ahead, data_behind:" "tell if forms field has/" "" form_data(3X)~\*{CHAR\*}
.xx "" "/item_visible:" "tell if menus item is visible." "" menu_item_visible(3X)~\*{CHAR\*}
.xx "" "directory: opendir, readdir," "telldir, seekdir, rewinddir,/" "" directory(3C)~\*{BSD\*}
.xx "" "directory: opendir, readdir," "telldir, seekdir, rewinddir,/" "" directory(3C)~\*{PRM\*}
.xx "" "telnetd: DARPA" "TELNET protocol server." "" telnetd(1M)~\*{NUAG\*}
.xx "" "telnetd: DARPA" "TELNET protocol server." "" telnetd(1M)~\*{SARM\*}
.xx "" "to a remote system using the" "TELNET protocol." "/user interface" telnet(1)~\*{NUAG\*}
.xx "" "to a remote system using the" "TELNET protocol." "/user interface" telnet(1)~\*{URM\*}
.xx "remote system using the TELNET/" "" "telnet: user interface to a" "" telnet(1)~\*{NUAG\*}
.xx "remote system using the TELNET/" "" "telnet: user interface to a" "" telnet(1)~\*{URM\*}
.xx "server." "" "telnetd: DARPA TELNET protocol" "" telnetd(1M)~\*{NUAG\*}
.xx "server." "" "telnetd: DARPA TELNET protocol" "" telnetd(1M)~\*{SARM\*}
.xx "temporary file." "tmpnam," "tempnam: create a name for a" "" tmpnam(3S)~\*{PRM\*}
.xx "" "tmpfile: create a" "temporary file." "" tmpfile(3S)~\*{PRM\*}
.xx "" "tempnam: create a name for a" "temporary file." "tmpnam," tmpnam(3S)~\*{PRM\*}
.xx "terminals." "" "term: conventional names for" "" term(5)~\*{SARM\*}
.xx "" "term: format of compiled" "term file." "" term(4)~\*{CHAR\*}
.xx "" "term: format of compiled" "term file." "" term(4)~\*{SARM\*}
.xx "file." "" "term: format of compiled term" "" term(4)~\*{CHAR\*}
.xx "file." "" "term: format of compiled term" "" term(4)~\*{SARM\*}
.xx "" "/has_il, killchar, longname," "termattrs, termname: curses/" "" curs_termattrs(3X)~\*{CHAR\*}
.xx "terminfo/" "captoinfo: convert a" "termcap description into a" "" captoinfo(1M)~\*{CHAR\*}
.xx "terminfo/" "captoinfo: convert a" "termcap description into a" "" captoinfo(1M)~\*{SARM\*}
.xx "" "interfaces (emulated) to the" "termcap library." "/tputs: curses" curs_termcap(3X)~\*{CHAR\*}
.xx "" "ct: spawn login to a remote" "terminal." "" ct(1C)~\*{URM\*}
.xx "" "ctermid: generate file name for" "terminal." "" ctermid(3S)~\*{PRM\*}
.xx "" "jterm: reset layer of windowing" "terminal." "" jterm(1)~\*{URM\*}
.xx "" "stty: set the options for a" "terminal." "" stty(1)~\*{BSD\*}
.xx "" "stty: set the options for a" "terminal." "" stty(1)~\*{URM\*}
.xx "" "tabs: set tabs on a" "terminal." "" tabs(1)~\*{URM\*}
.xx "" "tty: get the name of the" "terminal." "" tty(1)~\*{URM\*}
.xx "" "ttyname, isatty: find name of a" "terminal." "" ttyname(3C)~\*{PRM\*}
.xx "" "terminfo:" "terminal capability data base." "" terminfo(4)~\*{CHAR\*}
.xx "" "terminfo:" "terminal capability data base." "" terminfo(4)~\*{SARM\*}
.xx "" "reset: establish or restore" "terminal characteristics." "tset," tset(1)~\*{BSD\*}
.xx "" "mpi/450: iSBC MPI/450 MPI-based" "terminal controller." "" mpi/450(7iref)~\*{MBRMAN\*}
.xx "" "mix386/450: MIX-based" "terminal controller module and/" "" mix386/450(7iref)~\*{MBRMAN\*}
.xx "device/" "atcs\-asynchronous" "terminal controller script" "" atcs(7iref)~\*{MBRMAN\*}
.xx "" "iasy: asynchronous" "(terminal) device driver." "" iasy(7iref)~\*{MBRMAN\*}
.xx "" "ptem: STREAMS Pseudo" "Terminal Emulation module." "" ptem(7)~\*{STRM\*}
.xx "group id." "tcsetpgrp: set" "terminal foreground process" "" tcsetpgrp(3C)~\*{PRM\*}
.xx "" "libwindows: windowing" "terminal function library." "" libwindows(3X)~\*{PRM\*}
.xx "" "/wtimeout, typeahead: curses" "terminal input option control/" "" curs_inopts(3X)~\*{CHAR\*}
.xx "" "termio: general" "terminal interface." "" termio(7)~\*{SARM\*}
.xx "" "termiox: extended general" "terminal interface." "" termiox(7)~\*{SARM\*}
.xx "" "tty: controlling" "terminal interface." "" tty(7)~\*{SARM\*}
.xx "" "tcsetpgrp, tcgetsid: general" "terminal interface." "/tcgetpgrp," termios(2)~\*{PRM\*}
.xx "" "host control of windowing" "terminal." "jagent:" jagent(5)~\*{PRM\*}
.xx "" "host control of windowing" "terminal." "jagent:" jagent(5)~\*{SARM\*}
.xx "" "character strings from curses" "terminal keyboard." "/get" curs_getstr(3X)~\*{CHAR\*}
.xx "" "back) characters from curses" "terminal keyboard." "/get (or push" curs_getch(3X)~\*{CHAR\*}
.xx "" "dial: establish an outgoing" "terminal line connection." "" dial(3C)~\*{NI\*}
.xx "" "ldterm: standard STREAMS" "terminal line discipline module." "" ldterm(7)~\*{STRM\*}
.xx "" "ttydefs: file contains" "terminal line settings/" "" ttydefs(4)~\*{NI\*}
.xx "" "last: indicate last user or" "terminal logins." "" last(1)~\*{URM\*}
.xx "" "tset: provide information to set" "terminal modes." "" tset(1)~\*{URM\*}
.xx "" "provide information for setting" "terminal modes." "tset:" tset(1)~\*{ACG\*}
.xx "database." "tput: initialize a" "terminal or query terminfo" "" tput(1)~\*{URM\*}
.xx "" "/scrollok, nl, nonl: curses" "terminal output option control/" "" curs_outopts(3X)~\*{CHAR\*}
.xx "" "ttymon: port monitor for" "terminal ports." "" ttymon(1M)~\*{SARM\*}
.xx "" "clear: clear the" "terminal screen." "" clear(1)~\*{URM\*}
.xx "" "script: make typescript of a" "terminal session." "" script(1)~\*{URM\*}
.xx "" "ismpx: return windowing" "terminal state." "" ismpx(1)~\*{URM\*}
.xx "line discipline." "getty: set" "terminal type, modes, speed, and" "" getty(1M)~\*{SARM\*}
.xx "line discipline." "uugetty: set" "terminal type, modes, speed, and" "" uugetty(1M)~\*{SARM\*}
.xx "line discipline." "vtgetty: sets" "terminal type, modes, speed, and" "" vtgetty(1M)~\*{SARM\*}
.xx "" "/used between host and windowing" "terminal under layers(1)." "" layers(5)~\*{PRM\*}
.xx "" "/used between host and windowing" "terminal under layers(1)." "" layers(5)~\*{SARM\*}
.xx "" "downloader for the 5620 DMD" "terminal." "wtinit: object" wtinit(1M)~\*{SARM\*}
.xx "" "newvt: opens virtual" "terminals." "" newvt(1)~\*{ISDG\*}
.xx "" "newvt: opens virtual" "terminals." "" newvt(1)~\*{URM\*}
.xx "" "term: conventional names for" "terminals." "" term(5)~\*{SARM\*}
.xx "" "layer multiplexor for windowing" "terminals." "layers:" layers(1)~\*{URM\*}
.xx "" "tty driver for AT&T windowing" "terminals." "/multiplexed" xt(7)~\*{SARM\*}
.xx "" "tty driver for AT&T windowing" "terminals." "/multiplexed" xt(7)~\*{STRM\*}
.xx "" "monitors and opens virtual" "terminals." "vtlmgr:" vtlmgr(1)~\*{ISDG\*}
.xx "" "monitors and opens virtual" "terminals." "vtlmgr:" vtlmgr(1)~\*{URM\*}
.xx "" "kill:" "terminate a process by default." "" kill(1)~\*{URM\*}
.xx "" "WIFEXITED: wait for process to" "terminate or stop." "/WIFSIGNALED," wait(3)~\*{BSD\*}
.xx "" "exit, _exit:" "terminate process." "" exit(2)~\*{PRM\*}
.xx "" "for child process to stop or" "terminate." "wait: wait" wait(2)~\*{PRM\*}
.xx "" "atexit: add program" "termination routine." "" atexit(3C)~\*{PRM\*}
.xx "" "abort: generate an abnormal" "termination signal." "" abort(3C)~\*{PRM\*}
.xx "" "tic:" "terminfo compiler." "" tic(1M)~\*{CHAR\*}
.xx "" "tic:" "terminfo compiler." "" tic(1M)~\*{SARM\*}
.xx "" "tigetstr: curses interfaces to" "terminfo database." "/tigetnum," curs_terminfo(3X)~\*{CHAR\*}
.xx "" "initialize a terminal or query" "terminfo database." "tput:" tput(1)~\*{URM\*}
.xx "" "a termcap description into a" "terminfo description." "/convert" captoinfo(1M)~\*{CHAR\*}
.xx "" "a termcap description into a" "terminfo description." "/convert" captoinfo(1M)~\*{SARM\*}
.xx "" "infocmp: compare or print out" "terminfo descriptions." "" infocmp(1M)~\*{CHAR\*}
.xx "" "infocmp: compare or print out" "terminfo descriptions." "" infocmp(1M)~\*{SARM\*}
.xx "data base." "" "terminfo: terminal capability" "" terminfo(4)~\*{CHAR\*}
.xx "data base." "" "terminfo: terminal capability" "" terminfo(4)~\*{SARM\*}
.xx "interface." "" "termio: general terminal" "" termio(7)~\*{SARM\*}
.xx "tcsendbreak, tcdrain, tcflush,/" "" "termios: tcgetattr, tcsetattr," "" termios(2)~\*{PRM\*}
.xx "terminal interface." "" "termiox: extended general" "" termiox(7)~\*{SARM\*}
.xx "" "/killchar, longname, termattrs," "termname: curses environment/" "" curs_termattrs(3X)~\*{CHAR\*}
.xx "" "" "t_error: produce error message." "" t_error(3N)~\*{NI\*}
.xx "" "isastream:" "test a file descriptor." "" isastream(3C)~\*{STRM\*}
.xx "command." "" "test: condition evaluation" "" test(1)~\*{BSD\*}
.xx "command." "" "test: condition evaluation" "" test(1F)~\*{CHAR\*}
.xx "command." "" "test: condition evaluation" "" test(1)~\*{URM\*}
.xx "specified priority/" "bcanput:" "test for flow control in" "" bcanput(D3DK)~\*{DDRM\*}
.xx "stream." "canput:" "test for flow control in a" "" canput(D3DK)~\*{DDRM\*}
.xx "" "SAMESTR:" "test if next queue is same type." "" SAMESTR(D3DK)~\*{DDRM\*}
.xx "message." "datamsg:" "test whether a message is a data" "" datamsg(D3DK)~\*{DDRM\*}
.xx "" "ed, red:" "text editor." "" ed(1)~\*{URM\*}
.xx "" "ex:" "text editor." "" ex(1)~\*{URM\*}
.xx "casual users)." "edit:" "text editor (variant of ex for" "" edit(1)~\*{URM\*}
.xx "" "newform: change the format of a" "text file." "" newform(1)~\*{URM\*}
.xx "" "page: browse or page through a" "text file." "more," more(1)~\*{URM\*}
.xx "" "fspec: format specification in" "text files." "" fspec(4)~\*{SARM\*}
.xx "" "PostScript translator for" "text files." "postprint:" postprint(1)~\*{URM\*}
.xx "" "fmt: simple" "text formatters." "" fmt(1)~\*{URM\*}
.xx "" "ms:" "text formatting macros." "" ms(7)~\*{BSD\*}
.xx "" "into memory or unlock process," "text, or data." "plock: lock" plock(2)~\*{PRM\*}
.xx "" "gettxt: retrieve a" "text string." "" gettxt(3C)~\*{PRM\*}
.xx "base." "gettxt: retrieve a" "text string from a message data" "" gettxt(1)~\*{URM\*}
.xx "" "/contents of, or search for a" "text string in, message data/" "" srchtxt(1)~\*{URM\*}
.xx "binary search trees." "tsearch," "tfind, tdelete, twalk: manage" "" tsearch(3C)~\*{PRM\*}
.xx "structure." "" "t_free: free a library" "" t_free(3N)~\*{NI\*}
.xx "program." "" "tftp: trivial file transfer" "" tftp(1)~\*{NUAG\*}
.xx "program." "" "tftp: trivial file transfer" "" tftp(1)~\*{URM\*}
.xx "Transfer Protocol server." "" "tftpd: DARPA Trivial File" "" tftpd(1M)~\*{NUAG\*}
.xx "Transfer Protocol server." "" "tftpd: DARPA Trivial File" "" tftpd(1M)~\*{SARM\*}
.xx "tgetstr, tgoto,/" "curs_termcap:" "tgetent, tgetflag, tgetnum," "" curs_termcap(3X)~\*{CHAR\*}
.xx "tgoto,/" "curs_termcap:  tgetent," "tgetflag, tgetnum, tgetstr," "" curs_termcap(3X)~\*{CHAR\*}
.xx "service information." "" "t_getinfo: get protocol-specific" "" t_getinfo(3N)~\*{NI\*}
.xx "curses/" "/tgetent, tgetflag," "tgetnum, tgetstr, tgoto, tputs:" "" curs_termcap(3X)~\*{CHAR\*}
.xx "state." "" "t_getstate: get the current" "" t_getstate(3N)~\*{NI\*}
.xx "" "/tgetent, tgetflag, tgetnum," "tgetstr, tgoto, tputs: curses/" "" curs_termcap(3X)~\*{CHAR\*}
.xx "" "/tgetflag, tgetnum, tgetstr," "tgoto, tputs: curses interfaces/" "" curs_termcap(3X)~\*{CHAR\*}
.xx "" "" "tic: terminfo compiler." "" tic(1M)~\*{CHAR\*}
.xx "" "" "tic: terminfo compiler." "" tic(1M)~\*{SARM\*}
.xx "" "for a specified number of clock" "ticks." "/delay process execution" delay(D3DK)~\*{DDRM\*}
.xx "" "convert microseconds to clock" "ticks." "drv_usectohz:" drv_usectohz(D3DK)~\*{DDRM\*}
.xx "" "drv_hztousec: convert clock" "ticks to microseconds." "" drv_hztousec(D3DK)~\*{DDRM\*}
.xx "loopback transport providers." "" "ticlts, ticots, ticotsord:" "" ticlts(7)~\*{NI\*}
.xx "transport providers." "ticlts," "ticots, ticotsord: loopback" "" ticlts(7)~\*{NI\*}
.xx "providers." "ticlts, ticots," "ticotsord: loopback transport" "" ticlts(7)~\*{NI\*}
.xx "" "/putp, vidputs, vidattr, mvcur," "tigetflag, tigetnum, tigetstr:/" "" curs_terminfo(3X)~\*{CHAR\*}
.xx "" "/vidattr, mvcur, tigetflag," "tigetnum, tigetstr: curses/" "" curs_terminfo(3X)~\*{CHAR\*}
.xx "" "/mvcur, tigetflag, tigetnum," "tigetstr: curses interfaces to/" "" curs_terminfo(3X)~\*{CHAR\*}
.xx "" "ftime: get date and" "time." "" ftime(3C)~\*{BSD\*}
.xx "" "stime: set" "time." "" stime(2)~\*{PRM\*}
.xx "" "time: get" "time." "" time(2)~\*{PRM\*}
.xx "" "execute commands at a later" "time." "at, batch:" at(1)~\*{URM\*}
.xx "" "file systems for optimal access" "time." "dcopy (generic): copy" dcopy(1M)~\*{SARM\*}
.xx "" "file systems for optimal access" "time." "dcopy (s5): copy s5" dcopy(1M)~\*{SARM\*}
.xx "" "after a specified length of" "time." "/execute a function" timeout(D3DK)~\*{DDRM\*}
.xx "" "" "time: get time." "" time(2)~\*{PRM\*}
.xx "" "convert user format date and" "time." "getdate:" getdate(3C)~\*{PRM\*}
.xx "" "a tm structure to a calendar" "time." "mktime: converts" mktime(3C)~\*{PRM\*}
.xx "" "up an environment at login" "time." "profile: setting" profile(4)~\*{SARM\*}
.xx "" "get or set the date and" "time." "/settimeofday:" gettimeofday(3)~\*{BSD\*}
.xx "" "get or set the date and" "time." "/settimeofday:" gettimeofday(3C)~\*{PRM\*}
.xx "" "close down the system at a given" "time." "shutdown:" shutdown(1M)~\*{BSD\*}
.xx "" "" "time: time a command." "" time(1)~\*{URM\*}
.xx "after a specified length of/" "" "timeout: execute a function" "" timeout(D3DK)~\*{DDRM\*}
.xx "" "/raw, noraw, noqiflush, qiflush," "timeout, wtimeout, typeahead:/" "" curs_inopts(3X)~\*{CHAR\*}
.xx "" "untimeout: cancel previous" "timeout(D3DK) request." "" untimeout(D3DK)~\*{DDRM\*}
.xx "" "get/set value of interval" "timer." "getitimer, setitimer:" getitimer(3C)~\*{PRM\*}
.xx "" "times: get process" "times." "" times(3C)~\*{BSD\*}
.xx "" "utimes: set file" "times." "" utimes(3)~\*{BSD\*}
.xx "" "jobs queued to run at specified" "times." "atq: display the" atq(1)~\*{URM\*}
.xx "" "difference between two calendar" "times." "difftime: computes the" difftime(3C)~\*{PRM\*}
.xx "process times." "" "times: get process and child" "" times(2)~\*{PRM\*}
.xx "" "" "times: get process times." "" times(3C)~\*{BSD\*}
.xx "" "update access and modification" "times of a file." "touch:" touch(1)~\*{URM\*}
.xx "" "get process and child process" "times." "times:" times(2)~\*{PRM\*}
.xx "" "set file access and modification" "times." "utime:" utime(2)~\*{PRM\*}
.xx "parameter table." "ts_dptbl:" "time-sharing dispatcher" "" ts_dptbl(4)~\*{SARM\*}
.xx "" "nice: change priority of a" "time-sharing process." "" nice(2)~\*{PRM\*}
.xx "process data and system/" "" "timex: time a command; report" "" timex(1)~\*{URM\*}
.xx "given offset from GMT." "" "timezone: get time zone name" "" timezone(3C)~\*{BSD\*}
.xx "time zone." "" "timezone: set default system" "" timezone(4)~\*{PRM\*}
.xx "time zone." "" "timezone: set default system" "" timezone(4)~\*{SARM\*}
.xx "cooperating STREAMS module." "" "timod: Transport Interface" "" timod(7)~\*{STRM\*}
.xx "read/write interface STREAMS/" "" "tirdwr: Transport Interface" "" tirdwr(7)~\*{STRM\*}
.xx "request." "" "t_listen: listen for a connect" "" t_listen(3N)~\*{NI\*}
.xx "event on a transport endpoint." "" "t_look: look at the current" "" t_look(3N)~\*{NI\*}
.xx "" "mktime: converts a" "tm structure to a calendar time." "" mktime(3C)~\*{PRM\*}
.xx "file." "" "tmpfile: create a temporary" "" tmpfile(3S)~\*{PRM\*}
.xx "for a temporary file." "" "tmpnam, tempnam: create a name" "" tmpnam(3S)~\*{PRM\*}
.xx "name server." "" "tnamed, in.tnamed: DARPA trivial" "" tnamed(1M)~\*{NUAG\*}
.xx "name server." "" "tnamed, in.tnamed: DARPA trivial" "" tnamed(1M)~\*{SARM\*}
.xx "" "(write) a curses screen from" "(to) a file." "/scr_set: read" curs_scr_dump(3X)~\*{CHAR\*}
.xx "" "/tolower, _toupper, _tolower," "toascii: translate characters." "" conv(3C)~\*{PRM\*}
.xx "" "popen, pclose: initiate pipe" "to/from a process." "" popen(3S)~\*{PRM\*}
.xx "" "/toupper, tolower, _toupper," "_tolower, toascii: translate/" "" conv(3C)~\*{PRM\*}
.xx "toascii:/" "conv: toupper," "tolower, _toupper, _tolower," "" conv(3C)~\*{PRM\*}
.xx "" "interface menu or task removal" "tool." "delsysadm: sysadm" delsysadm(1M)~\*{ISDG\*}
.xx "" "interface menu or task removal" "tool." "delsysadm: sysadm" delsysadm(1M)~\*{SARM\*}
.xx "" "sysadm interface editing" "tool." "edsysadm:" edsysadm(1M)~\*{ISDG\*}
.xx "" "sysadm interface editing" "tool." "edsysadm:" edsysadm(1M)~\*{SARM\*}
.xx "endpoint." "" "t_open: establish a transport" "" t_open(3N)~\*{NI\*}
.xx "" "tsort:" "topological sort." "" tsort(1)~\*{PRM\*}
.xx "deck manipulation/" "panel_top:" "top_panel, bottom_panel: panels" "" panel_top(3X)~\*{CHAR\*}
.xx "" "/current_item, set_top_row," "top_row, item_index: set and get/" "" menu_item_current(3X)~\*{CHAR\*}
.xx "transport endpoint." "" "t_optmgmt: manage options for a" "" t_optmgmt(3N)~\*{NI\*}
.xx "" "" "tosmtp: send mail to SMTP." "" tosmtp(1M)~\*{SARM\*}
.xx "" "acctmerg: merge or add" "total accounting files." "" acctmerg(1M)~\*{SARM\*}
.xx "modification times of a file." "" "touch: update access and" "" touch(1)~\*{URM\*}
.xx "" "curs_touch:  touchwin," "touchline, untouchwin, wtouchln,/" "" curs_touch(3X)~\*{CHAR\*}
.xx "wtouchln,/" "curs_touch:" "touchwin, touchline, untouchwin," "" curs_touch(3X)~\*{CHAR\*}
.xx "" "conv: toupper, tolower," "_toupper, _tolower, toascii:/" "" conv(3C)~\*{PRM\*}
.xx "_tolower, toascii:/" "conv:" "toupper, tolower, _toupper," "" conv(3C)~\*{PRM\*}
.xx "" "/del_curterm, restartterm," "tparm, tputs, putp, vidputs,/" "" curs_terminfo(3X)~\*{CHAR\*}
.xx "query terminfo database." "" "tput: initialize a terminal or" "" tput(1)~\*{URM\*}
.xx "" "/tgetnum, tgetstr, tgoto," "tputs: curses interfaces/" "" curs_termcap(3X)~\*{CHAR\*}
.xx "" "/del_curterm, restartterm, tparm," "tputs, putp, vidputs, vidattr,/" "" curs_terminfo(3X)~\*{CHAR\*}
.xx "" "" "tr: translate characters." "" tr(1)~\*{BSD\*}
.xx "" "" "tr: translate characters." "" tr(1)~\*{URM\*}
.xx "" "ptrace: process" "trace." "" ptrace(2)~\*{PRM\*}
.xx "" "trpt: transliterate protocol" "trace." "" trpt(1M)~\*{NUAG\*}
.xx "" "trpt: transliterate protocol" "trace." "" trpt(1M)~\*{SARM\*}
.xx "" "strace: print STREAMS" "trace messages." "" strace(1M)~\*{SARM\*}
.xx "" "strace: print STREAMS" "trace messages." "" strace(1M)~\*{STRM\*}
.xx "" "truss:" "trace system calls and signals." "" truss(1)~\*{URM\*}
.xx "" "and print xt driver packet" "traces." "xtt: extract" xtt(1M)~\*{SARM\*}
.xx "" "STREAMS error logging and event" "tracing." "log: interface to" log(7)~\*{STRM\*}
.xx "" "format: format floppy disk" "tracks." "" format(1M)~\*{SARM\*}
.xx "" "not part of any request-response" "transaction." "/data that is" mps_AMPsend_data(D3D)~\*{DDRM\*}
.xx "" "frees a previously allocated" "transaction id." "mps_free_tid:" mps_free_tid(D3D)~\*{DDRM\*}
.xx "" "mps_get_tid: allocates" "transaction ids." "" mps_get_tid(D3D)~\*{DDRM\*}
.xx "" "not part of any request-response" "transaction." "/messages that are" mps_AMPsend(D3D)~\*{DDRM\*}
.xx "" "cancels an ongoing rsvp" "transaction." "mps_AMPcancel:" mps_AMPcancel(D3D)~\*{DDRM\*}
.xx "" "is part of a request-response" "transaction." "/request that" mps_AMPsend_reply(D3D)~\*{DDRM\*}
.xx "asynchronous/" "mb2a_send: Sends a" "transactionless message in" "" mb2a_send(3tai)~\*{MBTAI\*}
.xx "synchronous/" "mb2s_send: Sends a" "transactionless message in" "" mb2s_send(3tai)~\*{MBTAI\*}
.xx "" "to initiate a solicited data" "transfer." "/a message to be sent" mps_mk_sol(D3D)~\*{DDRM\*}
.xx "" "/determine best" "transfer mode for DMA command." "" dma_get_best_mode(D3X)~\*{DDRM\*}
.xx "" "ftp: file" "transfer program." "" ftp(1)~\*{NUAG\*}
.xx "" "ftp: file" "transfer program." "" ftp(1)~\*{URM\*}
.xx "" "tftp: trivial file" "transfer program." "" tftp(1)~\*{NUAG\*}
.xx "" "tftp: trivial file" "transfer program." "" tftp(1)~\*{URM\*}
.xx "" "ftpd: file" "transfer protocol server." "" ftpd(1M)~\*{NUAG\*}
.xx "" "ftpd: file" "transfer protocol server." "" ftpd(1M)~\*{SARM\*}
.xx "" "tftpd: DARPA Trivial File" "Transfer Protocol server." "" tftpd(1M)~\*{NUAG\*}
.xx "" "tftpd: DARPA Trivial File" "Transfer Protocol server." "" tftpd(1M)~\*{SARM\*}
.xx "" "a remote host using Simple Mail" "Transfer Protocol." "/SMTP mail to" smtp(1M)~\*{SARM\*}
.xx "system." "pkgadd:" "transfer software package to the" "" pkgadd(1M)~\*{ISDG\*}
.xx "system." "pkgadd:" "transfer software package to the" "" pkgadd(1M)~\*{SARM\*}
.xx "" "buf: block I/O data" "transfer structure." "" buf(D4DK)~\*{DDRM\*}
.xx "to host." "ypxfr:" "transfer YP map from a YP server" "" ypxfr(1M)~\*{NI\*}
.xx "" "strxfrm: string" "transformation." "" strxfrm(3C)~\*{PRM\*}
.xx "" "tam: TAM" "transition libraries." "" tam(3X)~\*{CHAR\*}
.xx "" "trchan:" "translate character sets." "" trchan(1)~\*{URM\*}
.xx "" "tr:" "translate characters." "" tr(1)~\*{BSD\*}
.xx "" "tr:" "translate characters." "" tr(1)~\*{URM\*}
.xx "" "_toupper, _tolower, toascii:" "translate characters." "/tolower," conv(3C)~\*{PRM\*}
.xx "" "mailalias:" "translate mail alias names." "" mailalias(1)~\*{URM\*}
.xx "" "pkgtrans:" "translate package format." "" pkgtrans(1)~\*{ISDG\*}
.xx "" "pkgtrans:" "translate package format." "" pkgtrans(1)~\*{SARM\*}
.xx "physical address/" "sdi_translate:" "translate scb virtual to" "" sdi_translate(D3I)~\*{SCSI\*}
.xx "" "cof2elf: COFF to ELF object file" "translation." "" cof2elf(1)~\*{PRM\*}
.xx "" "class-dependent data" "translation." "/elf32_xlatetom:" elf_xlate(3E)~\*{PRM\*}
.xx "" "transport name-to-address" "translation." "/generic" netdir(3N)~\*{NI\*}
.xx "" "postdaisy: PostScript" "translator for Diablo 630 files." "" postdaisy(1)~\*{URM\*}
.xx "" "postdmd: PostScript" "translator for DMD bitmap files." "" postdmd(1)~\*{URM\*}
.xx "files." "postplot: PostScript" "translator for plot graphics" "" postplot(1)~\*{URM\*}
.xx "files." "posttek: PostScript" "translator for tektronix 4014" "" posttek(1)~\*{URM\*}
.xx "" "postprint: PostScript" "translator for text files." "" postprint(1)~\*{URM\*}
.xx "" "trpt:" "transliterate protocol trace." "" trpt(1M)~\*{NUAG\*}
.xx "" "trpt:" "transliterate protocol trace." "" trpt(1M)~\*{SARM\*}
.xx "" "/queues request messages for" "transmission and sets up table/" "" mps_AMPsend_rsvp(D3D)~\*{DDRM\*}
.xx "" "TCP: Internet" "Transmission Control Protocol." "" TCP(7)~\*{NI\*}
.xx "" "TCP: Internet" "Transmission Control Protocol." "" TCP(7)~\*{NUAG\*}
.xx "" "TCP: Internet" "Transmission Control Protocol." "" TCP(7)~\*{SARM\*}
.xx "structure." "copyreq: STREAMS" "transparent ioctl copy request" "" copyreq(D4DK)~\*{DDRM\*}
.xx "structure." "copyresp: STREAMS" "transparent ioctl copy response" "" copyresp(D4DK)~\*{DDRM\*}
.xx "" "mpscnv: Convert" "transport code." "" mpscnv(1iref)~\*{MBRMAN\*}
.xx "" "/Closes a synchronous Multibus II" "transport endpoint." "" mb2s_closeport(3tai)~\*{MBTAI\*}
.xx "" "/Opens a synchronous Multibus II" "transport endpoint." "" mb2s_openport(3tai)~\*{MBTAI\*}
.xx "" "t_bind: bind an address to a" "transport endpoint." "" t_bind(3N)~\*{NI\*}
.xx "" "t_close: close a" "transport endpoint." "" t_close(3N)~\*{NI\*}
.xx "" "t_open: establish a" "transport endpoint." "" t_open(3N)~\*{NI\*}
.xx "" "t_optmgmt: manage options for a" "transport endpoint." "" t_optmgmt(3N)~\*{NI\*}
.xx "" "t_unbind: disable a" "transport endpoint." "" t_unbind(3N)~\*{NI\*}
.xx "" "an asynchronous Multibus II" "transport endpoint." "/Closes" mb2a_closeport(3tai)~\*{MBTAI\*}
.xx "" "an asynchronous Multibus II" "transport endpoint." "/Opens" mb2a_openport(3tai)~\*{MBTAI\*}
.xx "" "look at the current event on a" "transport endpoint." "t_look:" t_look(3N)~\*{NI\*}
.xx "STREAMS module." "timod:" "Transport Interface cooperating" "" timod(7)~\*{STRM\*}
.xx "interface STREAMS/" "tirdwr:" "Transport Interface read/write" "" tirdwr(7)~\*{STRM\*}
.xx "" "t_sync: synchronize" "transport library." "" t_sync(3N)~\*{NI\*}
.xx "" "/netdir_sperror: generic" "transport name-to-address/" "" netdir(3N)~\*{NI\*}
.xx "" "commands for routing and" "transport of mail." "/surrogate" mailsurr(4)~\*{SARM\*}
.xx "system." "uucico: file" "transport program for the uucp" "" uucico(1M)~\*{SARM\*}
.xx "" "the scheduler for the uucp file" "transport program." "uusched:" uusched(1M)~\*{SARM\*}
.xx "" "nlsprovider: get name of" "transport provider." "" nlsprovider(3N)~\*{NI\*}
.xx "" "ticots, ticotsord: loopback" "transport providers." "ticlts," ticlts(7)~\*{NI\*}
.xx "" "/System V/386 Release 4.0 OSI" "Transport Service (ots) device/" "" ots(7iref)~\*{MBRMAN\*}
.xx "" "a connection with another" "transport user." "/establish" t_connect(3N)~\*{NI\*}
.xx "" "ieee_handler: IEEE exception" "trap handler function." "" ieee_handler(3M)~\*{BSD\*}
.xx "" "/panel_below: panels deck" "traversal primitives." "" panel_above(3X)~\*{CHAR\*}
.xx "sets." "" "trchan: translate character" "" trchan(1)~\*{URM\*}
.xx "data sent over a connection." "" "t_rcv: receive data or expedited" "" t_rcv(3N)~\*{NI\*}
.xx "confirmation from a connect/" "" "t_rcvconnect: receive the" "" t_rcvconnect(3N)~\*{NI\*}
.xx "from disconnect." "" "t_rcvdis: retrieve information" "" t_rcvdis(3N)~\*{NI\*}
.xx "an orderly release indication." "" "t_rcvrel: acknowledge receipt of" "" t_rcvrel(3N)~\*{NI\*}
.xx "" "" "t_rcvudata: receive a data unit." "" t_rcvudata(3N)~\*{NI\*}
.xx "error indication." "" "t_rcvuderr: receive a unit data" "" t_rcvuderr(3N)~\*{NI\*}
.xx "" "ftw, nftw: walk a file" "tree." "" ftw(3C)~\*{PRM\*}
.xx "" "twalk: manage binary search" "trees." "tsearch, tfind, tdelete," tsearch(3C)~\*{PRM\*}
.xx "tanf, asin, asinf, acos, acosf,/" "" "trig: sin, sinf, cos, cosf, tan," "" trig(3M)~\*{PRM\*}
.xx "" "atan, atanf, atan2, atan2f:" "trigonometric functions." "/acosf," trig(3M)~\*{PRM\*}
.xx "" "adjmsg:" "trim bytes from a message." "" adjmsg(D3DK)~\*{DDRM\*}
.xx "" "tftp:" "trivial file transfer program." "" tftp(1)~\*{NUAG\*}
.xx "" "tftp:" "trivial file transfer program." "" tftp(1)~\*{URM\*}
.xx "server." "tftpd: DARPA" "Trivial File Transfer Protocol" "" tftpd(1M)~\*{NUAG\*}
.xx "server." "tftpd: DARPA" "Trivial File Transfer Protocol" "" tftpd(1M)~\*{SARM\*}
.xx "" "tnamed, in.tnamed: DARPA" "trivial name server." "" tnamed(1M)~\*{NUAG\*}
.xx "" "tnamed, in.tnamed: DARPA" "trivial name server." "" tnamed(1M)~\*{SARM\*}
.xx "" "tbl: format tables for nroff or" "troff." "" tbl(1)~\*{BSD\*}
.xx "" ".so requests from nroff or" "troff input." "/and eliminate" soelim(1)~\*{BSD\*}
.xx "" "between versions of a" "troff input file." "/differences" diffmk(1)~\*{BSD\*}
.xx "" "checknr: check nroff and" "troff input files; report/" "" checknr(1)~\*{BSD\*}
.xx "PostScript printers." "dpost:" "troff postprocessor for" "" dpost(1)~\*{URM\*}
.xx "" "deroff: remove nroff," "troff, tbl and eqn constructs." "" deroff(1)~\*{BSD\*}
.xx "documents." "" "troff: typeset or format" "" troff(1)~\*{BSD\*}
.xx "trace." "" "trpt: transliterate protocol" "" trpt(1M)~\*{NUAG\*}
.xx "trace." "" "trpt: transliterate protocol" "" trpt(1M)~\*{SARM\*}
.xx "values." "" "true, false: provide truth" "" true(1)~\*{URM\*}
.xx "to a specified length." "" "truncate, ftruncate: set a file" "" truncate(3C)~\*{PRM\*}
.xx "signals." "" "truss: trace system calls and" "" truss(1)~\*{URM\*}
.xx "user." "hosts.equiv, .rhosts:" "trusted hosts by system and by" "" hosts.equiv(4)~\*{NUAG\*}
.xx "user." "hosts.equiv, .rhosts:" "trusted hosts by system and by" "" hosts.equiv(4)~\*{SARM\*}
.xx "" "machid: get processor type" "truth value." "" machid(1)~\*{URM\*}
.xx "" "true, false: provide" "truth values." "" true(1)~\*{URM\*}
.xx "with debugging on." "Uutry:" "try to contact remote system" "" Uutry(1M)~\*{SARM\*}
.xx "dispatcher parameter table." "" "ts_dptbl: time-sharing" "" ts_dptbl(4)~\*{SARM\*}
.xx "manage binary search trees." "" "tsearch, tfind, tdelete, twalk:" "" tsearch(3C)~\*{PRM\*}
.xx "setting terminal modes." "" "tset: provide information for" "" tset(1)~\*{ACG\*}
.xx "terminal modes." "" "tset: provide information to set" "" tset(1)~\*{URM\*}
.xx "restore terminal/" "" "tset, reset: establish or" "" tset(1)~\*{BSD\*}
.xx "data over a connection." "" "t_snd: send data or expedited" "" t_snd(3N)~\*{NI\*}
.xx "disconnect request." "" "t_snddis: send user-initiated" "" t_snddis(3N)~\*{NI\*}
.xx "release." "" "t_sndrel: initiate an orderly" "" t_sndrel(3N)~\*{NI\*}
.xx "" "" "t_sndudata: send a data unit." "" t_sndudata(3N)~\*{NI\*}
.xx "" "" "tsort: topological sort." "" tsort(1)~\*{PRM\*}
.xx "library." "" "t_sync: synchronize transport" "" t_sync(3N)~\*{NI\*}
.xx "STREAMS compatibility module." "" "ttcompat: V7, 4BSD and XENIX" "" ttcompat(7)~\*{SARM\*}
.xx "interface." "" "tty: controlling terminal" "" tty(7)~\*{SARM\*}
.xx "" "mapchan: Configure" "tty device mapping." "" mapchan(1M)~\*{SARM\*}
.xx "" "mapchan: Format of" "tty device mapping files." "" mapchan(4)~\*{SARM\*}
.xx "" "xt: STREAMS-based multiplexed" "tty driver for AT&T windowing/" "" xt(7)~\*{SARM\*}
.xx "" "xt: STREAMS-based multiplexed" "tty driver for AT&T windowing/" "" xt(7)~\*{STRM\*}
.xx "terminal." "" "tty: get the name of the" "" tty(1)~\*{URM\*}
.xx "" "settings and hunt sequences for" "TTY ports." "/maintain line" sttydefs(1M)~\*{SARM\*}
.xx "monitor-specific information." "" "ttyadm: format and output port" "" ttyadm(1M)~\*{SARM\*}
.xx "line settings information for/" "" "ttydefs: file contains terminal" "" ttydefs(4)~\*{NI\*}
.xx "" "line settings information for" "ttymon." "/file contains terminal" ttydefs(4)~\*{NI\*}
.xx "terminal ports." "" "ttymon: port monitor for" "" ttymon(1M)~\*{SARM\*}
.xx "terminal." "" "ttyname, isatty: find name of a" "" ttyname(3C)~\*{PRM\*}
.xx "" "directory search list for" "ttyname." "ttysrch:" ttysrch(4)~\*{SARM\*}
.xx "utmp file of the current user." "" "ttyslot: find the slot in the" "" ttyslot(3C)~\*{PRM\*}
.xx "for ttyname." "" "ttysrch: directory search list" "" ttysrch(4)~\*{SARM\*}
.xx "new host on the communications/" "" "ttyswitch: switches a line to a" "" ttyswitch(1iref)~\*{MBRMAN\*}
.xx "" "attempts to set value of a" "tunable parameter." "idtune:" idtune(1M)~\*{ISDG\*}
.xx "" "attempts to set value of a" "tunable parameter." "idtune:" idtune(1M)~\*{SARM\*}
.xx "endpoint." "" "t_unbind: disable a transport" "" t_unbind(3N)~\*{NI\*}
.xx "" "tunefs:" "tune up an existing file system." "" tunefs(1M)~\*{SARM\*}
.xx "system." "" "tunefs: tune up an existing file" "" tunefs(1M)~\*{SARM\*}
.xx "off." "quotaon, quotaoff:" "turn file system quotas on and" "" quotaon(1M)~\*{SARM\*}
.xx "" "/runacct, shutacct, startup," "turnacct: shell procedures for/" "" acctsh(1M)~\*{SARM\*}
.xx "trees." "tsearch, tfind, tdelete," "twalk: manage binary search" "" tsearch(3C)~\*{PRM\*}
.xx "" "elf_kind: determine file" "type." "" elf_kind(3E)~\*{PRM\*}
.xx "" "file: determine file" "type." "" file(1)~\*{URM\*}
.xx "" "the size of an object file" "type." "/elf32_fsize: return" elf_fsize(3E)~\*{PRM\*}
.xx "" "(generic): determine file system" "type." "fstyp" fstyp(1M)~\*{SARM\*}
.xx "" "sysfs: get file system" "type information." "" sysfs(2)~\*{PRM\*}
.xx "discipline." "getty: set terminal" "type, modes, speed, and line" "" getty(1M)~\*{SARM\*}
.xx "" "uugetty: set terminal" "type, modes, speed, and line/" "" uugetty(1M)~\*{SARM\*}
.xx "" "vtgetty: sets terminal" "type, modes, speed, and line/" "" vtgetty(1M)~\*{SARM\*}
.xx "" "/unordered, unorderedl: determine" "type of floating-point number." "" isnan(3C)~\*{PRM\*}
.xx "" "mach: display the processor" "type of the current host." "" mach(1)~\*{BSD\*}
.xx "" "test if next queue is same" "type." "SAMESTR:" SAMESTR(D3DK)~\*{DDRM\*}
.xx "" "machid: get processor" "type truth value." "" machid(1)~\*{URM\*}
.xx "" "field_arg: forms field data" "type validation." "/field_type," form_field_validation(3X)~\*{CHAR\*}
.xx "" "/qiflush, timeout, wtimeout," "typeahead: curses terminal input/" "" curs_inopts(3X)~\*{CHAR\*}
.xx "" "nl_types: native language data" "types." "" nl_types(5)~\*{PRM\*}
.xx "" "nl_types: native language data" "types." "" nl_types(5)~\*{SARM\*}
.xx "" "types: primitive system data" "types." "" types(5)~\*{PRM\*}
.xx "" "/checks for certain board" "types in the designated slot." "" ics_agent_cmp(D3D)~\*{DDRM\*}
.xx "types." "" "types: primitive system data" "" types(5)~\*{PRM\*}
.xx "session." "script: make" "typescript of a terminal" "" script(1)~\*{URM\*}
.xx "" "eqn, neqn, checkeq:" "typeset mathematics." "" eqn(1)~\*{BSD\*}
.xx "" "troff:" "typeset or format documents." "" troff(1)~\*{BSD\*}
.xx "" "/localtime, gmtime, asctime," "tzset: convert date and time to/" "" ctime(3C)~\*{PRM\*}
.xx "" "/netdir_mergeaddr, taddr2uaddr," "uaddr2taddr, netdir_perror,/" "" netdir(3N)~\*{NI\*}
.xx "" "" "uadmin: administrative control." "" uadmin(1M)~\*{SARM\*}
.xx "" "" "uadmin: administrative control." "" uadmin(2)~\*{PRM\*}
.xx "interval in microseconds." "" "ualarm: schedule signal after" "" ualarm(3)~\*{BSD\*}
.xx "" "" "ucontext: user context." "" ucontext(5)~\*{PRM\*}
.xx "Protocol." "" "UDP: Internet User Datagram" "" UDP(7)~\*{NI\*}
.xx "Protocol." "" "UDP: Internet User Datagram" "" UDP(7)~\*{NUAG\*}
.xx "Protocol." "" "UDP: Internet User Datagram" "" UDP(7)~\*{SARM\*}
.xx "system." "mkfs" "(ufs): construct a ufs file" "" mkfs(1M)~\*{SARM\*}
.xx "" "dir (ufs): format of" "ufs directories." "" dir(4)~\*{SARM\*}
.xx "" "mkfs (ufs): construct a" "ufs file system." "" mkfs(1M)~\*{SARM\*}
.xx "check and interactive/" "fsck" "(ufs): file system consistency" "" fsck(1M)~\*{SARM\*}
.xx "" "fsdb (ufs):" "ufs file system debugger." "" fsdb(1M)~\*{SARM\*}
.xx "" "file names and statistics for a" "ufs file system." "ff (ufs): list" ff(1M)~\*{SARM\*}
.xx "" "(ufs): make a literal copy of a" "ufs file system." "volcopy" volcopy(1M)~\*{SARM\*}
.xx "" "fs (ufs): format of" "ufs file system volume." "" fs(4)~\*{SARM\*}
.xx "" "mount (ufs): mount" "ufs file systems." "" mount(1M)~\*{SARM\*}
.xx "" "(ufs): report free disk space on" "ufs file systems." "df" df(1M)~\*{SARM\*}
.xx "" "pathnames versus i-numbers for" "ufs file systems." "/generate" ncheck(1M)~\*{SARM\*}
.xx "" "(ufs): provide labels for" "ufs file systems." "labelit" labelit(1M)~\*{SARM\*}
.xx "" "inode" "(ufs): format of a ufs inode." "" inode(4)~\*{SARM\*}
.xx "directories." "dir" "(ufs): format of ufs" "" dir(4)~\*{SARM\*}
.xx "volume." "fs" "(ufs): format of ufs file system" "" fs(4)~\*{SARM\*}
.xx "i-numbers for ufs file/" "ncheck" "(ufs): generate pathnames versus" "" ncheck(1M)~\*{SARM\*}
.xx "" "inode (ufs): format of a" "ufs inode." "" inode(4)~\*{SARM\*}
.xx "statistics for a ufs file/" "ff" "(ufs): list file names and" "" ff(1M)~\*{SARM\*}
.xx "ufs file system." "volcopy" "(ufs): make a literal copy of a" "" volcopy(1M)~\*{SARM\*}
.xx "" "mount" "(ufs): mount ufs file systems." "" mount(1M)~\*{SARM\*}
.xx "file systems." "labelit" "(ufs): provide labels for ufs" "" labelit(1M)~\*{SARM\*}
.xx "ufs file systems." "df" "(ufs): report free disk space on" "" df(1M)~\*{SARM\*}
.xx "" "fsdb" "(ufs): ufs file system debugger." "" fsdb(1M)~\*{SARM\*}
.xx "dump." "" "ufsdump: incremental file system" "" ufsdump(1M)~\*{SARM\*}
.xx "system restore." "" "ufsrestore: incremental file" "" ufsrestore(1M)~\*{SARM\*}
.xx "" "getpw: get name from" "UID." "" getpw(3C)~\*{PRM\*}
.xx "structure." "" "uio: scatter/gather I/O request" "" uio(D4DK)~\*{DDRM\*}
.xx "" "storage structure for I/O using" "uio(D4DK)." "iovec: data" iovec(D4DK)~\*{DDRM\*}
.xx "" "uiomove: copy data using" "uio(D4DK) structure." "" uiomove(D3DK)~\*{DDRM\*}
.xx "" "from space described by" "uio(D4DK) structure." "/character" uwritec(D3DK)~\*{DDRM\*}
.xx "" "character to space described by" "uio(D4DK) structure." "/copy a" ureadc(D3DK)~\*{DDRM\*}
.xx "uio(D4DK) structure." "" "uiomove: copy data using" "" uiomove(D3DK)~\*{DDRM\*}
.xx "" "" "ul: underline." "" ul(1)~\*{BSD\*}
.xx "" "/endspent, fgetspent, lckpwdf," "ulckpwdf: manipulate shadow/" "" getspent(3C)~\*{PRM\*}
.xx "" "" "ulimit: get and set user limits." "" ulimit(2)~\*{PRM\*}
.xx "mask." "" "umask: set and get file creation" "" umask(2)~\*{PRM\*}
.xx "mask." "" "umask: set file-creation mode" "" umask(1)~\*{URM\*}
.xx "systems and remote/" "mount," "umount: mount or unmount file" "" mount(1M)~\*{SARM\*}
.xx "" "" "umount: unmount a file system." "" umount(2)~\*{PRM\*}
.xx "multiple file/" "mountall," "umountall: mount, unmount" "" mountall(1M)~\*{SARM\*}
.xx "file system." "mountfsys," "umountfsys: mount, unmount a" "" mountfsys(1M)~\*{SARM\*}
.xx "system." "" "uname: get name of current UNIX" "" uname(2)~\*{PRM\*}
.xx "UNIX system." "" "uname: print name of current" "" uname(1)~\*{URM\*}
.xx "" "unshare: make local NFS resource" "unavailable for mounting by/" "" unshare(1M)~\*{NUAG\*}
.xx "" "unshare: make local NFS resource" "unavailable for mounting by/" "" unshare(1M)~\*{SARM\*}
.xx "line on the/" "cciunbind:" "unbinds a line discipline from a" "" cciunbind(1iref)~\*{MBRMAN\*}
.xx "bufcall request." "" "unbufcall: cancel a pending" "" unbufcall(D3DK)~\*{DDRM\*}
.xx "" "/zcat: compress data for storage," "uncompress and display/" "" compress(1)~\*{URM\*}
.xx "for storage,/" "compress," "uncompress, zcat: compress data" "" compress(1)~\*{URM\*}
.xx "use_env, putwin,/" "curs_util:" "unctrl, keyname, filter," "" curs_util(3X)~\*{CHAR\*}
.xx "" "ul:" "underline." "" ul(1)~\*{BSD\*}
.xx "file." "unget:" "undo a previous get of an SCCS" "" unget(1)~\*{PRM\*}
.xx "SCCS file." "" "unget: undo a previous get of an" "" unget(1)~\*{PRM\*}
.xx "input stream." "" "ungetc: push character back onto" "" ungetc(3S)~\*{PRM\*}
.xx "" "/wgetch, mvgetch, mvwgetch," "ungetch: get (or push back)/" "" curs_getch(3X)~\*{CHAR\*}
.xx "ifdef'ed lines from C program/" "" "unifdef: resolve and remove" "" unifdef(1)~\*{BSD\*}
.xx "" "seed48, lcong48: generate" "uniformly distributed/" "/srand48," drand48(3C)~\*{PRM\*}
.xx "" "elf_rawfile: retrieve" "uninterpreted file contents." "" elf_rawfile(3E)~\*{PRM\*}
.xx "file." "" "uniq: report repeated lines in a" "" uniq(1)~\*{URM\*}
.xx "" "mkstemp: make a" "unique file name." "" mkstemp(3)~\*{BSD\*}
.xx "" "mktemp: make a" "unique file name." "" mktemp(3C)~\*{PRM\*}
.xx "host." "gethostid: get" "unique identifier of current" "" gethostid(3)~\*{BSD\*}
.xx "" "connld: line discipline for" "unique stream connections." "" connld(7)~\*{STRM\*}
.xx "constants." "" "unistd: header file for symbolic" "" unistd(4)~\*{SARM\*}
.xx "" "t_rcvudata: receive a data" "unit." "" t_rcvudata(3N)~\*{NI\*}
.xx "" "t_sndudata: send a data" "unit." "" t_sndudata(3N)~\*{NI\*}
.xx "" "t_rcvuderr: receive a" "unit data error indication." "" t_rcvuderr(3N)~\*{NI\*}
.xx "" "" "units: conversion program." "" units(1)~\*{URM\*}
.xx "" "an I/O request into manageable" "units." "dma_pageio: break up" dma_pageio(D3D)~\*{DDRM\*}
.xx "program number mapper." "rpcbind:" "universal addresses to RPC" "" rpcbind(1M)~\*{NI\*}
.xx "program number mapper." "rpcbind:" "universal addresses to RPC" "" rpcbind(1M)~\*{NUAG\*}
.xx "" "specific portions of certain" "UNIX or XENIX packages." "/install" custom(1)~\*{ACG\*}
.xx "" "install specific portions of a" "UNIX package." "custom:" custom(1M)~\*{SARM\*}
.xx "" "cu: call another" "UNIX system." "" cu(1C)~\*{URM\*}
.xx "" "uname: print name of current" "UNIX system." "" uname(1)~\*{URM\*}
.xx "" "uname: get name of current" "UNIX system." "" uname(2)~\*{PRM\*}
.xx "" "boot:" "UNIX system boot program." "" boot(1M)~\*{SARM\*}
.xx "" "idbuild: build new" "UNIX System kernel." "" idbuild(1M)~\*{ISDG\*}
.xx "" "idbuild: build new" "UNIX System kernel." "" idbuild(1M)~\*{SARM\*}
.xx "" "idmkunix: build new" "UNIX System kernel." "" idmkunix(1M)~\*{ISDG\*}
.xx "" "idmkunix: build new" "UNIX System kernel." "" idmkunix(1M)~\*{SARM\*}
.xx "" "/returns the size of the active" "UNIX System partition." "" partsize(1M)~\*{SARM\*}
.xx "" "prfstat, prfdc, prfsnap, prfpr:" "UNIX system profiler." "/prfld," profiler(1M)~\*{SARM\*}
.xx "" "service grades available on this" "UNIX system." "uuglist: list" uuglist(1C)~\*{URM\*}
.xx "" "/alters executables to call SCO" "UNIX System V/386 Release/" "" fixshlib(1M)~\*{ACG\*}
.xx "execution." "uux:" "UNIX-to-UNIX system command" "" uux(1C)~\*{URM\*}
.xx "" "uucp, uulog, uuname:" "UNIX-to-UNIX system copy." "" uucp(1C)~\*{URM\*}
.xx "" "uuto, uupick: public" "UNIX-to-UNIX system file copy." "" uuto(1C)~\*{URM\*}
.xx "" "link, unlink: link and" "unlink files and directories." "" link(1M)~\*{SARM\*}
.xx "and directories." "link," "unlink: link and unlink files" "" link(1M)~\*{SARM\*}
.xx "" "" "unlink: remove directory entry." "" unlink(2)~\*{PRM\*}
.xx "from the head of a message." "" "unlinkb: remove a message block" "" unlinkb(D3DK)~\*{DDRM\*}
.xx "or writing." "locking: lock or" "unlock a file region for reading" "" locking(2)~\*{ACG\*}
.xx "master/slave pair." "unlockpt:" "unlock a pseudo-terminal" "" unlockpt(3C)~\*{STRM\*}
.xx "" "mlockall, munlockall: lock or" "unlock address space." "" mlockall(3C)~\*{PRM\*}
.xx "" "mlock, munlock: lock (or" "unlock) pages in memory." "" mlock(3C)~\*{PRM\*}
.xx "" "plock: lock into memory or" "unlock process, text, or data." "" plock(2)~\*{PRM\*}
.xx "pseudo-terminal master/slave/" "" "unlockpt: unlock a" "" unlockpt(3C)~\*{STRM\*}
.xx "" "munmap:" "unmap pages of memory." "" munmap(2)~\*{PRM\*}
.xx "" "mountfsys, umountfsys: mount," "unmount a file system." "" mountfsys(1M)~\*{SARM\*}
.xx "" "umount:" "unmount a file system." "" umount(2)~\*{PRM\*}
.xx "" "mount, umount: mount or" "unmount file systems and remote/" "" mount(1M)~\*{SARM\*}
.xx "" "mountall, umountall: mount," "unmount multiple file systems." "" mountall(1M)~\*{SARM\*}
.xx "" "fumount: forced" "unmount of advertised resources." "" fumount(1M)~\*{NUAG\*}
.xx "" "fumount: forced" "unmount of advertised resources." "" fumount(1M)~\*{SARM\*}
.xx "" "rmountall, rumountall: mount," "unmount Remote File Sharing/" "" rmountall(1M)~\*{NUAG\*}
.xx "" "rmountall, rumountall: mount," "unmount Remote File Sharing/" "" rmountall(1M)~\*{SARM\*}
.xx "" "/finitel, fpclass, fpclassl," "unordered, unorderedl: determine/" "" isnan(3C)~\*{PRM\*}
.xx "" "/fpclass, fpclassl, unordered," "unorderedl: determine type of/" "" isnan(3C)~\*{PRM\*}
.xx "files." "pack, pcat," "unpack: compress and expand" "" pack(1)~\*{URM\*}
.xx "forms/" "form_post:  post_form," "unpost_form: write or erase" "" form_post(3X)~\*{CHAR\*}
.xx "menus/" "menu_post:  post_menu," "unpost_menu: write or erase" "" menu_post(3X)~\*{CHAR\*}
.xx "environment/" "set, unset: set and" "unset local or global" "" set(1F)~\*{CHAR\*}
.xx "global environment/" "set," "unset: set and unset local or" "" set(1F)~\*{CHAR\*}
.xx "unavailable for mounting by/" "" "unshare: make local NFS resource" "" unshare(1M)~\*{NUAG\*}
.xx "unavailable for mounting by/" "" "unshare: make local NFS resource" "" unshare(1M)~\*{SARM\*}
.xx "unavailable for mounting by/" "" "unshare: make local resource" "" unshare(1M)~\*{NUAG\*}
.xx "unavailable for mounting by/" "" "unshare: make local resource" "" unshare(1M)~\*{SARM\*}
.xx "unavailable for mounting by/" "" "unshare: make local RFS resource" "" unshare(1M)~\*{NUAG\*}
.xx "unavailable for mounting by/" "" "unshare: make local RFS resource" "" unshare(1M)~\*{SARM\*}
.xx "" "shareall, unshareall: share," "unshare multiple resources." "" shareall(1M)~\*{NUAG\*}
.xx "" "shareall, unshareall: share," "unshare multiple resources." "" shareall(1M)~\*{SARM\*}
.xx "multiple resources." "shareall," "unshareall: share, unshare" "" shareall(1M)~\*{NUAG\*}
.xx "multiple resources." "shareall," "unshareall: share, unshare" "" shareall(1M)~\*{SARM\*}
.xx "" "mps_mk_unsol: constructs an" "unsolicited message to be sent." "" mps_mk_unsol(D3D)~\*{DDRM\*}
.xx "not part of/" "mps_AMPsend: sends" "unsolicited messages that are" "" mps_AMPsend(D3D)~\*{DDRM\*}
.xx "" "mps_mk_unsolrply: constructs a" "unsolicited reply message to be/" "" mps_mk_unsolrply(D3D)~\*{DDRM\*}
.xx "" "pause: suspend process" "until signal." "" pause(2)~\*{PRM\*}
.xx "" "signal mask and suspend process" "until signal." "/install a" sigsuspend(2)~\*{PRM\*}
.xx "timeout(D3DK) request." "" "untimeout: cancel previous" "" untimeout(D3DK)~\*{DDRM\*}
.xx "" "/touchwin, touchline," "untouchwin, wtouchln,/" "" curs_touch(3X)~\*{CHAR\*}
.xx "" "in bytes to size in pages (round" "up)." "btopr: convert size" btopr(D3DK)~\*{DDRM\*}
.xx "" "how long the system has been" "up." "uptime: show" uptime(1)~\*{BSD\*}
.xx "times of a file." "touch:" "update access and modification" "" touch(1)~\*{URM\*}
.xx "" "elf_update:" "update an ELF descriptor." "" elf_update(3E)~\*{PRM\*}
.xx "programs." "make: maintain," "update, and regenerate groups of" "" make(1)~\*{PRM\*}
.xx "information/" "pwconv: install and" "update /etc/shadow with" "" pwconv(1M)~\*{SARM\*}
.xx "" "lfind: linear search and" "update." "lsearch," lsearch(3C)~\*{PRM\*}
.xx "" "idinstall: add, delete," "update, or get device driver/" "" idinstall(1M)~\*{ISDG\*}
.xx "" "idinstall: add, delete," "update, or get device driver/" "" idinstall(1M)~\*{SARM\*}
.xx "" "sync:" "update super block." "" sync(2)~\*{PRM\*}
.xx "" "sync:" "update the super block." "" sync(1M)~\*{SARM\*}
.xx "" "sync:" "update the super block." "" sync(1M)~\*{URM\*}
.xx "screen refresh/" "panel_update:" "update_panels: panels virtual" "" panel_update(3X)~\*{CHAR\*}
.xx "Network Information Service/" "" "updaters: configuration file for" "" updaters(4)~\*{NI\*}
.xx "" "Information Service (NIS)" "updating." "/file for Network" updaters(4)~\*{NI\*}
.xx "" "/utmpxname, getutmp, getutmpx," "updwtmp, updwtmpx: access utmpx/" "" getutx(3C)~\*{PRM\*}
.xx "" "/getutmp, getutmpx, updwtmp," "updwtmpx: access utmpx file/" "" getutx(3C)~\*{PRM\*}
.xx "has been up." "" "uptime: show how long the system" "" uptime(1)~\*{BSD\*}
.xx "space described by uio(D4DK)/" "" "ureadc: copy a character to" "" ureadc(D3DK)~\*{DDRM\*}
.xx "files and directories." "" "urestore: request restore of" "" urestore(1M)~\*{SARM\*}
.xx "" "du: summarize disk" "usage." "" du(1M)~\*{SARM\*}
.xx "" "du: summarize disk" "usage." "" du(1M)~\*{URM\*}
.xx "" "display a user's disk quota and" "usage." "quota:" quota(1M)~\*{SARM\*}
.xx "" "mkmsgs: create message files for" "use by gettxt." "" mkmsgs(1)~\*{URM\*}
.xx "" "release devices from exclusive" "use." "devfree:" devfree(1M)~\*{SARM\*}
.xx "" "reserves devices for exclusive" "use." "devreserv:" devreserv(1M)~\*{SARM\*}
.xx "" "levels for an application for" "use with fmtmsg." "/of severity" addseverity(3C)~\*{PRM\*}
.xx "" "ctags: create a tags file for" "use with vi." "" ctags(1)~\*{URM\*}
.xx "" "clock: report CPU time" "used." "" clock(3C)~\*{PRM\*}
.xx "" "/unctrl, keyname, filter," "use_env, putwin, getwin,/" "" curs_util(3X)~\*{CHAR\*}
.xx "" "su: become super-user or another" "user." "" su(1M)~\*{SARM\*}
.xx "" "su: become super-user or another" "user." "" su(1M)~\*{URM\*}
.xx "" "talk: talk to another" "user." "" talk(1)~\*{NUAG\*}
.xx "" "talk: talk to another" "user." "" talk(1)~\*{URM\*}
.xx "" "write: write to another" "user." "" write(1)~\*{URM\*}
.xx "" "setuid, setgid: set" "user and group IDs." "" setuid(2)~\*{PRM\*}
.xx "" "idload: Remote File Sharing" "user and group mapping." "" idload(1M)~\*{NUAG\*}
.xx "" "idload: Remote File Sharing" "user and group mapping." "" idload(1M)~\*{SARM\*}
.xx "information." "logins: list" "user and system login" "" logins(1M)~\*{SARM\*}
.xx "" "data from a driver buffer to a" "user buffer." "copyout: copy" copyout(D3DK)~\*{DDRM\*}
.xx "" "copyin: copy data from a" "user buffer to a driver buffer." "" copyin(D3DK)~\*{DDRM\*}
.xx "" "ucontext:" "user context." "" ucontext(5)~\*{PRM\*}
.xx "" "setcontext: get and set current" "user context." "getcontext," getcontext(2)~\*{PRM\*}
.xx "" "swapcontext: manipulate" "user contexts." "makecontext," makecontext(3C)~\*{PRM\*}
.xx "" "crontab:" "user crontab file." "" crontab(1)~\*{URM\*}
.xx "" "get character login name of the" "user." "cuserid:" cuserid(3S)~\*{PRM\*}
.xx "buffer." "mps_get_soldata: copies" "user data from the message" "" mps_get_soldata(D3D)~\*{DDRM\*}
.xx "" "mps_get_unsoldata: copies" "user data from the message/" "" mps_get_unsoldata(D3D)~\*{DDRM\*}
.xx "" "UDP: Internet" "User Datagram Protocol." "" UDP(7)~\*{NI\*}
.xx "" "UDP: Internet" "User Datagram Protocol." "" UDP(7)~\*{NUAG\*}
.xx "" "UDP: Internet" "User Datagram Protocol." "" UDP(7)~\*{SARM\*}
.xx "" "/getgid, getegid: get real" "user, effective user, real/" "" getuid(2)~\*{PRM\*}
.xx "" "chkey: change" "user encryption key." "" chkey(1)~\*{NI\*}
.xx "" "chkey: change" "user encryption key." "" chkey(1)~\*{NUAG\*}
.xx "" "environ:" "user environment." "" environ(5)~\*{NI\*}
.xx "" "environ:" "user environment." "" environ(5)~\*{PRM\*}
.xx "" "environ:" "user environment." "" environ(5)~\*{SARM\*}
.xx "" "with another transport" "user." "/establish a connection" t_connect(3N)~\*{NI\*}
.xx "" "getdate: convert" "user format date and time." "" getdate(3C)~\*{PRM\*}
.xx "" "print group membership of" "user." "groups:" groups(1)~\*{URM\*}
.xx "" "trusted hosts by system and by" "user." "hosts.equiv, .rhosts:" hosts.equiv(4)~\*{NUAG\*}
.xx "" "trusted hosts by system and by" "user." "hosts.equiv, .rhosts:" hosts.equiv(4)~\*{SARM\*}
.xx "" "ckuid: prompt for and validate a" "user ID." "" ckuid(1)~\*{ISDG\*}
.xx "" "ckuid: prompt for and validate a" "user ID." "" ckuid(1)~\*{SARM\*}
.xx "" "generate disk accounting data by" "user ID." "diskusg:" diskusg(1M)~\*{SARM\*}
.xx "" "setreuid: set real and effective" "user IDs." "" setreuid(3)~\*{BSD\*}
.xx "" "fingerd, in.fingerd: remote" "user information server." "" fingerd(1M)~\*{NUAG\*}
.xx "" "fingerd, in.fingerd: remote" "user information server." "" fingerd(1M)~\*{SARM\*}
.xx "system using the TELNET/" "telnet:" "user interface to a remote" "" telnet(1)~\*{NUAG\*}
.xx "system using the TELNET/" "telnet:" "user interface to a remote" "" telnet(1)~\*{URM\*}
.xx "" "ulimit: get and set" "user limits." "" ulimit(2)~\*{PRM\*}
.xx "" "listusers: list" "user login information." "" listusers(1)~\*{URM\*}
.xx "" "useradd: administer a new" "user login on the system." "" useradd(1M)~\*{SARM\*}
.xx "and ID." "id: print the" "user name and ID, and group name" "" id(1M)~\*{SARM\*}
.xx "and ID." "id: print the" "user name and ID, and group name" "" id(1M)~\*{URM\*}
.xx "" "whois: Internet" "user name directory service." "" whois(1)~\*{NUAG\*}
.xx "" "whois: Internet" "user name directory service." "" whois(1)~\*{URM\*}
.xx "" "displays a list of all valid" "user names." "dispuid:" dispuid(1)~\*{ISDG\*}
.xx "" "displays a list of all valid" "user names." "dispuid:" dispuid(1)~\*{SARM\*}
.xx "" "notify: notify" "user of the arrival of new mail." "" notify(1)~\*{URM\*}
.xx "" "last: indicate last" "user or terminal logins." "" last(1)~\*{URM\*}
.xx "" "edquota: edit" "user quotas." "" edquota(1M)~\*{SARM\*}
.xx "group/" "/get real user, effective" "user, real group, and effective" "" getuid(2)~\*{PRM\*}
.xx "" "initialize system for first" "user." "setup:" setup(1M)~\*{SARM\*}
.xx "" "endusershell: get legal" "user shells." "/setusershell," getusershell(3)~\*{BSD\*}
.xx "" "in the utmp file of the current" "user." "ttyslot: find the slot" ttyslot(3C)~\*{PRM\*}
.xx "for/" "/netname2host, netname2user," "user2netname: library routines" "" secure_rpc(3N)~\*{NI\*}
.xx "login on the system." "" "useradd: administer a new user" "" useradd(1M)~\*{SARM\*}
.xx "from the system." "" "userdel: delete a user's login" "" userdel(1M)~\*{SARM\*}
.xx "request." "t_snddis: send" "user-initiated disconnect" "" t_snddis(3N)~\*{NI\*}
.xx "information on the system." "" "usermod: modify a user's login" "" usermod(1M)~\*{SARM\*}
.xx "" "rpc.rusersd: network" "username server." "" rusersd(1M)~\*{NI\*}
.xx "" "rpc.rusersd: network" "username server." "" rusersd(1M)~\*{NUAG\*}
.xx "" "display the effective current" "username." "whoami:" whoami(1)~\*{BSD\*}
.xx "" ".environ, .pref, .variables:" "user-preference variable files/" "" environ(4)~\*{SARM\*}
.xx "" "wall: write to all" "users." "" wall(1M)~\*{SARM\*}
.xx "" "quota: display a" "user's disk quota and usage." "" quota(1M)~\*{SARM\*}
.xx "users logged in." "" "users: display a compact list of" "" users(1)~\*{BSD\*}
.xx "" "about local and remote" "users." "/display information" finger(1)~\*{NUAG\*}
.xx "" "about local and remote" "users." "/display information" finger(1)~\*{URM\*}
.xx "" "editor (variant of ex for casual" "users)." "edit: text" edit(1)~\*{URM\*}
.xx "" "groups: display a" "user's group memberships." "" groups(1)~\*{BSD\*}
.xx "" "users: display a compact list of" "users logged in." "" users(1)~\*{BSD\*}
.xx "" "userdel: delete a" "user's login from the system." "" userdel(1M)~\*{SARM\*}
.xx "system." "usermod: modify a" "user's login information on the" "" usermod(1M)~\*{SARM\*}
.xx "" "rmail: read mail or send mail to" "users." "mail," mail(1)~\*{URM\*}
.xx "" "maillock: manage lockfile for" "user's mailbox." "" maillock(3X)~\*{PRM\*}
.xx "" "rusers: return information about" "users on remote machines." "" rusers(3N)~\*{NI\*}
.xx "" "rwall: write to all" "users over a network." "" rwall(1M)~\*{NI\*}
.xx "" "rwall: write to all" "users over a network." "" rwall(1M)~\*{NUAG\*}
.xx "" "fuser: identify processes" "using a file or file structure." "" fuser(1M)~\*{SARM\*}
.xx "" "/allocate a message block" "using an externally-supplied/" "" esballoc(D3DK)~\*{DDRM\*}
.xx "" "elf_end: finish" "using an object file." "" elf_end(3E)~\*{PRM\*}
.xx "" "/search a file for a pattern" "using full regular expressions." "" egrep(1)~\*{URM\*}
.xx "" "shell: run a command" "using shell." "" shell(1F)~\*{CHAR\*}
.xx "" "/send SMTP mail to a remote host" "using Simple Mail Transfer/" "" smtp(1M)~\*{SARM\*}
.xx "" "interface to a remote system" "using the TELNET protocol." "/user" telnet(1)~\*{NUAG\*}
.xx "" "interface to a remote system" "using the TELNET protocol." "/user" telnet(1)~\*{URM\*}
.xx "" "data storage structure for I/O" "using uio(D4DK)." "iovec:" iovec(D4DK)~\*{DDRM\*}
.xx "" "uiomove: copy data" "using uio(D4DK) structure." "" uiomove(D3DK)~\*{DDRM\*}
.xx "interval in microseconds." "" "usleep: suspend execution for" "" usleep(3)~\*{BSD\*}
.xx "statistics." "" "ustat: get file system" "" ustat(2)~\*{PRM\*}
.xx "" "/icswr, icsslot, icsgetrec:" "utilities to access Multibus II/" "" icsrd(8iref)~\*{MBRMAN\*}
.xx "" "diskadd: disk set up" "utility." "" diskadd(1M)~\*{SARM\*}
.xx "" "disksetup: disk set up" "utility." "" disksetup(1M)~\*{SARM\*}
.xx "" "iconv: code set conversion" "utility." "" iconv(1)~\*{URM\*}
.xx "" "mkpart: disk maintenance" "utility." "" mkpart(1M)~\*{SARM\*}
.xx "" "intro: introduction to kernel" "utility routines." "" intro(D3DK)~\*{DDRM\*}
.xx "" "intro: introduction to DMA" "utility routines." "" intro(D3X)~\*{DDRM\*}
.xx "" "flushinp: miscellaneous curses" "utility routines." "/delay_output," curs_util(3X)~\*{CHAR\*}
.xx "" "get information about resource" "utilization." "getrusage:" getrusage(3)~\*{BSD\*}
.xx "modification times." "" "utime: set file access and" "" utime(2)~\*{PRM\*}
.xx "" "" "utimes: set file times." "" utimes(3)~\*{BSD\*}
.xx "" "utmp, wtmp:" "utmp and wtmp entry formats." "" utmp(4)~\*{PRM\*}
.xx "" "utmp, wtmp:" "utmp and wtmp entry formats." "" utmp(4)~\*{SARM\*}
.xx "" "endutent, utmpname: access" "utmp file entry." "/setutent," getut(3C)~\*{PRM\*}
.xx "" "ttyslot: find the slot in the" "utmp file of the current user." "" ttyslot(3C)~\*{PRM\*}
.xx "formats." "" "utmp, wtmp: utmp and wtmp entry" "" utmp(4)~\*{PRM\*}
.xx "formats." "" "utmp, wtmp: utmp and wtmp entry" "" utmp(4)~\*{SARM\*}
.xx "" "/accton, acctwtmp closewtmp," "utmp2wtmp: overview of/" "" acct(1M)~\*{SARM\*}
.xx "" "/pututline, setutent, endutent," "utmpname: access utmp file/" "" getut(3C)~\*{PRM\*}
.xx "" "utmpx, wtmpx:" "utmpx and wtmpx entry formats." "" utmpx(4)~\*{PRM\*}
.xx "" "utmpx, wtmpx:" "utmpx and wtmpx entry formats." "" utmpx(4)~\*{SARM\*}
.xx "" "updwtmp, updwtmpx: access" "utmpx file entry." "/getutmpx," getutx(3C)~\*{PRM\*}
.xx "entry formats." "" "utmpx, wtmpx: utmpx and wtmpx" "" utmpx(4)~\*{PRM\*}
.xx "entry formats." "" "utmpx, wtmpx: utmpx and wtmpx" "" utmpx(4)~\*{SARM\*}
.xx "updwtmp,/" "/setutxent, endutxent," "utmpxname, getutmp, getutmpx," "" getutx(3C)~\*{PRM\*}
.xx "directories and permissions/" "" "uucheck: check the uucp" "" uucheck(1M)~\*{SARM\*}
.xx "for the uucp system." "" "uucico: file transport program" "" uucico(1M)~\*{SARM\*}
.xx "clean-up." "" "uucleanup: uucp spool directory" "" uucleanup(1M)~\*{SARM\*}
.xx "file." "uucheck: check the" "uucp directories and permissions" "" uucheck(1M)~\*{SARM\*}
.xx "" "uusched: the scheduler for the" "uucp file transport program." "" uusched(1M)~\*{SARM\*}
.xx "" "uucleanup:" "uucp spool directory clean-up." "" uucleanup(1M)~\*{SARM\*}
.xx "control." "uustat:" "uucp status inquiry and job" "" uustat(1C)~\*{URM\*}
.xx "" "file transport program for the" "uucp system." "uucico:" uucico(1M)~\*{SARM\*}
.xx "UNIX-to-UNIX system copy." "" "uucp, uulog, uuname:" "" uucp(1C)~\*{URM\*}
.xx "or decode its ASCII/" "uuencode," "uudecode: encode a binary file," "" uuencode(1C)~\*{URM\*}
.xx "binary file, or decode its/" "" "uuencode, uudecode: encode a" "" uuencode(1C)~\*{URM\*}
.xx "modes, speed, and line/" "" "uugetty: set terminal type," "" uugetty(1M)~\*{SARM\*}
.xx "available on this UNIX system." "" "uuglist: list service grades" "" uuglist(1C)~\*{URM\*}
.xx "system copy." "uucp," "uulog, uuname: UNIX-to-UNIX" "" uucp(1C)~\*{URM\*}
.xx "copy." "uucp, uulog," "uuname: UNIX-to-UNIX system" "" uucp(1C)~\*{URM\*}
.xx "system file copy." "uuto," "uupick: public UNIX-to-UNIX" "" uuto(1C)~\*{URM\*}
.xx "uucp file transport program." "" "uusched: the scheduler for the" "" uusched(1M)~\*{SARM\*}
.xx "job control." "" "uustat: uucp status inquiry and" "" uustat(1C)~\*{URM\*}
.xx "UNIX-to-UNIX system file copy." "" "uuto, uupick: public" "" uuto(1C)~\*{URM\*}
.xx "system with debugging on." "" "Uutry: try to contact remote" "" Uutry(1M)~\*{SARM\*}
.xx "execution." "" "uux: UNIX-to-UNIX system command" "" uux(1C)~\*{URM\*}
.xx "requests." "" "uuxqt: execute remote command" "" uuxqt(1M)~\*{SARM\*}
.xx "space described by uio(D4DK)/" "" "uwritec: return a character from" "" uwritec(D3DK)~\*{DDRM\*}
.xx "libnsl." "/to call SCO UNIX System" "V/386 Release 3.2-compatible" "" fixshlib(1M)~\*{ACG\*}
.xx "Service (ots)/" "ots: System" "V/386 Release 4.0 OSI Transport" "" ots(7iref)~\*{MBRMAN\*}
.xx "compatibility module." "ttcompat:" "V7, 4BSD and XENIX STREAMS" "" ttcompat(7)~\*{SARM\*}
.xx "to incoming mail messages." "" "vacation: automatically respond" "" vacation(1)~\*{URM\*}
.xx "automatically." "" "vacation: reply to mail" "" vacation(1)~\*{BSD\*}
.xx "" "" "val: validate an SCCS file." "" val(1)~\*{PRM\*}
.xx "a/" "ckdate, errdate, helpdate," "valdate: prompt for and validate" "" ckdate(1)~\*{ISDG\*}
.xx "a/" "ckdate, errdate, helpdate," "valdate: prompt for and validate" "" ckdate(1)~\*{SARM\*}
.xx "a group/" "ckgid, errgid, helpgid," "valgid: prompt for and validate" "" ckgid(1)~\*{ISDG\*}
.xx "a group/" "ckgid, errgid, helpgid," "valgid: prompt for and validate" "" ckgid(1)~\*{SARM\*}
.xx "" "dispgid: displays a list of all" "valid group names." "" dispgid(1)~\*{ISDG\*}
.xx "" "dispgid: displays a list of all" "valid group names." "" dispgid(1)~\*{SARM\*}
.xx "" "dispuid: displays a list of all" "valid user names." "" dispuid(1)~\*{ISDG\*}
.xx "" "dispuid: displays a list of all" "valid user names." "" dispuid(1)~\*{SARM\*}
.xx "" "valdate: prompt for and" "validate a date." "/helpdate," ckdate(1)~\*{ISDG\*}
.xx "" "valdate: prompt for and" "validate a date." "/helpdate," ckdate(1)~\*{SARM\*}
.xx "" "helpgid, valgid: prompt for and" "validate a group ID." "/errgid," ckgid(1)~\*{ISDG\*}
.xx "" "helpgid, valgid: prompt for and" "validate a group ID." "/errgid," ckgid(1)~\*{SARM\*}
.xx "" "ckkeywd: prompt for and" "validate a keyword." "" ckkeywd(1)~\*{ISDG\*}
.xx "" "ckkeywd: prompt for and" "validate a keyword." "" ckkeywd(1)~\*{SARM\*}
.xx "" "ckuid: prompt for and" "validate a user ID." "" ckuid(1)~\*{ISDG\*}
.xx "" "ckuid: prompt for and" "validate a user ID." "" ckuid(1)~\*{SARM\*}
.xx "" "ckrange: prompt for and" "validate an integer." "" ckrange(1)~\*{ISDG\*}
.xx "" "ckrange: prompt for and" "validate an integer." "" ckrange(1)~\*{SARM\*}
.xx "" "val:" "validate an SCCS file." "" val(1)~\*{PRM\*}
.xx "request." "physiock:" "validate and issue raw I/O" "" physiock(D3DK)~\*{DDRM\*}
.xx "" "ckyorn: prompt for and" "validate yes/no." "" ckyorn(1)~\*{ISDG\*}
.xx "" "ckyorn: prompt for and" "validate yes/no." "" ckyorn(1)~\*{SARM\*}
.xx "" "field_arg: forms field data type" "validation." "/field_type," form_field_validation(3X)~\*{CHAR\*}
.xx "" "/free, realloc, calloc, memalign," "valloc,: memory allocator." "" malloc(3C)~\*{PRM\*}
.xx "" "elf_hash: compute hash" "value." "" elf_hash(3E)~\*{PRM\*}
.xx "" "machid: get processor type truth" "value." "" machid(1)~\*{URM\*}
.xx "" "labs: return integer absolute" "value." "abs," abs(3C)~\*{PRM\*}
.xx "" "verify and return an integer" "value." "ckint: display a prompt;" ckint(1)~\*{ISDG\*}
.xx "" "verify and return an integer" "value." "ckint: display a prompt;" ckint(1)~\*{SARM\*}
.xx "" "decimal record to floating-point" "value." "/convert" decimal_to_floating(3)~\*{BSD\*}
.xx "" "getenv: return" "value for environment name." "" getenv(3C)~\*{PRM\*}
.xx "" "ceiling, remainder, absolute" "value functions." "/floor," floor(3M)~\*{PRM\*}
.xx "register of/" "ics_write: writes a" "value into the specified" "" ics_write(D3D)~\*{DDRM\*}
.xx "" "readlink: read the" "value of a symbolic link." "" readlink(2)~\*{PRM\*}
.xx "" "idtune: attempts to set" "value of a tunable parameter." "" idtune(1M)~\*{ISDG\*}
.xx "" "idtune: attempts to set" "value of a tunable parameter." "" idtune(1M)~\*{SARM\*}
.xx "" "getitimer, setitimer: get/set" "value of interval timer." "" getitimer(3C)~\*{PRM\*}
.xx "the NIS map." "ypmatch: print the" "value of one or more keys from" "" ypmatch(1)~\*{NI\*}
.xx "" "/convert floating-point" "value to decimal record." "" floating_to_decimal(3)~\*{BSD\*}
.xx "" "putenv: change or add" "value to environment." "" putenv(3C)~\*{PRM\*}
.xx "" "true, false: provide truth" "values." "" true(1)~\*{URM\*}
.xx "" "values: machine-dependent" "values." "" values(5)~\*{PRM\*}
.xx "" "/htons, ntohl, ntohs: convert" "values between host and network/" "" byteorder(3N)~\*{NI\*}
.xx "" "ypcat: print" "values in a NIS data base." "" ypcat(1)~\*{NI\*}
.xx "" "of the board and returns the" "values in the buffer." "/registers" ics_read(3iref)~\*{MBRMAN\*}
.xx "" "set and get menus item" "values." "/item_value:" menu_item_value(3X)~\*{CHAR\*}
.xx "values." "" "values: machine-dependent" "" values(5)~\*{PRM\*}
.xx "" "displays package parameter" "values." "pkgparam:" pkgparam(1)~\*{ISDG\*}
.xx "" "displays package parameter" "values." "pkgparam:" pkgparam(1)~\*{SARM\*}
.xx "" "form field to its default" "values." "/reset the current" reset(1F)~\*{CHAR\*}
.xx "argument list." "" "varargs: handle variable" "" varargs(5)~\*{PRM\*}
.xx "" "stdarg: handle" "variable argument list." "" stdarg(5)~\*{PRM\*}
.xx "" "varargs: handle" "variable argument list." "" varargs(5)~\*{PRM\*}
.xx "" "/print formatted output of a" "variable argument list." "" vprintf(3S)~\*{PRM\*}
.xx "" ".variables: user-preference" "variable files for FACE." "/.pref," environ(4)~\*{SARM\*}
.xx "" "sysconf: get configurable system" "variables." "" sysconf(3C)~\*{PRM\*}
.xx "" "printenv: display environment" "variables currently set." "" printenv(1)~\*{BSD\*}
.xx "" "get configurable pathname" "variables." "fpathconf, pathconf:" fpathconf(2)~\*{PRM\*}
.xx "" "local or global environment" "variables." "/unset: set and unset" set(1F)~\*{CHAR\*}
.xx "variable files/" ".environ, .pref," ".variables: user-preference" "" environ(4)~\*{SARM\*}
.xx "users)." "edit: text editor" "(variant of ex for casual" "" edit(1)~\*{URM\*}
.xx "" "t450, tek: graphics filters for" "various plotters." "/t300s, t4013," plot(1G)~\*{BSD\*}
.xx "" "" "vc: version control." "" vc(1)~\*{PRM\*}
.xx "" "get option letter from argument" "vector." "getopt:" getopt(3C)~\*{PRM\*}
.xx "" "getvol:" "verifies device accessibility." "" getvol(1M)~\*{SARM\*}
.xx "" "ckpath: display a prompt;" "verify and return a pathname." "" ckpath(1)~\*{ISDG\*}
.xx "" "ckpath: display a prompt;" "verify and return a pathname." "" ckpath(1)~\*{SARM\*}
.xx "" "ckstr: display a prompt;" "verify and return a string/" "" ckstr(1)~\*{ISDG\*}
.xx "" "ckstr: display a prompt;" "verify and return a string/" "" ckstr(1)~\*{SARM\*}
.xx "" "cktime: display a prompt;" "verify and return a time of day." "" cktime(1)~\*{ISDG\*}
.xx "" "cktime: display a prompt;" "verify and return a time of day." "" cktime(1)~\*{SARM\*}
.xx "value." "ckint: display a prompt;" "verify and return an integer" "" ckint(1)~\*{ISDG\*}
.xx "value." "ckint: display a prompt;" "verify and return an integer" "" ckint(1)~\*{SARM\*}
.xx "" "ASSERT:" "verify assertion." "" ASSERT(D3DK)~\*{DDRM\*}
.xx "" "ckperms: set and/or" "verify permissions on files." "" ckperms(1iref)~\*{MBRMAN\*}
.xx "" "assert:" "verify program assertion." "" assert(3X)~\*{PRM\*}
.xx "structure." "" "ver_no: SCSI version number" "" ver_no(D4I)~\*{SCSI\*}
.xx "" "vc:" "version control." "" vc(1)~\*{PRM\*}
.xx "" "ver_no: SCSI" "version number structure." "" ver_no(D4I)~\*{SCSI\*}
.xx "" "get: get a" "version of an SCCS file." "" get(1)~\*{PRM\*}
.xx "server/" "yppoll: return current" "version of the map at the NIS" "" yppoll(1M)~\*{NI\*}
.xx "" "ELF library and application" "versions." "/coordinate" elf_version(3E)~\*{PRM\*}
.xx "" "compver: compatible" "versions file." "" compver(4)~\*{ISDG\*}
.xx "" "diffmk: mark differences between" "versions of a troff input file." "" diffmk(1)~\*{BSD\*}
.xx "" "sccsdiff: compare two" "versions of an SCCS file." "" sccsdiff(1)~\*{PRM\*}
.xx "" "ncheck (s5): generate path names" "versus i-numbers for s5 file/" "" ncheck(1M)~\*{SARM\*}
.xx "" "ncheck (ufs): generate pathnames" "versus i-numbers for ufs file/" "" ncheck(1M)~\*{SARM\*}
.xx "" "curses borders, horizontal and" "vertical lines." "/wvline: create" curs_border(3X)~\*{CHAR\*}
.xx "virtual memory efficient way." "" "vfork: spawn new process in a" "" vfork(2)~\*{PRM\*}
.xx "" "/fprintf, sprintf, vprintf," "vfprintf, vsprintf: formatted/" "" printf(3S)~\*{BSD\*}
.xx "formatted output of a/" "vprintf," "vfprintf, vsprintf: print" "" vprintf(3S)~\*{PRM\*}
.xx "" "getvfsspec, getvfsany: get" "vfstab file entry." "/getvfsfile," getvfsent(3C)~\*{PRM\*}
.xx "defaults." "" "vfstab: table of file system" "" vfstab(4)~\*{SARM\*}
.xx "" "evgainit: Extended" "VGA keyboard/display driver/" "" evgainit(1M)~\*{SARM\*}
.xx "" "create a tags file for use with" "vi." "ctags:" ctags(1)~\*{URM\*}
.xx "display editor based on ex." "" "vi: screen-oriented (visual)" "" vi(1)~\*{URM\*}
.xx "" "/initiate a DMA operation" "via software request." "" dma_swstart(D3X)~\*{DDRM\*}
.xx "" "get client's data passed" "via the listener." "nlsgetcall:" nlsgetcall(3N)~\*{NI\*}
.xx "" "/tparm, tputs, putp, vidputs," "vidattr, mvcur, tigetflag,/" "" curs_terminfo(3X)~\*{CHAR\*}
.xx "" "the font and video mode for a" "video device." "vidi: sets" vidi(1)~\*{SARM\*}
.xx "" "vidi: sets the font and" "video mode for a video device." "" vidi(1)~\*{SARM\*}
.xx "mode for a video device." "" "vidi: sets the font and video" "" vidi(1)~\*{SARM\*}
.xx "" "/restartterm, tparm, tputs, putp," "vidputs, vidattr, mvcur,/" "" curs_terminfo(3X)~\*{CHAR\*}
.xx "" "get physical page ID for kernel" "virtual address." "hat_getkpfnum:" hat_getkpfnum(D3DK)~\*{DDRM\*}
.xx "physical/" "physmap: obtain" "virtual address mapping for" "" physmap(D3D)~\*{DDRM\*}
.xx "physical/" "physmap_free: free" "virtual address mapping for" "" physmap_free(D3D)~\*{DDRM\*}
.xx "page list." "bp_mapin: allocate" "virtual address space for buffer" "" bp_mapin(D3DK)~\*{DDRM\*}
.xx "page/" "bp_mapout: deallocate" "virtual address space for buffer" "" bp_mapout(D3DK)~\*{DDRM\*}
.xx "address." "vtop: convert" "virtual address to physical" "" vtop(D3D)~\*{DDRM\*}
.xx "memory-mapped/" "mmap: check" "virtual mapping for" "" mmap(D2DK)~\*{DDRM\*}
.xx "" "vfork: spawn new process in a" "virtual memory efficient way." "" vfork(2)~\*{PRM\*}
.xx "" "echo: put string on" "virtual output." "" echo(1F)~\*{CHAR\*}
.xx "" "move a panels window on the" "virtual screen." "/move_panel:" panel_move(3X)~\*{CHAR\*}
.xx "" "/update_panels: panels" "virtual screen refresh routine." "" panel_update(3X)~\*{CHAR\*}
.xx "" "newvt: opens" "virtual terminals." "" newvt(1)~\*{ISDG\*}
.xx "" "newvt: opens" "virtual terminals." "" newvt(1)~\*{URM\*}
.xx "" "vtlmgr: monitors and opens" "virtual terminals." "" vtlmgr(1)~\*{ISDG\*}
.xx "" "vtlmgr: monitors and opens" "virtual terminals." "" vtlmgr(1)~\*{URM\*}
.xx "" "sdi_translate: translate scb" "virtual to physical address for/" "" sdi_translate(D3I)~\*{SCSI\*}
.xx "" "tell if menus item is" "visible." "/item_visible:" menu_item_visible(3X)~\*{CHAR\*}
.xx "ex." "vi: screen-oriented" "(visual) display editor based on" "" vi(1)~\*{URM\*}
.xx "system administration." "sysadm:" "visual interface to perform" "" sysadm(1M)~\*{SARM\*}
.xx "" "/wborder, box, hline, whline," "vline, wvline: create curses/" "" curs_border(3X)~\*{CHAR\*}
.xx "copy of file system." "" "volcopy (generic): make literal" "" volcopy(1M)~\*{SARM\*}
.xx "copy of an s5 file system." "" "volcopy (s5): make a literal" "" volcopy(1M)~\*{SARM\*}
.xx "copy of a ufs file system." "" "volcopy (ufs): make a literal" "" volcopy(1M)~\*{SARM\*}
.xx "" "format of the bfs file system" "volume." "fs (bfs):" fs(4)~\*{SARM\*}
.xx "" "(s5): format of s5 file system" "volume." "fs" fs(4)~\*{SARM\*}
.xx "" "out file archives to multiple" "volumes." "cpout: copy" cpout(1iref)~\*{MBRMAN\*}
.xx "" "move an archive from one set of" "volumes to another." "migration:" migration(1M)~\*{SARM\*}
.xx "" "printf, fprintf, sprintf," "vprintf, vfprintf, vsprintf:/" "" printf(3S)~\*{BSD\*}
.xx "print formatted output of a/" "" "vprintf, vfprintf, vsprintf:" "" vprintf(3S)~\*{PRM\*}
.xx "" "generate a  list of path names" "vs i-numbers." "ncheck (generic):" ncheck(1M)~\*{SARM\*}
.xx "with the controlling FMLI/" "" "vsig: synchronize a co-process" "" vsig(1F)~\*{CHAR\*}
.xx "" "/sprintf, vprintf, vfprintf," "vsprintf: formatted output/" "" printf(3S)~\*{BSD\*}
.xx "of a/" "vprintf, vfprintf," "vsprintf: print formatted output" "" vprintf(3S)~\*{PRM\*}
.xx "modes, speed, and line/" "" "vtgetty: sets terminal type," "" vtgetty(1M)~\*{SARM\*}
.xx "virtual terminals." "" "vtlmgr: monitors and opens" "" vtlmgr(1)~\*{ISDG\*}
.xx "virtual terminals." "" "vtlmgr: monitors and opens" "" vtlmgr(1)~\*{URM\*}
.xx "physical address." "" "vtop: convert virtual address to" "" vtop(D3D)~\*{DDRM\*}
.xx "" "/wprintw, mvprintw, mvwprintw," "vwprintw: print formatted output/" "" curs_printw(3X)~\*{CHAR\*}
.xx "from/" "/wscanw, mvscanw, mvwscanw," "vwscanw: convert formatted input" "" curs_scanw(3X)~\*{CHAR\*}
.xx "are they doing." "" "w: who is logged in, and what" "" w(1)~\*{BSD\*}
.xx "echochar,/" "curs_addch:  addch," "waddch, mvaddch, mvwaddch," "" curs_addch(3X)~\*{CHAR\*}
.xx "" "/addchstr, addchnstr, waddchstr," "waddchnstr, mvaddchstr,/" "" curs_addchstr(3X)~\*{CHAR\*}
.xx "" "/addchstr, addchnstr," "waddchstr, waddchnstr,/" "" curs_addchstr(3X)~\*{CHAR\*}
.xx "" "/addstr, addnstr, waddstr," "waddnstr, mvaddstr, mvaddnstr,/" "" curs_addstr(3X)~\*{CHAR\*}
.xx "" "curs_addstr:  addstr, addnstr," "waddstr, waddnstr, mvaddstr,/" "" curs_addstr(3X)~\*{CHAR\*}
.xx "process." "" "wait: await completion of" "" wait(1)~\*{URM\*}
.xx "" "rmsetwant: set the map's" "wait flag for a wakeup." "" rmsetwant(D3K)~\*{DDRM\*}
.xx "state." "waitid:" "wait for child process to change" "" waitid(2)~\*{PRM\*}
.xx "state." "waitpid:" "wait for child process to change" "" waitpid(2)~\*{PRM\*}
.xx "or terminate." "wait:" "wait for child process to stop" "" wait(2)~\*{PRM\*}
.xx "" "release blocked signals and" "wait for interrupt." "/automically" sigpause(3)~\*{BSD\*}
.xx "stop." "/WIFSIGNALED, WIFEXITED:" "wait for process to terminate or" "" wait(3)~\*{BSD\*}
.xx "" "wstat:" "wait status." "" wstat(5)~\*{PRM\*}
.xx "stop or terminate." "" "wait: wait for child process to" "" wait(2)~\*{PRM\*}
.xx "WIFSIGNALED, WIFEXITED: wait/" "" "wait, wait3, WIFSTOPPED," "" wait(3)~\*{BSD\*}
.xx "WIFEXITED: wait for/" "wait," "wait3, WIFSTOPPED, WIFSIGNALED," "" wait(3)~\*{BSD\*}
.xx "to change state." "" "waitid: wait for child process" "" waitid(2)~\*{PRM\*}
.xx "" "sigsem: signal a process" "waiting on a semaphore." "" sigsem(2)~\*{ACG\*}
.xx "to change state." "" "waitpid: wait for child process" "" waitpid(2)~\*{PRM\*}
.xx "check access to a resource/" "" "waitsem, nbwaitsem: await and" "" waitsem(2)~\*{ACG\*}
.xx "" "buffer after block I/O and" "wakeup processes." "/release" biodone(D3DK)~\*{DDRM\*}
.xx "execution." "" "wakeup: resume suspended process" "" wakeup(D3K)~\*{DDRM\*}
.xx "" "set the map's wait flag for a" "wakeup." "rmsetwant:" rmsetwant(D3K)~\*{DDRM\*}
.xx "" "ftw, nftw:" "walk a file tree." "" ftw(3C)~\*{PRM\*}
.xx "" "" "wall: write to all users." "" wall(1M)~\*{SARM\*}
.xx "attrset,/" "curs_attr:  attroff," "wattroff, attron, wattron," "" curs_attr(3X)~\*{CHAR\*}
.xx "" "/attroff, wattroff, attron," "wattron, attrset, wattrset,/" "" curs_attr(3X)~\*{CHAR\*}
.xx "" "/attron, wattron, attrset," "wattrset, \%standend, wstandend,/" "" curs_attr(3X)~\*{CHAR\*}
.xx "" "in a virtual memory efficient" "way." "vfork: spawn new process" vfork(2)~\*{PRM\*}
.xx "" "/bkgdset, wbkgdset, bkgd," "wbkgd: curses window background/" "" curs_bkgd(3X)~\*{CHAR\*}
.xx "window/" "curs_bkgd:  bkgdset," "wbkgdset, bkgd, wbkgd: curses" "" curs_bkgd(3X)~\*{CHAR\*}
.xx "vline,/" "curs_border:  border," "wborder, box, hline, whline," "" curs_border(3X)~\*{CHAR\*}
.xx "" "" "wc: word count." "" wc(1)~\*{URM\*}
.xx "clrtoeol,/" "/erase, werase, clear," "wclear, clrtobot, wclrtobot," "" curs_clear(3X)~\*{CHAR\*}
.xx "" "/werase, clear, wclear, clrtobot," "wclrtobot, clrtoeol, wclrtoeol:/" "" curs_clear(3X)~\*{CHAR\*}
.xx "" "/clrtobot, wclrtobot, clrtoeol," "wclrtoeol: clear all or part of/" "" curs_clear(3X)~\*{CHAR\*}
.xx "functions." "mbstring: mbstowcs," "wcstombs: multibyte string" "" mbstring(3C)~\*{PRM\*}
.xx "" "mbchar: mbtowc, mblen," "wctomb: multibyte character/" "" mbchar(3C)~\*{PRM\*}
.xx "curses/" "/dupwin, wsyncup, syncok," "wcursyncup, wsyncdown: create" "" curs_window(3X)~\*{CHAR\*}
.xx "Board." "" "wd: Western Digital 8003 Adapter" "" wd(7)~\*{SARM\*}
.xx "subsystem." "scsi_wd7000:" "WD7000 FASST2 host adapter" "" scsi_wd7000(7)~\*{SARM\*}
.xx "delete/" "curs_delch:  delch," "wdelch, mvdelch, mvwdelch:" "" curs_delch(3X)~\*{CHAR\*}
.xx "" "curs_deleteln:  deleteln," "wdeleteln, insdelln,/" "" curs_deleteln(3X)~\*{CHAR\*}
.xx "" "/mvaddch, mvwaddch, echochar," "wechochar: add a character (with/" "" curs_addch(3X)~\*{CHAR\*}
.xx "wclrtobot,/" "curs_clear:  erase," "werase, clear, wclear, clrtobot," "" curs_clear(3X)~\*{CHAR\*}
.xx "Board." "wd:" "Western Digital 8003 Adapter" "" wd(7)~\*{SARM\*}
.xx "ungetch:/" "curs_getch:  getch," "wgetch, mvgetch, mvwgetch," "" curs_getch(3X)~\*{CHAR\*}
.xx "" "/wgetstr, mvgetstr, mvwgetstr," "wgetnstr: get character strings/" "" curs_getstr(3X)~\*{CHAR\*}
.xx "wgetnstr:/" "curs_getstr:  getstr," "wgetstr, mvgetstr, mvwgetstr," "" curs_getstr(3X)~\*{CHAR\*}
.xx "" "whodo: who is doing" "what." "" whodo(1M)~\*{SARM\*}
.xx "strings." "" "what: print identification" "" what(1)~\*{PRM\*}
.xx "summary about a keyword." "" "whatis: display a one-line" "" whatis(1)~\*{BSD\*}
.xx "encrypted." "isencrypt: determine" "whether a character buffer is" "" isencrypt(3G)~\*{PRM\*}
.xx "message." "datamsg: test" "whether a message is a data" "" datamsg(D3DK)~\*{DDRM\*}
.xx "privileged." "drv_priv: determine" "whether credentials are" "" drv_priv(D3DK)~\*{DDRM\*}
.xx "binary/" "ckbinarsys: determine" "whether remote system can accept" "" ckbinarsys(1M)~\*{SARM\*}
.xx "its pathname or alias." "" "which: locate a command; display" "" which(1)~\*{BSD\*}
.xx "" "/border, wborder, box, hline," "whline, vline, wvline: create/" "" curs_border(3X)~\*{CHAR\*}
.xx "" "" "who: who is on the system." "" who(1)~\*{URM\*}
.xx "current username." "" "whoami: display the effective" "" whoami(1)~\*{BSD\*}
.xx "" "" "whodo: who is doing what." "" whodo(1M)~\*{SARM\*}
.xx "directory service." "" "whois: Internet user name" "" whois(1)~\*{NUAG\*}
.xx "directory service." "" "whois: Internet user name" "" whois(1)~\*{URM\*}
.xx "machines." "rusers:" "who's logged in on local" "" rusers(1)~\*{NI\*}
.xx "machines." "rusers:" "who's logged in on local" "" rusers(1)~\*{NUAG\*}
.xx "machines." "rwho:" "who's logged in on local" "" rwho(1)~\*{NUAG\*}
.xx "machines." "rwho:" "who's logged in on local" "" rwho(1)~\*{URM\*}
.xx "" "formatted input from a curses" "widow." "/vwscanw: convert" curs_scanw(3X)~\*{CHAR\*}
.xx "" "/wait3, WIFSTOPPED, WIFSIGNALED," "WIFEXITED: wait for process to/" "" wait(3)~\*{BSD\*}
.xx "" "wait, wait3, WIFSTOPPED," "WIFSIGNALED, WIFEXITED: wait for/" "" wait(3)~\*{BSD\*}
.xx "WIFEXITED: wait/" "wait, wait3," "WIFSTOPPED, WIFSIGNALED," "" wait(3)~\*{BSD\*}
.xx "character and/" "curs_inch:  inch," "winch, mvinch, mvwinch: get a" "" curs_inch(3X)~\*{CHAR\*}
.xx "" "/inchstr, inchnstr, winchstr," "winchnstr, mvinchstr,/" "" curs_inchstr(3X)~\*{CHAR\*}
.xx "mvinchnstr,/" "/inchstr, inchnstr," "winchstr, winchnstr, mvinchstr," "" curs_inchstr(3X)~\*{CHAR\*}
.xx "" "(and attributes) from a curses" "window." "/a string of characters" curs_inchstr(3X)~\*{CHAR\*}
.xx "" "/(with attributes) to a curses" "window and advance cursor." "" curs_addch(3X)~\*{CHAR\*}
.xx "" "string of characters to a curses" "window and advance cursor." "/a" curs_addstr(3X)~\*{CHAR\*}
.xx "" "/form_sub, scale_form: forms" "window and subwindow association/" "" form_win(3X)~\*{CHAR\*}
.xx "" "/menu_sub, scale_menu: menus" "window and subwindow association/" "" menu_win(3X)~\*{CHAR\*}
.xx "" "/wstandout: curses character and" "window attribute control/" "" curs_attr(3X)~\*{CHAR\*}
.xx "" "/wbkgdset, bkgd, wbkgd: curses" "window background manipulation/" "" curs_bkgd(3X)~\*{CHAR\*}
.xx "" "under the cursor in a curses" "window." "/before the character" curs_insch(3X)~\*{CHAR\*}
.xx "" "clear all or part of a curses" "window." "/clrtoeol, wclrtoeol:" curs_clear(3X)~\*{CHAR\*}
.xx "" "getmaxyx: get curses cursor and" "window coordinates." "/getbegyx," curs_getyx(3X)~\*{CHAR\*}
.xx "" "move, wmove: move curses" "window cursor." "curs_move: " curs_move(3X)~\*{CHAR\*}
.xx "" "pos_form_cursor: position forms" "window cursor." "form_cursor: " form_cursor(3X)~\*{CHAR\*}
.xx "" "srcl, wscrl: scroll a curses" "window." "curs_scroll:  scroll," curs_scroll(3X)~\*{CHAR\*}
.xx "" "under cursor in a curses" "window." "/delete character" curs_delch(3X)~\*{CHAR\*}
.xx "" "and its attributes from a curses" "window." "/get a character" curs_inch(3X)~\*{CHAR\*}
.xx "" "of characters from a curses" "window." "/mvwinnstr: get a string" curs_instr(3X)~\*{CHAR\*}
.xx "" "/get or set the current" "window of a panels panel." "" panel_window(3X)~\*{CHAR\*}
.xx "" "/move_panel: move a panels" "window on the virtual screen." "" panel_move(3X)~\*{CHAR\*}
.xx "" "under the cursor in a curses" "window." "/string before character" curs_insstr(3X)~\*{CHAR\*}
.xx "" "(and attributes) to a curses" "window." "/string of characters" curs_addchstr(3X)~\*{CHAR\*}
.xx "" "and insert lines in a curses" "window." "/\%winsertln: delete" curs_deleteln(3X)~\*{CHAR\*}
.xx "" "jagent: host control of" "windowing terminal." "" jagent(5)~\*{PRM\*}
.xx "" "jagent: host control of" "windowing terminal." "" jagent(5)~\*{SARM\*}
.xx "" "jterm: reset layer of" "windowing terminal." "" jterm(1)~\*{URM\*}
.xx "library." "libwindows:" "windowing terminal function" "" libwindows(3X)~\*{PRM\*}
.xx "" "ismpx: return" "windowing terminal state." "" ismpx(1)~\*{URM\*}
.xx "" "/protocol used between host and" "windowing terminal under/" "" layers(5)~\*{PRM\*}
.xx "" "/protocol used between host and" "windowing terminal under/" "" layers(5)~\*{SARM\*}
.xx "" "layers: layer multiplexor for" "windowing terminals." "" layers(1)~\*{URM\*}
.xx "" "/multiplexed tty driver for AT&T" "windowing terminals." "" xt(7)~\*{SARM\*}
.xx "" "/multiplexed tty driver for AT&T" "windowing terminals." "" xt(7)~\*{STRM\*}
.xx "" "wredrawln: refresh curses" "windows and lines." "/redrawwin," curs_refresh(3X)~\*{CHAR\*}
.xx "" "and manipulate overlapped curses" "windows." "/copywin: overlap" curs_overlay(3X)~\*{CHAR\*}
.xx "" "print formatted output in curses" "windows." "/mvwprintw, vwprintw:" curs_printw(3X)~\*{CHAR\*}
.xx "" "wsyncdown: create curses" "windows." "/syncok, wcursyncup," curs_window(3X)~\*{CHAR\*}
.xx "" "/instr, innstr, winstr," "winnstr, mvinstr, mvinnstr,/" "" curs_instr(3X)~\*{CHAR\*}
.xx "insert a/" "curs_insch:  insch," "winsch, mvinsch, mvwinsch:" "" curs_insch(3X)~\*{CHAR\*}
.xx "" "/deleteln, wdeleteln, insdelln," "\%winsdelln, insertln,/" "" curs_deleteln(3X)~\*{CHAR\*}
.xx "" "/insdelln, \%winsdelln, insertln," "\%winsertln: delete and insert/" "" curs_deleteln(3X)~\*{CHAR\*}
.xx "" "/insstr, insnstr, winsstr," "winsnstr, mvinsstr, mvinsnstr,/" "" curs_insstr(3X)~\*{CHAR\*}
.xx "" "curs_instr:  insstr, insnstr," "winsstr, winsnstr, mvinsstr,/" "" curs_insstr(3X)~\*{CHAR\*}
.xx "" "curs_instr:  instr, innstr," "winstr, winnstr, mvinstr,/" "" curs_instr(3X)~\*{CHAR\*}
.xx "" "/wechochar: add a character" "(with attributes) to a curses/" "" curs_addch(3X)~\*{CHAR\*}
.xx "" "prof: profile" "within a function." "" prof(5)~\*{PRM\*}
.xx "" "/fasthalt: reboot/halt the system" "without checking the disks." "" fastboot(1M)~\*{BSD\*}
.xx "cursor." "curs_move:  move," "wmove: move curses window" "" curs_move(3X)~\*{CHAR\*}
.xx "redrawwin,/" "/refresh, wrefresh," "wnoutrefresh, doupdate," "" curs_refresh(3X)~\*{CHAR\*}
.xx "" "wc:" "word count." "" wc(1)~\*{URM\*}
.xx "" "inw: read a 16 bit short" "word from a 16 bit I/O port." "" inw(D3D)~\*{DDRM\*}
.xx "" "inl: read a 32 bit" "word from a 32 bit I/O port." "" inl(D3D)~\*{DDRM\*}
.xx "" "fgetc, getw: get character or" "word from a stream." "/getchar," getc(3S)~\*{PRM\*}
.xx "" "fputc, putw: put character or" "word on a stream." "/putchar," putc(3S)~\*{PRM\*}
.xx "" "outw: write a 16 bit short" "word to a 16 bit I/O port." "" outw(D3D)~\*{DDRM\*}
.xx "" "outl: write a 32 bit long" "word to a 32 bit I/O port." "" outl(D3D)~\*{DDRM\*}
.xx "port." "repoutsd: write 32 bit" "words from buffer to an I/O" "" repoutsd(D3D)~\*{DDRM\*}
.xx "port." "repoutsw: write 16 bit" "words from buffer to an I/O" "" repoutsw(D3D)~\*{DDRM\*}
.xx "" "repinsd: read 32 bit" "words from I/O port to buffer." "" repinsd(D3D)~\*{DDRM\*}
.xx "" "repinsw: read 16 bit" "words from I/O port to buffer." "" repinsw(D3D)~\*{DDRM\*}
.xx "or lines in a sorted/" "look: find" "words in the system dictionary" "" look(1)~\*{BSD\*}
.xx "" "cd: change" "working directory." "" cd(1)~\*{URM\*}
.xx "" "chdir, fchdir: change" "working directory." "" chdir(2)~\*{PRM\*}
.xx "" "getcwd: get pathname of current" "working directory." "" getcwd(3C)~\*{PRM\*}
.xx "" "pwd:" "working directory name." "" pwd(1)~\*{URM\*}
.xx "" "getwd: get current" "working directory pathname." "" getwd(3)~\*{BSD\*}
.xx "" "/specific alarms and/or the" "``working'' indicator." "" indicator(1F)~\*{CHAR\*}
.xx "" "scsi_worm: sw01 SCSI" "WORM Target Driver." "" scsi_worm(7)~\*{SARM\*}
.xx "vwprintw:/" "curs_printw:  printw," "wprintw, mvprintw, mvwprintw," "" curs_printw(3X)~\*{CHAR\*}
.xx "queue." "" "WR: get a pointer to the write" "" WR(D3DK)~\*{DDRM\*}
.xx "windows/" "/doupdate, redrawwin," "wredrawln: refresh curses" "" curs_refresh(3X)~\*{CHAR\*}
.xx "" "curs_refresh:  refresh," "wrefresh, wnoutrefresh,/" "" curs_refresh(3X)~\*{CHAR\*}
.xx "to an I/O port." "repoutsw:" "write 16 bit words from buffer" "" repoutsw(D3D)~\*{DDRM\*}
.xx "to an I/O port." "repoutsd:" "write 32 bit words from buffer" "" repoutsd(D3D)~\*{DDRM\*}
.xx "16 bit I/O port." "outw:" "write a 16 bit short word to a" "" outw(D3D)~\*{DDRM\*}
.xx "bit I/O port." "outl:" "write a 32 bit long word to a 32" "" outl(D3D)~\*{DDRM\*}
.xx "port." "outb:" "write a byte to an 8 bit I/O" "" outb(D3D)~\*{DDRM\*}
.xx "(to) a/" "/scr_init, scr_set: read" "(write) a curses screen from" "" curs_scr_dump(3X)~\*{CHAR\*}
.xx "I/O port." "repoutsb:" "write bytes from buffer to an" "" repoutsb(D3D)~\*{DDRM\*}
.xx "" "write:" "write data to a device." "" write(D2DK)~\*{DDRM\*}
.xx "" "write, writev:" "write on a file." "" write(2)~\*{PRM\*}
.xx "" "/post_form, unpost_form:" "write or erase forms from/" "" form_post(3X)~\*{CHAR\*}
.xx "" "/post_menu, unpost_menu:" "write or erase menus from/" "" menu_post(3X)~\*{CHAR\*}
.xx "" "putpwent:" "write password file entry." "" putpwent(3C)~\*{PRM\*}
.xx "" "WR: get a pointer to the" "write queue." "" WR(D3DK)~\*{DDRM\*}
.xx "entry." "putspent:" "write shadow password file" "" putspent(3C)~\*{PRM\*}
.xx "list." "mdl: read and optionally" "write the manufacturer's defect" "" mdl(1iref)~\*{MBRMAN\*}
.xx "" "wall:" "write to all users." "" wall(1M)~\*{SARM\*}
.xx "network." "rwall:" "write to all users over a" "" rwall(1M)~\*{NI\*}
.xx "network." "rwall:" "write to all users over a" "" rwall(1M)~\*{NUAG\*}
.xx "" "write:" "write to another user." "" write(1)~\*{URM\*}
.xx "machines." "rwall:" "write to specified remote" "" rwall(3N)~\*{NI\*}
.xx "" "" "write: write data to a device." "" write(D2DK)~\*{DDRM\*}
.xx "" "" "write: write to another user." "" write(1)~\*{URM\*}
.xx "" "" "write, writev: write on a file." "" write(2)~\*{PRM\*}
.xx "interconnect/" "ics_rdwr: reads or" "writes a specified number of" "" ics_rdwr(D3D)~\*{DDRM\*}
.xx "specified register/" "ics_write:" "writes a value into the" "" ics_write(D3D)~\*{DDRM\*}
.xx "registers of the/" "ics_write:" "writes into interconnect" "" ics_write(3iref)~\*{MBRMAN\*}
.xx "" "write," "writev: write on a file." "" write(2)~\*{PRM\*}
.xx "" "open: open for reading or" "writing." "" open(2)~\*{PRM\*}
.xx "" "a file region for reading or" "writing." "/lock or unlock" locking(2)~\*{ACG\*}
.xx "vwscanw:/" "curs_scanw:  scanw," "wscanw, mvscanw, mvwscanw," "" curs_scanw(3X)~\*{CHAR\*}
.xx "" "curs_scroll:  scroll, srcl," "wscrl: scroll a curses window." "" curs_scroll(3X)~\*{CHAR\*}
.xx "" "/immedok, leaveok, setscrreg," "wsetscrreg, scrollok, nl, nonl:/" "" curs_outopts(3X)~\*{CHAR\*}
.xx "" "/attrset, wattrset, \%standend," "wstandend, standout, wstandout:/" "" curs_attr(3X)~\*{CHAR\*}
.xx "" "/\%standend, wstandend, standout," "wstandout: curses character and/" "" curs_attr(3X)~\*{CHAR\*}
.xx "" "" "wstat: wait status." "" wstat(5)~\*{PRM\*}
.xx "" "/wsyncup, syncok, wcursyncup," "wsyncdown: create curses/" "" curs_window(3X)~\*{CHAR\*}
.xx "" "/derwin, mvderwin, dupwin," "wsyncup, syncok, wcursyncup,/" "" curs_window(3X)~\*{CHAR\*}
.xx "" "/noqiflush, qiflush, timeout," "wtimeout, typeahead: curses/" "" curs_inopts(3X)~\*{CHAR\*}
.xx "the 5620 DMD terminal." "" "wtinit: object downloader for" "" wtinit(1M)~\*{SARM\*}
.xx "" "utmp, wtmp: utmp and" "wtmp entry formats." "" utmp(4)~\*{PRM\*}
.xx "" "utmp, wtmp: utmp and" "wtmp entry formats." "" utmp(4)~\*{SARM\*}
.xx "formats." "utmp," "wtmp: utmp and wtmp entry" "" utmp(4)~\*{PRM\*}
.xx "formats." "utmp," "wtmp: utmp and wtmp entry" "" utmp(4)~\*{SARM\*}
.xx "accounting records." "fwtmp," "wtmpfix: manipulate connect" "" fwtmp(1M)~\*{SARM\*}
.xx "" "utmpx, wtmpx: utmpx and" "wtmpx entry formats." "" utmpx(4)~\*{PRM\*}
.xx "" "utmpx, wtmpx: utmpx and" "wtmpx entry formats." "" utmpx(4)~\*{SARM\*}
.xx "formats." "utmpx," "wtmpx: utmpx and wtmpx entry" "" utmpx(4)~\*{PRM\*}
.xx "formats." "utmpx," "wtmpx: utmpx and wtmpx entry" "" utmpx(4)~\*{SARM\*}
.xx "" "/touchwin, touchline, untouchwin," "wtouchln, is_linetouched,/" "" curs_touch(3X)~\*{CHAR\*}
.xx "" "/box, hline, whline, vline," "wvline: create curses borders,/" "" curs_border(3X)~\*{CHAR\*}
.xx "" "" "x286emul: emulate XENIX 80286." "" x286emul(1)~\*{PRM\*}
.xx "list(s) and execute command." "" "xargs: construct argument" "" xargs(1)~\*{URM\*}
.xx "external data representation." "" "xdr: library routines for" "" xdr(3N)~\*{NI\*}
.xx "procedure calls." "/xdr_replymsg:" "XDR library routines for remote" "" rpc_xdr(3N)~\*{NI\*}
.xx "xdr_authsys_parms,/" "rpc_xdr:" "xdr_accepted_reply," "" rpc_xdr(3N)~\*{NI\*}
.xx "xdr_inline, xdrrec_eof,/" "" "xdr_admin:  xdr_getpos," "" xdr_admin(3N)~\*{NI\*}
.xx "xdr_opaque,/" "xdr_complex:" "xdr_array, xdr_bytes," "" xdr_complex(3N)~\*{NI\*}
.xx "" "rpc_xdr:   xdr_accepted_reply," "xdr_authsys_parms, xdr_callhdr,/" "" rpc_xdr(3N)~\*{NI\*}
.xx "xdr_enum,/" "xdr_simple:" "xdr_bool, xdr_char, xdr_double," "" xdr_simple(3N)~\*{NI\*}
.xx "" "xdr_complex:   xdr_array," "xdr_bytes, xdr_opaque,/" "" xdr_complex(3N)~\*{NI\*}
.xx "" "/xdr_authsys_parms," "xdr_callhdr, xdr_callmsg,/" "" rpc_xdr(3N)~\*{NI\*}
.xx "" "/xdr_authsys_parms, xdr_callhdr," "xdr_callmsg, xdr_opaque_auth,/" "" rpc_xdr(3N)~\*{NI\*}
.xx "" "xdr_simple:   xdr_bool," "xdr_char, xdr_double, xdr_enum,/" "" xdr_simple(3N)~\*{NI\*}
.xx "xdr_bytes, xdr_opaque,/" "" "xdr_complex:   xdr_array," "" xdr_complex(3N)~\*{NI\*}
.xx "xdrmem_create, xdrrec_create,/" "" "xdr_create:   xdr_destroy," "" xdr_create(3N)~\*{NI\*}
.xx "xdrrec_create,/" "xdr_create:" "xdr_destroy, xdrmem_create," "" xdr_create(3N)~\*{NI\*}
.xx "xdr_free,/" "/xdr_bool, xdr_char," "xdr_double, xdr_enum, xdr_float," "" xdr_simple(3N)~\*{NI\*}
.xx "" "/xdr_bool, xdr_char, xdr_double," "xdr_enum, xdr_float, xdr_free,/" "" xdr_simple(3N)~\*{NI\*}
.xx "" "/xdr_char, xdr_double, xdr_enum," "xdr_float, xdr_free, xdr_int,/" "" xdr_simple(3N)~\*{NI\*}
.xx "" "/xdr_double, xdr_enum, xdr_float," "xdr_free, xdr_int, xdr_long,/" "" xdr_simple(3N)~\*{NI\*}
.xx "xdrrec_eof,/" "xdr_admin:" "xdr_getpos, xdr_inline," "" xdr_admin(3N)~\*{NI\*}
.xx "" "xdr_admin:  xdr_getpos," "xdr_inline, xdrrec_eof,/" "" xdr_admin(3N)~\*{NI\*}
.xx "" "/xdr_enum, xdr_float, xdr_free," "xdr_int, xdr_long, xdr_short,/" "" xdr_simple(3N)~\*{NI\*}
.xx "" "/xdr_float, xdr_free, xdr_int," "xdr_long, xdr_short, xdr_u_char,/" "" xdr_simple(3N)~\*{NI\*}
.xx "" "xdr_create:   xdr_destroy," "xdrmem_create, xdrrec_create,/" "" xdr_create(3N)~\*{NI\*}
.xx "" "/xdr_array, xdr_bytes," "xdr_opaque, xdr_pointer,/" "" xdr_complex(3N)~\*{NI\*}
.xx "" "/xdr_callhdr, xdr_callmsg," "xdr_opaque_auth,/" "" rpc_xdr(3N)~\*{NI\*}
.xx "" "/xdr_bytes, xdr_opaque," "xdr_pointer, xdr_reference,/" "" xdr_complex(3N)~\*{NI\*}
.xx "" "/xdr_destroy, xdrmem_create," "xdrrec_create, xdrstdio_create:/" "" xdr_create(3N)~\*{NI\*}
.xx "" "/xdr_getpos, xdr_inline," "xdrrec_eof, xdr_setpos: library/" "" xdr_admin(3N)~\*{NI\*}
.xx "" "/xdr_opaque, xdr_pointer," "xdr_reference, xdr_string,/" "" xdr_complex(3N)~\*{NI\*}
.xx "" "/xdr_callmsg, xdr_opaque_auth," "xdr_rejected_reply,/" "" rpc_xdr(3N)~\*{NI\*}
.xx "routines/" "/xdr_rejected_reply," "xdr_replymsg: XDR library" "" rpc_xdr(3N)~\*{NI\*}
.xx "" "/xdr_inline, xdrrec_eof," "xdr_setpos: library routines for/" "" xdr_admin(3N)~\*{NI\*}
.xx "" "/xdr_free, xdr_int, xdr_long," "xdr_short, xdr_u_char,/" "" xdr_simple(3N)~\*{NI\*}
.xx "xdr_char, xdr_double, xdr_enum,/" "" "xdr_simple:   xdr_bool," "" xdr_simple(3N)~\*{NI\*}
.xx "" "/xdrmem_create, xdrrec_create," "xdrstdio_create: library/" "" xdr_create(3N)~\*{NI\*}
.xx "" "/xdr_pointer, xdr_reference," "xdr_string, xdr_union,/" "" xdr_complex(3N)~\*{NI\*}
.xx "" "/xdr_int, xdr_long, xdr_short," "xdr_u_char, xdr_u_long,/" "" xdr_simple(3N)~\*{NI\*}
.xx "" "/xdr_long, xdr_short, xdr_u_char," "xdr_u_long, xdr_u_short,/" "" xdr_simple(3N)~\*{NI\*}
.xx "" "/xdr_reference, xdr_string," "xdr_union, xdr_vector,/" "" xdr_complex(3N)~\*{NI\*}
.xx "" "/xdr_u_char, xdr_u_long," "xdr_u_short, xdr_void: library/" "" xdr_simple(3N)~\*{NI\*}
.xx "library/" "/xdr_string, xdr_union," "xdr_vector, xdr_wrapstring:" "" xdr_complex(3N)~\*{NI\*}
.xx "" "/xdr_u_long, xdr_u_short," "xdr_void: library routines for/" "" xdr_simple(3N)~\*{NI\*}
.xx "for/" "/xdr_union, xdr_vector," "xdr_wrapstring: library routines" "" xdr_complex(3N)~\*{NI\*}
.xx "" "x286emul: emulate" "XENIX 80286." "" x286emul(1)~\*{PRM\*}
.xx "" "fixperm: correct or initialize" "XENIX file permissions and/" "" fixperm(1M)~\*{SARM\*}
.xx "" "xfsck: check and repair" "XENIX filesystems." "" xfsck(1M)~\*{SARM\*}
.xx "" "xrestore, xrestor: invoke" "XENIX incremental filesystem/" "" xrestore(1M)~\*{SARM\*}
.xx "" "xinstall:" "XENIX installation shell script." "" xinstall(1M)~\*{SARM\*}
.xx "" "cvtomflib: convert OMF" "(XENIX) libraries to ELF." "" cvtomflib(1)~\*{ACG\*}
.xx "" "portions of certain UNIX or" "XENIX packages." "/specific" custom(1)~\*{ACG\*}
.xx "module." "ttcompat: V7, 4BSD and" "XENIX STREAMS compatibility" "" ttcompat(7)~\*{SARM\*}
.xx "filesystems." "" "xfsck: check and repair XENIX" "" xfsck(1M)~\*{SARM\*}
.xx "" "" "xinstall: install commands." "" xinstall(1M)~\*{ACG\*}
.xx "shell script." "" "xinstall: XENIX installation" "" xinstall(1M)~\*{SARM\*}
.xx "" "/rpc_reg, svc_reg, svc_unreg," "xprt_register, xprt_unregister:/" "" rpc_svc_calls(3N)~\*{NI\*}
.xx "" "/svc_unreg, xprt_register," "xprt_unregister: library/" "" rpc_svc_calls(3N)~\*{NI\*}
.xx "incremental/" "xrestore," "xrestor: invoke XENIX" "" xrestore(1M)~\*{SARM\*}
.xx "incremental filesystem/" "" "xrestore, xrestor: invoke XENIX" "" xrestore(1M)~\*{SARM\*}
.xx "" "xtt: extract and print" "xt driver packet traces." "" xtt(1M)~\*{SARM\*}
.xx "" "xts: extract and print" "xt driver statistics." "" xts(1M)~\*{SARM\*}
.xx "" "channels protocol used by" "xt driver." "xtproto: multiplexed" xtproto(5)~\*{PRM\*}
.xx "" "channels protocol used by" "xt driver." "xtproto: multiplexed" xtproto(5)~\*{SARM\*}
.xx "tty driver for AT&T windowing/" "" "xt: STREAMS-based multiplexed" "" xt(7)~\*{SARM\*}
.xx "tty driver for AT&T windowing/" "" "xt: STREAMS-based multiplexed" "" xt(7)~\*{STRM\*}
.xx "" "/gcd, rpow, msqrt, sdiv, itom," "xtom, mtox, mfree: multiple/" "" mp(3X)~\*{BSD\*}
.xx "protocol used by xt driver." "" "xtproto: multiplexed channels" "" xtproto(5)~\*{PRM\*}
.xx "protocol used by xt driver." "" "xtproto: multiplexed channels" "" xtproto(5)~\*{SARM\*}
.xx "statistics." "" "xts: extract and print xt driver" "" xts(1M)~\*{SARM\*}
.xx "packet traces." "" "xtt: extract and print xt driver" "" xtt(1M)~\*{SARM\*}
.xx "" "bessel: j0, j1, jn," "y0, y1, yn: Bessel functions." "" bessel(3M)~\*{PRM\*}
.xx "" "bessel: j0, j1, jn, y0," "y1, yn: Bessel functions." "" bessel(3M)~\*{PRM\*}
.xx "compiler-compiler." "" "yacc: yet another" "" yacc(1)~\*{PRM\*}
.xx "" "" "yes: print string repeatedly." "" yes(1)~\*{ACG\*}
.xx "" "ckyorn: prompt for and validate" "yes/no." "" ckyorn(1)~\*{ISDG\*}
.xx "" "ckyorn: prompt for and validate" "yes/no." "" ckyorn(1)~\*{SARM\*}
.xx "" "yacc:" "yet another compiler-compiler." "" yacc(1)~\*{PRM\*}
.xx "" "bessel: j0, j1, jn, y0, y1," "yn: Bessel functions." "" bessel(3M)~\*{PRM\*}
.xx "" "ypinit: build and install" "YP database." "" ypinit(1M)~\*{NI\*}
.xx "" "ypmake: rebuild" "YP database." "" ypmake(1M)~\*{NI\*}
.xx "" "ypxfr: transfer" "YP map from a YP server to host." "" ypxfr(1M)~\*{NI\*}
.xx "" "ypxfr: transfer YP map from a" "YP server to host." "" ypxfr(1M)~\*{NI\*}
.xx "" "/yp_match, yp_first, yp_next," "yp_all, yp_order, yp_master,/" "" ypclnt(3N)~\*{NI\*}
.xx "" "ypset: point" "ypbind at a particular server." "" ypset(1M)~\*{NI\*}
.xx "processes." "ypserv," "ypbind: NIS server and binder" "" ypserv(1M)~\*{NI\*}
.xx "" "ypclnt, yp_get_default_domain," "yp_bind, yp_unbind, yp_match,/" "" ypclnt(3N)~\*{NI\*}
.xx "data base." "" "ypcat: print values in a NIS" "" ypcat(1)~\*{NI\*}
.xx "yp_bind, yp_unbind, yp_match,/" "" "ypclnt, yp_get_default_domain," "" ypclnt(3N)~\*{NI\*}
.xx "" "/yp_all, yp_order, yp_master," "yperr_string, ypprot_err: NIS/" "" ypclnt(3N)~\*{NI\*}
.xx "Service (NIS) database and/" "" "ypfiles: the Network Information" "" ypfiles(4)~\*{NI\*}
.xx "" "/yp_bind, yp_unbind, yp_match," "yp_first, yp_next, yp_all,/" "" ypclnt(3N)~\*{NI\*}
.xx "yp_unbind, yp_match,/" "ypclnt," "yp_get_default_domain, yp_bind," "" ypclnt(3N)~\*{NI\*}
.xx "database." "" "ypinit: build and install YP" "" ypinit(1M)~\*{NI\*}
.xx "" "" "ypmake: rebuild YP database." "" ypmake(1M)~\*{NI\*}
.xx "" "/yp_next, yp_all, yp_order," "yp_master, yperr_string,/" "" ypclnt(3N)~\*{NI\*}
.xx "or more keys from the NIS map." "" "ypmatch: print the value of one" "" ypmatch(1)~\*{NI\*}
.xx "yp_all,/" "/yp_bind, yp_unbind," "yp_match, yp_first, yp_next," "" ypclnt(3N)~\*{NI\*}
.xx "" "/yp_unbind, yp_match, yp_first," "yp_next, yp_all, yp_order,/" "" ypclnt(3N)~\*{NI\*}
.xx "" "yp_first, yp_next, yp_all," "yp_order, yp_master,/" "/yp_match," ypclnt(3N)~\*{NI\*}
.xx "of the map at the NIS server/" "" "yppoll: return current version" "" yppoll(1M)~\*{NI\*}
.xx "" "/yp_master, yperr_string," "ypprot_err: NIS client/" "" ypclnt(3N)~\*{NI\*}
.xx "changed NIS map." "" "yppush: force propagation of a" "" yppush(1M)~\*{NI\*}
.xx "binder processes." "" "ypserv, ypbind: NIS server and" "" ypserv(1M)~\*{NI\*}
.xx "particular server." "" "ypset: point ypbind at a" "" ypset(1M)~\*{NI\*}
.xx "" "/yp_get_default_domain, yp_bind," "yp_unbind, yp_match, yp_first,/" "" ypclnt(3N)~\*{NI\*}
.xx "information." "" "yp_update: change NIS" "" ypupdate(3N)~\*{NI\*}
.xx "NIS information." "" "ypupdated: server for changing" "" ypupdated(1M)~\*{NI\*}
.xx "server or map master." "" "ypwhich: return name of NIS" "" ypwhich(1)~\*{NI\*}
.xx "server to host." "" "ypxfr: transfer YP map from a YP" "" ypxfr(1M)~\*{NI\*}
.xx "" "compress, uncompress," "zcat: compress data for storage,/" "" compress(1)~\*{URM\*}
.xx "" "" "zdump: time zone dumper." "" zdump(1M)~\*{SARM\*}
.xx "" "" "zero: source of zeroes." "" zero(7)~\*{SARM\*}
.xx "" "zero: source of" "zeroes." "" zero(7)~\*{SARM\*}
.xx "" "" "zic: time zone compiler." "" zic(1M)~\*{SARM\*}
.xx "" "zic: time" "zone compiler." "" zic(1M)~\*{SARM\*}
.xx "" "zdump: time" "zone dumper." "" zdump(1M)~\*{SARM\*}
.xx "" "timezone: get time" "zone name given offset from GMT." "" timezone(3C)~\*{BSD\*}
.xx "" "set default system time" "zone." "timezone:" timezone(4)~\*{PRM\*}
.xx "" "set default system time" "zone." "timezone:" timezone(4)~\*{SARM\*}
