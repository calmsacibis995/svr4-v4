'\"macro stdmacro
.if n .pH mb2s.sendreply @(#)sendreply	40.7 of 5/15/91
.\" Copyright 1991 UNIX System Laboratories, Inc.
.\" Copyright 1989, 1990 AT&T
.nr X
.if \nX=0 .ds x} mb2s_sendreply 3tai "" "\&"
.if \nX=1 .ds x} mb2s_sendreply 3tai ""
.if \nX=2 .ds x} mb2s_sendreply 3tai "" "\&"
.if \nX=3 .ds x} mb2s_sendreply "" "" "\&"
.TH \*(x}
.SH NAME
\f4mb2s_sendreply\f1 \- Sends a reply message in synchronous mode.
.SH SYNOPSIS
.ft 4
.nf
#include <sys/types.h>
#include <sys/mb2taiusr.h>
int mb2s_sendreply(fd, socketidptr, ctlbufptr, databufptr, tid,
     lastflag)
int fd;
mb2_socket *socketidptr;
mb2_buf *ctlbufptr;
mb2_buf *databufptr;
unsigned char tid;
int lastflag;
.ft
.fi
.SH DESCRIPTION
This routine is used to send a \f4Multibus II\f1 transport reply message or
reply message fragment in synchronous mode.
Only \f4Multibus II\f1 transport
servers use this routine.
.TP 15
\f4fd\f1
specifies a synchronous mode file descriptor referencing an
open port.
.TP
\f4socketidptr\f1
contains a pointer to the socket ID of the client.
.TP
\f4ctlbufptr\f1
is a pointer to structures describing the control
portion of the message.
.TP
\f4databufptr\f1
is a pointer to structures describing the data
portion of the message.
.TP
\f4tid\f1
specifies the transaction ID of the transaction.
.TP
\f4lastflag\f1 
is either \f4MB2_EOT\f1 or \f4MB2_NOTEOT\f1, depending on
whether or not this is the last (EOT) fragment of the reply.
.P
To send the data portion of the reply message, \f4databufptr\fP must be
non-NULL and the \f4len\f1 field must have a value greater than 0.
To send the
control portion of the reply message, the corresponding values must be set
for \f4ctlbufptr\f1.
A NULL reply message can be sent if both the \f4ctlbufptr\fP and
\f4databufptr\fP are NULL or have their \f4len\f1 field set to 0.
.P
The maximum length of the control portion is 20 bytes if no data
portion is present.
The maximum length is 16 bytes if the reply message has a
non-NULL data portion.
\f4MB2_EOT\f1 must be specified for \f4lastflag\fP if the reply
message consists of only one fragment (possibly both control and data
portions) or if the message has only a control portion and a NULL data portion.
The last flag must be set to \f4MB2_EOT\f1 on the last fragment transferred.
The
last fragment specifies the end of a transaction.
The \f4tid\fP must be the
transaction ID obtained from a previous request message (\f4MB2_REQ_MSG\f1 or
\f4MB2_REQFRAG_MSG\f1).
.P
\f4mb2s_sendreply\f1 blocks when the send side queue is full due to internal
flow control conditions.
The flow control parameters can be set at the time
the port is opened.
\f4mb2s_sendreply\f1 also blocks when waiting for availability
of internal buffers.
When this routine returns, the message has been sent out
or has been\p
.br
.ne 3
queued to be sent.
No completion or error indication is returned
to the user if the transfer fails.
.P
Upon successful completion of the routine, a value of 0 is returned.
A
value of -1 is returned and an \f4errno\fP is set if there were errors.
The
following is a list of applicable errors for this routine.
.TP 10
\f4EAGAIN\f1
buffers could not be allocated for message to
be sent.
.TP
\f4EBADF\f1
\f4fd\fP is not a valid file descriptor.
.TP
\f4EFAULT\f1
\f4ctlbufptr\fP or \f4databufptr\fP point outside the
allocated address space.
.TP
\f4EINTR\f1
a signal was caught during the call.
.TP
\f4EINVAL\f1
the value specified for one of the arguments is
invalid.
.TP
\f4ENOSTR\f1
\f4fd\fP is not a file descriptor to a \f4Multibus II\f1
transport endpoint.
.TP
\f4ENXIO\f1
a hardware error condition was generated when sending
the message.
.TP
\f4ERANGE\f1
the size of the control or the data part of the
message is outside the range of the minimum/ maximum allowable message size.
 .SH NOTES
Because the order of Solicited and Unsolicited messages is not guaranteed,
build the responce message (\f4mb2s_sendreply\fP)
as either a series of solicited messages with the
\f4MB2_EOT\fP flag set on the last solicited message,
or as a single unsolicited message with the
\f4MB2_EOT\fP flag set.
.SH SEE ALSO
\f4putmsg\f1(2), \f4getmsg\f1(2), \f4write\f1(2)
