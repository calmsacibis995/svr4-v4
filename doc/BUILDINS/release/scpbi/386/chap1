'\"!  tbl | mmdoc
'\"macro stdmacro
.if n .pH scrn.chap1 @(#)chap1	40.39.1.3 of 7/15/91
.\" Copyright 1991 UNIX System Laboratories, Inc.
.BK "Source Code Product Build Instructions"
.CH "Source Code Product Build Instructions" 1
.H 1 "Contents of the Tape"
This section describes how to install and build UNIX System V/386 Release 4 on 386 computer systems.
The chapter begins by reviewing the contents of the Source Code Product
(SCP) software tape.
.P
The distribution tape contains source code for the following utilities.
.AL a
.LI
Foundation Set:
.in .25i
.BL
.LI
3com IE6 (3C503) Ethernet Driver
.LI
Application Compatibility Package
.LI
Base System Package - Version 4.0
.LI
Berkeley 4.3 BSD Compatibility Package
.LI
Cartridge Tape Utilities
.LI
DFS (Distributed File System) Utilities
.LI
Editing Package
.LI
Form and Menu Language Interpreter (FMLI\(tm)
.LI
Framed Access Command Environment (FACE\(tm)
.LI
Internet Utilities
.LI
KDB Kernel Debugger (RPN)
.LI
Kernel Debugger Support Utilities
.LI
Line Printer Utilities
.LI
Network File System Utilities
.LI
Network Support Utilities Package
.LI
Operation, Administration and Maintenance (OA&M)
.LI
RFS (Remote File Sharing) Package
.LI
Remote Procedure Call Utilities
.LI
Remote Terminal Package
.LI
Security Administration Package
.LI
Standard C Development Environment
.LI
Termcap Compatibility Package
.LI
Unlimited Per User Licensing
.LI
Windowing Utilities
.in 0i
.LE
.LI
Software Development Set:
.in .25i
.BL
.LI
Standard C Development Environment (CI5)
.LI
Extended Terminal Interface Package
.LE
.in 0i
.LI
Cartridge Tape Utilities - Version 2.0 (Merged version)
.LI
Mouse Driver Package - Version 3.0
.LI
SCSI Package
.in .25i
.BL
.LI
Adaptec SCSI Host Adaptor
.LI
Western Digital SCSI Host Adaptor
.LI
SCSI Target Drivers for: Hard Disk (sd01), Tape Drive (st01),
CD-ROM (sc01) and
WORM (sw01)
.LI
SCSI commands
.LE
.in 0i
.LI
Source Utilities Set
.in .25i
.BL
.LI
UNIX System Kernel Debugger - Version 3.0
.LI
PC586 Ethernet Driver - Version 2.4
.LI
Archive XL Floppy Tape Utilities - Version 1.0
.LE
.in 0i
.LI
Architecture-Specific Source
.in .25i
.BL
.LI
Multibus II Source Code
.LI
Multibus II 486/133se Source Code
.LI
EISA
.in 0i
.LE
.LE
.H 1 "Dependency Notes"
Only object code generated by building the Source Code Product on your computer
running UNIX System V/386 Release 4
and the Standard C Development Environment (SCDE) is
supported.
.H 2 "Hardware Dependencies"
.H 3 "Hardware Options for Installation"
An Intel 80386 based microcomputer is required.
.P
The Source Code Product is available on a nine track tape and a cartridge tape (\(14 inch nine track/serpentine QIC 24).
.P
If you purchase the cartridge tape you will need a Wangtek or compatible
60 or 125 megabyte streaming tape drive.
.P
If you purchase the nine track tape you will need access to a computer with a
nine track tape drive (an AT&T 3B20 computer,
for example).  Read the Source Code Product tape from the nine track tape drive
onto your computer at 1600 BPI and transfer the files to your AT&T 6386 WGS or compatible.
.H 3 "Memory Requirements"
Four megabytes of RAM are required for UNIX System V/386 Release 4.
We recommend building with at least eight (8) megabytes.
.H 3 "Space Requirements"
To build the full Source Code Product on your computer for an AT386 bus type,
you must have at least one 135 megabyte hard disk.
.P
To build the full Source Code Product and package
the binary output on your computer for an AT386 bus type,
it is recomended to have at least 200 megabyte hard disk space.
.SK
.FG "Setup and Build Space Requirements"
.TS
center;
c | c s|
c | c | c |
c | c | c |
l | n | n |.
Type of Build	Blocks used in
\^	_	_
\^	filesystem	/tmp
_
Setup	128000	0
Full System	121000	3200
Standard C Development Environment Only	22000	200
Full System less Standard C Development Environment	88000	3200
Kernel Only	15000	200
.TE
.AB N
\f1512 byte blocks calculated with
\f4du\f1(1).
All numbers rounded up to the nearest hundred.
.AC
.H 2 "Software Dependencies"
.P
To build from the source tape you must have the following installed:
.BL
.LI
UNIX System V/386 Release 4 Base System Package
.LI
Standard C Development Environment (CI5)
.LI
Editing Package
.LI
Cartridge Tape Utility - This is required to read
in the cartridge tape containing the source for the \(14" cartridge tape customers.
.LE
.H 2 "Time Dependencies"
The build times specified in this document are based on the following
hardware.
.BL
.LI
4 megabytes of RAM
.LI
80386 / 16 Megahertz
.LE
Depending upon your hardware, your times may vary.
.H 2 "Shell Dependencies"
You must be running the Bourne shell to build the software.
.H 1 "Building Binary from Source"
.P
This section describes the procedure for building binaries
(which can be done either as root or non-root)
from the source tape.
.AB N
This procedure describes how to build the system in the default
configuration.
You may also build the system for other BUS types or DOS emulations.
See Figure 1-2 for this information.
.AC
The Standard C Development Environment (SCDE) source is part of
the source tape.
.P
.\" The international version of the Source Code Product differs 
.\" from the United States version in that the following six files are
.\" not included in the international version:
.\" .DS I UI
.\" $ROOT/usr/src/cmd/crypt/crypt.c
.\" $ROOT/usr/src/lib/libcrypt/des_decrypt.c
.\" $ROOT/usr/src/lib/libnsl/des/des_crypt.c
.\" $ROOT/usr/src/lib/libnsl/des/des_soft.c
.\" $ROOT/usr/src/uts/i386/des/des_crypt.c
.\" $ROOT/usr/src/uts/i386/des/des_soft.c
.\" .DE
The UNIX System V/386 Release 4 Source Tape includes the following
UNIX System V/386 Release 3.2 shared libraries (binary files) so
that UNIX System V/386 Release 3.2 (3.2.1 or 3.2.2) executables will
run on UNIX System V/386 Release 4 :
.DS I UI
shlib/libc_s
shlib/libnsl_s
.DE
.H 2 "Source Installation"
The source tape contains the \f4usr/src\f1 directory.
All source code is found in this directory.
.P
To install the source code from the distributed cartridge tape, do the following
steps:
.BL
.LI
Make a root directory, \f4/usr/src386\f1, for the source tree.
.ti +5
\f4mkdir /usr/src386\f1
.ti -5
.AB N
In this document, \f4/usr/src386\f1 is used as an 
example for the 'root' directory.
You can use any directory you wish for your \f4root\f1 except for \f4/\f1.
If you use a \f4root\f1 other than \f4/usr/src386\f1,
remember to substitute it when following the steps.
.AC
.LI
Insert and retension the source tape.
.ti +5
\f4/usr/lib/tape/tapecntl -t\f1
.LI
Change into this directory and read in the source tape.
.ti +5
\f4cd /usr/src386\f1
.br
.ti +5
\f4dd if=/dev/rmt/c0s0 bs=1048576 | uncompress |cpio -icvdu\fP
.LE
.ti -5
.P
All the files and directories on the source
tape are owned by login ID 104.
If you read in the tape as non-root,
all the files and directories will be owned by
the login ID reading in the tape.
If you read in the tape as root, all the files
and directories will be owned by a login ID number (e.g., 104, 105).
.H 2 "Building on UNIX System V/386 Release 4"
The following changes are required when building on a SVR4 system:
.H 3 "Environmental Changes"
To build the complete system (\f4:mk\f1) or just the SCDE (\f4:mk.csds\f1), 
you must raise your \f4NINODE\f1 (and your \f4UFSNINODE\f1 if \f4/\f1 
or the build tree is a \f4ufs\f1 filesystem)
tuneable to \f4500\f1 in \f4/etc/conf/cf.d/stune\f1 and then 
rebuild your kernel and reboot.
If you fail to do this, the build of \f4libc\f1 will fail.
.DS I UI
/etc/conf/bin/idtune -m NINODE 500
/etc/conf/bin/idtune -m UFSNINODE 500
/etc/conf/bin/idbuild
cd /
shutdown -y -i6 -g0
.DE
.H 3 "Swap Space Changing"
You should have a minimum of 8 megabytes of swap space (\f4/dev/swap\f1) when you
build the release.
If you have already loaded your system and allocated a smaller
swap space, you must increase it.
You can do this one of two ways.
.AL a
.LI
Reload the entire release and allocate more for swap.
This method is the preferred way as it deletes everything on 
your hard disk and forces you to reload everything.
.LI
Using the \f4swap\f1(1M) command (as root) do the following:
.LE
.DS I UI
for i in 1 2 3 4
do
cat /unix >> /etc/swap_image
done

swap -a /etc/swap_image 0 8100
.DE
The \f4swap -a /etc/swap_image 0 8100\f1 line should be added to 
an \f4/etc/rc2.d\f1 script such as \f4s20sysetup\f1,
so the \f4swap -a\f1 will execute each 
time you boot the system.
.H 2 "Building the Release"
This section describes a way of building the binary release for the UNIX System
V/386 Release 4 for the AT386 bus.
To build a binary release including kernel, commands, libraries,
Standard C Development Environment and other
add-on packages, follow these steps:
.BL
.LI
Set and export the symbolic link variable \f4$SYMLINK\fP.
.ti +5
\f4SYMLINK=":"; export SYMLINK\fP
.LI
Set and export the environment variable \f4$ROOT\f1 to the root of the source tree.
.ti +5
\f4ROOT=/usr/src386; export ROOT\f1
.AB N
\f4/usr/src386\f1 is an example of a user-defined directory
containing a source tree and where executables will be placed.
.AC
.LI
Change into the directory containing the build scripts and build the code.
.DS I UI
\f4cd $ROOT/usr/src\f1
\f4nohup sh ./:mk.arch at\f1
\f4nohup sh ./:mk &\f1
.DE
.P
This will build and install the complete AT&T386 source code product 
relative to \f4$ROOT\f1.
The new binaries will not interfere with the running system.
.LE
.in 0
This build requires about 24 hours on a 386 system with four megabytes of memory.
You \f4nohup\f1 the build in background so you can look at 
the build output later if needed.
.AB N
To save output and change swap space,
the minimum \f4ulimit\fP is 8192.
.AC
.P
This release is built with the following defines by default (this is the
default configuration).
.SK
.FG "Source Code Build Defines"
.TS H
center box;
c | c
c | l.
Define	Meaning
_
.TH
VPIX	Turned on.  Can be turned off in \f4:mk\f1 or \f4:mk.fnd\f1.
\^	AT&T Simul-Task 386\(tm or VP/ix\(tm\(* kernel support
_
AT386	Turned on.  Can be turned off in \f4:mk\f1, \f4:mk.csds\f1 or \f4:mk.fnd\f1.
\^	IBM PC/AT Bus Architecture
_
WEITEK	Turned on.  Can be turned off only in \f4:mkuts\f1.
\^	Weitek WTL 1167 floating point coprocessor board support
_
MERGE386	Turned on.  Can be turned on in \f4:mk\f1 or \f4:mk.fnd\f1.
\^	Locus Computing Corporation Merge 386\(tm kernel support
_
MB2	Turned off.  Can be turned on in \f4:mk\f1, \f4:mk.csds\f1 or \f4:mk.fnd\f1.
\^	Intel Multibus II Architecture
.TE
For example, to build a complete system for Merge 386\(tm, type in:
.DS I UI
\f4nohup sh ./:mk MERGE386 &\f1
.DE 
.P
To build a complete system for MB II 486/133se and no VP/ix\(tm, type in:
.DS I UI
\f4nohup sh ./:mk.arch mbus hiint\f1
\f4nohup sh ./:mk MB2 NOVPIX &\f1
.DE
.H 2 "Populating the Build Tree"
.H 3 "Architecture Specific Builds"
UNIX System V/386 Release 4 supports several bus architectures.
Most of the commands, libraries and kernel are bus independent.
Only a small localized set of changes are required to support 
a bus other than AT386.
If the changes for an architecture are small enough, 
the source code only contains \f4#ifdefs\f1 in them 
(see \f4usr/src/cmd/idcmd/idmkunix.c\f1 or \f4usr/src/uts/i386/os/startup.c\f1).
If, however, the changes are large, a complete replacement file is placed in the
architecture specific source tree.
.P
All architecture specific files are under \f4usr/src/arch\f1.
.P
\f4:mk.arch\f1 moves this code from \f4usr/src/arch\f1 into the build tree.
.NE 10
.FG "Make Argument Maps Into"
.P
.TS H
center box;
c | c | c | l.
Argument	ARCH set to	BUS set to	Contents
_
.TH
MB2	MBUS	MB2	Generic Multibus code and
\^	\^	\^	Multibus II specific code
_
EISA	AT386	EISA	EISA code
\^	\^	\^	\^
.TE
\f4:mk.arch\f1 can take multiple arguments.
So if you want to build a Hiint system, you
would enter: 
.DS I UI
\f4nohup sh ./mk.arch mbus hiint\f1.
.DE
.P
The above figure is used for \f4:mk, :mk.fnd, :mk.csds, :mk.i386\f1 
and \f4:mkuts\f1.
.H 2 "Build Only the Foundation Set"
To build only the Foundation Set and not the Standard C Development Environment,
follow these steps:
.BL
.LI
Set and export the symbolic link variable \f4$SYMLINK\fP.
.ti +5
\f4SYMLINK=":"; export SYMLINK\fP
.LI
Set and export the environment variable \f4$ROOT\f1 to the 
root of the source tree.
.ti +5
\f4ROOT=/usr/src386; export ROOT\f1
.LI
Change into the directory containing the build scripts and build the code.
.in +5
\f4cd $ROOT/usr/src\f1
.br
\f4nohup sh ./:mk.arch at\f1
.br
\f4nohup sh ./:mk.fnd &\f1
.in -5
.LE
This will build and install the Foundation Set relative to \f4$ROOT\f1.
The new binaries will not interfere with the running system.
This requires approximately 8 hours on a 386 system with 
four megabytes of memory.
You \f4nohup\f1 the build in background so you can look at 
the build output later if needed.
.AB N
If the running operating system is an earlier version
than the source, then a new complier must be built
before building the foundation set.
.AC
.H 2 "Build Only the Standard C Development Environment"
To build only the Standard C Development Environment and not the Foundation Set
do the following steps:
.BL
.LI
Set and export the symbolic link variable \f4$SYMLINK\fP.
.ti +5
\f4SYMLINK=":"; export SYMLINK\fP
.LI
Set and export the environment variable \f4$ROOT\f1 to the root of 
the source tree.
.ti +5
\f4ROOT=/usr/src386; export ROOT\f1
.LI
Change into the directory containing the build scripts and build the code.
.in +5
\f4cd $ROOT/usr/src\f1
.br
\f4nohup sh ./:mk.csds &\f1
.in -5
.LE
This will build and install the Standard C Development Environment 
relative to \f4$ROOT\f1.
The new binaries will not interfere with the running system.
This step requires approximately 16 hours on a 386 system with 
four megabytes of memory.
You \f4nohup\f1 the build in background so you can look at the build output later if needed.
.H 2 "Build Only the Add-ons"
To build only the Mouse Driver (mouse),
IMX586 Ethernet Driver (imx586),
Cartridge Tape Utilities (qt),
Archive XL Floppy Tape Utilities (xl),
Application Compatibility Package (acp),
WD Ethernet driver (wd),
3Com Ethernet Driver (ie6),
SCSI,
SCSI.IN,
Western Digital Ethernet Driver (WD),
PC Interface (PCI),
and PC Interface Ethernet Driver (PCI.ETH),
do the following steps:
.BL
.LI
Set and export the symbolic link variable \f4$SYMLINK\fP.
.ti +5
\f4SYMLINK=":"; export SYMLINK\fP
.LI
Set and export the environment variable \f4$ROOT\f1 to the root of 
the source tree.
.ti +5
\f4ROOT=/usr/src386; export ROOT\f1
.LI
Set up your PATH to include the \f4$ROOT/xenv\f1
.ti +5
\f4PATH=$ROOT/xenv:/usr/ccs/bin:$PATH:/etc; export PATH\f1
.LI
Change into the directory containing the build scripts and build the code.
.ti +5
\f4cd $ROOT/usr/src
.ti +5
sh ./.setup
.ti +5
MCS=mcs; export MCS
.ti +5
nohup sh ./:mk.addon mouse imx586 wd ie6 qt xl acp pci pcieth &\fP
.LE
The add-ons (imx586, wd, ie6, xl) are supplied by INTEL Corporation to AT&T.
.P
The \f4kdb\fP add-on build scripts are not part of \f4:mk.addon\fP.
They are built as part of \f4:mk.uts\fP.
.AB N
\f4setup\fP sets up the front end scripts to \f4make\f1(1) and \f4cc\f1(1).
\f4setup\fP also runs \f4:mkhead\f1 and \f4:mksyshead\f1 if needed.
.AC
.P
This step requires approximately two hours on a 386 system 
with four megabytes of memory.
You \f4nohup\f1 the build in background so you can look at the 
build output later if needed.
.P
The build of \f4kdb\fP, \f4mouse\fP, \f4imx586\fP, \f4wd\fP, \f4ie6\fP,
\f4qt\fP, \f4xl\fP, and \f4acp\fP depends on the following libraries:
\f4libns.a\f1 and \f4libnsl_s.a\f1.
If you have not already built the Base System Package, 
you must build these libraries before you build the packages 
or else the build will fail.
.P
To build these libraries, insert the following commands before
proceeding to the third step:
.DS I UI
cd $ROOT/usr/src
CH=#; export CH 
CCSTYPE=ELF; export CCSTYPE 
sh ./:mk.arch at 
sh ./:mklib libns nsl\f1
.DE
.bp
.H 2 "Build Only the UNIX Operating System Kernel"
To build only the kernel and the \f4idcmd\f1 commands,
follow these steps:
.AB N
The build of the kernel will automatically rebuild the \f4idcmd\f1
commands \f4$ROOT/etc/conf/bin: idbuild, idcheck, idconfig, idinstall, 
idmaster, idmkenv, idmkinit, idmknod, idmkunix, idreboot, idspace, and 
idtune\f1 so that they are compiled with the same defines as the kernel.
This is important because you want your \f4idbuild\f1(1M) command
to reflect how the kernel was compiled with VPIX and MB1.
.AC
.BL
.LI
Set and export the symbolic link variable \f4$SYMLINK\fP.
.ti +5
\f4SYMLINK=":"; export SYMLINK\fP
.LI
Set and export the environment variable \f4$ROOT\f1 to the root 
of the source tree.
.ti +5
\f4ROOT=/usr/src386; export ROOT\fP
.LI
Set up your \f4PATH\f1 to include the \f4$ROOT/xenv\fP
.ti +5
\f4PATH=$ROOT/xenv:/usr/ccs/bin:$PATH:/etc; export PATH\fP
.LI
Change into the directory containing the build scripts and build the kernel.
.DS I UI
\f4cd $ROOT/usr/src\f1
\f4sh ./.setup\f1
\f4nohup sh ./:mkuts AT386 &\f1
.DE
.LE
This will build and install the kernel relative to \f4$ROOT\f1.
This step requires approximately two hours on a 386 system 
with four megabytes of memory.
You \f4nohup\f1 the build in background so you can 
look at the build output later if needed.
.H 1 "Packaging the Binary Output"
The UNIX System V/386 Release 4 binaries can be packaged either
on floppy disks (5\(14" 1.2 Megabyte or 3\(12" 1.44 Megabyte) or on a streaming
cartridge tape (\(14" nine track/serpentine QIC 24).
.P
These first set of steps are the same for packaging on floppy disks or on a
streaming cartridge tape.
.BL
.LI
Use the procedure outlined above,
in ``Building the Release''.
.LI
Become root, set and export your \f4ROOT\fP and \f4SYMLINK\fP
environment variables, and set your \f4PATH\f1.
.in +5
\f4ROOT=/usr/src386; export ROOT\fP
.br
\f4SYMLINK=":"; export SYMLINK\fP
.br
\f4/bin/su root\f1
.br
\f4PATH=$ROOT/xenv:/usr/ccs/bin:$PATH; export PATH\f1
.in -5
.LI
Prepare for packaging:  \f4desktop.mk\fP will \f4pstamp\fP, create \f4cpio\fP
files for the Base System, file images for add-on
packages, and mini kernel for boot floppies.
.in +5
\f4cd $ROOT/usr/src/proto/i386/at386\f1
.br
\f4make -ef desktop.mk all\fP
.in -5
.LE
The following are procedures to prepare add-on packages, base
system, and boot floppies for packaging on an individual bases.
.BL
.LI
To prepare add-on packages for packaging:
.in +5
\f4cd $ROOT/usr/src/proto/i386/at386
.br
make -ef desktop.mk pkgbld\fP
.in -5
.LI
To prepare base system for packaging:
.in +5
\f4cd $ROOT/usr/src/proto/i386/at386
.br
make -ef desktop.mk proto\fP
.in -5
.LI
To prepare mini kernel for boot floppies:
.in +5
\f4cd $ROOT/usr/src/proto/i386/at386
.br
make -ef desktop.mk package\fP
.in -5
.LE
.H 2  "Packaging on Floppy Disks"
To package the newly created binary product on floppy disks, the following
steps must be performed:
.AB N
When changing between floppy densities (e.g., going from 3 1/2"
to 5 1/4" or vice versa) you must run \f4make -ef flop.mk new_size\fP.
.AC
.AL a
.LI
Package the Base Floppies (3 \(->\f2n\fP) on diskettes
.in +5
\f4cd $ROOT/usr/src/proto/i386/at386/desktop\fP
.br
.nf
.ft 4
sh ./bld.media          \f1(select 1 for 3 1/2" 1.44 Megabyte)\fP
                        \f1(select 2 for 5 1/4" 1.2 Megabyte)
.ft 1
.fi
.in -5
.P
The \f4make\fP scripts which do the packaging on diskettes
will prompt you for whether or not you want the diskettes formatted.
.LI
Build the Boot Floppy \(em UNIX System V/386 Release 4 supports
two different hardware platforms: SCSI and non-SCSI
(non-SCSI hardware is either a ST506 or ESDI Bootable Hard Disk).
These boot disks are significantly different.
.BL
.LI
Build the non-SCSI Boot Floppy
.ti +5
\f4make -ef flop.mk esdi\f1
.LI
Build the SCSI Boot Floppy
.ti +5
\f4make -ef flop.mk wd\f1
.br
This builds the SCSI Boot Floppy using the Western Digital Host Adapter.
.P
To build the SCSI boot floppy using the Adaptec Host Adapter, type in:
.ti +5
\f4make -ef flop.mk adaptec\fP
.LE
.LI
Package the following packages:
.BL
.LI
3com IE6(3C503) Ethernet Driver (\f4pkg.ie6\fP)
.LI
Berkeley Compatibility Package (\f4pkg.compat\f1)
.LI
Cartridge Tape Utilities (\f4pkg.qt\fP)
.LI
DFS Utilities (\f4pkg.dfs\f1)
.LI
Editing Package (\f4pkg.edit\f1)
.LI
Framed Access Command Environment (\f4pkg.face\fP)
.LI
AT&T Form and Menu Language Interpreter (\f4pkg.fmli\f1)
.LI
Intel IMXLAN586  Ethernet Driver (\f4pkg.imx586\fP)
.LI
Internet Utilities (\f4pkg.inet\f1)
.LI
KDB Kernel Debugger (RPN) (\f4pkg.kdb\fP)
.LI
Kernel Debugger Support Utilities (\f4pkg.kdbu\fP)
.LI
Line Printer Utilities (\f4pkg.lp\f1)
.LI
Mouse Driver Package (\f4pkg.mse\f1)
.LI
Network File System Utilities (\f4pkg.nfs\f1)
.LI
Networking Support Utilities (\f4pkg.nsu\f1)
.LI
Operation, Administration and Maintenance (\f4pkg.oam\f1)
.LI
PC Interface (\f4pkg.pci\f1)
.LI
PC Interface Ethernet Driver (\f4pkg.pcieth\f1)
.LI
RFS Utilities (\f4pkg.rfs\f1)
.LI
Remote Procedure Call Utilities (\f4pkg.rpc\f1)
.LI
Security Administration Utilities (\f4pkg.sec\f1)
.LI
Standard C Development Environment (\f4pkg.scde\fP)
.LI
Termcap Compatibility Package (\f4pkg.termcap\fP)
.LI
Terminal Information Utilities (\f4pkg.terminf\fP)
UNIX System V/386 Release 4 Unlimited User License Package (\f4license\fP)
.LI 
Western Digital 80003 Ethernet Driver (\f4pkg.wd\f1)
.LI
Windowing Utilities (\f4pkg.window\f1)
.LI
Application Compatibility Package (\f4pkg.acp\f1)
.P
Package the Add-on Packages on diskettes:
package names can be found in \f4$ROOT/var/spool/pkg\fP.
.ti +5
\f4cd $ROOT/usr/src/proto/i386/at386/desktop\fP
.ti +5
\f4sh ./bflop <package name>\fP	(for 3 1/2" 1.44 Megabyte)
.ti +5
\f4sh ./bflop1 <package name>\fP	(for 5 1/4" 1.2 Megabyte)
.LE
.LE
.H 2 "Packaging on Cartridge Tape"
To package the newly created binary product on cartridge tape,
the following steps must be performed:
.BL
.LI
Build the Boot Floppy - (See ``Packaging on Floppy Disks'', item b)
.P
You will be prompted to \f4Enter Density of Floppy\f1.
Do not be alarmed.  This is for the "Boot Floppy"
.LI
Package the Tape -
.ti +5
\f4cd $ROOT/usr/src/proto/i386/at386/desktop\fP
.ti +5
\f4sh ./bld.media\fP		(select 3 for cartridge tape)
.LE
.AB N
It is recommended that you use a 60 Megabyte Streaming Tape
Unit when packaging.
A tape produced on a 60 Megabyte STU can be read on a 60
Megabyte STU or a 125 Megabyte STU.
A tape produced on a 125 Megabyte STU can only be read
on a 125 Megabyte STU.
.AC
.H 1 "Freeing Disk Space"
Several groups of files may be removed after you have built the system
if disk space is needed.
These groups are located in several areas.
To remove them change into the \f4$ROOT\f1 directory and then follow
these procedures:
.H 3 "To clean up space in the kernel build tree"
.BL
.LI
\f4SYMLINK=":"; export SYMLINK\fP
.LI
\f4ROOT=/usr/src386; export ROOT\fP
.LI
\f4cd $ROOT/usr/src\f1
.LI
\f4sh ./:mkuts clobber\f1
.LE
.H 3 "To clean up space in the proto build tree"
.BL
.LI
\f4cd $ROOT/usr/src/proto/i386/at386\f1
.LI
\f4make -ef tape.mk clobber\f1 (if you built the Non-SCSI Boot Floppy)
.LI
\f4make -ef scsi.mk clobber\f1 (if you built the SCSI Boot Floppy)
.LE
.H 3 "To clean up space in /tmp (the add-on floppy images)"
.BL
.LI
\f4cd /tmp\f1
.LI
\f4rm -f *kdb *mouse *pc586 *qt *xl *xx\f1
.LI
\f4cd $ROOT/usr/src\f1
.LI
\f4rm -f pkg\f1
.LE
.H 3 "To clean up space in other places"
.BL
.LI
\f4cd $ROOT/usr/src\f1
.LI
\f4rm -f cmd/lxprof/bblk/tmp.s\f1
.LI
\f4sh ./:mk.arch\f1
.LI
\f4rm -rf arch/save\f1
.LE
.H 1 "Warning Messages"
Warning messages will occur when you build the Source Code Product.
.P
To look for errors, warnings or build failures, you should do the following:
.DS I UI
grep -i fail nohup.out
grep Error nohup.out | grep -v "\e(ignored\e)"
ls -l $ROOT/etc/conf/cf.d/unix
egrep -i "warning|error" nohup.out | egrep -v " combination, op |:  template |i386cc "\f1
.DE
.P
The errors that issue these warnings will
not affect the build and should be ignored.
These messages are:
.FG "Acceptable Warning Messages"
.ps -2
.TS H
box;
c | c
c | c
l | lf4.
Message	When
\^	Building
_
.TH
warning: \.\/:mkoam:  7: not found	pkg.window
warning: \.\/:mkoam:  3: not found	\^
_
warning: ANSI C treats constant as unsigned: op ">>"	cmd/cmd-inet/usr.bin/telnet.c
\^	uts/i386/netinet/in.c
_
warning: \ea is ANSI C "alert" character	T{
cmd/sgs, cmd/sdb
T}
\^	\^
_
warning: argument is incompatible with prototype: arg #_	T{
\%add-on/qt/io/driver.c,
\%add-on/xl/io/fd.c,
\%add-on/xx/cmd/fsck/fsck1.c,
\%cmd/bkrs,
\%cmd/cmd-inet
\%cmd/compress,
\%cmd/cron,
\%cmd/csh,
\%cmd/csplit,
\%cmd/cvtomf,
\%cmd/dfsck,
\%cmd/eac,
\%cmd/fs.d,
\%cmd/getty,
\%cmd/ksh,
\%cmd/layers,
\%cmd/lp,
\%cmd/nserve,
\%cmd/pkging,
\%cmd/profiler,
\%cmd/rpcbind,
\%cmd/rpcinfo,
\%cmd/rpcsvc,
\%cmd/sco,
\%cmd/sh,
\%cmd/shl,
\%cmd/ttymon,
\%cmd/vi,
\%cmd/vtlmgr,
\%cmd/x286emul,
\%cmd/xrestore,
\%cmd/ypcmd,
\%lib/libnsl/rpc,
\%lib/libsocket/inet,
\%lib/nametoaddr,
\%ucbcmd/sendmail,
\%ucbcmd/troff,
\%uts/i386/io,
\%xcplib/lxcurses
T}
\^	\^
.NE 1i
_
warning: assignment type mismatch	T{
\%add-on/mouse/cmd/mouseadmin.c,
\%cmd/compress,
\%cmd/csh,
\%cmd/cvtomf,
\%cmd/eac,
\%cmd/ksh, 
\%cmd/sh,
\%uts/i386/io,
\%lib/libnsl
T}
\^	\^
_
warning: comment is replaced by "##"	lib/libnsl
_
.NE 1i
warning: dubious escape: \e__	T{
\%cmd/lp,
\%cmd/sdb,
\%ucbcmd/refer
T}
\^	\^
_
warning: dubious struct declaration; use tag only: <unnamed>	cmd/x286emul
warning: dubious tag declaration: struct seg	uts/i386/vx
_
warning: dubious tag declaration: struct vnode	cmd/sa
warning: dubious tag in function prototype: struct passwd	cmd/mail
_
warning empty translation unit	T{
\%cmd/fs.d,
\%cmd/make, 
\%cmd/oampkg, 
\%cmd/sdb,
\%cmd/sgs, 
\%lib/libnsl,
\%uts/i386/io/kd,
\%uts/i386/io/mpt.c
T}
\^	\^
_
warning: end-of-loop code not reached	lib/libnsl, cmd/sort
\^	add-on/mouse/cmd/mouseadmin.c
\^	add-on/qt/io/driver.c
\^	add-on/xl/io/xl.c
_
.NE 2i
identifier redeclared	T{
\%add-on/mouse,
\%cmd/cmd-net,
\%cmd/crash,
\%cmd/csh,
\%cmd/fs.d,
\%cmd/sdb,
\%cmd/shl,
\%cmd/tee,
\%lib/libnsl,
\%ucblib/libc,
\%uts/i386/io/dma.c,
\%xcplib/libx
T}
\^	\^
_
warning: improper member use: di_un	cmd/fs.d
_
warning: improper pointer/integer combination: arg #	T{
\%add-on/acp,
\%cmd/cmd-inet,
\%cmd/eac,
\%cmd/oawk, 
\%uts/i386/io
T}
\^	\^
_
.NE 1i
warning: improper pointer/integer combination: op "="	T{
\%cmd/cmd-inet,
\%cmd/csh,
\%cmd/fs.d
\%cmd/lp,
\%cmd/listen,
\%cmd/login,
\%cmd/vtlmgr,
\%lib/nametoaddr,
\%lib/libnsl,
\%lib/libsocket,
\%ucbcmd/refer,
\%ucblib/librpcsoc,
\%uts/i386/os,
\%uts/i386/io
T}
\^	\^
_
warning: initialization type mismatch	T{
\%add-on mouse/cmd/mouseadmin.c,
\%cmd/cmd-inet/usr.bin/telnet.c,
\%uts/i386/disp
T}
\^	\^
_
warning: initializer does not fit: ___	cmd/bc, cmd/bnu,
\^	cmd/cmd-inet,
\^	cmd/fmli/sys/compile.c,
\^	cmd/ksh, cmd/layers,
\^	cmd/listen, cmd/lp,
\^	cmd/sdb, cmd/tplot.
\^	ucbcmd/plot, uts/i386/io
_
warning: integral constant too large	cmd/truss/pcontrol.c
_
warning: loop not entered at top	cmd/xrestore
_
.NE 2i
warning: macro redefined: _____	T{
\%cmd/csh,
\%cmd/fs.d,
\%cmd/oamintf,
\%cmd/sgs,
\%cmd/vi,
\%cmd/whodo,
\%ucbcmd/ls,
\%ucbcmd/w
\%ucblib/libc,
T}
\^	\^
_
warning: macro replacement within a character constant	cmd/cmd-inet, xcplib/lxtermlib
_
warning: macro replacement within a string literal	T{
\%cmd/cmd-inet,
\%cmd/csh,
\%cmd/fs.d,
\%uts/i386/netinet/tcp_debug.c,
\%xcplib/lxtermlib
T}
\^	\^
_
parameter mismatch: __ declared, __ defined	xcplib/libx
_
warning: semantics of "__" change in ANSI C; use explicit cast	T{
\%cmd/acct,
\%cmd/adv,
\%cmd/awk,
\%cmd/bkrs,
\%cmd/bnu,
\%cmd/cmd-inet,
\%cmd/csh,
\%cmd/cvtomf,
\%cmd/dispadmin,
\%cmd/eac,
\%cmd/egrep,
\%cmd/format,
\%cmd/fs.d,
\%cmd/keyserv,
\%cmd/listen,
\%cmd/lp,
\%cmd/mail,
\%cmd/mailx,
\%cmd/make,
\%cmd/mkpart,
\%cmd/nserve,
\%cmd/oamintf,
\%cmd/passmgmt,
\%cmd/rfadmin,
\%cmd/sco,
\%cmd/sdb,
\%cmd/spell,
\%lib/libadm,
\%lib/libmp,
\%lib/libnls,
\%lib/libns,
\%lib/zlibetitam,
\%ucblib/libc,
\%ucblib/libmp,
\%uts/i386/io,
\%xcplib/libx
T}
\^	\^
_
warning: syntax error:  empty declaration	cmd/sdb
warning: trigraph sequence replaced	cmd/fs.d, cmd/lp
_
.NE 1i
warning: using out of scope declaration: _____	T{
\%cmd/csplit,
\%cmd/fs.d,
\%cmd/getty,
\%cmd/lp
T}
\^	\^
_
template _____ can run out of registers	cmd/sgs/cg
warning: identifier redeclared: set_field_type	T{
\%lib/libsocket,
\%xpclib/libx
T}
\^	\^
_
warning: type does not match prototype:___	T{
cmd/cmd-inet,
\%cmd/shl ,
\%icmd/getty,
\%lib/libnsl,
\%lib/nametoaddr,
\%ucblib/libc,
\%uts/i386/io/dma.c,
T}
\^	\^
.TE
.ps +2
.P
Messages that are not in the figure above must be carefully scrutinized.
.H 1 "Building Other Bus Architectures"
In UNIX System V/386 Release 4,
other Intel 80386 microprocessor architectures are supported
than just the AT bus architecture.
.H 2 "Multibus"
If you wish to build and package a system for Hiint
or Multibus II architecture, the following steps must be changed.
.H 3 "Space Requirements"
In addition to the requirements specified in section 3,
building a MB2 system will require an additional \f46000\f1 blocks in 
\f4$ROOT\f1 because the source code in \f4$ROOT/usr/src/arch/mbus\f1 
is copied into \f4$ROOT/usr/src\f1.
.H 3 "Building the Release"
To build a binary release for multibus
including kernel, commands, libraries and packages do the following: 
.AL a
.LI
Set and export the environment variable \f4$ROOT\f1 to the root of 
the source tree (See the section ``Environment Changes''
for environment changes).
.LI
Change into the directory containing the build scripts and build the code.
.in +5
\f4cd $ROOT/usr/src\f1
.BL
.LI
Multibus II
.in +2
\f4nohup sh ./:mk.arch mbus\f1 
.br
\f4nohup sh ./:mk MB2 &\f1 
.in -2
.LE
.BL
.LI
Hiint
.in +2
\f4nohup sh ./:mk.arch mbus hiint\f1
.br
\f4nohup sh ./:mk MB2 &\f1
.in -2
.LI
MB2AT
.in +2
\f4nohup sh ./:mk.arch mbus mb2at at\f1 
.br
\f4nohup sh ./:mk &\f1 
.in -2
.LE
.in -5
.LE
.H 3 "Build Only the Foundation Set"
To build only the Foundation Set and not the Standard C Development Environment
do the following: 
.AL a
.LI
Set and export the environment variable \f4$ROOT\f1 to the root of the source tree.
.LI
Change into the directory containing the build scripts and build the code.
.in +5
\f4cd $ROOT/usr/src\f1
.BL
.LI
Multibus II
.in +2
\f4nohup sh ./:mk.arch mbus\f1 
.br
\f4nohup sh ./:mk.fnd MB2 & \f1
.in -2
.LE
.BL
.LI
Hiint
.in +2
\f4nohup sh ./:mk.arch mbus hiint\f1
.br
\f4nohup sh ./:mk.fnd MB2 &\f1
.in -2
.LI
MB2AT
.in +2
\f4nohup sh ./:mk.arch mbus mb2at at\f1 
.br
\f4nohup sh ./:mk.fnd & \f1
.in -2
.LE
.in -5
.LE
.H 3 "Build the Standard C Development Environment and Add-ons"
There are no additional multibus specific add-on packages.  The SCDE 
is not affected by Multibus.
(See the standard instructions in the section
``Build Only the Standard C Development Environment'' on page 1-9).
.H 3 "Build Only the Operating System Kernel"
To build just a kernel and the \f4idcmd\f1 commands, 
do the following: 
.AL a
.LI
Set and export the environment variable \f4$ROOT\f1 to the 
root of the source tree.
.LI
Set up the path to include \f4$ROOT/xenv\f1
.in +5
\f4PATH=$ROOT/xenv:$PATH:/etc;export PATH\f1
.in -5
.LI
Change into the directory containing the build scripts and build the code.
.DS I UI
cd $ROOT/usr/src
BUS=MB2 ARCH=MBUS; export ARCH BUS
sh ./setup
nohup sh ./:mkuts MB2
.DE
.LE
.H 3 "Packaging the Binary Output on Cartridge Tape" 
\f4Multibus\f1 binaries are not supported on floppy disks.
The only way to package it is on cartridge tape.
To package the \f4Multibus\f1 binaries:
.AL a
.LI
Packaging the Base System and packages:
.BL
.LI
Become \f4root\f1 and set your \f4PATH\f1.
.in +5
\f4/bin/su root
.br
\f4PATH=$ROOT/xenv:$PATH; export PATH\f1
.in -5
.LI
\f4cd $ROOT/usr/src/proto/i386/mbus\f1
.LI
\f4BUS=MB2 ARCH=MBUS; export BUS ARCH ROOT\f1
.LI
\f4make -ef proto.mk package\f1
.LE
.LI
To create a separate tape with default add-on packages:
.BL
.LI
Become \f4root\f1 and set your \f4PATH\f1.
.in +5
\f4/bin/su root\f1
.br
\f4PATH=$ROOT/xenv:$PATH; export PATH\f1
.in -5
.LI
\f4cd $ROOT/usr/src/proto/i386/mbus\f1
.LI
\f4BUS=MB2 ARCH=MBUS; export BUS ARCH ROOT\f1
.LI
\f4make -ef proto.mk addon\f1
.LE
.LE
.H 3 "Free Disk Space"
There are no specific instructions to free disk space after a multibus build. 
.H 1 "Using Other C Software Development Sets"
Although only binaries produced on a 386 running 
UNIX System V/386 Release 4 using the Standard C Development 
Environment (CI5) are supported, you can compile the system using 
other SCDEs with changes.
However, an additional 15,400 blocks will be required
under \f4$ROOT/i386\f1 to hold the cross compiler.
For a total disk space usage of 125,000 blocks.
.AB N
The C compiler being used must understand:
.DL
.LI
enumerated types
.LI
\f4#elif\f1 (C pre-processor directive)
.LE
.AC
.H 2 "Using UNIX System V/386 Release 3.2 Version 2.2 and C Software Development Set Version 4.1.6 or 4.1.5"
.AL a
.LI
You must modify \f4/usr/include/sys/types.h\f1 and change the following:
.BL
.LI
Add the following two lines to the top of the file
.ul
after
the
\f4#ident\f1 line.
.DS I UI
#ident	"@(#)head.sys:types.h	1.5.1.2"	\(lh existing line
#ifndef _SYS_3_2_TYPES_H		\(lh two new lines
#define _SYS_3_2_TYPES_H
.DE
.LI
add the following lines to the bottom of the file:
.DS I UI
	#ifdef PRESVR4
	typedef long pid_t;
	typedef ulong dev_t;
	typedef ulong mode_t;
	typedef ulong major_t;
	typedef ulong minor_t;
	#endif
	#endif /* _SYS_3_2_TYPES_H */
.DE
.LE
.LI
You must also modify \f4/etc/group\f1 and add the following line:
.ti +5
\f4tty::7:root,tty\f1
.LI
You must also create an \f4/etc/device.tab\f1 as follows:
.S -2
.DS  I UI
cp $ROOT/usr/src/cmd/devmgmt/data/device.tab /etc/device.tab
cat >> /dev/device.tab
.sp
diskette1:/dev/rdsk/f0t:/dev/dsk/f0::desc="Floppy Drive 0"
	mountpt="/install" volume="diskette" fmtcmd="format -v /dev/rdsk/f0q15dt"
	type="diskette" mkfscmd="/etc/mkfs -Fs5 /dev/dsk/f0 2370"
	erasecmd="true" copy="true"
.sp 
diskette2:/dev/rdsk/f1t:/dev/dsk/f1::desc="Floppy Drive 1"
	mountpt="/install" volume="diskette" fmtcmd="format -v /dev/rdsk/f1q15dt"
	type="diskette" mkfscmd="/etc/mkfs -Fs5 /dev/dsk/f1 2370"
	erasecmd="true" copy="true"
<CTRL D>
.DE
.AB N
If you have a 3\(12" drive instead of a 5\(14" drive, substitute the
f[01]q15dt entry for f[01]3ht.
Diskette1 and diskette2, above, are each very long, single lines.
.AC
.LI
Instead of building with \f4$ROOT/usr/src/:mk\f1 
use \f4$ROOT/usr/src/:mk.i386\f1.
This contains all the functionality of \f4:mk\f1, but it works on 
a non-UNIX System V/386 Release 4 operating system.
.LI
The following changes are needed to source code in order 
for this to work.
.BL
.LI
\f4usr/src/lib/libm/libm.mk\f1 - line 63.  Remove the double quote (") around
the \f4ENVPARMS\f1
.LI
\f4usr/src/cmd/ldd/i386/makefile\f1 - line 24.  Remove the leading tab.
.LI
\f4usr/src/lib/xlibcurses/screen/makefile\f1 - Place a dash (-) on line 32 before the $(PFX)lint and
before the (line 441)
.ce
\f4cp llib-lcurses llib-lcurses.ln $(CCSLIB)\f1
.LI
\f4usr/src/cmd/sgs/alint/i386/makefile\f1 - Place a dash (\-) before each of the seven (7)
.ce
\f4CCSLIB=$(LPASS) ./lint -Y$(INC) -o......\f1
lines in the "libs" target (lines 229 -> 238).
.LE
.LE
.H 1 "File Listings "
.H 2 "Foundation Set File Listing"
The complete file listing for the Source Code Product 
Foundation Set is provided in the file
\f4BUILDINS/release/scpbi/386/fndset.list\f1
on the SCP documentation tape.
.H 2 "Software Development Set File Listing"
The complete file listing for the Source Code Product 
Software Development Set is provided in the file 
\f4BUILDINS/release/scpbi/386/devset.list\f1
on the SCP Documentation tape.
.H 2 "Documentation File Listing"
The complete file listing for the Source Code Product 
documentation is provided in the top-level directory, in the file
\f4tape.contents\f1 
on the SCP Documentation tape.  
