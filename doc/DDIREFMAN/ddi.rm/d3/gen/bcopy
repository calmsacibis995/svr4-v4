'\"macro stdmacro
.if n .pH gen.bcopy @(#)bcopy	40.3 of 3/26/91
.\" Copyright 1991 UNIX System Laboratories, Inc.
.nr X
.if \nX=0 .ds x} bcopy D3DK "" "DDI/DKI" "\&"
.if \nX=1 .ds x} bcopy D3DK "" "DDI/DKI"
.if \nX=2 .ds x} bcopy D3DK "" "\&"
.if \nX=3 .ds x} bcopy "" "" "\&"
.TH \*(x}
.IX "\f4bcopy\fP(D3DK)"
.IX kernel, data copy in
.SH NAME
\f4bcopy\fP \- copy data between address locations in the kernel
.SH SYNOPSIS
.nf
.na
\f4#include <sys/types.h>
.sp 0.5
void bcopy(caddr_t \f2from, \fPcaddr_t \f2to, \fPsize_t \f2bcount\fP);\f1
.ad
.fi
.SH ARGUMENTS
.RS 0n
.IP "\f2from\fP" 10n
Source address from which the copy is made.
.IP "\f2to\fP" 10n
Destination address to which the copy is made.
.IP "\f2bcount\fP" 10n
Number of bytes to be copied.
.RE
.SH DESCRIPTION
\f4bcopy\fP copies \f2bcount\fP bytes from one kernel address to
another.
It chooses the best algorithm based on address alignment and number of bytes to copy.
If the input and output addresses overlap, the function
executes, but the results are undefined.
.SH RETURN VALUE
None.
.SH LEVEL
Base or Interrupt.
.SH NOTES
Does not sleep.
.sp 0.5
The source and destination address ranges must both be
within the kernel address space and must be memory resident.
No range checking is done.
Since there is no mechanism by which drivers that conform to the
rules of the DDI/DKI can obtain and use a kernel address which is not
memory resident (an address which is paged out),
DDI/DKI conforming drivers can assume that any address to which they
have access is memory resident and therefore a valid argument to \f4bcopy\fP.
Addresses within user address space are not valid arguments,
and specifying such an address may cause the driver to corrupt the system in an
unpredictable way.
For copying between kernel and user space, drivers must use
an appropriate function defined for that purpose (for example,
\f4copyin\fP(D3DK), \f4copyout\fP(D3DK), \f4uiomove\fP(D3DK),
\f4ureadc\fP(D3DK), or \f4uwritec\fP(D3DK)).
.SH SEE ALSO
.na
\f4copyin\fP(D3DK),
\f4copyout\fP(D3DK),
\f4uiomove\fP(D3DK),
\f4ureadc\fP(D3DK),
\f4uwritec\fP(D3DK)
.ad
.SH EXAMPLE
.IX "\f4buf\fP(D4DK), example"
.P
An I/O request is made for data stored in a RAM disk.
If the I/O operation is a read request, data are copied from the RAM disk
to a buffer (line 9).
If it is a write request, data are copied from a
buffer to the RAM disk (line 15).
The \f4bcopy\fP function is used since both
the RAM disk and the buffer are part of the kernel address space.
.ne 4
.P
.nf
.ft 4
.ps 7
.vs 9
 1  #define RAMDNBLK    1000           /* number of blocks in the RAM disk */
 2  #define RAMDBSIZ    NBPSCTR        /* bytes per block */
 3  char ramdblks[RAMDNBLK][RAMDBSIZ]; /* blocks forming RAM disk */
       ...
 4
 5  if (bp->b_flags & B_READ) {
 6          /*
 7           * read request - copy data from RAM disk to system buffer
 8           */
 9          bcopy(ramdblks[bp->b_blkno], bp->b_un.b_addr, bp->b_bcount);
10
11  } else {
12          /*
13           * write request - copy data from system buffer to RAM disk
14           */
15          bcopy(bp->b_un.b_addr, ramdblks[bp->b_blkno], bp->b_bcount);
16  }
.vs
.ps
.ft 1
.fi
.P
.FG "bcopy \- RAM disk read or write"
.ad
.fi
