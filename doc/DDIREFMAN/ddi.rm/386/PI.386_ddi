.if n .pH 386.PI.386_ddi @(#)PI.386_ddi	40.2
.\" Copyright 1991 UNIX System Laboratories, Inc.
.BK "DDI/DKI Reference Manual"
.CH "Permuted Index"
.H 1 "Permuted Index"
.Px
.xx "" "inw read a 16 bit short word from a" "16 bit I/O port" "" inw(D3D)
.xx "" "outw write a 16 bit short word to a" "16 bit I/O port" "" outw(D3D)
.xx "port" "inw read a" "16 bit short word from a 16 bit I/O" "" inw(D3D)
.xx "port" "outw write a" "16 bit short word to a 16 bit I/O" "" outw(D3D)
.xx "port" "repoutsw write" "16 bit words from buffer to an I/O" "" repoutsw(D3D)
.xx "buffer" "repinsw read" "16 bit words from I/O port to" "" repinsw(D3D)
.xx "" "inl read a 32 bit word from a" "32 bit I/O port" "" inl(D3D)
.xx "" "outl write a 32 bit long word to a" "32 bit I/O port" "" outl(D3D)
.xx "port" "outl write a" "32 bit long word to a 32 bit I/O" "" outl(D3D)
.xx "" "inl read a" "32 bit word from a 32 bit I/O port" "" inl(D3D)
.xx "port" "repoutsd write" "32 bit words from buffer to an I/O" "" repoutsd(D3D)
.xx "buffer" "repinsd read" "32 bit words from I/O port to" "" repinsd(D3D)
.xx "" "inb read a byte from a" "8 bit I/O port" "" inb(D3D)
.xx "" "outb write a byte to an" "8 bit I/O port" "" outb(D3D)
.xx "" "close relinquish" "access to a device" "" close(D2DK)
.xx "" "open gain" "access to a device" "" open(D2DK)
.xx "" "physical page ID for kernel virtual" "address" "hat_getkpfnum get" hat_getkpfnum(D3DK)
.xx "" "get physical page ID for physical" "address" "hat_getppfnum" hat_getppfnum(D3D)
.xx "" "bcopy copy data between" "address locations in the kernel" "" bcopy(D3DK)
.xx "addresses" "physmap obtain virtual" "address mapping for physical" "" physmap(D3D)
.xx "" "physmap_free free virtual" "address mapping for physical/" "" physmap_free(D3D)
.xx "" "bp_mapin allocate virtual" "address space for buffer page list" "" bp_mapin(D3DK)
.xx "" "bp_mapout deallocate virtual" "address space for buffer page list" "" bp_mapout(D3DK)
.xx "" "vtop convert virtual" "address to physical address" "" vtop(D3D)
.xx "" "convert virtual address to physical" "address" "vtop" vtop(D3D)
.xx "" "address mapping for physical" "addresses" "physmap obtain virtual" physmap(D3D)
.xx "" "address mapping for physical" "addresses" "/free virtual" physmap_free(D3D)
.xx "" "" "adjmsg trim bytes from a message" "" adjmsg(D3DK)
.xx "" "is not available at the receiving" "agent" "/fragments when buffer space" mps_AMPreceive_frag(D3D)
.xx "" "dma_get_buf" "allocate a DMA buffer descriptor" "" dma_get_buf(D3X)
.xx "" "dma_get_cb" "allocate a DMA command block" "" dma_get_cb(D3X)
.xx "" "allocb" "allocate a message block" "" allocb(D3DK)
.xx "externally-supplied/" "esballoc" "allocate a message block using an" "" esballoc(D3DK)
.xx "kernel free memory" "kmem_zalloc" "allocate and clear space from" "" kmem_zalloc(D3DK)
.xx "management map" "rmalloc" "allocate space from a private space" "" rmalloc(D3DK)
.xx "memory" "kmem_alloc" "allocate space from kernel free" "" kmem_alloc(D3DK)
.xx "buffer page list" "bp_mapin" "allocate virtual address space for" "" bp_mapin(D3DK)
.xx "" "dma_free_buf free a previously" "allocated DMA buffer descriptor" "" dma_free_buf(D3X)
.xx "" "dma_free_cb free a previously" "allocated DMA command block" "" dma_free_cb(D3X)
.xx "" "externally-supplied buffer can be" "allocated" "/call a function when an" esbbcall(D3DK)
.xx "" "kmem_free free previously" "allocated kernel memory" "" kmem_free(D3DK)
.xx "" "mps_free_tid frees a previously" "allocated transaction id" "" mps_free_tid(D3D)
.xx "" "mps_get_msgbuf" "allocates a message buffer" "" mps_get_msgbuf(D3D)
.xx "" "mps_get_tid" "allocates transaction ids" "" mps_get_tid(D3D)
.xx "" "" "allocb allocate a message block" "" allocb(D3DK)
.xx "" "enableok" "allow a queue to be serviced" "" enableok(D3DK)
.xx "" "" "ASSERT verify assertion" "" ASSERT(D3DK)
.xx "" "ASSERT verify" "assertion" "" ASSERT(D3DK)
.xx "" "/fragments when buffer space is not" "available at the receiving agent" "" mps_AMPreceive_frag(D3D)
.xx "" "a function when a buffer becomes" "available" "bufcall call" bufcall(D3DK)
.xx "" "flow control in specified priority" "band" "bcanput test for" bcanput(D3DK)
.xx "" "messages in a specified priority" "band" "flushband flush" flushband(D3DK)
.xx "" "get information about a queue or" "band of the queue" "strqget" strqget(D3DK)
.xx "" "change information about a queue or" "band of the queue" "strqset" strqset(D3DK)
.xx "specified priority band" "" "bcanput test for flow control in" "" bcanput(D3DK)
.xx "locations in the kernel" "" "bcopy copy data between address" "" bcopy(D3DK)
.xx "" "call a function when a buffer" "becomes available" "bufcall" bufcall(D3DK)
.xx "" "dma_get_best_mode determine" "best transfer mode for DMA command" "" dma_get_best_mode(D3X)
.xx "I/O and wakeup processes" "" "biodone release buffer after block" "" biodone(D3DK)
.xx "completion of block I/O" "" "biowait suspend processes pending" "" biowait(D3DK)
.xx "" "inb read a byte from a 8" "bit I/O port" "" inb(D3D)
.xx "" "inl read a 32 bit word from a 32" "bit I/O port" "" inl(D3D)
.xx "" "read a 16 bit short word from a 16" "bit I/O port" "inw" inw(D3D)
.xx "" "outb write a byte to an 8" "bit I/O port" "" outb(D3D)
.xx "" "write a 32 bit long word to a 32" "bit I/O port" "outl" outl(D3D)
.xx "" "write a 16 bit short word to a 16" "bit I/O port" "outw" outw(D3D)
.xx "" "outl write a 32" "bit long word to a 32 bit I/O port" "" outl(D3D)
.xx "port" "inw read a 16" "bit short word from a 16 bit I/O" "" inw(D3D)
.xx "" "outw write a 16" "bit short word to a 16 bit I/O port" "" outw(D3D)
.xx "" "inl read a 32" "bit word from a 32 bit I/O port" "" inl(D3D)
.xx "port" "repoutsd write 32" "bit words from buffer to an I/O" "" repoutsd(D3D)
.xx "port" "repoutsw write 16" "bit words from buffer to an I/O" "" repoutsw(D3D)
.xx "" "repinsd read 32" "bit words from I/O port to buffer" "" repinsd(D3D)
.xx "" "repinsw read 16" "bit words from I/O port to buffer" "" repinsw(D3D)
.xx "" "allocb allocate a message" "block" "" allocb(D3DK)
.xx "" "copyb copy a message" "block" "" copyb(D3DK)
.xx "" "size return size of logical" "block device" "" size(D2DK)
.xx "" "a previously allocated DMA command" "block" "dma_free_cb free" dma_free_cb(D3X)
.xx "" "dma_get_cb allocate a DMA command" "block" "" dma_get_cb(D3X)
.xx "" "dupb duplicate a message" "block" "" dupb(D3DK)
.xx "" "freeb free a message" "block" "" freeb(D3DK)
.xx "" "rmvb remove a message" "block from a message" "" rmvb(D3DK)
.xx "" "unlinkb remove a message" "block from the head of a message" "" unlinkb(D3DK)
.xx "" "biodone release buffer after" "block I/O and wakeup processes" "" biodone(D3DK)
.xx "" "processes pending completion of" "block I/O" "biowait suspend" biowait(D3DK)
.xx "" "buf" "block I/O data transfer structure" "" buf(D4DK)
.xx "" "strategy perform" "block I/O" "" strategy(D2DK)
.xx "" "datab STREAMS data" "block structure" "" datab(D4DK)
.xx "" "dma_cb DMA command" "block structure" "" dma_cb(D4X)
.xx "" "msgb STREAMS message" "block structure" "" msgb(D4DK)
.xx "buffer" "esballoc allocate a message" "block using an externally-supplied" "" esballoc(D3DK)
.xx "" "spl" "block/allow interrupts" "" spl(D3D)
.xx "" "linkb concatenate two message" "blocks" "" linkb(D3DK)
.xx "" "the interconnect register of the" "board in the specified slot" "/reads" ics_find(D3D)
.xx "" "the interconnect register of the" "board in the specified slot" "/reads" ics_read(D3D)
.xx "" "into the specified register of the" "board in the specified slot" "/value" ics_write(D3D)
.xx "" "ics_agent_cmp checks for certain" "board types in the designated slot" "" ics_agent_cmp(D3D)
.xx "" "field of the HOST ID record in this" "board's interconnect space" "/host id" ics_hostid(D3D)
.xx "space for buffer page list" "" "bp_mapin allocate virtual address" "" bp_mapin(D3DK)
.xx "address space for buffer page list" "" "bp_mapout deallocate virtual" "" bp_mapout(D3DK)
.xx "manageable units" "dma_pageio" "break up an I/O request into" "" dma_pageio(D3D)
.xx "system's free list" "" "brelse return a buffer to the" "" brelse(D3DK)
.xx "" "mps_mk_brdcst constructs a" "broadcast message to be sent" "" mps_mk_brdcst(D3D)
.xx "in pages (round down)" "" "btop convert size in bytes to size" "" btop(D3DK)
.xx "in pages (round up)" "" "btopr convert size in bytes to size" "" btopr(D3DK)
.xx "structure" "" "buf block I/O data transfer" "" buf(D4DK)
.xx "buffer becomes available" "" "bufcall call a function when a" "" bufcall(D3DK)
.xx "" "unbufcall cancel a pending" "bufcall request" "" unbufcall(D3DK)
.xx "processes" "biodone release" "buffer after block I/O and wakeup" "" biodone(D3DK)
.xx "pool" "mps_free_msgbuf puts a" "buffer back into the free memory" "" mps_free_msgbuf(D3D)
.xx "" "bufcall call a function when a" "buffer becomes available" "" bufcall(D3DK)
.xx "" "when an externally-supplied" "buffer can be allocated" "/a function" esbbcall(D3DK)
.xx "" "clrbuf erase the contents of a" "buffer" "" clrbuf(D3DK)
.xx "" "data from a user buffer to a driver" "buffer" "copyin copy" copyin(D3DK)
.xx "" "data from a driver buffer to a user" "buffer" "copyout copy" copyout(D3DK)
.xx "" "free a previously allocated DMA" "buffer descriptor" "dma_free_buf" dma_free_buf(D3X)
.xx "" "dma_get_buf allocate a DMA" "buffer descriptor" "" dma_get_buf(D3X)
.xx "" "dma_buf DMA" "buffer descriptor structure" "" dma_buf(D4X)
.xx "" "frees a list of data" "buffer descriptors" "mps_free_dmabuf" mps_free_dmabuf(D3D)
.xx "" "returns a pointer to a list of data" "buffer descriptors" "mps_get_dmabuf" mps_get_dmabuf(D3D)
.xx "" "block using an externally-supplied" "buffer" "esballoc allocate a message" esballoc(D3DK)
.xx "" "geteblk get an empty" "buffer" "" geteblk(D3DK)
.xx "buffer/" "mps_mk_bgrant construct a" "buffer grant in response to a" "" mps_mk_bgrant(D3D)
.xx "" "freerbuf free a raw" "buffer header" "" freerbuf(D3DK)
.xx "" "retrieve error number from a" "buffer header" "geterror" geterror(D3DK)
.xx "" "getrbuf get a raw" "buffer header" "" getrbuf(D3DK)
.xx "" "mps_get_msgbuf allocates a message" "buffer" "" mps_get_msgbuf(D3D)
.xx "" "copies user data from the message" "buffer." "mps_get_soldata" mps_get_soldata(D3D)
.xx "" "copies user data from the message" "buffer." "mps_get_unsoldata" mps_get_unsoldata(D3D)
.xx "" "ngeteblk get an empty" "buffer of the specified size" "" ngeteblk(D3DK)
.xx "" "allocate virtual address space for" "buffer page list" "bp_mapin" bp_mapin(D3DK)
.xx "" "virtual address space for" "buffer page list" "/deallocate" bp_mapout(D3DK)
.xx "buffer/" "mps_mk_breject construct a" "buffer reject in response to a" "" mps_mk_breject(D3D)
.xx "" "repinsb read bytes from I/O port to" "buffer" "" repinsb(D3D)
.xx "" "read 32 bit words from I/O port to" "buffer" "repinsd" repinsd(D3D)
.xx "" "read 16 bit words from I/O port to" "buffer" "repinsw" repinsw(D3D)
.xx "" "that corresponds to an outstanding" "buffer request" "/solicited data" mps_AMPreceive(D3D)
.xx "" "a buffer grant in response to a" "buffer request." "/construct" mps_mk_bgrant(D3D)
.xx "" "a buffer reject in response to a" "buffer request." "/construct" mps_mk_breject(D3D)
.xx "" "/solicited data in fragments when" "buffer space is not available at/" "" mps_AMPreceive_frag(D3D)
.xx "" "copyin copy data from a user" "buffer to a driver buffer" "" copyin(D3DK)
.xx "" "copyout copy data from a driver" "buffer to a user buffer" "" copyout(D3DK)
.xx "" "repoutsb write bytes from" "buffer to an I/O port" "" repoutsb(D3D)
.xx "" "repoutsd write 32 bit words from" "buffer to an I/O port" "" repoutsd(D3D)
.xx "" "repoutsw write 16 bit words from" "buffer to an I/O port" "" repoutsw(D3D)
.xx "" "brelse return a" "buffer to the system's free list" "" brelse(D3DK)
.xx "" "drv_usecwait" "busy-wait for specified interval" "" drv_usecwait(D3DK)
.xx "" "inb read a" "byte from a 8 bit I/O port" "" inb(D3D)
.xx "" "outb write a" "byte to an 8 bit I/O port" "" outb(D3D)
.xx "" "clear memory for a given number of" "bytes" "bzero" bzero(D3DK)
.xx "" "adjmsg trim" "bytes from a message" "" adjmsg(D3DK)
.xx "" "repoutsb write" "bytes from buffer to an I/O port" "" repoutsb(D3D)
.xx "" "repinsb read" "bytes from I/O port to buffer" "" repinsb(D3D)
.xx "" "pullupmsg concatenate" "bytes in a message" "" pullupmsg(D3DK)
.xx "" "msgdsize return number of" "bytes of data in a message" "" msgdsize(D3DK)
.xx "" "convert size in pages to size in" "bytes" "ptob" ptob(D3DK)
.xx "" "btop convert size in" "bytes to size in pages (round down)" "" btop(D3DK)
.xx "" "btopr convert size in" "bytes to size in pages (round up)" "" btopr(D3DK)
.xx "number of bytes" "" "bzero clear memory for a given" "" bzero(D3DK)
.xx "becomes available" "bufcall" "call a function when a buffer" "" bufcall(D3DK)
.xx "externally-supplied/" "esbbcall" "call a function when an" "" esbbcall(D3DK)
.xx "" "unbufcall" "cancel a pending bufcall request" "" unbufcall(D3DK)
.xx "request" "untimeout" "cancel previous timeout(D3DK)" "" untimeout(D3DK)
.xx "" "mps_AMPcancel" "cancels an ongoing rsvp transaction" "" mps_AMPcancel(D3D)
.xx "stream" "" "canput test for flow control in a" "" canput(D3DK)
.xx "" "space registers from a given" "cardslot ID" "/number of interconnect" ics_rdwr(D3D)
.xx "" "ics_agent_cmp checks for" "certain board types in the/" "" ics_agent_cmp(D3D)
.xx "band of the queue" "strqset" "change information about a queue or" "" strqset(D3DK)
.xx "" "/DMA operation on a" "channel and release it" "" dma_stop(D3X)
.xx "" "of hardware requests on a DMA" "channel" "/disable recognition" dma_disable(D3X)
.xx "" "of hardware requests on a DMA" "channel" "/enable recognition" dma_enable(D3X)
.xx "" "closes a previously opened" "channel" "mps_close_chan" mps_close_chan(D3D)
.xx "" "mps_open_chan opens a" "channel" "" mps_open_chan(D3D)
.xx "" "ioctl control a" "character device" "" ioctl(D2DK)
.xx "" "poll entry point for a non-STREAMS" "character driver" "chpoll" chpoll(D2DK)
.xx "uio(D4DK)/" "uwritec return a" "character from space described by" "" uwritec(D3DK)
.xx "uio(D4DK) structure" "ureadc copy a" "character to space described by" "" ureadc(D3DK)
.xx "memory-mapped device" "mmap" "check virtual mapping for" "" mmap(D2DK)
.xx "the designated slot" "ics_agent_cmp" "checks for certain board types in" "" ics_agent_cmp(D3D)
.xx "non-STREAMS character driver" "" "chpoll poll entry point for a" "" chpoll(D2DK)
.xx "bytes" "bzero" "clear memory for a given number of" "" bzero(D3DK)
.xx "" "kmem_zalloc allocate and" "clear space from kernel free memory" "" kmem_zalloc(D3DK)
.xx "" "execution for a specified number of" "clock ticks" "delay delay process" delay(D3DK)
.xx "" "convert microseconds to" "clock ticks" "drv_usectohz" drv_usectohz(D3DK)
.xx "" "drv_hztousec convert" "clock ticks to microseconds" "" drv_hztousec(D3DK)
.xx "" "" "close relinquish access to a device" "" close(D2DK)
.xx "" "mps_close_chan" "closes a previously opened channel" "" mps_close_chan(D3D)
.xx "buffer" "" "clrbuf erase the contents of a" "" clrbuf(D3DK)
.xx "panic the system" "" "cmn_err display an error message or" "" cmn_err(D3DK)
.xx "" "free a previously allocated DMA" "command block" "dma_free_cb" dma_free_cb(D3X)
.xx "" "dma_get_cb allocate a DMA" "command block" "" dma_get_cb(D3X)
.xx "" "dma_cb DMA" "command block structure" "" dma_cb(D4X)
.xx "" "best transfer mode for DMA" "command" "/determine" dma_get_best_mode(D3X)
.xx "" "biowait suspend processes pending" "completion of block I/O" "" biowait(D3DK)
.xx "" "pullupmsg" "concatenate bytes in a message" "" pullupmsg(D3DK)
.xx "" "linkb" "concatenate two message blocks" "" linkb(D3DK)
.xx "" "a driver message on the system" "console" "print display" print(D2DK)
.xx "response to a buffer/" "mps_mk_bgrant" "construct a buffer grant in" "" mps_mk_bgrant(D3D)
.xx "response to a/" "mps_mk_breject" "construct a buffer reject in" "" mps_mk_breject(D3D)
.xx "be sent" "mps_mk_brdcst" "constructs a broadcast message to" "" mps_mk_brdcst(D3D)
.xx "initiate a/" "mps_mk_solrply" "constructs a message to be sent to" "" mps_mk_solrply(D3D)
.xx "initiate a solicited/" "mps_mk_sol" "constructs a message to be sent to" "" mps_mk_sol(D3D)
.xx "message to be/" "mps_mk_unsolrply" "constructs a unsolicited reply" "" mps_mk_unsolrply(D3D)
.xx "to be sent" "mps_mk_unsol" "constructs an unsolicited message" "" mps_mk_unsol(D3D)
.xx "" "clrbuf erase the" "contents of a buffer" "" clrbuf(D3DK)
.xx "" "ioctl" "control a character device" "" ioctl(D2DK)
.xx "" "canput test for flow" "control in a stream" "" canput(D3DK)
.xx "" "bcanput test for flow" "control in specified priority band" "" bcanput(D3DK)
.xx "" "putctl send a" "control message to a queue" "" putctl(D3DK)
.xx "parameter to a/" "putctl1 send a" "control message with a one-byte" "" putctl(D3DK)
.xx "" "drv_hztousec" "convert clock ticks to microseconds" "" drv_hztousec(D3DK)
.xx "device number" "etoimajor" "convert external to internal major" "" etoimajor(D3DK)
.xx "device number" "itoemajor" "convert internal to external major" "" itoemajor(D3DK)
.xx "" "drv_usectohz" "convert microseconds to clock ticks" "" drv_usectohz(D3DK)
.xx "pages (round down)" "btop" "convert size in bytes to size in" "" btop(D3DK)
.xx "pages (round up)" "btopr" "convert size in bytes to size in" "" btopr(D3DK)
.xx "bytes" "ptob" "convert size in pages to size in" "" ptob(D3DK)
.xx "address" "vtop" "convert virtual address to physical" "" vtop(D3D)
.xx "buffer." "mps_get_soldata" "copies user data from the message" "" mps_get_soldata(D3D)
.xx "buffer." "mps_get_unsoldata" "copies user data from the message" "" mps_get_unsoldata(D3D)
.xx "by uio(D4DK) structure" "ureadc" "copy a character to space described" "" ureadc(D3DK)
.xx "" "copyb" "copy a message block" "" copyb(D3DK)
.xx "" "copymsg" "copy a message" "" copymsg(D3DK)
.xx "in the kernel" "bcopy" "copy data between address locations" "" bcopy(D3DK)
.xx "user buffer" "copyout" "copy data from a driver buffer to a" "" copyout(D3DK)
.xx "driver buffer" "copyin" "copy data from a user buffer to a" "" copyin(D3DK)
.xx "" "uiomove" "copy data using uio(D4DK) structure" "" uiomove(D3DK)
.xx "" "copyreq STREAMS transparent ioctl" "copy request structure" "" copyreq(D4DK)
.xx "" "copyresp STREAMS transparent ioctl" "copy response structure" "" copyresp(D4DK)
.xx "" "" "copyb copy a message block" "" copyb(D3DK)
.xx "to a driver buffer" "" "copyin copy data from a user buffer" "" copyin(D3DK)
.xx "" "" "copymsg copy a message" "" copymsg(D3DK)
.xx "buffer to a user buffer" "" "copyout copy data from a driver" "" copyout(D3DK)
.xx "copy request structure" "" "copyreq STREAMS transparent ioctl" "" copyreq(D4DK)
.xx "copy response structure" "" "copyresp STREAMS transparent ioctl" "" copyresp(D4DK)
.xx "" "/receives solicited data that" "corresponds to an outstanding/" "" mps_AMPreceive(D3D)
.xx "" "drv_priv determine whether" "credentials are privileged" "" drv_priv(D3DK)
.xx "the kernel" "bcopy copy" "data between address locations in" "" bcopy(D3DK)
.xx "" "datab STREAMS" "data block structure" "" datab(D4DK)
.xx "" "mps_free_dmabuf frees a list of" "data buffer descriptors" "" mps_free_dmabuf(D3D)
.xx "" "/returns a pointer to a list of" "data buffer descriptors" "" mps_get_dmabuf(D3D)
.xx "" "read read" "data from a device" "" read(D2DK)
.xx "buffer" "copyout copy" "data from a driver buffer to a user" "" copyout(D3DK)
.xx "buffer" "copyin copy" "data from a user buffer to a driver" "" copyin(D3DK)
.xx "" "mps_get_soldata copies user" "data from the message buffer." "" mps_get_soldata(D3D)
.xx "" "mps_get_unsoldata copies user" "data from the message buffer." "" mps_get_unsoldata(D3D)
.xx "" "msgdsize return number of bytes of" "data in a message" "" msgdsize(D3DK)
.xx "is not/" "/receives solicited" "data in fragments when buffer space" "" mps_AMPreceive_frag(D3D)
.xx "" "intro introduction to driver" "data" "" intro(D1DK)
.xx "" "mps_get_reply_len get" "data length for a solicited reply." "" mps_get_reply_len(D3D)
.xx "" "datamsg test whether a message is a" "data message" "" datamsg(D3DK)
.xx "" "to be sent to initiate a solicited" "data reply" "/constructs a message" mps_mk_solrply(D3D)
.xx "using uio(D4DK)" "iovec" "data storage structure for I/O" "" iovec(D4DK)
.xx "" "intro introduction to kernel" "data structures" "" intro(D4DK)
.xx "" "intro introduction to DMA" "data structures" "" intro(D4X)
.xx "" "mps_AMPreceive receives solicited" "data that corresponds to an/" "" mps_AMPreceive(D3D)
.xx "" "mps_AMPsend_data sends solicited" "data that is not part of any/" "" mps_AMPsend_data(D3D)
.xx "" "write write" "data to a device" "" write(D2DK)
.xx "" "to be sent to initiate a solicited" "data transfer" "/constructs a message" mps_mk_sol(D3D)
.xx "" "buf block I/O" "data transfer structure" "" buf(D4DK)
.xx "" "uiomove copy" "data using uio(D4DK) structure" "" uiomove(D3DK)
.xx "" "" "datab STREAMS data block structure" "" datab(D4DK)
.xx "data message" "" "datamsg test whether a message is a" "" datamsg(D3DK)
.xx "for buffer page list" "bp_mapout" "deallocate virtual address space" "" bp_mapout(D3DK)
.xx "" "streamtab STREAMS driver and module" "declaration structure" "" streamtab(D4DK)
.xx "" "/mps_msg_isreq macros used to" "decode message handler message" "" mps_msg(D3D)
.xx "" "intro introduction to kernel" "#define's" "" intro(D5DK)
.xx "specified number of clock ticks" "" "delay delay process execution for a" "" delay(D3DK)
.xx "specified number of clock/" "delay" "delay process execution for a" "" delay(D3DK)
.xx "" "ureadc copy a character to space" "described by uio(D4DK) structure" "" ureadc(D3DK)
.xx "" "/return a character from space" "described by uio(D4DK) structure" "" uwritec(D3DK)
.xx "" "a previously allocated DMA buffer" "descriptor" "dma_free_buf free" dma_free_buf(D3X)
.xx "" "dma_get_buf allocate a DMA buffer" "descriptor" "" dma_get_buf(D3X)
.xx "" "dma_buf DMA buffer" "descriptor structure" "" dma_buf(D4X)
.xx "" "frees a list of data buffer" "descriptors" "mps_free_dmabuf" mps_free_dmabuf(D3D)
.xx "" "a pointer to a list of data buffer" "descriptors" "mps_get_dmabuf returns" mps_get_dmabuf(D3D)
.xx "" "for certain board types in the" "designated slot" "/checks" ics_agent_cmp(D3D)
.xx "DMA command" "dma_get_best_mode" "determine best transfer mode for" "" dma_get_best_mode(D3X)
.xx "privileged" "drv_priv" "determine whether credentials are" "" drv_priv(D3DK)
.xx "" "" "devflag driver flags" "" devflag(D1D)
.xx "" "start initialize a" "device at system start-up" "" start(D2DK)
.xx "" "close relinquish access to a" "device" "" close(D2DK)
.xx "" "init initialize a" "device" "" init(D2D)
.xx "" "intr process a" "device interrupt" "" intr(D2D)
.xx "" "ioctl control a character" "device" "" ioctl(D2DK)
.xx "" "virtual mapping for memory-mapped" "device" "mmap check" mmap(D2DK)
.xx "" "convert external to internal major" "device number" "etoimajor" etoimajor(D3DK)
.xx "numbers" "makedevice make" "device number from major and minor" "" makedevice(D3DK)
.xx "" "getemajor get external major" "device number" "" getemajor(D3DK)
.xx "" "geteminor get external minor" "device number" "" geteminor(D3DK)
.xx "" "getmajor get internal major" "device number" "" getmajor(D3DK)
.xx "" "getminor get internal minor" "device number" "" getminor(D3DK)
.xx "" "convert internal to external major" "device number" "itoemajor" itoemajor(D3DK)
.xx "" "open gain access to a" "device" "" open(D2DK)
.xx "" "read read data from a" "device" "" read(D2DK)
.xx "" "size return size of logical block" "device" "" size(D2DK)
.xx "" "write write data to a" "device" "" write(D2DK)
.xx "" "send a message in the opposite" "direction in a stream" "qreply" qreply(D3DK)
.xx "requests on a DMA/" "dma_disable" "disable recognition of hardware" "" dma_disable(D3X)
.xx "system console" "print" "display a driver message on the" "" print(D2DK)
.xx "the system" "cmn_err" "display an error message or panic" "" cmn_err(D3DK)
.xx "" "free a previously allocated" "DMA buffer descriptor" "dma_free_buf" dma_free_buf(D3X)
.xx "" "dma_get_buf allocate a" "DMA buffer descriptor" "" dma_get_buf(D3X)
.xx "" "dma_buf" "DMA buffer descriptor structure" "" dma_buf(D4X)
.xx "" "of hardware requests on a" "DMA channel" "/disable recognition" dma_disable(D3X)
.xx "" "of hardware requests on a" "DMA channel" "/enable recognition" dma_enable(D3X)
.xx "" "free a previously allocated" "DMA command block" "dma_free_cb" dma_free_cb(D3X)
.xx "" "dma_get_cb allocate a" "DMA command block" "" dma_get_cb(D3X)
.xx "" "dma_cb" "DMA command block structure" "" dma_cb(D4X)
.xx "" "determine best transfer mode for" "DMA command" "dma_get_best_mode" dma_get_best_mode(D3X)
.xx "" "intro introduction to" "DMA data structures" "" intro(D4X)
.xx "hardware/" "dma_prog program a" "DMA operation for a subsequent" "" dma_prog(D3X)
.xx "software/" "dma_swsetup program a" "DMA operation for a subsequent" "" dma_swsetup(D3X)
.xx "" "dma_stop stop software-initiated" "DMA operation on a channel and/" "" dma_stop(D3X)
.xx "" "dma_swstart initiate a" "DMA operation via software request" "" dma_swstart(D3X)
.xx "" "intro introduction to" "DMA utility routines" "" intro(D3X)
.xx "structure" "" "dma_buf DMA buffer descriptor" "" dma_buf(D4X)
.xx "" "" "dma_cb DMA command block structure" "" dma_cb(D4X)
.xx "hardware requests on a DMA channel" "" "dma_disable disable recognition of" "" dma_disable(D3X)
.xx "hardware requests on a DMA channel" "" "dma_enable enable recognition of" "" dma_enable(D3X)
.xx "allocated DMA buffer descriptor" "" "dma_free_buf free a previously" "" dma_free_buf(D3X)
.xx "allocated DMA command block" "" "dma_free_cb free a previously" "" dma_free_cb(D3X)
.xx "transfer mode for DMA command" "" "dma_get_best_mode determine best" "" dma_get_best_mode(D3X)
.xx "descriptor" "" "dma_get_buf allocate a DMA buffer" "" dma_get_buf(D3X)
.xx "block" "" "dma_get_cb allocate a DMA command" "" dma_get_cb(D3X)
.xx "into manageable units" "" "dma_pageio break up an I/O request" "" dma_pageio(D3D)
.xx "for a subsequent hardware request" "" "dma_prog program a DMA operation" "" dma_prog(D3X)
.xx "DMA operation on a channel and/" "" "dma_stop stop software-initiated" "" dma_stop(D3X)
.xx "for a subsequent software request" "" "dma_swsetup program a DMA operation" "" dma_swsetup(D3X)
.xx "operation via software request" "" "dma_swstart initiate a DMA" "" dma_swstart(D3X)
.xx "" "in bytes to size in pages (round" "down)" "btop convert size" btop(D3DK)
.xx "structure" "streamtab STREAMS" "driver and module declaration" "" streamtab(D4DK)
.xx "" "info STREAMS" "driver and module information" "" info(D1D)
.xx "structure" "module_info STREAMS" "driver and module information" "" module_info(D4DK)
.xx "" "copy data from a user buffer to a" "driver buffer" "copyin" copyin(D3DK)
.xx "" "copyout copy data from a" "driver buffer to a user buffer" "" copyout(D3DK)
.xx "" "point for a non-STREAMS character" "driver" "chpoll poll entry" chpoll(D2DK)
.xx "" "intro introduction to" "driver data" "" intro(D1DK)
.xx "" "intro introduction to" "driver entry point routines" "" intro(D2DK)
.xx "" "devflag" "driver flags" "" devflag(D1D)
.xx "console" "print display a" "driver message on the system" "" print(D2DK)
.xx "" "prefix" "driver prefix" "" prefix(D1DK)
.xx "" "strlog submit messages to the log" "driver" "" strlog(D3DK)
.xx "" "halt shut down the" "driver when the system shuts down" "" halt(D2D)
.xx "structure" "free_rtn STREAMS" "driver's message free routine" "" free_rtn(D4DK)
.xx "information" "" "drv_getparm retrieve kernel state" "" drv_getparm(D3DK)
.xx "microseconds" "" "drv_hztousec convert clock ticks to" "" drv_hztousec(D3DK)
.xx "credentials are privileged" "" "drv_priv determine whether" "" drv_priv(D3DK)
.xx "information" "" "drv_setparm set kernel state" "" drv_setparm(D3DK)
.xx "to clock ticks" "" "drv_usectohz convert microseconds" "" drv_usectohz(D3DK)
.xx "specified interval" "" "drv_usecwait busy-wait for" "" drv_usecwait(D3DK)
.xx "" "" "dupb duplicate a message block" "" dupb(D3DK)
.xx "" "dupb" "duplicate a message block" "" dupb(D3DK)
.xx "" "dupmsg" "duplicate a message" "" dupmsg(D3DK)
.xx "" "" "dupmsg duplicate a message" "" dupmsg(D3DK)
.xx "" "geteblk get an" "empty buffer" "" geteblk(D3DK)
.xx "" "ngeteblk get an" "empty buffer of the specified size" "" ngeteblk(D3DK)
.xx "requests on a DMA/" "dma_enable" "enable recognition of hardware" "" dma_enable(D3X)
.xx "serviced" "" "enableok allow a queue to be" "" enableok(D3DK)
.xx "" "/for transmission and sets up table" "entries for reception of reply/" "" mps_AMPsend_rsvp(D3D)
.xx "character driver" "chpoll poll" "entry point for a non-STREAMS" "" chpoll(D2DK)
.xx "" "intro introduction to driver" "entry point routines" "" intro(D2DK)
.xx "" "clrbuf" "erase the contents of a buffer" "" clrbuf(D3DK)
.xx "" "" "errnos error numbers" "" errnos(D5DK)
.xx "" "cmn_err display an" "error message or panic the system" "" cmn_err(D3DK)
.xx "" "geterror retrieve" "error number from a buffer header" "" geterror(D3DK)
.xx "" "errnos" "error numbers" "" errnos(D5DK)
.xx "using an externally-supplied/" "" "esballoc allocate a message block" "" esballoc(D3DK)
.xx "externally-supplied buffer can be/" "" "esbbcall call a function when an" "" esbbcall(D3DK)
.xx "internal major device number" "" "etoimajor convert external to" "" etoimajor(D3DK)
.xx "" "inform polling processes that an" "event has occurred" "pollwakeup" pollwakeup(D3DK)
.xx "" "execution pending occurrence of an" "event" "sleep suspend process" sleep(D3K)
.xx "specified length of time" "timeout" "execute a function after a" "" timeout(D3DK)
.xx "clock ticks" "delay delay process" "execution for a specified number of" "" delay(D3DK)
.xx "event" "sleep suspend process" "execution pending occurrence of an" "" sleep(D3K)
.xx "" "wakeup resume suspended process" "execution" "" wakeup(D3K)
.xx "" "getemajor get" "external major device number" "" getemajor(D3DK)
.xx "" "itoemajor convert internal to" "external major device number" "" itoemajor(D3DK)
.xx "" "geteminor get" "external minor device number" "" geteminor(D3DK)
.xx "number" "etoimajor convert" "external to internal major device" "" etoimajor(D3DK)
.xx "" "esbbcall call a function when an" "externally-supplied buffer can be/" "" esbbcall(D3DK)
.xx "" "/allocate a message block using an" "externally-supplied buffer" "" esballoc(D3DK)
.xx "" "ics_hostid returns the host id" "field of the HOST ID record in this/" "" ics_hostid(D3D)
.xx "queue" "qsize" "find the number of messages on a" "" qsize(D3DK)
.xx "" "rmsetwant set the map's wait" "flag for a wakeup" "" rmsetwant(D3K)
.xx "" "devflag driver" "flags" "" devflag(D1D)
.xx "" "canput test for" "flow control in a stream" "" canput(D3DK)
.xx "band" "bcanput test for" "flow control in specified priority" "" bcanput(D3DK)
.xx "priority band" "flushband" "flush messages in a specified" "" flushband(D3DK)
.xx "" "flushq" "flush messages on a queue" "" flushq(D3DK)
.xx "specified priority band" "" "flushband flush messages in a" "" flushband(D3DK)
.xx "" "" "flushq flush messages on a queue" "" flushq(D3DK)
.xx "" "/receives solicited data in" "fragments when buffer space is not/" "" mps_AMPreceive_frag(D3D)
.xx "" "freeb" "free a message block" "" freeb(D3DK)
.xx "" "freemsg" "free a message" "" freemsg(D3DK)
.xx "buffer descriptor" "dma_free_buf" "free a previously allocated DMA" "" dma_free_buf(D3X)
.xx "command block" "dma_free_cb" "free a previously allocated DMA" "" dma_free_cb(D3X)
.xx "" "freerbuf" "free a raw buffer header" "" freerbuf(D3DK)
.xx "" "return a buffer to the system's" "free list" "brelse" brelse(D3DK)
.xx "" "allocate space from kernel" "free memory" "kmem_alloc" kmem_alloc(D3DK)
.xx "" "and clear space from kernel" "free memory" "kmem_zalloc allocate" kmem_zalloc(D3DK)
.xx "" "puts a buffer back into the" "free memory pool" "mps_free_msgbuf" mps_free_msgbuf(D3D)
.xx "memory" "kmem_free" "free previously allocated kernel" "" kmem_free(D3DK)
.xx "" "free_rtn STREAMS driver's message" "free routine structure" "" free_rtn(D4DK)
.xx "management map" "rmfree" "free space into a private space" "" rmfree(D3DK)
.xx "physical addresses" "physmap_free" "free virtual address mapping for" "" physmap_free(D3D)
.xx "" "" "freeb free a message block" "" freeb(D3DK)
.xx "" "" "freemsg free a message" "" freemsg(D3DK)
.xx "" "" "freerbuf free a raw buffer header" "" freerbuf(D3DK)
.xx "free routine structure" "" "free_rtn STREAMS driver's message" "" free_rtn(D4DK)
.xx "descriptors" "mps_free_dmabuf" "frees a list of data buffer" "" mps_free_dmabuf(D3D)
.xx "transaction id" "mps_free_tid" "frees a previously allocated" "" mps_free_tid(D3D)
.xx "of time" "timeout execute a" "function after a specified length" "" timeout(D3DK)
.xx "available" "bufcall call a" "function when a buffer becomes" "" bufcall(D3DK)
.xx "" "esbbcall call a" "function when an/" "" esbbcall(D3DK)
.xx "" "open" "gain access to a device" "" open(D2DK)
.xx "" "" "geteblk get an empty buffer" "" geteblk(D3DK)
.xx "number" "" "getemajor get external major device" "" getemajor(D3DK)
.xx "number" "" "geteminor get external minor device" "" geteminor(D3DK)
.xx "a buffer header" "" "geterror retrieve error number from" "" geterror(D3DK)
.xx "number" "" "getmajor get internal major device" "" getmajor(D3DK)
.xx "number" "" "getminor get internal minor device" "" getminor(D3DK)
.xx "queue" "" "getq get the next message from a" "" getq(D3DK)
.xx "" "" "getrbuf get a raw buffer header" "" getrbuf(D3DK)
.xx "" "interconnect space registers from a" "given cardslot ID" "/number of" ics_rdwr(D3D)
.xx "" "bzero clear memory for a" "given number of bytes" "" bzero(D3DK)
.xx "" "mps_mk_bgrant construct a buffer" "grant in response to a buffer/" "" mps_mk_bgrant(D3D)
.xx "system shuts down" "" "halt shut down the driver when the" "" halt(D2D)
.xx "" "macros used to decode message" "handler message" "/mps_msg_isreq" mps_msg(D3D)
.xx "" "a DMA operation for a subsequent" "hardware request" "dma_prog program" dma_prog(D3X)
.xx "" "dma_disable disable recognition of" "hardware requests on a DMA channel" "" dma_disable(D3X)
.xx "" "dma_enable enable recognition of" "hardware requests on a DMA channel" "" dma_enable(D3X)
.xx "for kernel virtual address" "" "hat_getkpfnum get physical page ID" "" hat_getkpfnum(D3DK)
.xx "for physical address" "" "hat_getppfnum get physical page ID" "" hat_getppfnum(D3D)
.xx "" "remove a message block from the" "head of a message" "unlinkb" unlinkb(D3DK)
.xx "" "putbq place a message at the" "head of a queue" "" putbq(D3DK)
.xx "" "stroptions stream" "head option structure" "" stroptions(D4DK)
.xx "" "freerbuf free a raw buffer" "header" "" freerbuf(D3DK)
.xx "" "retrieve error number from a buffer" "header" "geterror" geterror(D3DK)
.xx "" "getrbuf get a raw buffer" "header" "" getrbuf(D3DK)
.xx "in this/" "ics_hostid returns the" "host id field of the HOST ID record" "" ics_hostid(D3D)
.xx "" "/returns the host id field of the" "HOST ID record in this board's/" "" ics_hostid(D3D)
.xx "board types in the designated slot" "" "ics_agent_cmp checks for certain" "" ics_agent_cmp(D3D)
.xx "interconnect register of the board/" "" "ics_find _rec reads the" "" ics_find(D3D)
.xx "field of the HOST ID record in/" "" "ics_hostid returns the host id" "" ics_hostid(D3D)
.xx "specified number of interconnect/" "" "ics_rdwr reads or writes a" "" ics_rdwr(D3D)
.xx "register of the board in the/" "" "ics_read reads the interconnect" "" ics_read(D3D)
.xx "specified register of the board in/" "" "ics_write writes a value into the" "" ics_write(D3D)
.xx "this/" "ics_hostid returns the host" "id field of the HOST ID record in" "" ics_hostid(D3D)
.xx "" "hat_getkpfnum get physical page" "ID for kernel virtual address" "" hat_getkpfnum(D3DK)
.xx "" "hat_getppfnum get physical page" "ID for physical address" "" hat_getppfnum(D3D)
.xx "" "registers from a given cardslot" "ID" "/number of interconnect space" ics_rdwr(D3D)
.xx "" "a previously allocated transaction" "id" "mps_free_tid frees" mps_free_tid(D3D)
.xx "" "the host id field of the HOST" "ID record in this board's/" "/returns" ics_hostid(D3D)
.xx "" "mps_get_tid allocates transaction" "ids" "" mps_get_tid(D3D)
.xx "port" "" "inb read a byte from a 8 bit I/O" "" inb(D3D)
.xx "information" "" "info STREAMS driver and module" "" info(D1D)
.xx "event has occurred" "pollwakeup" "inform polling processes that an" "" pollwakeup(D3DK)
.xx "of the queue" "strqget get" "information about a queue or band" "" strqget(D3DK)
.xx "of the queue" "strqset change" "information about a queue or band" "" strqset(D3DK)
.xx "" "drv_getparm retrieve kernel state" "information" "" drv_getparm(D3DK)
.xx "" "drv_setparm set kernel state" "information" "" drv_setparm(D3DK)
.xx "" "info STREAMS driver and module" "information" "" info(D1D)
.xx "" "STREAMS driver and module" "information structure" "module_info" module_info(D4DK)
.xx "" "" "init initialize a device" "" init(D2D)
.xx "" "qinit STREAMS queue" "initialization structure" "" qinit(D4DK)
.xx "start-up" "start" "initialize a device at system" "" start(D2DK)
.xx "" "init" "initialize a device" "" init(D2D)
.xx "management map" "rminit" "initialize a private space" "" rminit(D3K)
.xx "software request" "dma_swstart" "initiate a DMA operation via" "" dma_swstart(D3X)
.xx "" "/constructs a message to be sent to" "initiate a solicited data reply" "" mps_mk_solrply(D3D)
.xx "" "/constructs a message to be sent to" "initiate a solicited data transfer" "" mps_mk_sol(D3D)
.xx "bit I/O port" "" "inl read a 32 bit word from a 32" "" inl(D3D)
.xx "" "insq" "insert a message into a queue" "" insq(D3DK)
.xx "" "" "insq insert a message into a queue" "" insq(D3DK)
.xx "" "max return the larger of two" "integers" "" max(D3DK)
.xx "" "min return the lesser of two" "integers" "" min(D3DK)
.xx "in the/" "ics_find _rec reads the" "interconnect register of the board" "" ics_find(D3D)
.xx "in the/" "ics_read reads the" "interconnect register of the board" "" ics_read(D3D)
.xx "" "the HOST ID record in this board's" "interconnect space" "/id field of" ics_hostid(D3D)
.xx "" "/or writes a specified number of" "interconnect space registers from a/" "" ics_rdwr(D3D)
.xx "" "etoimajor convert external to" "internal major device number" "" etoimajor(D3DK)
.xx "" "getmajor get" "internal major device number" "" getmajor(D3DK)
.xx "" "getminor get" "internal minor device number" "" getminor(D3DK)
.xx "number" "itoemajor convert" "internal to external major device" "" itoemajor(D3DK)
.xx "" "intr process a device" "interrupt" "" intr(D2D)
.xx "" "spl block/allow" "interrupts" "" spl(D3D)
.xx "" "busy-wait for specified" "interval" "drv_usecwait" drv_usecwait(D3DK)
.xx "" "" "intr process a device interrupt" "" intr(D2D)
.xx "structures" "" "intro introduction to DMA data" "" intro(D4X)
.xx "routines" "" "intro introduction to DMA utility" "" intro(D3X)
.xx "" "" "intro introduction to driver data" "" intro(D1DK)
.xx "point routines" "" "intro introduction to driver entry" "" intro(D2DK)
.xx "structures" "" "intro introduction to kernel data" "" intro(D4DK)
.xx "#define's" "" "intro introduction to kernel" "" intro(D5DK)
.xx "utility routines" "" "intro introduction to kernel" "" intro(D3DK)
.xx "" "intro" "introduction to DMA data structures" "" intro(D4X)
.xx "routines" "intro" "introduction to DMA utility" "" intro(D3X)
.xx "" "intro" "introduction to driver data" "" intro(D1DK)
.xx "routines" "intro" "introduction to driver entry point" "" intro(D2DK)
.xx "structures" "intro" "introduction to kernel data" "" intro(D4DK)
.xx "" "intro" "introduction to kernel #define's" "" intro(D5DK)
.xx "routines" "intro" "introduction to kernel utility" "" intro(D3DK)
.xx "16 bit I/O port" "" "inw read a 16 bit short word from a" "" inw(D3D)
.xx "" "biodone release buffer after block" "I/O and wakeup processes" "" biodone(D3DK)
.xx "" "pending completion of block" "I/O" "biowait suspend processes" biowait(D3DK)
.xx "" "buf block" "I/O data transfer structure" "" buf(D4DK)
.xx "" "inb read a byte from a 8 bit" "I/O port" "" inb(D3D)
.xx "" "read a 32 bit word from a 32 bit" "I/O port" "inl" inl(D3D)
.xx "" "a 16 bit short word from a 16 bit" "I/O port" "inw read" inw(D3D)
.xx "" "outb write a byte to an 8 bit" "I/O port" "" outb(D3D)
.xx "" "a 32 bit long word to a 32 bit" "I/O port" "outl write" outl(D3D)
.xx "" "a 16 bit short word to a 16 bit" "I/O port" "outw write" outw(D3D)
.xx "" "write bytes from buffer to an" "I/O port" "repoutsb" repoutsb(D3D)
.xx "" "32 bit words from buffer to an" "I/O port" "repoutsd write" repoutsd(D3D)
.xx "" "16 bit words from buffer to an" "I/O port" "repoutsw write" repoutsw(D3D)
.xx "" "repinsb read bytes from" "I/O port to buffer" "" repinsb(D3D)
.xx "" "repinsd read 32 bit words from" "I/O port to buffer" "" repinsd(D3D)
.xx "" "repinsw read 16 bit words from" "I/O port to buffer" "" repinsw(D3D)
.xx "" "dma_pageio break up an" "I/O request into manageable units" "" dma_pageio(D3D)
.xx "" "physiock validate and issue raw" "I/O request" "" physiock(D3DK)
.xx "" "uio scatter/gather" "I/O request structure" "" uio(D4DK)
.xx "" "strategy perform block" "I/O" "" strategy(D2DK)
.xx "" "iovec data storage structure for" "I/O using uio(D4DK)" "" iovec(D4DK)
.xx "" "" "iocblk STREAMS ioctl structure" "" iocblk(D4DK)
.xx "" "" "ioctl control a character device" "" ioctl(D2DK)
.xx "" "copyreq STREAMS transparent" "ioctl copy request structure" "" copyreq(D4DK)
.xx "" "copyresp STREAMS transparent" "ioctl copy response structure" "" copyresp(D4DK)
.xx "" "iocblk STREAMS" "ioctl structure" "" iocblk(D4DK)
.xx "I/O using uio(D4DK)" "" "iovec data storage structure for" "" iovec(D4DK)
.xx "" "physiock validate and" "issue raw I/O request" "" physiock(D3DK)
.xx "external major device number" "" "itoemajor convert internal to" "" itoemajor(D3DK)
.xx "" "between address locations in the" "kernel" "bcopy copy data" bcopy(D3DK)
.xx "" "intro introduction to" "kernel data structures" "" intro(D4DK)
.xx "" "intro introduction to" "kernel #define's" "" intro(D5DK)
.xx "" "kmem_alloc allocate space from" "kernel free memory" "" kmem_alloc(D3DK)
.xx "" "allocate and clear space from" "kernel free memory" "kmem_zalloc" kmem_zalloc(D3DK)
.xx "" "kmem_free free previously allocated" "kernel memory" "" kmem_free(D3DK)
.xx "" "drv_getparm retrieve" "kernel state information" "" drv_getparm(D3DK)
.xx "" "drv_setparm set" "kernel state information" "" drv_setparm(D3DK)
.xx "" "intro introduction to" "kernel utility routines" "" intro(D3DK)
.xx "" "/get physical page ID for" "kernel virtual address" "" hat_getkpfnum(D3DK)
.xx "kernel free memory" "" "kmem_alloc allocate space from" "" kmem_alloc(D3DK)
.xx "kernel memory" "" "kmem_free free previously allocated" "" kmem_free(D3DK)
.xx "space from kernel free memory" "" "kmem_zalloc allocate and clear" "" kmem_zalloc(D3DK)
.xx "" "max return the" "larger of two integers" "" max(D3DK)
.xx "" "mps_get_reply_len get data" "length for a solicited reply." "" mps_get_reply_len(D3D)
.xx "" "a function after a specified" "length of time" "timeout execute" timeout(D3DK)
.xx "" "min return the" "lesser of two integers" "" min(D3DK)
.xx "" "linkblk STREAMS multiplexor" "link structure" "" linkblk(D4DK)
.xx "blocks" "" "linkb concatenate two message" "" linkb(D3DK)
.xx "structure" "" "linkblk STREAMS multiplexor link" "" linkblk(D4DK)
.xx "" "address space for buffer page" "list" "bp_mapin allocate virtual" bp_mapin(D3DK)
.xx "" "address space for buffer page" "list" "bp_mapout deallocate virtual" bp_mapout(D3DK)
.xx "" "a buffer to the system's free" "list" "brelse return" brelse(D3DK)
.xx "" "mps_free_dmabuf frees a" "list of data buffer descriptors" "" mps_free_dmabuf(D3D)
.xx "" "/returns a pointer to a" "list of data buffer descriptors" "" mps_get_dmabuf(D3D)
.xx "" "bcopy copy data between address" "locations in the kernel" "" bcopy(D3DK)
.xx "" "strlog submit messages to the" "log driver" "" strlog(D3DK)
.xx "" "size return size of" "logical block device" "" size(D2DK)
.xx "" "/mps_msg_iscompletion, mps_msg_isreq" "macros used to decode message/" "" mps_msg(D3D)
.xx "" "makedevice make device number from" "major and minor numbers" "" makedevice(D3DK)
.xx "" "convert external to internal" "major device number" "etoimajor" etoimajor(D3DK)
.xx "" "getemajor get external" "major device number" "" getemajor(D3DK)
.xx "" "getmajor get internal" "major device number" "" getmajor(D3DK)
.xx "" "convert internal to external" "major device number" "itoemajor" itoemajor(D3DK)
.xx "major and minor numbers" "" "makedevice make device number from" "" makedevice(D3DK)
.xx "" "break up an I/O request into" "manageable units" "dma_pageio" dma_pageio(D3D)
.xx "" "allocate space from a private space" "management map" "rmalloc" rmalloc(D3DK)
.xx "" "free space into a private space" "management map" "rmfree" rmfree(D3DK)
.xx "" "rminit initialize a private space" "management map" "" rminit(D3K)
.xx "" "from a private space management" "map" "rmalloc allocate space" rmalloc(D3DK)
.xx "" "into a private space management" "map" "rmfree free space" rmfree(D3DK)
.xx "" "a private space management" "map" "rminit initialize" rminit(D3K)
.xx "" "mmap check virtual" "mapping for memory-mapped device" "" mmap(D2DK)
.xx "" "physmap obtain virtual address" "mapping for physical addresses" "" physmap(D3D)
.xx "" "physmap_free free virtual address" "mapping for physical addresses" "" physmap_free(D3D)
.xx "" "rmsetwant set the" "map's wait flag for a wakeup" "" rmsetwant(D3K)
.xx "integers" "" "max return the larger of two" "" max(D3DK)
.xx "" "bzero clear" "memory for a given number of bytes" "" bzero(D3DK)
.xx "" "allocate space from kernel free" "memory" "kmem_alloc" kmem_alloc(D3DK)
.xx "" "free previously allocated kernel" "memory" "kmem_free" kmem_free(D3DK)
.xx "" "and clear space from kernel free" "memory" "kmem_zalloc allocate" kmem_zalloc(D3DK)
.xx "" "puts a buffer back into the free" "memory pool" "mps_free_msgbuf" mps_free_msgbuf(D3D)
.xx "" "mmap check virtual mapping for" "memory-mapped device" "" mmap(D2DK)
.xx "" "adjmsg trim bytes from a" "message" "" adjmsg(D3DK)
.xx "" "putbq place a" "message at the head of a queue" "" putbq(D3DK)
.xx "" "allocb allocate a" "message block" "" allocb(D3DK)
.xx "" "copyb copy a" "message block" "" copyb(D3DK)
.xx "" "dupb duplicate a" "message block" "" dupb(D3DK)
.xx "" "freeb free a" "message block" "" freeb(D3DK)
.xx "" "rmvb remove a" "message block from a message" "" rmvb(D3DK)
.xx "message" "unlinkb remove a" "message block from the head of a" "" unlinkb(D3DK)
.xx "" "msgb STREAMS" "message block structure" "" msgb(D4DK)
.xx "" "esballoc allocate a" "message block using an/" "" esballoc(D3DK)
.xx "" "linkb concatenate two" "message blocks" "" linkb(D3DK)
.xx "" "mps_get_msgbuf allocates a" "message buffer" "" mps_get_msgbuf(D3D)
.xx "" "copies user data from the" "message buffer." "mps_get_soldata" mps_get_soldata(D3D)
.xx "" "copies user data from the" "message buffer." "mps_get_unsoldata" mps_get_unsoldata(D3D)
.xx "" "copymsg copy a" "message" "" copymsg(D3DK)
.xx "" "test whether a message is a data" "message" "datamsg" datamsg(D3DK)
.xx "" "dupmsg duplicate a" "message" "" dupmsg(D3DK)
.xx "" "free_rtn STREAMS driver's" "message free routine structure" "" free_rtn(D4DK)
.xx "" "freemsg free a" "message" "" freemsg(D3DK)
.xx "" "getq get the next" "message from a queue" "" getq(D3DK)
.xx "" "rmvq remove a" "message from a queue" "" rmvq(D3DK)
.xx "" "/mps_msg_isreq macros used to decode" "message handler message" "" mps_msg(D3D)
.xx "in a stream" "qreply send a" "message in the opposite direction" "" qreply(D3DK)
.xx "" "insq insert a" "message into a queue" "" insq(D3DK)
.xx "" "datamsg test whether a" "message is a data message" "" datamsg(D3DK)
.xx "" "used to decode message handler" "message" "/mps_msg_isreq macros" mps_msg(D3D)
.xx "" "return number of bytes of data in a" "message" "msgdsize" msgdsize(D3DK)
.xx "" "putq put a" "message on a queue" "" putq(D3DK)
.xx "" "print display a driver" "message on the system console" "" print(D2DK)
.xx "" "cmn_err display an error" "message or panic the system" "" cmn_err(D3DK)
.xx "" "pullupmsg concatenate bytes in a" "message" "" pullupmsg(D3DK)
.xx "" "rmvb remove a message block from a" "message" "" rmvb(D3DK)
.xx "" "putctl send a control" "message to a queue" "" putctl(D3DK)
.xx "" "constructs a broadcast" "message to be sent" "mps_mk_brdcst" mps_mk_brdcst(D3D)
.xx "" "constructs an unsolicited" "message to be sent" "mps_mk_unsol" mps_mk_unsol(D3D)
.xx "" "/constructs a unsolicited reply" "message to be sent." "" mps_mk_unsolrply(D3D)
.xx "" "mps_mk_solrply constructs a" "message to be sent to initiate a/" "" mps_mk_solrply(D3D)
.xx "solicited/" "mps_mk_sol constructs a" "message to be sent to initiate a" "" mps_mk_sol(D3D)
.xx "" "putnext send a" "message to the next queue" "" putnext(D3DK)
.xx "" "a message block from the head of a" "message" "unlinkb remove" unlinkb(D3DK)
.xx "to a queue" "putctl1 send a control" "message with a one-byte parameter" "" putctl(D3DK)
.xx "up/" "mps_AMPsend_rsvp queues request" "messages for transmission and sets" "" mps_AMPsend_rsvp(D3D)
.xx "" "put receive" "messages from the preceding queue" "" put(D2DK)
.xx "band" "flushband flush" "messages in a specified priority" "" flushband(D3DK)
.xx "" "messages STREAMS" "messages" "" messages(D5DK)
.xx "" "entries for reception of reply" "messages" "/and sets up table" mps_AMPsend_rsvp(D3D)
.xx "" "flushq flush" "messages on a queue" "" flushq(D3DK)
.xx "" "qsize find the number of" "messages on a queue" "" qsize(D3DK)
.xx "" "srv service queued" "messages" "" srv(D2DK)
.xx "" "" "messages STREAMS messages" "" messages(D5DK)
.xx "" "mps_AMPsend sends unsolicited" "messages that are not part of any/" "" mps_AMPsend(D3D)
.xx "" "strlog submit" "messages to the log driver" "" strlog(D3DK)
.xx "" "drv_hztousec convert clock ticks to" "microseconds" "" drv_hztousec(D3DK)
.xx "" "drv_usectohz convert" "microseconds to clock ticks" "" drv_usectohz(D3DK)
.xx "integers" "" "min return the lesser of two" "" min(D3DK)
.xx "" "geteminor get external" "minor device number" "" geteminor(D3DK)
.xx "" "getminor get internal" "minor device number" "" getminor(D3DK)
.xx "" "make device number from major and" "minor numbers" "makedevice" makedevice(D3DK)
.xx "memory-mapped device" "" "mmap check virtual mapping for" "" mmap(D2DK)
.xx "" "/determine best transfer" "mode for DMA command" "" dma_get_best_mode(D3X)
.xx "" "streamtab STREAMS driver and" "module declaration structure" "" streamtab(D4DK)
.xx "" "info STREAMS driver and" "module information" "" info(D1D)
.xx "" "module_info STREAMS driver and" "module information structure" "" module_info(D4DK)
.xx "module information structure" "" "module_info STREAMS driver and" "" module_info(D4DK)
.xx "rsvp transaction" "" "mps_AMPcancel cancels an ongoing" "" mps_AMPcancel(D3D)
.xx "data that corresponds to an/" "" "mps_AMPreceive receives solicited" "" mps_AMPreceive(D3D)
.xx "solicited data in fragments when/" "" "mps_AMPreceive_frag receives" "" mps_AMPreceive_frag(D3D)
.xx "messages that are not part of any/" "" "mps_AMPsend sends unsolicited" "" mps_AMPsend(D3D)
.xx "data that is not part of any/" "" "mps_AMPsend_data sends solicited" "" mps_AMPsend_data(D3D)
.xx "received request that is part of a/" "" "mps_AMPsend_reply replies to a" "" mps_AMPsend_reply(D3D)
.xx "messages for transmission and sets/" "" "mps_AMPsend_rsvp queues request" "" mps_AMPsend_rsvp(D3D)
.xx "opened channel" "" "mps_close_chan closes a previously" "" mps_close_chan(D3D)
.xx "data buffer descriptors" "" "mps_free_dmabuf frees a list of" "" mps_free_dmabuf(D3D)
.xx "into the free memory pool" "" "mps_free_msgbuf puts a buffer back" "" mps_free_msgbuf(D3D)
.xx "allocated transaction id" "" "mps_free_tid frees a previously" "" mps_free_tid(D3D)
.xx "a list of data buffer descriptors" "" "mps_get_dmabuf returns a pointer to" "" mps_get_dmabuf(D3D)
.xx "buffer" "" "mps_get_msgbuf allocates a message" "" mps_get_msgbuf(D3D)
.xx "for a solicited reply." "" "mps_get_reply_len get data length" "" mps_get_reply_len(D3D)
.xx "from the message buffer." "" "mps_get_soldata copies user data" "" mps_get_soldata(D3D)
.xx "ids" "" "mps_get_tid allocates transaction" "" mps_get_tid(D3D)
.xx "from the message buffer." "" "mps_get_unsoldata copies user data" "" mps_get_unsoldata(D3D)
.xx "grant in response to a buffer/" "" "mps_mk_bgrant construct a buffer" "" mps_mk_bgrant(D3D)
.xx "broadcast message to be sent" "" "mps_mk_brdcst constructs a" "" mps_mk_brdcst(D3D)
.xx "reject in response to a buffer/" "" "mps_mk_breject construct a buffer" "" mps_mk_breject(D3D)
.xx "be sent to initiate a solicited/" "" "mps_mk_sol constructs a message to" "" mps_mk_sol(D3D)
.xx "to be sent to initiate a solicited/" "" "mps_mk_solrply constructs a message" "" mps_mk_solrply(D3D)
.xx "unsolicited message to be sent" "" "mps_mk_unsol constructs an" "" mps_mk_unsol(D3D)
.xx "unsolicited reply message to be/" "" "mps_mk_unsolrply constructs a" "" mps_mk_unsolrply(D3D)
.xx "mps_msg_getmsgtyp,/" "" "mps_msg: mps_msg_getsrcmid," "" mps_msg(D3D)
.xx "" "/mps_msg_getmsgtyp," "mps_msg_getbrlen, mps_msg_getreqid,/" "" mps_msg(D3D)
.xx "" "/mps_msg_getbrlen, mps_msg_getreqid," "mps_msg_getlsnid,/" "" mps_msg(D3D)
.xx "" "mps_msg: mps_msg_getsrcmid," "mps_msg_getmsgtyp,/" "" mps_msg(D3D)
.xx "" "/mps_msg_getbrlen," "mps_msg_getreqid, mps_msg_getlsnid,/" "" mps_msg(D3D)
.xx "mps_msg_getmsgtyp,/" "mps_msg:" "mps_msg_getsrcmid," "" mps_msg(D3D)
.xx "" "/mps_msg_getreqid, mps_msg_getlsnid," "mps_msg_getsrcpid,/" "" mps_msg(D3D)
.xx "" "/mps_msg_getsrcpid," "mps_msg_gettrnsid, mps_msg_getudp,/" "" mps_msg(D3D)
.xx "mps_msg_iseot,/" "/mps_msg_gettrnsid," "mps_msg_getudp, mps_msg_iscancel," "" mps_msg(D3D)
.xx "" "/mps_msg_gettrnsid, mps_msg_getudp," "mps_msg_iscancel, mps_msg_iseot,/" "" mps_msg(D3D)
.xx "" "/mps_msg_iseot, mps_msg_iserror," "mps_msg_iscompletion, mps_msg_isreq/" "" mps_msg(D3D)
.xx "" "/mps_msg_getudp, mps_msg_iscancel," "mps_msg_iseot, mps_msg_iserror,/" "" mps_msg(D3D)
.xx "" "mps_msg_iscancel, mps_msg_iseot," "mps_msg_iserror,/" "/mps_msg_getudp," mps_msg(D3D)
.xx "message/" "/mps_msg_iscompletion," "mps_msg_isreq macros used to decode" "" mps_msg(D3D)
.xx "" "" "mps_open_chan opens a channel" "" mps_open_chan(D3D)
.xx "structure" "" "msgb STREAMS message block" "" msgb(D4DK)
.xx "data in a message" "" "msgdsize return number of bytes of" "" msgdsize(D3DK)
.xx "" "linkblk STREAMS" "multiplexor link structure" "" linkblk(D4DK)
.xx "" "getq get the" "next message from a queue" "" getq(D3DK)
.xx "" "SAMESTR test if" "next queue is same type" "" SAMESTR(D3DK)
.xx "" "putnext send a message to the" "next queue" "" putnext(D3DK)
.xx "specified size" "" "ngeteblk get an empty buffer of the" "" ngeteblk(D3DK)
.xx "scheduled" "" "noenable prevent a queue from being" "" noenable(D3DK)
.xx "" "chpoll poll entry point for a" "non-STREAMS character driver" "" chpoll(D2DK)
.xx "" "external to internal major device" "number" "etoimajor convert" etoimajor(D3DK)
.xx "" "geterror retrieve error" "number from a buffer header" "" geterror(D3DK)
.xx "" "makedevice make device" "number from major and minor numbers" "" makedevice(D3DK)
.xx "" "getemajor get external major device" "number" "" getemajor(D3DK)
.xx "" "geteminor get external minor device" "number" "" geteminor(D3DK)
.xx "" "getmajor get internal major device" "number" "" getmajor(D3DK)
.xx "" "getminor get internal minor device" "number" "" getminor(D3DK)
.xx "" "internal to external major device" "number" "itoemajor convert" itoemajor(D3DK)
.xx "" "bzero clear memory for a given" "number of bytes" "" bzero(D3DK)
.xx "message" "msgdsize return" "number of bytes of data in a" "" msgdsize(D3DK)
.xx "" "process execution for a specified" "number of clock ticks" "delay delay" delay(D3DK)
.xx "" "/reads or writes a specified" "number of interconnect space/" "" ics_rdwr(D3D)
.xx "" "qsize find the" "number of messages on a queue" "" qsize(D3DK)
.xx "" "errnos error" "numbers" "" errnos(D5DK)
.xx "" "device number from major and minor" "numbers" "makedevice make" makedevice(D3DK)
.xx "" "signals signal" "numbers" "" signals(D5DK)
.xx "physical addresses" "physmap" "obtain virtual address mapping for" "" physmap(D3D)
.xx "" "polling processes that an event has" "occurred" "pollwakeup inform" pollwakeup(D3DK)
.xx "" "suspend process execution pending" "occurrence of an event" "sleep" sleep(D3K)
.xx "" "/send a control message with a" "one-byte parameter to a queue" "" putctl(D3DK)
.xx "" "mps_AMPcancel cancels an" "ongoing rsvp transaction" "" mps_AMPcancel(D3D)
.xx "" "" "open gain access to a device" "" open(D2DK)
.xx "" "mps_close_chan closes a previously" "opened channel" "" mps_close_chan(D3D)
.xx "" "mps_open_chan" "opens a channel" "" mps_open_chan(D3D)
.xx "request" "dma_prog program a DMA" "operation for a subsequent hardware" "" dma_prog(D3X)
.xx "request" "dma_swsetup program a DMA" "operation for a subsequent software" "" dma_swsetup(D3X)
.xx "it" "/stop software-initiated DMA" "operation on a channel and release" "" dma_stop(D3X)
.xx "" "dma_swstart initiate a DMA" "operation via software request" "" dma_swstart(D3X)
.xx "" "qreply send a message in the" "opposite direction in a stream" "" qreply(D3DK)
.xx "" "stroptions stream head" "option structure" "" stroptions(D4DK)
.xx "partner queue" "" "OTHERQ get pointer to queue's" "" OTHERQ(D3DK)
.xx "port" "" "outb write a byte to an 8 bit I/O" "" outb(D3D)
.xx "32 bit I/O port" "" "outl write a 32 bit long word to a" "" outl(D3D)
.xx "" "/data that corresponds to an" "outstanding buffer request" "" mps_AMPreceive(D3D)
.xx "16 bit I/O port" "" "outw write a 16 bit short word to a" "" outw(D3D)
.xx "" "hat_getkpfnum get physical" "page ID for kernel virtual address" "" hat_getkpfnum(D3DK)
.xx "" "hat_getppfnum get physical" "page ID for physical address" "" hat_getppfnum(D3D)
.xx "" "virtual address space for buffer" "page list" "bp_mapin allocate" bp_mapin(D3DK)
.xx "" "virtual address space for buffer" "page list" "bp_mapout deallocate" bp_mapout(D3DK)
.xx "" "convert size in bytes to size in" "pages (round down)" "btop" btop(D3DK)
.xx "" "convert size in bytes to size in" "pages (round up)" "btopr" btopr(D3DK)
.xx "" "ptob convert size in" "pages to size in bytes" "" ptob(D3DK)
.xx "" "cmn_err display an error message or" "panic the system" "" cmn_err(D3DK)
.xx "" "a control message with a one-byte" "parameter to a queue" "putctl1 send" putctl(D3DK)
.xx "" "to a received request that is" "part of a request-response/" "/replies" mps_AMPsend_reply(D3D)
.xx "" "unsolicited messages that are not" "part of any request-response/" "/sends" mps_AMPsend(D3D)
.xx "" "/sends solicited data that is not" "part of any request-response/" "" mps_AMPsend_data(D3D)
.xx "" "OTHERQ get pointer to queue's" "partner queue" "" OTHERQ(D3DK)
.xx "" "unbufcall cancel a" "pending bufcall request" "" unbufcall(D3DK)
.xx "" "biowait suspend processes" "pending completion of block I/O" "" biowait(D3DK)
.xx "" "sleep suspend process execution" "pending occurrence of an event" "" sleep(D3K)
.xx "" "strategy" "perform block I/O" "" strategy(D2DK)
.xx "" "get physical page ID for" "physical address" "hat_getppfnum" hat_getppfnum(D3D)
.xx "" "vtop convert virtual address to" "physical address" "" vtop(D3D)
.xx "" "obtain virtual address mapping for" "physical addresses" "physmap" physmap(D3D)
.xx "" "free virtual address mapping for" "physical addresses" "physmap_free" physmap_free(D3D)
.xx "address" "hat_getkpfnum get" "physical page ID for kernel virtual" "" hat_getkpfnum(D3DK)
.xx "address" "hat_getppfnum get" "physical page ID for physical" "" hat_getppfnum(D3D)
.xx "request" "" "physiock validate and issue raw I/O" "" physiock(D3DK)
.xx "mapping for physical addresses" "" "physmap obtain virtual address" "" physmap(D3D)
.xx "mapping for physical addresses" "" "physmap_free free virtual address" "" physmap_free(D3D)
.xx "queue" "putbq" "place a message at the head of a" "" putbq(D3DK)
.xx "driver" "chpoll poll entry" "point for a non-STREAMS character" "" chpoll(D2DK)
.xx "" "intro introduction to driver entry" "point routines" "" intro(D2DK)
.xx "" "mps_get_dmabuf returns a" "pointer to a list of data buffer/" "" mps_get_dmabuf(D3D)
.xx "" "OTHERQ get" "pointer to queue's partner queue" "" OTHERQ(D3DK)
.xx "" "RD get a" "pointer to the read queue" "" RD(D3DK)
.xx "" "WR get a" "pointer to the write queue" "" WR(D3DK)
.xx "character driver" "chpoll" "poll entry point for a non-STREAMS" "" chpoll(D2DK)
.xx "occurred" "pollwakeup inform" "polling processes that an event has" "" pollwakeup(D3DK)
.xx "that an event has occurred" "" "pollwakeup inform polling processes" "" pollwakeup(D3DK)
.xx "" "a buffer back into the free memory" "pool" "mps_free_msgbuf puts" mps_free_msgbuf(D3D)
.xx "" "inb read a byte from a 8 bit I/O" "port" "" inb(D3D)
.xx "" "a 32 bit word from a 32 bit I/O" "port" "inl read" inl(D3D)
.xx "" "16 bit short word from a 16 bit I/O" "port" "inw read a" inw(D3D)
.xx "" "outb write a byte to an 8 bit I/O" "port" "" outb(D3D)
.xx "" "a 32 bit long word to a 32 bit I/O" "port" "outl write" outl(D3D)
.xx "" "a 16 bit short word to a 16 bit I/O" "port" "outw write" outw(D3D)
.xx "" "write bytes from buffer to an I/O" "port" "repoutsb" repoutsb(D3D)
.xx "" "32 bit words from buffer to an I/O" "port" "repoutsd write" repoutsd(D3D)
.xx "" "16 bit words from buffer to an I/O" "port" "repoutsw write" repoutsw(D3D)
.xx "" "repinsb read bytes from I/O" "port to buffer" "" repinsb(D3D)
.xx "" "repinsd read 32 bit words from I/O" "port to buffer" "" repinsd(D3D)
.xx "" "repinsw read 16 bit words from I/O" "port to buffer" "" repinsw(D3D)
.xx "" "put receive messages from the" "preceding queue" "" put(D2DK)
.xx "" "" "prefix driver prefix" "" prefix(D1DK)
.xx "" "prefix driver" "prefix" "" prefix(D1DK)
.xx "scheduled" "noenable" "prevent a queue from being" "" noenable(D3DK)
.xx "" "untimeout cancel" "previous timeout(D3DK) request" "" untimeout(D3DK)
.xx "descriptor" "dma_free_buf free a" "previously allocated DMA buffer" "" dma_free_buf(D3X)
.xx "block" "dma_free_cb free a" "previously allocated DMA command" "" dma_free_cb(D3X)
.xx "" "kmem_free free" "previously allocated kernel memory" "" kmem_free(D3DK)
.xx "" "mps_free_tid frees a" "previously allocated transaction id" "" mps_free_tid(D3D)
.xx "" "mps_close_chan closes a" "previously opened channel" "" mps_close_chan(D3D)
.xx "the system console" "" "print display a driver message on" "" print(D2DK)
.xx "" "test for flow control in specified" "priority band" "bcanput" bcanput(D3DK)
.xx "" "flush messages in a specified" "priority band" "flushband" flushband(D3DK)
.xx "" "rmalloc allocate space from a" "private space management map" "" rmalloc(D3DK)
.xx "" "rmfree free space into a" "private space management map" "" rmfree(D3DK)
.xx "" "rminit initialize a" "private space management map" "" rminit(D3K)
.xx "" "determine whether credentials are" "privileged" "drv_priv" drv_priv(D3DK)
.xx "" "intr" "process a device interrupt" "" intr(D2D)
.xx "number of clock ticks" "delay delay" "process execution for a specified" "" delay(D3DK)
.xx "occurrence of an/" "sleep suspend" "process execution pending" "" sleep(D3K)
.xx "" "wakeup resume suspended" "process execution" "" wakeup(D3K)
.xx "" "psignal send signal to a" "process" "" psignal(D3K)
.xx "" "buffer after block I/O and wakeup" "processes" "biodone release" biodone(D3DK)
.xx "block I/O" "biowait suspend" "processes pending completion of" "" biowait(D3DK)
.xx "occurred" "pollwakeup inform polling" "processes that an event has" "" pollwakeup(D3DK)
.xx "subsequent hardware/" "dma_prog" "program a DMA operation for a" "" dma_prog(D3X)
.xx "subsequent software/" "dma_swsetup" "program a DMA operation for a" "" dma_swsetup(D3X)
.xx "" "" "psignal send signal to a process" "" psignal(D3K)
.xx "in bytes" "" "ptob convert size in pages to size" "" ptob(D3DK)
.xx "message" "" "pullupmsg concatenate bytes in a" "" pullupmsg(D3DK)
.xx "" "putq" "put a message on a queue" "" putq(D3DK)
.xx "preceding queue" "" "put receive messages from the" "" put(D2DK)
.xx "of a queue" "" "putbq place a message at the head" "" putbq(D3DK)
.xx "queue" "" "putctl send a control message to a" "" putctl(D3DK)
.xx "a one-byte parameter to a queue" "" "putctl1 send a control message with" "" putctl(D3DK)
.xx "queue" "" "putnext send a message to the next" "" putnext(D3DK)
.xx "" "" "putq put a message on a queue" "" putq(D3DK)
.xx "memory pool" "mps_free_msgbuf" "puts a buffer back into the free" "" mps_free_msgbuf(D3D)
.xx "routine to be run" "" "qenable schedule a queue's service" "" qenable(D3DK)
.xx "structure" "" "qinit STREAMS queue initialization" "" qinit(D4DK)
.xx "opposite direction in a stream" "" "qreply send a message in the" "" qreply(D3DK)
.xx "on a queue" "" "qsize find the number of messages" "" qsize(D3DK)
.xx "" "flushq flush messages on a" "queue" "" flushq(D3DK)
.xx "" "noenable prevent a" "queue from being scheduled" "" noenable(D3DK)
.xx "" "getq get the next message from a" "queue" "" getq(D3DK)
.xx "" "qinit STREAMS" "queue initialization structure" "" qinit(D4DK)
.xx "" "insq insert a message into a" "queue" "" insq(D3DK)
.xx "" "SAMESTR test if next" "queue is same type" "" SAMESTR(D3DK)
.xx "" "strqget get information about a" "queue or band of the queue" "" strqget(D3DK)
.xx "" "strqset change information about a" "queue or band of the queue" "" strqset(D3DK)
.xx "" "get pointer to queue's partner" "queue" "OTHERQ" OTHERQ(D3DK)
.xx "" "place a message at the head of a" "queue" "putbq" putbq(D3DK)
.xx "" "putctl send a control message to a" "queue" "" putctl(D3DK)
.xx "" "with a one-byte parameter to a" "queue" "/send a control message" putctl(D3DK)
.xx "" "receive messages from the preceding" "queue" "put" put(D2DK)
.xx "" "putnext send a message to the next" "queue" "" putnext(D3DK)
.xx "" "putq put a message on a" "queue" "" putq(D3DK)
.xx "" "find the number of messages on a" "queue" "qsize" qsize(D3DK)
.xx "" "RD get a pointer to the read" "queue" "" RD(D3DK)
.xx "" "rmvq remove a message from a" "queue" "" rmvq(D3DK)
.xx "" "" "queue STREAMS queue structure" "" queue(D4DK)
.xx "" "about a queue or band of the" "queue" "strqget get information" strqget(D3DK)
.xx "" "about a queue or band of the" "queue" "strqset change information" strqset(D3DK)
.xx "" "queue STREAMS" "queue structure" "" queue(D4DK)
.xx "" "enableok allow a" "queue to be serviced" "" enableok(D3DK)
.xx "" "WR get a pointer to the write" "queue" "" WR(D3DK)
.xx "" "srv service" "queued messages" "" srv(D2DK)
.xx "" "OTHERQ get pointer to" "queue's partner queue" "" OTHERQ(D3DK)
.xx "transmission and/" "mps_AMPsend_rsvp" "queues request messages for" "" mps_AMPsend_rsvp(D3D)
.xx "" "qenable schedule a" "queue's service routine to be run" "" qenable(D3DK)
.xx "" "freerbuf free a" "raw buffer header" "" freerbuf(D3DK)
.xx "" "getrbuf get a" "raw buffer header" "" getrbuf(D3DK)
.xx "" "physiock validate and issue" "raw I/O request" "" physiock(D3DK)
.xx "" "" "RD get a pointer to the read queue" "" RD(D3DK)
.xx "buffer" "repinsw" "read 16 bit words from I/O port to" "" repinsw(D3D)
.xx "buffer" "repinsd" "read 32 bit words from I/O port to" "" repinsd(D3D)
.xx "bit I/O port" "inw" "read a 16 bit short word from a 16" "" inw(D3D)
.xx "I/O port" "inl" "read a 32 bit word from a 32 bit" "" inl(D3D)
.xx "" "inb" "read a byte from a 8 bit I/O port" "" inb(D3D)
.xx "" "repinsb" "read bytes from I/O port to buffer" "" repinsb(D3D)
.xx "" "read" "read data from a device" "" read(D2DK)
.xx "" "RD get a pointer to the" "read queue" "" RD(D3DK)
.xx "" "" "read read data from a device" "" read(D2DK)
.xx "of interconnect space/" "ics_rdwr" "reads or writes a specified number" "" ics_rdwr(D3D)
.xx "the board in the/" "ics_find _rec" "reads the interconnect register of" "" ics_find(D3D)
.xx "the board in the/" "ics_read" "reads the interconnect register of" "" ics_read(D3D)
.xx "register of the board in/" "ics_find" "_rec reads the interconnect" "" ics_find(D3D)
.xx "queue" "put" "receive messages from the preceding" "" put(D2DK)
.xx "" "mps_AMPsend_reply replies to a" "received request that is part of a/" "" mps_AMPsend_reply(D3D)
.xx "fragments when/" "mps_AMPreceive_frag" "receives solicited data in" "" mps_AMPreceive_frag(D3D)
.xx "corresponds to an/" "mps_AMPreceive" "receives solicited data that" "" mps_AMPreceive(D3D)
.xx "" "space is not available at the" "receiving agent" "/when buffer" mps_AMPreceive_frag(D3D)
.xx "" "/and sets up table entries for" "reception of reply messages" "" mps_AMPsend_rsvp(D3D)
.xx "a DMA channel" "dma_disable disable" "recognition of hardware requests on" "" dma_disable(D3X)
.xx "a DMA channel" "dma_enable enable" "recognition of hardware requests on" "" dma_enable(D3X)
.xx "" "/the host id field of the HOST ID" "record in this board's interconnect/" "" ics_hostid(D3D)
.xx "" "/_rec reads the interconnect" "register of the board in the/" "" ics_find(D3D)
.xx "" "ics_read reads the interconnect" "register of the board in the/" "" ics_read(D3D)
.xx "" "/writes a value into the specified" "register of the board in the/" "" ics_write(D3D)
.xx "" "/number of interconnect space" "registers from a given cardslot ID" "" ics_rdwr(D3D)
.xx "" "mps_mk_breject construct a buffer" "reject in response to a buffer/" "" mps_mk_breject(D3D)
.xx "wakeup processes" "biodone" "release buffer after block I/O and" "" biodone(D3DK)
.xx "" "DMA operation on a channel and" "release it" "/stop software-initiated" dma_stop(D3X)
.xx "" "close" "relinquish access to a device" "" close(D2DK)
.xx "message" "rmvb" "remove a message block from a" "" rmvb(D3DK)
.xx "head of a message" "unlinkb" "remove a message block from the" "" unlinkb(D3DK)
.xx "" "rmvq" "remove a message from a queue" "" rmvq(D3DK)
.xx "buffer" "" "repinsb read bytes from I/O port to" "" repinsb(D3D)
.xx "port to buffer" "" "repinsd read 32 bit words from I/O" "" repinsd(D3D)
.xx "port to buffer" "" "repinsw read 16 bit words from I/O" "" repinsw(D3D)
.xx "is part of a/" "mps_AMPsend_reply" "replies to a received request that" "" mps_AMPsend_reply(D3D)
.xx "" "/constructs a unsolicited" "reply message to be sent." "" mps_mk_unsolrply(D3D)
.xx "" "up table entries for reception of" "reply messages" "/and sets" mps_AMPsend_rsvp(D3D)
.xx "" "get data length for a solicited" "reply." "mps_get_reply_len" mps_get_reply_len(D3D)
.xx "" "sent to initiate a solicited data" "reply" "/constructs a message to be" mps_mk_solrply(D3D)
.xx "an I/O port" "" "repoutsb write bytes from buffer to" "" repoutsb(D3D)
.xx "buffer to an I/O port" "" "repoutsd write 32 bit words from" "" repoutsd(D3D)
.xx "buffer to an I/O port" "" "repoutsw write 16 bit words from" "" repoutsw(D3D)
.xx "" "operation for a subsequent hardware" "request" "dma_prog program a DMA" dma_prog(D3X)
.xx "" "operation for a subsequent software" "request" "dma_swsetup program a DMA" dma_swsetup(D3X)
.xx "" "a DMA operation via software" "request" "dma_swstart initiate" dma_swstart(D3X)
.xx "" "dma_pageio break up an I/O" "request into manageable units" "" dma_pageio(D3D)
.xx "and sets/" "mps_AMPsend_rsvp queues" "request messages for transmission" "" mps_AMPsend_rsvp(D3D)
.xx "" "to an outstanding buffer" "request" "/data that corresponds" mps_AMPreceive(D3D)
.xx "" "grant in response to a buffer" "request." "/construct a buffer" mps_mk_bgrant(D3D)
.xx "" "reject in response to a buffer" "request." "/construct a buffer" mps_mk_breject(D3D)
.xx "" "physiock validate and issue raw I/O" "request" "" physiock(D3DK)
.xx "" "STREAMS transparent ioctl copy" "request structure" "copyreq" copyreq(D4DK)
.xx "" "uio scatter/gather I/O" "request structure" "" uio(D4DK)
.xx "" "/replies to a received" "request that is part of a/" "" mps_AMPsend_reply(D3D)
.xx "" "unbufcall cancel a pending bufcall" "request" "" unbufcall(D3DK)
.xx "" "cancel previous timeout(D3DK)" "request" "untimeout" untimeout(D3DK)
.xx "" "/messages that are not part of any" "request-response transaction" "" mps_AMPsend(D3D)
.xx "" "/data that is not part of any" "request-response transaction" "" mps_AMPsend_data(D3D)
.xx "" "received request that is part of a" "request-response transaction" "/to a" mps_AMPsend_reply(D3D)
.xx "" "/disable recognition of hardware" "requests on a DMA channel" "" dma_disable(D3X)
.xx "" "/enable recognition of hardware" "requests on a DMA channel" "" dma_enable(D3X)
.xx "" "STREAMS transparent ioctl copy" "response structure" "copyresp" copyresp(D4DK)
.xx "" "/construct a buffer grant in" "response to a buffer request." "" mps_mk_bgrant(D3D)
.xx "" "/construct a buffer reject in" "response to a buffer request." "" mps_mk_breject(D3D)
.xx "" "wakeup" "resume suspended process execution" "" wakeup(D3K)
.xx "header" "geterror" "retrieve error number from a buffer" "" geterror(D3DK)
.xx "" "drv_getparm" "retrieve kernel state information" "" drv_getparm(D3DK)
.xx "free list" "brelse" "return a buffer to the system's" "" brelse(D3DK)
.xx "described by uio(D4DK)/" "uwritec" "return a character from space" "" uwritec(D3DK)
.xx "message" "msgdsize" "return number of bytes of data in a" "" msgdsize(D3DK)
.xx "" "size" "return size of logical block device" "" size(D2DK)
.xx "" "max" "return the larger of two integers" "" max(D3DK)
.xx "" "min" "return the lesser of two integers" "" min(D3DK)
.xx "buffer descriptors" "mps_get_dmabuf" "returns a pointer to a list of data" "" mps_get_dmabuf(D3D)
.xx "HOST ID record in this/" "ics_hostid" "returns the host id field of the" "" ics_hostid(D3D)
.xx "private space management map" "" "rmalloc allocate space from a" "" rmalloc(D3DK)
.xx "space management map" "" "rmfree free space into a private" "" rmfree(D3DK)
.xx "management map" "" "rminit initialize a private space" "" rminit(D3K)
.xx "for a wakeup" "" "rmsetwant set the map's wait flag" "" rmsetwant(D3K)
.xx "message" "" "rmvb remove a message block from a" "" rmvb(D3DK)
.xx "" "" "rmvq remove a message from a queue" "" rmvq(D3DK)
.xx "" "size in bytes to size in pages" "(round down)" "btop convert" btop(D3DK)
.xx "" "size in bytes to size in pages" "(round up)" "btopr convert" btopr(D3DK)
.xx "" "STREAMS driver's message free" "routine structure" "free_rtn" free_rtn(D4DK)
.xx "" "qenable schedule a queue's service" "routine to be run" "" qenable(D3DK)
.xx "" "introduction to driver entry point" "routines" "intro" intro(D2DK)
.xx "" "introduction to kernel utility" "routines" "intro" intro(D3DK)
.xx "" "intro introduction to DMA utility" "routines" "" intro(D3X)
.xx "" "mps_AMPcancel cancels an ongoing" "rsvp transaction" "" mps_AMPcancel(D3D)
.xx "" "a queue's service routine to be" "run" "qenable schedule" qenable(D3DK)
.xx "type" "" "SAMESTR test if next queue is same" "" SAMESTR(D3DK)
.xx "structure" "uio" "scatter/gather I/O request" "" uio(D4DK)
.xx "to be run" "qenable" "schedule a queue's service routine" "" qenable(D3DK)
.xx "" "noenable prevent a queue from being" "scheduled" "" noenable(D3DK)
.xx "" "putctl" "send a control message to a queue" "" putctl(D3DK)
.xx "one-byte parameter to a/" "putctl1" "send a control message with a" "" putctl(D3DK)
.xx "direction in a stream" "qreply" "send a message in the opposite" "" qreply(D3DK)
.xx "" "putnext" "send a message to the next queue" "" putnext(D3DK)
.xx "" "psignal" "send signal to a process" "" psignal(D3K)
.xx "part of any/" "mps_AMPsend_data" "sends solicited data that is not" "" mps_AMPsend_data(D3D)
.xx "not part of any/" "mps_AMPsend" "sends unsolicited messages that are" "" mps_AMPsend(D3D)
.xx "" "a broadcast message to be" "sent" "mps_mk_brdcst constructs" mps_mk_brdcst(D3D)
.xx "" "an unsolicited message to be" "sent" "mps_mk_unsol constructs" mps_mk_unsol(D3D)
.xx "" "a unsolicited reply message to be" "sent." "mps_mk_unsolrply constructs" mps_mk_unsolrply(D3D)
.xx "reply" "/constructs a message to be" "sent to initiate a solicited data" "" mps_mk_solrply(D3D)
.xx "" "/constructs a message to be" "sent to initiate a solicited data/" "" mps_mk_sol(D3D)
.xx "" "srv" "service queued messages" "" srv(D2DK)
.xx "" "qenable schedule a queue's" "service routine to be run" "" qenable(D3DK)
.xx "" "enableok allow a queue to be" "serviced" "" enableok(D3DK)
.xx "" "drv_setparm" "set kernel state information" "" drv_setparm(D3DK)
.xx "wakeup" "rmsetwant" "set the map's wait flag for a" "" rmsetwant(D3K)
.xx "of/" "/messages for transmission and" "sets up table entries for reception" "" mps_AMPsend_rsvp(D3D)
.xx "" "inw read a 16 bit" "short word from a 16 bit I/O port" "" inw(D3D)
.xx "" "outw write a 16 bit" "short word to a 16 bit I/O port" "" outw(D3D)
.xx "system shuts down" "halt" "shut down the driver when the" "" halt(D2D)
.xx "" "down the driver when the system" "shuts down" "halt shut" halt(D2D)
.xx "" "signals" "signal numbers" "" signals(D5DK)
.xx "" "psignal send" "signal to a process" "" psignal(D3K)
.xx "" "" "signals signal numbers" "" signals(D5DK)
.xx "" "ptob convert size in pages to" "size in bytes" "" ptob(D3DK)
.xx "(round down)" "btop convert" "size in bytes to size in pages" "" btop(D3DK)
.xx "(round up)" "btopr convert" "size in bytes to size in pages" "" btopr(D3DK)
.xx "" "btop convert size in bytes to" "size in pages (round down)" "" btop(D3DK)
.xx "" "btopr convert size in bytes to" "size in pages (round up)" "" btopr(D3DK)
.xx "" "ptob convert" "size in pages to size in bytes" "" ptob(D3DK)
.xx "" "an empty buffer of the specified" "size" "ngeteblk get" ngeteblk(D3DK)
.xx "" "size return" "size of logical block device" "" size(D2DK)
.xx "device" "" "size return size of logical block" "" size(D2DK)
.xx "pending occurrence of an event" "" "sleep suspend process execution" "" sleep(D3K)
.xx "" "board types in the designated" "slot" "/checks for certain" ics_agent_cmp(D3D)
.xx "" "of the board in the specified" "slot" "/the interconnect register" ics_find(D3D)
.xx "" "of the board in the specified" "slot" "/the interconnect register" ics_read(D3D)
.xx "" "of the board in the specified" "slot" "/into the specified register" ics_write(D3D)
.xx "" "a DMA operation for a subsequent" "software request" "/program" dma_swsetup(D3X)
.xx "" "initiate a DMA operation via" "software request" "dma_swstart" dma_swstart(D3X)
.xx "a channel and/" "dma_stop stop" "software-initiated DMA operation on" "" dma_stop(D3X)
.xx "" "mps_AMPreceive_frag receives" "solicited data in fragments when/" "" mps_AMPreceive_frag(D3D)
.xx "" "a message to be sent to initiate a" "solicited data reply" "/constructs" mps_mk_solrply(D3D)
.xx "an/" "mps_AMPreceive receives" "solicited data that corresponds to" "" mps_AMPreceive(D3D)
.xx "any/" "mps_AMPsend_data sends" "solicited data that is not part of" "" mps_AMPsend_data(D3D)
.xx "" "a message to be sent to initiate a" "solicited data transfer" "/constructs" mps_mk_sol(D3D)
.xx "" "get data length for a" "solicited reply." "mps_get_reply_len" mps_get_reply_len(D3D)
.xx "" "ureadc copy a character to" "space described by uio(D4DK)/" "" ureadc(D3DK)
.xx "" "uwritec return a character from" "space described by uio(D4DK)/" "" uwritec(D3DK)
.xx "" "bp_mapin allocate virtual address" "space for buffer page list" "" bp_mapin(D3DK)
.xx "" "/deallocate virtual address" "space for buffer page list" "" bp_mapout(D3DK)
.xx "management map" "rmalloc allocate" "space from a private space" "" rmalloc(D3DK)
.xx "" "kmem_alloc allocate" "space from kernel free memory" "" kmem_alloc(D3DK)
.xx "" "kmem_zalloc allocate and clear" "space from kernel free memory" "" kmem_zalloc(D3DK)
.xx "" "record in this board's interconnect" "space" "/host id field of the HOST ID" ics_hostid(D3D)
.xx "management map" "rmfree free" "space into a private space" "" rmfree(D3DK)
.xx "" "/data in fragments when buffer" "space is not available at the/" "" mps_AMPreceive_frag(D3D)
.xx "" "allocate space from a private" "space management map" "rmalloc" rmalloc(D3DK)
.xx "" "rmfree free space into a private" "space management map" "" rmfree(D3DK)
.xx "" "rminit initialize a private" "space management map" "" rminit(D3K)
.xx "" "/a specified number of interconnect" "space registers from a given/" "" ics_rdwr(D3D)
.xx "" "drv_usecwait busy-wait for" "specified interval" "" drv_usecwait(D3DK)
.xx "" "timeout execute a function after a" "specified length of time" "" timeout(D3DK)
.xx "" "delay delay process execution for a" "specified number of clock ticks" "" delay(D3DK)
.xx "space/" "ics_rdwr reads or writes a" "specified number of interconnect" "" ics_rdwr(D3D)
.xx "" "bcanput test for flow control in" "specified priority band" "" bcanput(D3DK)
.xx "" "flushband flush messages in a" "specified priority band" "" flushband(D3DK)
.xx "" "ics_write writes a value into the" "specified register of the board in/" "" ics_write(D3D)
.xx "" "ngeteblk get an empty buffer of the" "specified size" "" ngeteblk(D3DK)
.xx "" "register of the board in the" "specified slot" "/the interconnect" ics_find(D3D)
.xx "" "register of the board in the" "specified slot" "/the interconnect" ics_read(D3D)
.xx "" "register of the board in the" "specified slot" "/into the specified" ics_write(D3D)
.xx "" "" "spl block/allow interrupts" "" spl(D3D)
.xx "" "" "srv service queued messages" "" srv(D2DK)
.xx "start-up" "" "start initialize a device at system" "" start(D2DK)
.xx "" "start initialize a device at system" "start-up" "" start(D2DK)
.xx "operation on a channel/" "dma_stop" "stop software-initiated DMA" "" dma_stop(D3X)
.xx "uio(D4DK)" "iovec data" "storage structure for I/O using" "" iovec(D4DK)
.xx "" "" "strategy perform block I/O" "" strategy(D2DK)
.xx "" "canput test for flow control in a" "stream" "" canput(D3DK)
.xx "" "stroptions" "stream head option structure" "" stroptions(D4DK)
.xx "" "in the opposite direction in a" "stream" "qreply send a message" qreply(D3DK)
.xx "" "datab" "STREAMS data block structure" "" datab(D4DK)
.xx "declaration structure" "streamtab" "STREAMS driver and module" "" streamtab(D4DK)
.xx "information" "info" "STREAMS driver and module" "" info(D1D)
.xx "information structure" "module_info" "STREAMS driver and module" "" module_info(D4DK)
.xx "routine structure" "free_rtn" "STREAMS driver's message free" "" free_rtn(D4DK)
.xx "" "iocblk" "STREAMS ioctl structure" "" iocblk(D4DK)
.xx "" "msgb" "STREAMS message block structure" "" msgb(D4DK)
.xx "" "messages" "STREAMS messages" "" messages(D5DK)
.xx "" "linkblk" "STREAMS multiplexor link structure" "" linkblk(D4DK)
.xx "structure" "qinit" "STREAMS queue initialization" "" qinit(D4DK)
.xx "" "queue" "STREAMS queue structure" "" queue(D4DK)
.xx "request structure" "copyreq" "STREAMS transparent ioctl copy" "" copyreq(D4DK)
.xx "response structure" "copyresp" "STREAMS transparent ioctl copy" "" copyresp(D4DK)
.xx "declaration structure" "" "streamtab STREAMS driver and module" "" streamtab(D4DK)
.xx "driver" "" "strlog submit messages to the log" "" strlog(D3DK)
.xx "structure" "" "stroptions stream head option" "" stroptions(D4DK)
.xx "queue or band of the queue" "" "strqget get information about a" "" strqget(D3DK)
.xx "queue or band of the queue" "" "strqset change information about a" "" strqset(D3DK)
.xx "" "buf block I/O data transfer" "structure" "" buf(D4DK)
.xx "" "transparent ioctl copy request" "structure" "copyreq STREAMS" copyreq(D4DK)
.xx "" "transparent ioctl copy response" "structure" "copyresp STREAMS" copyresp(D4DK)
.xx "" "datab STREAMS data block" "structure" "" datab(D4DK)
.xx "" "dma_buf DMA buffer descriptor" "structure" "" dma_buf(D4X)
.xx "" "dma_cb DMA command block" "structure" "" dma_cb(D4X)
.xx "" "iovec data storage" "structure for I/O using uio(D4DK)" "" iovec(D4DK)
.xx "" "driver's message free routine" "structure" "free_rtn STREAMS" free_rtn(D4DK)
.xx "" "iocblk STREAMS ioctl" "structure" "" iocblk(D4DK)
.xx "" "linkblk STREAMS multiplexor link" "structure" "" linkblk(D4DK)
.xx "" "driver and module information" "structure" "module_info STREAMS" module_info(D4DK)
.xx "" "msgb STREAMS message block" "structure" "" msgb(D4DK)
.xx "" "qinit STREAMS queue initialization" "structure" "" qinit(D4DK)
.xx "" "queue STREAMS queue" "structure" "" queue(D4DK)
.xx "" "driver and module declaration" "structure" "streamtab STREAMS" streamtab(D4DK)
.xx "" "stroptions stream head option" "structure" "" stroptions(D4DK)
.xx "" "uio scatter/gather I/O request" "structure" "" uio(D4DK)
.xx "" "uiomove copy data using uio(D4DK)" "structure" "" uiomove(D3DK)
.xx "" "to space described by uio(D4DK)" "structure" "ureadc copy a character" ureadc(D3DK)
.xx "" "from space described by uio(D4DK)" "structure" "/return a character" uwritec(D3DK)
.xx "" "intro introduction to kernel data" "structures" "" intro(D4DK)
.xx "" "intro introduction to DMA data" "structures" "" intro(D4X)
.xx "" "strlog" "submit messages to the log driver" "" strlog(D3DK)
.xx "" "/program a DMA operation for a" "subsequent hardware request" "" dma_prog(D3X)
.xx "" "/program a DMA operation for a" "subsequent software request" "" dma_swsetup(D3X)
.xx "occurrence of an event" "sleep" "suspend process execution pending" "" sleep(D3K)
.xx "completion of block I/O" "biowait" "suspend processes pending" "" biowait(D3DK)
.xx "" "wakeup resume" "suspended process execution" "" wakeup(D3K)
.xx "" "an error message or panic the" "system" "cmn_err display" cmn_err(D3DK)
.xx "" "display a driver message on the" "system console" "print" print(D2DK)
.xx "" "halt shut down the driver when the" "system shuts down" "" halt(D2D)
.xx "" "start initialize a device at" "system start-up" "" start(D2DK)
.xx "" "brelse return a buffer to the" "system's free list" "" brelse(D3DK)
.xx "reply/" "/for transmission and sets up" "table entries for reception of" "" mps_AMPsend_rsvp(D3D)
.xx "" "canput" "test for flow control in a stream" "" canput(D3DK)
.xx "priority band" "bcanput" "test for flow control in specified" "" bcanput(D3DK)
.xx "" "SAMESTR" "test if next queue is same type" "" SAMESTR(D3DK)
.xx "message" "datamsg" "test whether a message is a data" "" datamsg(D3DK)
.xx "" "for a specified number of clock" "ticks" "/delay process execution" delay(D3DK)
.xx "" "convert microseconds to clock" "ticks" "drv_usectohz" drv_usectohz(D3DK)
.xx "" "drv_hztousec convert clock" "ticks to microseconds" "" drv_hztousec(D3DK)
.xx "specified length of time" "" "timeout execute a function after a" "" timeout(D3DK)
.xx "" "untimeout cancel previous" "timeout(D3DK) request" "" untimeout(D3DK)
.xx "" "frees a previously allocated" "transaction id" "mps_free_tid" mps_free_tid(D3D)
.xx "" "mps_get_tid allocates" "transaction ids" "" mps_get_tid(D3D)
.xx "" "cancels an ongoing rsvp" "transaction" "mps_AMPcancel" mps_AMPcancel(D3D)
.xx "" "not part of any request-response" "transaction" "/messages that are" mps_AMPsend(D3D)
.xx "" "is not part of any request-response" "transaction" "/solicited data that" mps_AMPsend_data(D3D)
.xx "" "that is part of a request-response" "transaction" "/to a received request" mps_AMPsend_reply(D3D)
.xx "" "dma_get_best_mode determine best" "transfer mode for DMA command" "" dma_get_best_mode(D3X)
.xx "" "sent to initiate a solicited data" "transfer" "/a message to be" mps_mk_sol(D3D)
.xx "" "buf block I/O data" "transfer structure" "" buf(D4DK)
.xx "" "/queues request messages for" "transmission and sets up table/" "" mps_AMPsend_rsvp(D3D)
.xx "structure" "copyreq STREAMS" "transparent ioctl copy request" "" copyreq(D4DK)
.xx "structure" "copyresp STREAMS" "transparent ioctl copy response" "" copyresp(D4DK)
.xx "" "adjmsg" "trim bytes from a message" "" adjmsg(D3DK)
.xx "" "SAMESTR test if next queue is same" "type" "" SAMESTR(D3DK)
.xx "" "/checks for certain board" "types in the designated slot" "" ics_agent_cmp(D3D)
.xx "structure" "" "uio scatter/gather I/O request" "" uio(D4DK)
.xx "" "storage structure for I/O using" "uio(D4DK)" "iovec data" iovec(D4DK)
.xx "" "uiomove copy data using" "uio(D4DK) structure" "" uiomove(D3DK)
.xx "" "a character to space described by" "uio(D4DK) structure" "ureadc copy" ureadc(D3DK)
.xx "" "a character from space described by" "uio(D4DK) structure" "uwritec return" uwritec(D3DK)
.xx "structure" "" "uiomove copy data using uio(D4DK)" "" uiomove(D3DK)
.xx "request" "" "unbufcall cancel a pending bufcall" "" unbufcall(D3DK)
.xx "" "up an I/O request into manageable" "units" "dma_pageio break" dma_pageio(D3D)
.xx "the head of a message" "" "unlinkb remove a message block from" "" unlinkb(D3DK)
.xx "" "mps_mk_unsol constructs an" "unsolicited message to be sent" "" mps_mk_unsol(D3D)
.xx "part of any/" "mps_AMPsend sends" "unsolicited messages that are not" "" mps_AMPsend(D3D)
.xx "" "mps_mk_unsolrply constructs a" "unsolicited reply message to be/" "" mps_mk_unsolrply(D3D)
.xx "timeout(D3DK) request" "" "untimeout cancel previous" "" untimeout(D3DK)
.xx "" "in bytes to size in pages (round" "up)" "btopr convert size" btopr(D3DK)
.xx "described by uio(D4DK) structure" "" "ureadc copy a character to space" "" ureadc(D3DK)
.xx "" "copy data from a driver buffer to a" "user buffer" "copyout" copyout(D3DK)
.xx "" "copyin copy data from a" "user buffer to a driver buffer" "" copyin(D3DK)
.xx "" "mps_get_soldata copies" "user data from the message buffer." "" mps_get_soldata(D3D)
.xx "" "mps_get_unsoldata copies" "user data from the message buffer." "" mps_get_unsoldata(D3D)
.xx "" "esballoc allocate a message block" "using an externally-supplied buffer" "" esballoc(D3DK)
.xx "" "data storage structure for I/O" "using uio(D4DK)" "iovec" iovec(D4DK)
.xx "" "uiomove copy data" "using uio(D4DK) structure" "" uiomove(D3DK)
.xx "" "intro introduction to kernel" "utility routines" "" intro(D3DK)
.xx "" "intro introduction to DMA" "utility routines" "" intro(D3X)
.xx "space described by uio(D4DK)/" "" "uwritec return a character from" "" uwritec(D3DK)
.xx "" "physiock" "validate and issue raw I/O request" "" physiock(D3DK)
.xx "of the board in/" "ics_write writes a" "value into the specified register" "" ics_write(D3D)
.xx "" "ASSERT" "verify assertion" "" ASSERT(D3DK)
.xx "" "initiate a DMA operation" "via software request" "dma_swstart" dma_swstart(D3X)
.xx "" "get physical page ID for kernel" "virtual address" "hat_getkpfnum" hat_getkpfnum(D3DK)
.xx "physical addresses" "physmap obtain" "virtual address mapping for" "" physmap(D3D)
.xx "physical/" "physmap_free free" "virtual address mapping for" "" physmap_free(D3D)
.xx "page list" "bp_mapin allocate" "virtual address space for buffer" "" bp_mapin(D3DK)
.xx "page list" "bp_mapout deallocate" "virtual address space for buffer" "" bp_mapout(D3DK)
.xx "" "vtop convert" "virtual address to physical address" "" vtop(D3D)
.xx "device" "mmap check" "virtual mapping for memory-mapped" "" mmap(D2DK)
.xx "physical address" "" "vtop convert virtual address to" "" vtop(D3D)
.xx "" "rmsetwant set the map's" "wait flag for a wakeup" "" rmsetwant(D3K)
.xx "" "release buffer after block I/O and" "wakeup processes" "biodone" biodone(D3DK)
.xx "execution" "" "wakeup resume suspended process" "" wakeup(D3K)
.xx "" "set the map's wait flag for a" "wakeup" "rmsetwant" rmsetwant(D3K)
.xx "" "datamsg test" "whether a message is a data message" "" datamsg(D3DK)
.xx "" "drv_priv determine" "whether credentials are privileged" "" drv_priv(D3DK)
.xx "" "inw read a 16 bit short" "word from a 16 bit I/O port" "" inw(D3D)
.xx "" "inl read a 32 bit" "word from a 32 bit I/O port" "" inl(D3D)
.xx "" "outw write a 16 bit short" "word to a 16 bit I/O port" "" outw(D3D)
.xx "" "outl write a 32 bit long" "word to a 32 bit I/O port" "" outl(D3D)
.xx "" "repoutsd write 32 bit" "words from buffer to an I/O port" "" repoutsd(D3D)
.xx "" "repoutsw write 16 bit" "words from buffer to an I/O port" "" repoutsw(D3D)
.xx "" "repinsd read 32 bit" "words from I/O port to buffer" "" repinsd(D3D)
.xx "" "repinsw read 16 bit" "words from I/O port to buffer" "" repinsw(D3D)
.xx "" "" "WR get a pointer to the write queue" "" WR(D3DK)
.xx "an I/O port" "repoutsw" "write 16 bit words from buffer to" "" repoutsw(D3D)
.xx "an I/O port" "repoutsd" "write 32 bit words from buffer to" "" repoutsd(D3D)
.xx "bit I/O port" "outw" "write a 16 bit short word to a 16" "" outw(D3D)
.xx "bit I/O port" "outl" "write a 32 bit long word to a 32" "" outl(D3D)
.xx "" "outb" "write a byte to an 8 bit I/O port" "" outb(D3D)
.xx "port" "repoutsb" "write bytes from buffer to an I/O" "" repoutsb(D3D)
.xx "" "write" "write data to a device" "" write(D2DK)
.xx "" "WR get a pointer to the" "write queue" "" WR(D3DK)
.xx "" "" "write write data to a device" "" write(D2DK)
.xx "interconnect/" "ics_rdwr reads or" "writes a specified number of" "" ics_rdwr(D3D)
.xx "register of the board in/" "ics_write" "writes a value into the specified" "" ics_write(D3D)
