'\"macro stdmacro
.if n .pH g1a.ypserv @(#)ypserv	40.7 of 5/16/91
.\" Copyright 1991 UNIX System Laboratories, Inc.
.\" Copyright 1989, 1990 AT&T
.\" @(#)ypserv.8 1.9 89/09/28 SMI;
.\" Copyright (c) 1988 Sun Microsystems, Inc. - All Rights Reserved.
.nr X
.if \nX=0 .ds x} ypserv 1M "" "\&"
.if \nX=1 .ds x} ypserv 1M ""
.if \nX=2 .ds x} ypserv 1M "" "\&"
.if \nX=3 .ds x} ypserv "" "" "\&"
.TH \*(x}
.SH NAME
\f4ypserv\fP, \f4ypbind\fP \- NIS server and binder processes
.SH SYNOPSIS
\f4/usr/lib/netsvc/yp/ypserv\f1
.P
\f4/usr/lib/netsvc/yp/ypbind\f1
[
\f4\-ypset \f1\||\|\f4\-ypsetme\f1
]
.SH DESCRIPTION
.P
The \s-1NIS\s0 provides a simple network lookup service
consisting of databases and processes.
The databases are
\f4dbm\f1(3)
files in a directory tree rooted at
\f4/var/yp\f1.
These files are described in
\f4ypfiles\f1(4).
The processes are
\f4/usr/lib/netsvc/yp/ypserv\fP,
the NIS database lookup server, and
\f4/usr/lib/netsvc/yp/ypbind\fP,
the
\s-1NIS\s0
binder.
The programmatic interface to
\s-1NIS\s0
is described in
\f4ypclnt\f1(3N).
Administrative tools are described in
\f4yppush\f1(1M),
\f4ypxfr\f1(1M),
\f4yppoll\f1(1M),
\f4ypwhich\f1(1),
and
\f4ypset\f1(1M).
Tools to see the contents of
\s-1NIS\s0
maps are described in
\f4ypcat\f1(1),
and
\f4ypmatch\f1(1).
Database generation and maintenance tools are described in
\f4ypinit\f1(1M),
\f4ypmake\f1(1M),
and
\f4makedbm\f1(1M).
.P
Both
\f4ypserv\f1
and
\f4ypbind\f1
are daemon processes typically activated at system startup time.
\f4ypserv\f1 runs only on \s-1NIS\s0 server machines with a complete
\s-1NIS\s0 database.
\f4ypbind\f1 runs on all machines using \s-1NIS\s0 services, both
\s-1NIS\s0 servers and clients.
.P
The
\f4ypserv\f1
daemon's primary function is to look up information in its local
database of
\s-1NIS\s0
maps.
Communication to and from
\f4ypserv\f1
is by means of
\s-1RPC\s0
calls.
Lookup functions are described in
\f4ypclnt\f1(3N),
and are supplied as C-callable functions in the
\s-1NIS\s0
library.
There are four lookup functions, all of
which are performed on a specified
map within some
\s-1NIS\s0
domain:
\f2Match\f1,
\f2"Get_first"\f1,
\f2"Get_next"\f1,
and
\f2"Get_all"\f1.
The
\f2Match\f1
operation takes a key, and returns the associated value.
The
\f2"Get_first"\f1
operation returns the first key-value pair from the map, and
\f2"Get_next"\f1
can be used to enumerate the remainder.
\f2"Get_all"\f1
ships the entire map to the requester as the response to a single
\s-1RPC\s0
request.
.P
Two other functions supply
information about the map, rather than map entries:
\f2"Get_order_number"\f1,
and
\f2"Get_master_name"\f1.
In fact, both order number and master name
exist in the map as key-value pairs,
but the server will not return either through
the normal lookup functions.
If you examine the map with
\f4makedbm\f1(1M),
however, they will be visible.
.P
The function of
\f4ypbind\f1
is to remember information that lets client
processes on a single node communicate with some
\f4ypserv\f1
process.
\f4ypbind\f1
must run on every machine which has
\s-1NIS\s0
client processes;
\f4ypserv\f1
may or may not be running on the same node,
but must be running somewhere on the network.
.P
The information
\f4ypbind\f1
remembers is called a
\f2binding\f1\(emthe association of a domain name with a
\s-1NIS\s0
server.
.P
The process of binding is driven by client requests.
As a request for an unbound domain comes in, the
\f4ypbind\f1
process steps through the
\f4ypservers\f1
list (last entry first)
trying to find a
\f4ypserv\f1
process that serves maps within that domain.
There must be a
\f4ypserv\f1
process on at least one of the hosts in the
\f4ypservers\f1
file.
Once a domain is bound by a particular
\f4ypbind\f1,
that same binding is given to every client process
on the node.
The
\f4ypbind\f1
process on the local node or a\p
.br
.ne 2
remote node may be queried for the binding of a particular
domain by using the \f4ypwhich\f1(1) command.
.P
If
\f4ypbind\f1
is unable to speak to the
\f4ypserv\f1
process it is bound to, it marks the domain
as unbound, tells the client process that the
domain is unbound, and tries to bind the domain
once again.
Requests received for an unbound domain will
wait until the domain requested is bound.
In general, a bound domain is marked as unbound when the node
running
\f4ypserv\f1
crashes or gets overloaded.
In such a case, \f4ypbind\f1 will try to bind to another \s-1NIS\s0
server listed in \f4/var/yp/binding/\f2domainname\f4/ypservers\f1.
.P
\f4ypbind\f1
also accepts requests to set its binding for a particular domain. 
The request is usually generated by the
\s-1NIS\s0
subsystem itself.
\f4ypset\f1(1M)
is a command to access the
\f2"Set_domain"\f1
facility.
Note: the 
\f2Set Domain\f1
procedure only accepts requests from processes
with appropriate privileges, and the
\f4\-ypset\f1
or 
\f4\-ypsetme\f1
flags must have been set for
\f4ypbind\f1.
.P
The following options are available for the
\f4ypbind\f1
command only:
.TP 12
\f4\-ypset\f1
Allow any user to call
\f4ypset\f1(1M).
By default, no one can call
\f4ypset\f1(1M).
.TP
\f4\-ypsetme\f1
Only allow
\f4root\f1
on local machines to call
\f4ypset\f1(1M).
By default, no one can call
\f4ypset\f1(1M).
.SH FILES
.P
If the file
\f4/var/yp/ypserv.log\f1
exists when
\f4ypserv\f1
starts up, log information will be written to this file when error
conditions arise.
.PD 0
.TP 20
\f4/var/yp\f1
.TP
\f4/var/yp/binding/\f2ypdomain\f4/ypservers\f1
.PD
.SH "SEE ALSO"
\f4makedbm\f1(1M),
\f4ypcat\f1(1),
\f4ypinit\f1(1M),
\f4ypmake\f1(1M),
\f4ypmatch\f1(1),
\f4yppoll\f1(1M),
\f4yppush\f1(1M),
\f4ypset\f1(1M),
\f4ypwhich\f1(1),
\f4ypxfr\f1(1M),
\f4dbm\f1(3X),
\f4ypclnt\f1(3N),
\f4ypfiles\f1(4)
.SH NOTES
.P
Both 
\f4ypbind\f1
and
\f4ypserv\f1
support multiple domains.
The 
\f4ypserv\f1
process determines the domains it serves by looking for directories of the 
same name in the directory
\f4/var/yp\f1.
Additionally, the 
\f4ypbind\f1
process can maintain bindings to several domains
and their servers.
