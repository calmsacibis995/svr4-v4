'\"macro stdmacro
.if n .pH gen.intro @(#)intro	40.4 of 5/24/91
.\" Copyright 1991 UNIX System Laboratories, Inc.
.\" Copyright 1991 UNIX System Laboratories, Inc.
.\" Copyright 1989, 1990 AT&T
.nr X
.if \nX=0 .ds x} intro 3N "" "\&"
.if \nX=1 .ds x} intro 3N ""
.if \nX=2 .ds x} intro 3N "" "\&"
.if \nX=3 .ds x} intro "" "" "\&"
.TH \*(x}
.SH NAME
\f4intro\f1 \- introduction to networking functions and libraries
.SH DESCRIPTION
This section describes functions found
in various networking libraries.
Function declarations can be obtained
from the
\f4#include\f1
files indicated on each page.
Certain major collections are identified by a
letter after the section number:
.PP
The networking functions are contained in three libraries:
the Netowrk Services library, \f4libnsl\fP; the Sockets Interface library,
\f4libsocket\fP; and the Internet Domain Name Server library, \f4libresolv\fP.
.PP
The following functions constitute the \f4libnsl\fP library:
.RS
.TP 0.75i
\f4cr1\fP
cr1 authentication library
.TP
\f4cs\fP
Connection Server library interface
.TP
\f4des\fP
Data Encryption Standards library
.TP
\f4netdir\fP
Network Directory functions.
This contains look-up functions and the access point to network directory
libraries for various network transports.
.TP
\f4netselect\fP
Network Selection routines.
These functions manipulate the \f4/etc/netconfig\fP file and return entries.
.TP
\f4nsl\fP
Transport Level Interface (TLI).
These functions contain the implementation of X/OPEN's Transport Level
Interface.
.TP
\f4rexec\fP
REXEC library interface
.TP
\f4rpc\fP
User-level Remote Procedure Call library
.TP
\f4saf\fP
Service Access Facility library
.TP
\f4yp\fP
Network Information Service functions
.RE
.PP
The \f4libsocket\fP library has two components: \f4inet\fP, containing
the Inernet library routines, and \f4socket\fP, containing the Socket
Interface routines.
The \f4libresolv\fP library contains the resolver routines.
.PP
The standard networking libraries are implemented as a shared object
(\f4libnsl.so\fP and \f4libsocket.so\fP) or archive file
(\f4libresolv.a\fP).
To link with these libraries, specify the \f4cc\fP command line with
-\f4lnsl\fP, \f4-lsocket\fP, or \f4-lresolv\fP, respectively.
.SH DEFINITIONS
In the Network Services library, \f4netbuf\fP is a structure used in various
TLI functions to send and receive data and information.
\f4netbuf\fP is defined in \f4sys/tiuser.h\fP, and includes the
following members:
.sp
.RS
.nf
\f4struct netbuf {
	unsigned int maxlen;  /* The physical size of the buffer */
	unsigned int len; /* The number of bytes in the buffer */
	char *buf;  /* Points to user input and/or output buffer */
};\fP
.fi
.sp
.RE
.PP
If \f4netbuf\fP is used for output, the function
will set the user value of \f2len\f1 on return.
\f2maxlen\fP generally has significance only when \f2buf\f1 is used to
receive output from the TLI function.
In this case, it specifies the maximum value of \f2len\f1 that can be
set by the function.
If \f2maxlen\fP is not large enough to hold the returned information,
an \s-1TBUFOVFLW\s0 error will generally result.
However, certain functions may return part of the data and not generate an
error.
.SH FILES
\f2\s-1INCDIR\s+1\fP			usually \f4/usr/include\fP
.br
\f2\s-1LIBDIR\s+1\fP				usually \f4/usr/ccs/lib\fP
.br
\f2\s-1LIBDIR\s+1\f4/libsocket.so\f1
.br
\f2\s-1LIBDIR\s+1\f4/libnsl.so\f1
.br
\f2\s-1LIBDIR\s+1\f4/libresolv.a\f1
.br
.SH SEE ALSO
\f4intro\fP(3) in the \f2Programmer's Reference Manual\fP
.SH NOTES
None of the functions, external variables,
or macros should be redefined in the user's programs.
Any other name may be redefined without affecting the
behavior of other library functions, but such redefinition may conflict with
a declaration in an included header file.
.P
The header files in
\f2\s-1INCDIR\s+1\f1
provide function prototypes
(function declarations including the types of arguments)
for most of the functions listed in this manual.
Function prototypes allow the compiler to check for correct usage
of these functions in the user's program.
The \f4lint\fP program checker
may also be used and will report discrepancies even if the
header files are not included with \f4#include\f1 statements.
Use of \f4lint\fP is highly recommended.
.PP
In detailed definitions of components, it is sometimes necessary to
refer to symbolic names that are implementation-specific, but which
are not necessarily expected to be accessible to an application
program.
Many of these symbolic names describe boundary conditions and system
limits.
.PP
In this section, for readability, these implementation-specific
values are given symbolic names.
These names always appear enclosed in curly brackets to distinguish them from
symbolic names of other implementation-specific constants that are accessible
to application programs by header files.
These names are not necessarily accessible to an application program through
a header file, although they may be defined in the documentation for a
particular system.
.P
In general, a portable application program should not refer to these symbolic names
in its code.
For example, an application program would not be expected to test the length of
an argument list given to a
routine to determine if
it was greater than \f(CW{ARG_MAX}\f1.
.\"	@(#)intro.3	6.3 of 10/20/83
.Ee

