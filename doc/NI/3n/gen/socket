'\"macro stdmacro
.if n .pH g3n.socket @(#)socket	40.9.1.2 of 5/10/91
.\" Copyright 1991 UNIX System Laboratories, Inc.
.\" Copyright 1989, 1990 AT&T
.nr X
.if \nX=0 .ds x} socket 3N "" "\&"
.if \nX=1 .ds x} socket 3N ""
.if \nX=2 .ds x} socket 3N "" "\&"
.if \nX=3 .ds x} socket "" "" "\&"
.TH \*(x}
.SH NAME
\f4socket\fP \- create an endpoint for communication
.SH SYNOPSIS
.nf
.ft 4
#include <sys/types.h>
#include <sys/socket.h>
.P
.ft 4
int socket(int domain, int type, int protocol);
.fi
.SH DESCRIPTION
.P
\f4socket\fP
creates an endpoint for communication and returns a descriptor.
.P
The
\f2domain\fP
parameter specifies a communications domain within which
communication will take place;
this selects the protocol family
which should be used.
The protocol family generally is the same as the address family
for the addresses supplied in later operations on the socket.
These families are defined in the include file
\f4sys/socket.h\fP.
There must be an entry in the \f4netconfig\fP(4) file for at least each
protocol family and type required. If 
\f2protocol\fP
has been specified, but no exact match for the tuplet family, type, protocol
is found, then the first entry containing the specified family and type
with zero for protocol will be used.
The currently understood formats are:
.P
.TP 20
\f4PF_UNIX\fP
UNIX
system internal protocols
.TP
\f4PF_INET\fP
ARPA
Internet protocols
.P
The socket has the indicated
\f2type\fP,
which specifies the communication semantics.
Currently defined types are:
.P
.RS
.nf
\f4SOCK_STREAM
SOCK_DGRAM
SOCK_RAW
SOCK_SEQPACKET
SOCK_RDM\fP
.fi
.RE
.P
A
\f4SOCK_STREAM\fP
type provides sequenced, reliable,
two-way connection-based byte streams.
An out-of-band data transmission mechanism may be supported.
A
\f4SOCK_DGRAM\fP
socket supports
datagrams (connectionless,
unreliable messages of
a fixed (typically small) maximum length).
A
\f4SOCK_SEQPACKET\fP
socket may provide a sequenced,
reliable, two-way connection-based data
transmission path for datagrams
of fixed maximum length;
a consumer may be required to read
an entire packet with each read system call.
This facility is protocol specific,
and presently not implemented
for any protocol family.
\f4SOCK_RAW\fP
sockets provide access to internal network interfaces.
The types
\f4SOCK_RAW\fP,
which is available only to the super-user,
and
\f4SOCK_RDM\fP,
for which no implementation currently exists,
are not described here.
.P
\f2protocol\fP
specifies a particular protocol to be used with the socket.
Normally only a single protocol exists to support a particular
socket type within a given protocol family.
However,
multiple protocols may exist,
in which case a particular protocol must be specified
in this manner.
The protocol number to use is particular to the
\*(lqcommunication domain\*(rq in which communication
is to take place.
If a protocol is specified by the caller, then it will be packaged into
a socket level option request and sent to the underlying protocol layers.
.\".I setsockopt
.P
Sockets of type
\f4SOCK_STREAM\fP
are full-duplex byte streams,
similar to pipes.
A stream socket must be in a
\f2connected\fP
state before any data may be sent or received
on it.
A connection to another socket is created with a
\f4connect\fP
call.
Once connected,
data may be transferred using
\f4read\fP
and
\f4write\fP
calls or some variant of the
\f4send\fP
and
\f4recv\fP
calls.
When a session has been completed, a
\f4close\fP
may be performed.
Out-of-band data may also be transmitted as described on the
\f4send\fP(3N)
manual page
and received as described on
the
\f4recv\fP(3N) manual page.
.P
The communications protocols used to implement a
\f4SOCK_STREAM\fP
insure that data is not lost or duplicated. 
If a piece of data for which the peer protocol has
buffer space cannot be successfully transmitted
within a reasonable length of time,
then the connection is considered broken and calls
will indicate an error with
\-1 returns and with
\f4ETIMEDOUT\f1
as the specific code in the global variable
\f4errno\fP.
The protocols optionally keep sockets \*(lqwarm\*(rq by
forcing transmissions
roughly every minute in the absence of other activity.
An error is then indicated if no response can be
elicited on an otherwise
idle connection for a extended period (for
instance 5 minutes).
A
\f4SIGPIPE\fP
signal is raised if a process sends
on a broken stream;
this causes naive processes,
which do not handle the signal,
to exit.
.P
\f4SOCK_SEQPACKET\fP
sockets employ the same system calls as
\f4SOCK_STREAM\fP
sockets.
The only difference is that 
\f4read\fP
calls will return only the amount of data requested,
and any remaining in the arriving packet will be discarded.
.P
\f4SOCK_DGRAM\fP
and
\f4SOCK_RAW\fP
sockets allow datagrams to be sent to correspondents
named in
\f4sendto\fP
calls.
Datagrams are generally received with \f4recvfrom\fP,
which returns the next datagram with its return address.
.P
An
\f4fcntl\fP
call can be used to specify a process group to receive a
\f4SIGURG\fP
signal when the out-of-band data arrives.
It may also enable non-blocking I/O
and asynchronous notification of I/O events with
\f4SIGIO\fP
signals.
.P
The operation of sockets is controlled by socket level
\f2options\fP.
These options are defined in the file
\f4sys/socket.h\fP.
\f4setsockopt\fP
and
\f4getsockopt\fP
are used to set and get options, respectively.
.SH "RETURN VALUE"
.P
A \-1 is returned if an error occurs.
Otherwise the return
value is a descriptor referencing the socket.
.SH ERRORS
.P
The
\f4socket\fP
call fails if:
.TP 20
\f4EPROTONOSUPPORT\f1
The protocol type or the specified protocol is not supported
within this domain.
.TP
\f4EMFILE\f1
The per-process descriptor table is full.
.TP
\f4EACCESS\f1
Permission to create a socket of the specified type and/or protocol
is denied.
.TP
\f4ENOMEM\f1
Insufficient user memory is available.
.TP
\f4ENOSR\f1
There were insufficient STREAMS resources available to complete
the operation.
.SH SEE ALSO
\f4accept\fP(3N),
\f4bind\fP(3N),
\f4connect\fP(3N),
\f4getsockname\fP(3N),
\f4getsockopt\fP(3N),
\f4listen\fP(3N),
\f4recv\fP(3N),
.\"\f4select\fP(3N),
\f4send\fP(3N),
\f4shutdown\fP(3N),
\f4socketpair\fP(3N).
.br
\f4close\fP(2),
\f4fcntl\fP(2),
\f4ioctl\fP(2),
\f4read\fP(2),
\f4write\fP(2) in the \f2Programmer's Reference Manual\fP.
